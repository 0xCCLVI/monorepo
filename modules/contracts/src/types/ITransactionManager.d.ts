/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ITransactionManagerInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(uint256,address)": FunctionFragment;
    "cancel(tuple)": FunctionFragment;
    "fulfill(tuple,bytes)": FunctionFragment;
    "prepare(tuple)": FunctionFragment;
    "removeLiquidity(uint256,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "prepare",
    values: [
      {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prepare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityAdded(address,address,uint256)": EventFragment;
    "LiquidityRemoved(address,address,uint256,address)": EventFragment;
    "TransactionCancelled(tuple,address)": EventFragment;
    "TransactionFulfilled(tuple,bytes,address)": EventFragment;
    "TransactionPrepared(tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionPrepared"): EventFragment;
}

export class ITransactionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITransactionManagerInterface;

  functions: {
    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfill(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prepare(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    amount: BigNumberish,
    assetId: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    txData: {
      user: string;
      router: string;
      amount: BigNumberish;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainId: BigNumberish;
      receivingChainId: BigNumberish;
      receivingAddress: string;
      callData: BytesLike;
      transactionId: BytesLike;
      expiry: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfill(
    txData: {
      user: string;
      router: string;
      amount: BigNumberish;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainId: BigNumberish;
      receivingChainId: BigNumberish;
      receivingAddress: string;
      callData: BytesLike;
      transactionId: BytesLike;
      expiry: BigNumberish;
    },
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prepare(
    txData: {
      user: string;
      router: string;
      amount: BigNumberish;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainId: BigNumberish;
      receivingChainId: BigNumberish;
      receivingAddress: string;
      callData: BytesLike;
      transactionId: BytesLike;
      expiry: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    assetId: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    fulfill(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    prepare(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    LiquidityAdded(
      router?: null,
      assetId?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { router: string; assetId: string; amount: BigNumber }
    >;

    LiquidityRemoved(
      router?: null,
      assetId?: null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { router: string; assetId: string; amount: BigNumber; recipient: string }
    >;

    TransactionCancelled(
      txData?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          BigNumber,
          string,
          string,
          number,
          number,
          string,
          string,
          string,
          BigNumber
        ] & {
          user: string;
          router: string;
          amount: BigNumber;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainId: number;
          receivingChainId: number;
          receivingAddress: string;
          callData: string;
          transactionId: string;
          expiry: BigNumber;
        },
        string
      ],
      {
        txData: [
          string,
          string,
          BigNumber,
          string,
          string,
          number,
          number,
          string,
          string,
          string,
          BigNumber
        ] & {
          user: string;
          router: string;
          amount: BigNumber;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainId: number;
          receivingChainId: number;
          receivingAddress: string;
          callData: string;
          transactionId: string;
          expiry: BigNumber;
        };
        caller: string;
      }
    >;

    TransactionFulfilled(
      txData?: null,
      signature?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          BigNumber,
          string,
          string,
          number,
          number,
          string,
          string,
          string,
          BigNumber
        ] & {
          user: string;
          router: string;
          amount: BigNumber;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainId: number;
          receivingChainId: number;
          receivingAddress: string;
          callData: string;
          transactionId: string;
          expiry: BigNumber;
        },
        string,
        string
      ],
      {
        txData: [
          string,
          string,
          BigNumber,
          string,
          string,
          number,
          number,
          string,
          string,
          string,
          BigNumber
        ] & {
          user: string;
          router: string;
          amount: BigNumber;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainId: number;
          receivingChainId: number;
          receivingAddress: string;
          callData: string;
          transactionId: string;
          expiry: BigNumber;
        };
        signature: string;
        caller: string;
      }
    >;

    TransactionPrepared(
      txData?: null,
      caller?: null
    ): TypedEventFilter<
      [
        [
          string,
          string,
          BigNumber,
          string,
          string,
          number,
          number,
          string,
          string,
          string,
          BigNumber
        ] & {
          user: string;
          router: string;
          amount: BigNumber;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainId: number;
          receivingChainId: number;
          receivingAddress: string;
          callData: string;
          transactionId: string;
          expiry: BigNumber;
        },
        string
      ],
      {
        txData: [
          string,
          string,
          BigNumber,
          string,
          string,
          number,
          number,
          string,
          string,
          string,
          BigNumber
        ] & {
          user: string;
          router: string;
          amount: BigNumber;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainId: number;
          receivingChainId: number;
          receivingAddress: string;
          callData: string;
          transactionId: string;
          expiry: BigNumber;
        };
        caller: string;
      }
    >;
  };

  estimateGas: {
    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfill(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prepare(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfill(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prepare(
      txData: {
        user: string;
        router: string;
        amount: BigNumberish;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        receivingAddress: string;
        callData: BytesLike;
        transactionId: BytesLike;
        expiry: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
