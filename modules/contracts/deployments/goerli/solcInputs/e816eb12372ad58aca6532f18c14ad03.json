{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ITransactionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\n\nstruct UnsignedTransactionData {\n  uint256 amount;\n  uint256 expiry;\n  bytes32 digest;\n}\n\ninterface ITransactionManager {\n  // Structs\n  struct TransactionData {\n    address user;\n    address router;\n    uint256 amount;\n    address sendingAssetId;\n    address receivingAssetId;\n    uint24 sendingChainId;\n    uint24 receivingChainId;\n    address receivingAddress; // if calling fails, or isnt used, this is the address the funds are sent to\n    bytes callData;\n    // TODO: consider using global nonce instead of transactionId\n    bytes32 transactionId;\n    uint256 expiry;\n  }\n\n  struct SignedTransactionData {\n    address user;\n    address router;\n    address sendingAssetId;\n    address receivingAssetId;\n    uint24 sendingChainId;\n    uint24 receivingChainId;\n    address receivingAddress;\n    bytes callData;\n    // TODO: consider using global nonce instead of transactionId\n    bytes32 transactionId;\n  }\n\n  // Liquidity events\n  event LiquidityAdded(\n    address router,\n    address assetId,\n    uint256 amount\n  );\n\n  event LiquidityRemoved(\n    address router,\n    address assetId,\n    uint256 amount,\n    address recipient\n  );\n\n  // Transaction events\n  // TODO: structure\n  event TransactionPrepared(\n    TransactionData txData,\n    address caller\n  );\n\n  event TransactionFulfilled(\n    TransactionData txData,\n    bytes signature,\n    address caller\n  );\n\n  event TransactionCancelled(\n    TransactionData txData,\n    address caller\n  );\n\n  // Getters\n\n  // Router only methods\n  function addLiquidity(uint256 amount, address assetId) external payable;\n\n  function removeLiquidity(uint256 amount, address assetId, address payable recipient) external;\n\n  // Transaction methods\n  function prepare(TransactionData calldata txData) external payable returns (bytes32);\n\n  function fulfill(TransactionData calldata txData, bytes calldata signature) external;\n\n  function cancel(TransactionData calldata txData) external;\n}"
    },
    "contracts/TransactionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"./interfaces/ITransactionManager.sol\";\nimport \"./lib/LibAsset.sol\";\nimport \"./lib/LibERC20.sol\";\nimport \"./lib/LibIterableMapping.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// TODO: add calldata helper (gnosis has one)\n// TODO: how can users check pending txs?\ncontract TransactionManager is ReentrancyGuard, ITransactionManager {\n\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\n\n    // Mapping of router to balance specific to asset\n    mapping(address => mapping(address => uint256)) public routerBalances;\n\n    // TODO: perhaps move to user address --> iterable mapping of digests --> timeout\n    // Otherwise, there's no way to get the timeout offchain\n    // TODO: update on above -- actually this wont work. We *need* to include params that change\n    // like amount and timeout in cleartext. Otherwise we would get a sig mismatch on receiver side.\n    // TODO: is this still relevant? @arjun -layne\n\n    LibIterableMapping.IterableMapping activeTransactions;\n\n\n    uint24 public immutable chainId;\n    address public immutable multisend;\n\n    // TODO: determine min timeout\n    uint256 public constant MIN_TIMEOUT = 0;\n\n    constructor(address _multisend, uint24 _chainId) {\n        multisend = _multisend;\n        chainId = _chainId;\n    }\n\n    function addLiquidity(uint256 amount, address assetId)\n        external  \n        payable \n        override \n        nonReentrant\n    {\n        // Validate correct amounts are transferred\n        if (LibAsset.isEther(assetId)) {\n            require(msg.value == amount, \"addLiquidity: VALUE_MISMATCH\");\n        } else {\n            require(msg.value == 0, \"addLiquidity: ETH_WITH_ERC_TRANSFER\");\n            require(\n                LibERC20.transferFrom(\n                    assetId,\n                    msg.sender,\n                    address(this),\n                    amount\n                ),\n                \"addLiquidity: ERC20_TRANSFER_FAILED\"\n            );\n        }\n\n        // Update the router balances\n        // TODO: we are letting anyone be a router here -- is this ok?\n        // We are not permitting delegated liquidity here, what other checks\n        // would be safe? - layne\n        routerBalances[msg.sender][assetId] += amount;\n\n        // Emit event\n        emit LiquidityAdded(msg.sender, assetId, amount);\n    }\n\n    function removeLiquidity(uint256 amount, address assetId, address payable recipient)\n        external\n        override\n        nonReentrant\n    {\n        // Check that the amount can be deducted for the router\n        require(routerBalances[msg.sender][assetId] >= amount, \"removeLiquidity: INSUFFICIENT_FUNDS\");\n\n        // Update router balances\n        routerBalances[msg.sender][assetId] -= amount;\n\n        // Transfer from contract to router\n        require(LibAsset.transferAsset(assetId, recipient, amount), \"removeLiquidity: TRANSFER_FAILED\");\n\n        // Emit event\n        emit LiquidityRemoved(msg.sender, assetId, amount, recipient);\n    }\n\n    // TODO: checks effects interactions\n    // TODO: does this need to return a `digest`? for composablity..?\n    function prepare(\n        TransactionData calldata txData\n    ) external payable override nonReentrant returns (bytes32) {\n        // Make sure the expiry is greater than min\n        require((txData.expiry - block.timestamp) >= MIN_TIMEOUT, \"prepare: TIMEOUT_TOO_LOW\");\n\n        // Make sure the chains are different\n        require(txData.sendingChainId != txData.receivingChainId, \"prepare: SAME_CHAINIDS\");\n\n        // Make sure the chains are relevant\n        require(txData.sendingChainId == chainId || \n            txData.receivingChainId == chainId, \"prepare: INVALID_CHAINIDS\");\n        // TODO: Hard require that the transfer is not already active with same txData\n\n        // TODO: how to enforce transactionId validity?\n        // TODO: should we enforce a valid `callTo` (not address(0))?\n\n        // First determine if this is sender side or receiver side\n        if (txData.sendingChainId == chainId) {\n            // This is sender side prepare\n            // What validation is needed here?\n            // - receivingAssetId is valid?\n            // - sendingAssetId is acceptable for receivingAssetId?\n            // - enforce the receiving chainId != sendingChainId?\n\n            // Validate correct amounts and transfer\n            if (LibAsset.isEther(txData.sendingAssetId)) {\n                require(msg.value == txData.amount, \"prepare: VALUE_MISMATCH\");\n            } else {\n                require(msg.value == 0, \"prepare: ETH_WITH_ERC_TRANSFER\");\n                require(\n                    LibERC20.transferFrom(\n                        txData.sendingAssetId,\n                        msg.sender,\n                        address(this),\n                        txData.amount\n                    ),\n                    \"prepare: ERC20_TRANSFER_FAILED\"\n                );\n            }\n        } else {\n            // This is receiver side prepare\n\n            // Make sure this is the right chain\n            require(chainId == txData.receivingChainId, \"prepare: INVALID_RECEIVING_CHAIN\");\n\n            // Check that the caller is the router\n            // TODO: this also prevents delegated liquidity (direct on contract)\n            require(msg.sender == txData.router, \"prepare: ROUTER_MISMATCH\");\n\n            // Check that router has liquidity\n            require(routerBalances[txData.router][txData.receivingAssetId] >= txData.amount, \"prepare: INSUFFICIENT_LIQUIDITY\");\n\n            // NOTE: Timeout and amounts should have been decremented offchain\n\n            // NOTE: after some consideration, it feels like it's better to leave amount/fee\n            // validation *outside* the contracts as we likely want the logic to be flexible\n\n            // Pull funds from router balance (use msg.sender here to mitigate 3rd party attack)\n\n            // What would happen if some router tried to swoop in and steal another router's spot?\n            // - 3rd party router could EITHER use original txData or replace txData.router with itself\n            // - if original txData, 3rd party router would basically be paying for original router\n            // - if relaced router address, user sig on digest would not unlock sender side\n            routerBalances[txData.router][txData.receivingAssetId] -= txData.amount;\n        }\n\n        // Store the transaction variants\n        bytes32 digest = hashTransactionData(txData);\n\n        activeTransactions.addTransaction(\n          UnsignedTransactionData({ amount: txData.amount, expiry: txData.expiry, digest: digest })\n        );\n\n        // Emit event\n        emit TransactionPrepared(txData, msg.sender);\n\n        return digest;\n    }\n\n    // TODO: need to add fee incentive for router submission\n    // ^^ does this need to happen? cant this be included in the offchain\n    // fee calculation?\n    function fulfill(\n        TransactionData calldata txData,\n        bytes calldata signature\n    ) external override nonReentrant {\n        // Make sure params match against stored data\n        // Also checks that there is an active transfer here\n        // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\n        bytes32 digest = hashTransactionData(txData);\n\n        // Retrieving this will revert if the record does not exist by the\n        // digest (which asserts all but tx.amount, tx.expiry)\n        UnsignedTransactionData memory record = activeTransactions.getTransactionByDigest(digest);\n\n        // Amount and expiry should be the same as the record\n        require(record.amount == txData.amount, \"cancel: INVALID_AMOUNT\");\n\n        require(record.expiry == txData.expiry, \"cancel: INVALID_EXPIRY\");\n\n        // Validate signature\n        require(ECDSA.recover(digest, signature) == txData.user, \"fulfill: INVALID_SIGNATURE\");\n    \n        if (txData.sendingChainId == chainId) {\n            // Complete tx to router\n            routerBalances[txData.router][txData.sendingAssetId] += txData.amount;\n        } else {\n            // Complete tx to user\n            if (keccak256(txData.callData) == keccak256(new bytes(0))) {\n                require(LibAsset.transferAsset(txData.sendingAssetId, payable(txData.receivingAddress), txData.amount), \"fulfill: TRANSFER_FAILED\");\n            } else {\n                // TODO: this gnosis contracts support delegate calls as well,\n                // should we restrict this behavior?\n                try MultiSend(multisend).multiSend(txData.callData) {\n                } catch {\n                  // One of the transactions reverted, fallback of\n                  // send funds to `receivingAddress`\n                  LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), txData.amount);\n                }\n            }\n        }\n\n        // Remove the active transaction\n        activeTransactions.removeTransaction(digest);\n\n        // Emit event\n        emit TransactionFulfilled(txData, signature, msg.sender);\n    }\n\n    // Tx can be \"collaboratively\" cancelled by the receiver at any time and by the sender after expiry\n    function cancel(\n        TransactionData calldata txData\n    ) external override nonReentrant {     \n        // Make sure params match against stored data\n        // Also checks that there is an active transfer here\n        // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\n        bytes32 digest = hashTransactionData(txData);\n        \n        // Retrieving this will revert if the record does not exist by the\n        // digest (which asserts all but tx.amount, tx.expiry)\n        UnsignedTransactionData memory record = activeTransactions.getTransactionByDigest(digest);\n\n        // Amount and expiry should be the same as the record\n        require(record.amount == txData.amount, \"cancel: INVALID_AMOUNT\");\n\n        require(record.expiry == txData.expiry, \"cancel: INVALID_EXPIRY\");\n\n        if (txData.sendingChainId == chainId) {\n            // Sender side --> funds go back to user\n            if (txData.expiry >= block.timestamp) {\n                // Timeout has not expired and tx may only be cancelled by srouter\n                require(msg.sender == txData.router, \"cancel: ROUTER_MUST_CANCEL\");\n            }\n            // Return to user\n            require(LibAsset.transferAsset(txData.sendingAssetId, payable(txData.user), txData.amount), \"cancel: TRANSFER_FAILED\");\n\n        } else {\n            // Receiver side --> funds go back to router\n            if (txData.expiry >= block.timestamp) {\n                // Timeout has not expired and tx may only be cancelled by user\n                // TODO: replace this with signature-based cancellation?\n                require(msg.sender == txData.user, \"cancel: USER_MUST_CANCEL\");\n            }\n            // Return to router\n            routerBalances[txData.router][txData.receivingAssetId] += txData.amount;\n        }\n\n        // Remove the active transaction\n        activeTransactions.removeTransaction(digest);\n\n        // Emit event\n        emit TransactionCancelled(txData, msg.sender);\n    }\n\n    function hashTransactionData(TransactionData calldata txData)\n        internal\n        pure\n        returns (bytes32)\n    {\n        // TODO: is this the right payload to sign?\n        SignedTransactionData memory data = SignedTransactionData({\n          user: txData.user,\n          router: txData.router,\n          sendingAssetId: txData.sendingAssetId,\n          receivingAssetId: txData.receivingAssetId,\n          sendingChainId: txData.sendingChainId,\n          receivingChainId: txData.receivingChainId,\n          receivingAddress: txData.receivingAddress,\n          callData: txData.callData,\n          transactionId: txData.transactionId\n        });\n        return keccak256(abi.encode(data));\n    }\n}"
    },
    "contracts/lib/LibAsset.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"./LibERC20.sol\";\nimport \"./LibUtils.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n/// @title LibAsset\n/// @author Connext <support@connext.network>\n/// @notice This library contains helpers for dealing with onchain transfers\n///         of in-channel assets. It is designed to safely handle all asset\n///         transfers out of channel in the event of an onchain dispute. Also\n///         safely handles ERC20 transfers that may be non-compliant\nlibrary LibAsset {\n    address constant ETHER_ASSETID = address(0);\n\n    function isEther(address assetId) internal pure returns (bool) {\n        return assetId == ETHER_ASSETID;\n    }\n\n    function getOwnBalance(address assetId) internal view returns (uint256) {\n        return\n            isEther(assetId)\n                ? address(this).balance\n                : IERC20(assetId).balanceOf(address(this));\n    }\n\n    function transferEther(address payable recipient, uint256 amount)\n        internal\n        returns (bool)\n    {\n        (bool success, bytes memory returnData) =\n            recipient.call{value: amount}(\"\");\n        LibUtils.revertIfCallFailed(success, returnData);\n        return true;\n    }\n\n    function transferERC20(\n        address assetId,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        return LibERC20.transfer(assetId, recipient, amount);\n    }\n\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\n    // both standard-compliant ones as well as tokens that exhibit the\n    // missing-return-value bug.\n    function transferAsset(\n        address assetId,\n        address payable recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        return\n            isEther(assetId)\n                ? transferEther(recipient, amount)\n                : transferERC20(assetId, recipient, amount);\n    }\n}\n"
    },
    "contracts/lib/LibERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"./LibUtils.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title LibERC20\n/// @author Connext <support@connext.network>\n/// @notice This library provides several functions to safely handle\n///         noncompliant tokens (i.e. does not return a boolean from\n///         the transfer function)\n\nlibrary LibERC20 {\n    function wrapCall(address assetId, bytes memory callData)\n        internal\n        returns (bool)\n    {\n        require(Address.isContract(assetId), \"LibERC20: NO_CODE\");\n        (bool success, bytes memory returnData) = assetId.call(callData);\n        LibUtils.revertIfCallFailed(success, returnData);\n        return returnData.length == 0 || abi.decode(returnData, (bool));\n    }\n\n    function approve(\n        address assetId,\n        address spender,\n        uint256 amount\n    ) internal returns (bool) {\n        return\n            wrapCall(\n                assetId,\n                abi.encodeWithSignature(\n                    \"approve(address,uint256)\",\n                    spender,\n                    amount\n                )\n            );\n    }\n\n    function transferFrom(\n        address assetId,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        return\n            wrapCall(\n                assetId,\n                abi.encodeWithSignature(\n                    \"transferFrom(address,address,uint256)\",\n                    sender,\n                    recipient,\n                    amount\n                )\n            );\n    }\n\n    function transfer(\n        address assetId,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        return\n            wrapCall(\n                assetId,\n                abi.encodeWithSignature(\n                    \"transfer(address,uint256)\",\n                    recipient,\n                    amount\n                )\n            );\n    }\n}\n"
    },
    "contracts/lib/LibIterableMapping.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"../interfaces/ITransactionManager.sol\";\n\n/// @title LibIterableMapping\n/// @author Connext <support@connext.network>\n/// @notice This library provides an efficient way to store and retrieve\n///         UnsignedTransactionData. This contract is used to manage the \n///         transactions stored by `TransactionManager.sol`\nlibrary LibIterableMapping {\n    struct UnsignedTransactionDataWithIndex {\n        UnsignedTransactionData transaction;\n        uint256 index;\n    }\n\n    struct IterableMapping {\n        mapping(bytes32 => UnsignedTransactionDataWithIndex) transactions;\n        bytes32[] digests;\n    }\n\n    function digestEqual(bytes32 s, bytes32 t)\n        internal\n        pure\n        returns (bool)\n    {\n        return s == t;\n    }\n\n    function isEmptyString(bytes32 s) internal pure returns (bool) {\n        return digestEqual(s, bytes32(0));\n    }\n\n    function digestExists(IterableMapping storage self, bytes32 digest)\n        internal\n        view\n        returns (bool)\n    {\n        return\n            !isEmptyString(digest) &&\n            self.digests.length != 0 &&\n            digestEqual(self.digests[self.transactions[digest].index], digest);\n    }\n\n    function length(IterableMapping storage self)\n        internal\n        view\n        returns (uint256)\n    {\n        return self.digests.length;\n    }\n\n    function getTransactionByDigest(\n        IterableMapping storage self,\n        bytes32 digest\n    ) internal view returns (UnsignedTransactionData memory) {\n        require(digestExists(self, digest), \"LibIterableMapping: DIGEST_NOT_FOUND\");\n        return self.transactions[digest].transaction;\n    }\n\n    function getTransactionByIndex(\n        IterableMapping storage self,\n        uint256 index\n    ) internal view returns (UnsignedTransactionData memory) {\n        require(index < self.digests.length, \"LibIterableMapping: INVALID_INDEX\");\n        return self.transactions[self.digests[index]].transaction;\n    }\n\n    function getTransactions(IterableMapping storage self)\n        internal\n        view\n        returns (UnsignedTransactionData[] memory)\n    {\n        uint256 l = self.digests.length;\n        UnsignedTransactionData[] memory transactions = new UnsignedTransactionData[](l);\n        for (uint256 i = 0; i < l; i++) {\n            transactions[i] = self.transactions[self.digests[i]].transaction;\n        }\n        return transactions;\n    }\n\n    function addTransaction(\n        IterableMapping storage self,\n        UnsignedTransactionData memory transaction\n    ) internal {\n        bytes32 digest = transaction.digest;\n        require(!isEmptyString(digest), \"LibIterableMapping: EMPTY_DIGEST\");\n        require(!digestExists(self, digest), \"LibIterableMapping: DIGEST_ALREADY_ADDED\");\n        self.transactions[digest] = UnsignedTransactionDataWithIndex({\n            transaction: transaction,\n            index: self.digests.length\n        });\n        self.digests.push(digest);\n    }\n\n    function removeTransaction(\n        IterableMapping storage self,\n        bytes32 digest\n    ) internal {\n        require(!isEmptyString(digest), \"LibIterableMapping: EMPTY_DIGEST\");\n        require(digestExists(self, digest), \"LibIterableMapping: DIGEST_NOT_FOUND\");\n        uint256 index = self.transactions[digest].index;\n        bytes32 lastDigest = self.digests[self.digests.length - 1];\n        self.transactions[lastDigest].index = index;\n        self.digests[index] = lastDigest;\n        delete self.transactions[digest];\n        self.digests.pop();\n    }\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Multi Send - Allows to batch multiple transactions into one.\n/// @author Nick Dodson - <nick.dodson@consensys.net>\n/// @author Gonçalo Sá - <goncalo.sa@consensys.net>\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract MultiSend {\n    address private immutable multisendSingleton;\n\n    constructor() {\n        multisendSingleton = address(this);\n    }\n\n    /// @dev Sends multiple transactions and reverts all if one fails.\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\n    ///                     to as a address (=> 20 bytes),\n    ///                     value as a uint256 (=> 32 bytes),\n    ///                     data length as a uint256 (=> 32 bytes),\n    ///                     data as bytes.\n    ///                     see abi.encodePacked for more information on packed encoding\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\n    function multiSend(bytes memory transactions) public payable {\n        require(address(this) != multisendSingleton, \"MultiSend should only be called via delegatecall\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let length := mload(transactions)\n            let i := 0x20\n            for {\n                // Pre block is not used in \"while mode\"\n            } lt(i, length) {\n                // Post block is not used in \"while mode\"\n            } {\n                // First byte of the data is the operation.\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\n                // This will also zero out unused data.\n                let operation := shr(0xf8, mload(add(transactions, i)))\n                // We offset the load address by 1 byte (operation byte)\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\n                let value := mload(add(transactions, add(i, 0x15)))\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\n                let dataLength := mload(add(transactions, add(i, 0x35)))\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\n                let data := add(transactions, add(i, 0x55))\n                let success := 0\n                switch operation\n                    case 0 {\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\n                    }\n                    case 1 {\n                        success := delegatecall(gas(), to, data, dataLength, 0, 0)\n                    }\n                if eq(success, 0) {\n                    revert(0, 0)\n                }\n                // Next entry starts at 85 byte + data length\n                i := add(i, add(0x55, dataLength))\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/lib/LibUtils.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\n/// @title LibUtils\n/// @author Connext <support@connext.network>\n/// @notice Contains a helper to revert if a call was not successfully\n///         made\nlibrary LibUtils {\n    // If success is false, reverts and passes on the revert string.\n    function revertIfCallFailed(bool success, bytes memory returnData)\n        internal\n        pure\n    {\n        if (!success) {\n            assembly {\n                revert(add(returnData, 0x20), mload(returnData))\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/testing/TestLibIterableMapping.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"../lib/LibIterableMapping.sol\";\n\n/// @title TestLibIterableMapping\n/// @author Connext\n/// @notice Used to easily test the internal methods of\n///         LibIterableMapping.sol by aliasing them to public\n///         methods.\n\ncontract TestLibIterableMapping {\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\n\n    LibIterableMapping.IterableMapping data;\n\n    constructor() {}\n\n    function digestEqual(bytes32 s, bytes32 t)\n        public\n        pure\n        returns (bool)\n    {\n        return LibIterableMapping.digestEqual(s, t);\n    }\n\n    function isEmptyString(bytes32 s) public pure returns (bool) {\n        return LibIterableMapping.isEmptyString(s);\n    }\n\n    function digestExists(bytes32 digest) public view returns (bool) {\n        return LibIterableMapping.digestExists(data, digest);\n    }\n\n    function length() public view returns (uint256) {\n        return LibIterableMapping.length(data);\n    }\n\n    function getTransactionByDigest(bytes32 digest)\n        public\n        view\n        returns (UnsignedTransactionData memory)\n    {\n        return LibIterableMapping.getTransactionByDigest(data, digest);\n    }\n\n    function getTransactionByIndex(uint256 index)\n        public\n        view\n        returns (UnsignedTransactionData memory)\n    {\n        return LibIterableMapping.getTransactionByIndex(data, index);\n    }\n\n    function getTransactions()\n        public\n        view\n        returns (UnsignedTransactionData[] memory)\n    {\n        return LibIterableMapping.getTransactions(data);\n    }\n\n    function addTransaction(UnsignedTransactionData memory transfer) public {\n        return LibIterableMapping.addTransaction(data, transfer);\n    }\n\n    function removeTransaction(bytes32 digest) public {\n        return LibIterableMapping.removeTransaction(data, digest);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}