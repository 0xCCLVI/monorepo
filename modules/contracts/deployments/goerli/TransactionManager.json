{
  "address": "0xa0c9a9B022aaDF065767Ec5Eb9923c62ED2EbeB4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multisend",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_chainId",
          "type": "uint24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionPrepared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multisend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        }
      ],
      "name": "prepare",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb912a25616c6aa34b8a9175f4b27058c466b6970082a553c8b52f66dc08f5a7d",
  "receipt": {
    "to": null,
    "from": "0x627306090abaB3A6e1400e9345bC60c78a8BEf57",
    "contractAddress": "0xa0c9a9B022aaDF065767Ec5Eb9923c62ED2EbeB4",
    "transactionIndex": 56,
    "gasUsed": "3423475",
    "logsBloom": "0x
    "blockHash": "0xb016bee03ad20796db90770114bfcbb95450f843a7244550c14fb5cf408e9684",
    "transactionHash": "0xb912a25616c6aa34b8a9175f4b27058c466b6970082a553c8b52f66dc08f5a7d",
    "logs": [],
    "blockNumber": 5012702,
    "cumulativeGasUsed": "8300877",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "5"
  ],
  "solcInputHash": "e816eb12372ad58aca6532f18c14ad03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisend\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_chainId\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionPrepared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"}],\"name\":\"prepare\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransactionManager.sol\":\"TransactionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Multi Send - Allows to batch multiple transactions into one.\\n/// @author Nick Dodson - <nick.dodson@consensys.net>\\n/// @author Gon\\u00e7alo S\\u00e1 - <goncalo.sa@consensys.net>\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\ncontract MultiSend {\\n    address private immutable multisendSingleton;\\n\\n    constructor() {\\n        multisendSingleton = address(this);\\n    }\\n\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n    function multiSend(bytes memory transactions) public payable {\\n        require(address(this) != multisendSingleton, \\\"MultiSend should only be called via delegatecall\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                    case 0 {\\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\\n                    }\\n                    case 1 {\\n                        success := delegatecall(gas(), to, data, dataLength, 0, 0)\\n                    }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6bf0d0a7cd22246fe93dc7da134359d9d61cd2671e20384ec3c9e7677fadc55\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"contracts/TransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./interfaces/ITransactionManager.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./lib/LibERC20.sol\\\";\\nimport \\\"./lib/LibIterableMapping.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSend.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// TODO: add calldata helper (gnosis has one)\\n// TODO: how can users check pending txs?\\ncontract TransactionManager is ReentrancyGuard, ITransactionManager {\\n\\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\\n\\n    // Mapping of router to balance specific to asset\\n    mapping(address => mapping(address => uint256)) public routerBalances;\\n\\n    // TODO: perhaps move to user address --> iterable mapping of digests --> timeout\\n    // Otherwise, there's no way to get the timeout offchain\\n    // TODO: update on above -- actually this wont work. We *need* to include params that change\\n    // like amount and timeout in cleartext. Otherwise we would get a sig mismatch on receiver side.\\n    // TODO: is this still relevant? @arjun -layne\\n\\n    LibIterableMapping.IterableMapping activeTransactions;\\n\\n\\n    uint24 public immutable chainId;\\n    address public immutable multisend;\\n\\n    // TODO: determine min timeout\\n    uint256 public constant MIN_TIMEOUT = 0;\\n\\n    constructor(address _multisend, uint24 _chainId) {\\n        multisend = _multisend;\\n        chainId = _chainId;\\n    }\\n\\n    function addLiquidity(uint256 amount, address assetId)\\n        external  \\n        payable \\n        override \\n        nonReentrant\\n    {\\n        // Validate correct amounts are transferred\\n        if (LibAsset.isEther(assetId)) {\\n            require(msg.value == amount, \\\"addLiquidity: VALUE_MISMATCH\\\");\\n        } else {\\n            require(msg.value == 0, \\\"addLiquidity: ETH_WITH_ERC_TRANSFER\\\");\\n            require(\\n                LibERC20.transferFrom(\\n                    assetId,\\n                    msg.sender,\\n                    address(this),\\n                    amount\\n                ),\\n                \\\"addLiquidity: ERC20_TRANSFER_FAILED\\\"\\n            );\\n        }\\n\\n        // Update the router balances\\n        // TODO: we are letting anyone be a router here -- is this ok?\\n        // We are not permitting delegated liquidity here, what other checks\\n        // would be safe? - layne\\n        routerBalances[msg.sender][assetId] += amount;\\n\\n        // Emit event\\n        emit LiquidityAdded(msg.sender, assetId, amount);\\n    }\\n\\n    function removeLiquidity(uint256 amount, address assetId, address payable recipient)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        // Check that the amount can be deducted for the router\\n        require(routerBalances[msg.sender][assetId] >= amount, \\\"removeLiquidity: INSUFFICIENT_FUNDS\\\");\\n\\n        // Update router balances\\n        routerBalances[msg.sender][assetId] -= amount;\\n\\n        // Transfer from contract to router\\n        require(LibAsset.transferAsset(assetId, recipient, amount), \\\"removeLiquidity: TRANSFER_FAILED\\\");\\n\\n        // Emit event\\n        emit LiquidityRemoved(msg.sender, assetId, amount, recipient);\\n    }\\n\\n    // TODO: checks effects interactions\\n    // TODO: does this need to return a `digest`? for composablity..?\\n    function prepare(\\n        TransactionData calldata txData\\n    ) external payable override nonReentrant returns (bytes32) {\\n        // Make sure the expiry is greater than min\\n        require((txData.expiry - block.timestamp) >= MIN_TIMEOUT, \\\"prepare: TIMEOUT_TOO_LOW\\\");\\n\\n        // Make sure the chains are different\\n        require(txData.sendingChainId != txData.receivingChainId, \\\"prepare: SAME_CHAINIDS\\\");\\n\\n        // Make sure the chains are relevant\\n        require(txData.sendingChainId == chainId || \\n            txData.receivingChainId == chainId, \\\"prepare: INVALID_CHAINIDS\\\");\\n        // TODO: Hard require that the transfer is not already active with same txData\\n\\n        // TODO: how to enforce transactionId validity?\\n        // TODO: should we enforce a valid `callTo` (not address(0))?\\n\\n        // First determine if this is sender side or receiver side\\n        if (txData.sendingChainId == chainId) {\\n            // This is sender side prepare\\n            // What validation is needed here?\\n            // - receivingAssetId is valid?\\n            // - sendingAssetId is acceptable for receivingAssetId?\\n            // - enforce the receiving chainId != sendingChainId?\\n\\n            // Validate correct amounts and transfer\\n            if (LibAsset.isEther(txData.sendingAssetId)) {\\n                require(msg.value == txData.amount, \\\"prepare: VALUE_MISMATCH\\\");\\n            } else {\\n                require(msg.value == 0, \\\"prepare: ETH_WITH_ERC_TRANSFER\\\");\\n                require(\\n                    LibERC20.transferFrom(\\n                        txData.sendingAssetId,\\n                        msg.sender,\\n                        address(this),\\n                        txData.amount\\n                    ),\\n                    \\\"prepare: ERC20_TRANSFER_FAILED\\\"\\n                );\\n            }\\n        } else {\\n            // This is receiver side prepare\\n\\n            // Make sure this is the right chain\\n            require(chainId == txData.receivingChainId, \\\"prepare: INVALID_RECEIVING_CHAIN\\\");\\n\\n            // Check that the caller is the router\\n            // TODO: this also prevents delegated liquidity (direct on contract)\\n            require(msg.sender == txData.router, \\\"prepare: ROUTER_MISMATCH\\\");\\n\\n            // Check that router has liquidity\\n            require(routerBalances[txData.router][txData.receivingAssetId] >= txData.amount, \\\"prepare: INSUFFICIENT_LIQUIDITY\\\");\\n\\n            // NOTE: Timeout and amounts should have been decremented offchain\\n\\n            // NOTE: after some consideration, it feels like it's better to leave amount/fee\\n            // validation *outside* the contracts as we likely want the logic to be flexible\\n\\n            // Pull funds from router balance (use msg.sender here to mitigate 3rd party attack)\\n\\n            // What would happen if some router tried to swoop in and steal another router's spot?\\n            // - 3rd party router could EITHER use original txData or replace txData.router with itself\\n            // - if original txData, 3rd party router would basically be paying for original router\\n            // - if relaced router address, user sig on digest would not unlock sender side\\n            routerBalances[txData.router][txData.receivingAssetId] -= txData.amount;\\n        }\\n\\n        // Store the transaction variants\\n        bytes32 digest = hashTransactionData(txData);\\n\\n        activeTransactions.addTransaction(\\n          UnsignedTransactionData({ amount: txData.amount, expiry: txData.expiry, digest: digest })\\n        );\\n\\n        // Emit event\\n        emit TransactionPrepared(txData, msg.sender);\\n\\n        return digest;\\n    }\\n\\n    // TODO: need to add fee incentive for router submission\\n    // ^^ does this need to happen? cant this be included in the offchain\\n    // fee calculation?\\n    function fulfill(\\n        TransactionData calldata txData,\\n        bytes calldata signature\\n    ) external override nonReentrant {\\n        // Make sure params match against stored data\\n        // Also checks that there is an active transfer here\\n        // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\\n        bytes32 digest = hashTransactionData(txData);\\n\\n        // Retrieving this will revert if the record does not exist by the\\n        // digest (which asserts all but tx.amount, tx.expiry)\\n        UnsignedTransactionData memory record = activeTransactions.getTransactionByDigest(digest);\\n\\n        // Amount and expiry should be the same as the record\\n        require(record.amount == txData.amount, \\\"cancel: INVALID_AMOUNT\\\");\\n\\n        require(record.expiry == txData.expiry, \\\"cancel: INVALID_EXPIRY\\\");\\n\\n        // Validate signature\\n        require(ECDSA.recover(digest, signature) == txData.user, \\\"fulfill: INVALID_SIGNATURE\\\");\\n    \\n        if (txData.sendingChainId == chainId) {\\n            // Complete tx to router\\n            routerBalances[txData.router][txData.sendingAssetId] += txData.amount;\\n        } else {\\n            // Complete tx to user\\n            if (keccak256(txData.callData) == keccak256(new bytes(0))) {\\n                require(LibAsset.transferAsset(txData.sendingAssetId, payable(txData.receivingAddress), txData.amount), \\\"fulfill: TRANSFER_FAILED\\\");\\n            } else {\\n                // TODO: this gnosis contracts support delegate calls as well,\\n                // should we restrict this behavior?\\n                try MultiSend(multisend).multiSend(txData.callData) {\\n                } catch {\\n                  // One of the transactions reverted, fallback of\\n                  // send funds to `receivingAddress`\\n                  LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), txData.amount);\\n                }\\n            }\\n        }\\n\\n        // Remove the active transaction\\n        activeTransactions.removeTransaction(digest);\\n\\n        // Emit event\\n        emit TransactionFulfilled(txData, signature, msg.sender);\\n    }\\n\\n    // Tx can be \\\"collaboratively\\\" cancelled by the receiver at any time and by the sender after expiry\\n    function cancel(\\n        TransactionData calldata txData\\n    ) external override nonReentrant {     \\n        // Make sure params match against stored data\\n        // Also checks that there is an active transfer here\\n        // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\\n        bytes32 digest = hashTransactionData(txData);\\n        \\n        // Retrieving this will revert if the record does not exist by the\\n        // digest (which asserts all but tx.amount, tx.expiry)\\n        UnsignedTransactionData memory record = activeTransactions.getTransactionByDigest(digest);\\n\\n        // Amount and expiry should be the same as the record\\n        require(record.amount == txData.amount, \\\"cancel: INVALID_AMOUNT\\\");\\n\\n        require(record.expiry == txData.expiry, \\\"cancel: INVALID_EXPIRY\\\");\\n\\n        if (txData.sendingChainId == chainId) {\\n            // Sender side --> funds go back to user\\n            if (txData.expiry >= block.timestamp) {\\n                // Timeout has not expired and tx may only be cancelled by srouter\\n                require(msg.sender == txData.router, \\\"cancel: ROUTER_MUST_CANCEL\\\");\\n            }\\n            // Return to user\\n            require(LibAsset.transferAsset(txData.sendingAssetId, payable(txData.user), txData.amount), \\\"cancel: TRANSFER_FAILED\\\");\\n\\n        } else {\\n            // Receiver side --> funds go back to router\\n            if (txData.expiry >= block.timestamp) {\\n                // Timeout has not expired and tx may only be cancelled by user\\n                // TODO: replace this with signature-based cancellation?\\n                require(msg.sender == txData.user, \\\"cancel: USER_MUST_CANCEL\\\");\\n            }\\n            // Return to router\\n            routerBalances[txData.router][txData.receivingAssetId] += txData.amount;\\n        }\\n\\n        // Remove the active transaction\\n        activeTransactions.removeTransaction(digest);\\n\\n        // Emit event\\n        emit TransactionCancelled(txData, msg.sender);\\n    }\\n\\n    function hashTransactionData(TransactionData calldata txData)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // TODO: is this the right payload to sign?\\n        SignedTransactionData memory data = SignedTransactionData({\\n          user: txData.user,\\n          router: txData.router,\\n          sendingAssetId: txData.sendingAssetId,\\n          receivingAssetId: txData.receivingAssetId,\\n          sendingChainId: txData.sendingChainId,\\n          receivingChainId: txData.receivingChainId,\\n          receivingAddress: txData.receivingAddress,\\n          callData: txData.callData,\\n          transactionId: txData.transactionId\\n        });\\n        return keccak256(abi.encode(data));\\n    }\\n}\",\"keccak256\":\"0xa22bcff139940001674888c9c3c133b77585ca363ae6a95d8a2279fa37a32e63\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\n\\nstruct UnsignedTransactionData {\\n  uint256 amount;\\n  uint256 expiry;\\n  bytes32 digest;\\n}\\n\\ninterface ITransactionManager {\\n  // Structs\\n  struct TransactionData {\\n    address user;\\n    address router;\\n    uint256 amount;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    uint24 sendingChainId;\\n    uint24 receivingChainId;\\n    address receivingAddress; // if calling fails, or isnt used, this is the address the funds are sent to\\n    bytes callData;\\n    // TODO: consider using global nonce instead of transactionId\\n    bytes32 transactionId;\\n    uint256 expiry;\\n  }\\n\\n  struct SignedTransactionData {\\n    address user;\\n    address router;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    uint24 sendingChainId;\\n    uint24 receivingChainId;\\n    address receivingAddress;\\n    bytes callData;\\n    // TODO: consider using global nonce instead of transactionId\\n    bytes32 transactionId;\\n  }\\n\\n  // Liquidity events\\n  event LiquidityAdded(\\n    address router,\\n    address assetId,\\n    uint256 amount\\n  );\\n\\n  event LiquidityRemoved(\\n    address router,\\n    address assetId,\\n    uint256 amount,\\n    address recipient\\n  );\\n\\n  // Transaction events\\n  // TODO: structure\\n  event TransactionPrepared(\\n    TransactionData txData,\\n    address caller\\n  );\\n\\n  event TransactionFulfilled(\\n    TransactionData txData,\\n    bytes signature,\\n    address caller\\n  );\\n\\n  event TransactionCancelled(\\n    TransactionData txData,\\n    address caller\\n  );\\n\\n  // Getters\\n\\n  // Router only methods\\n  function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n  function removeLiquidity(uint256 amount, address assetId, address payable recipient) external;\\n\\n  // Transaction methods\\n  function prepare(TransactionData calldata txData) external payable returns (bytes32);\\n\\n  function fulfill(TransactionData calldata txData, bytes calldata signature) external;\\n\\n  function cancel(TransactionData calldata txData) external;\\n}\",\"keccak256\":\"0x309c81dda4b39b6ee40df86a31f58eaf9c8656bd53c70115fe5a92b570777889\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./LibERC20.sol\\\";\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/// @title LibAsset\\n/// @author Connext <support@connext.network>\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of in-channel assets. It is designed to safely handle all asset\\n///         transfers out of channel in the event of an onchain dispute. Also\\n///         safely handles ERC20 transfers that may be non-compliant\\nlibrary LibAsset {\\n    address constant ETHER_ASSETID = address(0);\\n\\n    function isEther(address assetId) internal pure returns (bool) {\\n        return assetId == ETHER_ASSETID;\\n    }\\n\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return\\n            isEther(assetId)\\n                ? address(this).balance\\n                : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    function transferEther(address payable recipient, uint256 amount)\\n        internal\\n        returns (bool)\\n    {\\n        (bool success, bytes memory returnData) =\\n            recipient.call{value: amount}(\\\"\\\");\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return true;\\n    }\\n\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return LibERC20.transfer(assetId, recipient, amount);\\n    }\\n\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\n    // both standard-compliant ones as well as tokens that exhibit the\\n    // missing-return-value bug.\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            isEther(assetId)\\n                ? transferEther(recipient, amount)\\n                : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4a90c857d2ed06aa0f5af822b63736d4675ddaa03feff7bfef8dad4108e5ebf7\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title LibERC20\\n/// @author Connext <support@connext.network>\\n/// @notice This library provides several functions to safely handle\\n///         noncompliant tokens (i.e. does not return a boolean from\\n///         the transfer function)\\n\\nlibrary LibERC20 {\\n    function wrapCall(address assetId, bytes memory callData)\\n        internal\\n        returns (bool)\\n    {\\n        require(Address.isContract(assetId), \\\"LibERC20: NO_CODE\\\");\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\n    }\\n\\n    function approve(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"approve(address,uint256)\\\",\\n                    spender,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transferFrom(\\n        address assetId,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\",\\n                    sender,\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transfer(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb18bb79acb4608a8552ba819d443c727ee5bcc3fac214f55412a91c21491c08e\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibIterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"../interfaces/ITransactionManager.sol\\\";\\n\\n/// @title LibIterableMapping\\n/// @author Connext <support@connext.network>\\n/// @notice This library provides an efficient way to store and retrieve\\n///         UnsignedTransactionData. This contract is used to manage the \\n///         transactions stored by `TransactionManager.sol`\\nlibrary LibIterableMapping {\\n    struct UnsignedTransactionDataWithIndex {\\n        UnsignedTransactionData transaction;\\n        uint256 index;\\n    }\\n\\n    struct IterableMapping {\\n        mapping(bytes32 => UnsignedTransactionDataWithIndex) transactions;\\n        bytes32[] digests;\\n    }\\n\\n    function digestEqual(bytes32 s, bytes32 t)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return s == t;\\n    }\\n\\n    function isEmptyString(bytes32 s) internal pure returns (bool) {\\n        return digestEqual(s, bytes32(0));\\n    }\\n\\n    function digestExists(IterableMapping storage self, bytes32 digest)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            !isEmptyString(digest) &&\\n            self.digests.length != 0 &&\\n            digestEqual(self.digests[self.transactions[digest].index], digest);\\n    }\\n\\n    function length(IterableMapping storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.digests.length;\\n    }\\n\\n    function getTransactionByDigest(\\n        IterableMapping storage self,\\n        bytes32 digest\\n    ) internal view returns (UnsignedTransactionData memory) {\\n        require(digestExists(self, digest), \\\"LibIterableMapping: DIGEST_NOT_FOUND\\\");\\n        return self.transactions[digest].transaction;\\n    }\\n\\n    function getTransactionByIndex(\\n        IterableMapping storage self,\\n        uint256 index\\n    ) internal view returns (UnsignedTransactionData memory) {\\n        require(index < self.digests.length, \\\"LibIterableMapping: INVALID_INDEX\\\");\\n        return self.transactions[self.digests[index]].transaction;\\n    }\\n\\n    function getTransactions(IterableMapping storage self)\\n        internal\\n        view\\n        returns (UnsignedTransactionData[] memory)\\n    {\\n        uint256 l = self.digests.length;\\n        UnsignedTransactionData[] memory transactions = new UnsignedTransactionData[](l);\\n        for (uint256 i = 0; i < l; i++) {\\n            transactions[i] = self.transactions[self.digests[i]].transaction;\\n        }\\n        return transactions;\\n    }\\n\\n    function addTransaction(\\n        IterableMapping storage self,\\n        UnsignedTransactionData memory transaction\\n    ) internal {\\n        bytes32 digest = transaction.digest;\\n        require(!isEmptyString(digest), \\\"LibIterableMapping: EMPTY_DIGEST\\\");\\n        require(!digestExists(self, digest), \\\"LibIterableMapping: DIGEST_ALREADY_ADDED\\\");\\n        self.transactions[digest] = UnsignedTransactionDataWithIndex({\\n            transaction: transaction,\\n            index: self.digests.length\\n        });\\n        self.digests.push(digest);\\n    }\\n\\n    function removeTransaction(\\n        IterableMapping storage self,\\n        bytes32 digest\\n    ) internal {\\n        require(!isEmptyString(digest), \\\"LibIterableMapping: EMPTY_DIGEST\\\");\\n        require(digestExists(self, digest), \\\"LibIterableMapping: DIGEST_NOT_FOUND\\\");\\n        uint256 index = self.transactions[digest].index;\\n        bytes32 lastDigest = self.digests[self.digests.length - 1];\\n        self.transactions[lastDigest].index = index;\\n        self.digests[index] = lastDigest;\\n        delete self.transactions[digest];\\n        self.digests.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x8fe0bab9cbe120571092017f0b7ea60988ac329919911286f79023d1d98091dc\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\n/// @title LibUtils\\n/// @author Connext <support@connext.network>\\n/// @notice Contains a helper to revert if a call was not successfully\\n///         made\\nlibrary LibUtils {\\n    // If success is false, reverts and passes on the revert string.\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\n        internal\\n        pure\\n    {\\n        if (!success) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0edf57f77c196ec737ae6fb77ddc5e3d99ab3fb2a411b1e4a0ebc77580785e13\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003eb238038062003eb28339818101604052810190620000379190620000c1565b60016000819055508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508062ffffff1660808162ffffff1660e81b81525050505062000179565b600081519050620000a48162000145565b92915050565b600081519050620000bb816200015f565b92915050565b60008060408385031215620000d557600080fd5b6000620000e58582860162000093565b9250506020620000f885828601620000aa565b9150509250929050565b60006200010f8262000116565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b620001508162000102565b81146200015c57600080fd5b50565b6200016a8162000136565b81146200017657600080fd5b50565b60805160e81c60a05160601c613cdc620001d66000396000818161021201526112dc015260008181610368015281816106530152818161078c015281816107d101528181610850015281816109c101526110b90152613cdc6000f3fe6080604052600436106100865760003560e01c80639a8a0592116100595780639a8a059214610147578063c06adaee14610172578063c95f9d0e146101a2578063e9088189146101be578063f31abcc4146101e757610086565b8063294402cc1461008b57806341258b5c146100b6578063543ad1df146100f35780637c32fba91461011e575b600080fd5b34801561009757600080fd5b506100a0610210565b6040516100ad9190612d59565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190612380565b610234565b6040516100ea9190613311565b60405180910390f35b3480156100ff57600080fd5b50610108610259565b6040516101159190613311565b60405180910390f35b34801561012a57600080fd5b50610145600480360381019061014091906123e5565b61025e565b005b34801561015357600080fd5b5061015c610651565b60405161016991906132f6565b60405180910390f35b61018c600480360381019061018791906123e5565b610675565b6040516101999190612e19565b60405180910390f35b6101bc60048036038101906101b791906124bf565b610cd6565b005b3480156101ca57600080fd5b506101e560048036038101906101e09190612426565b610ee2565b005b3480156101f357600080fd5b5061020e600480360381019061020991906124fb565b61140f565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b6001602052816000526040600020602052806000526040600020600091509150505481565b600081565b600260005414156102a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029b9061321d565b60405180910390fd5b600260008190555060006102b782611643565b905060006102cf82600261180590919063ffffffff16565b9050826040013581600001511461031b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103129061311d565b60405180910390fd5b826101400135816020015114610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035d9061307d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168360a001602081019061039f9190612496565b62ffffff1614156104ae574283610140013510610437578260200160208101906103c99190612357565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042d9061319d565b60405180910390fd5b5b61046a83606001602081019061044d9190612357565b8460000160208101906104609190612357565b856040013561189f565b6104a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a090612f7d565b60405180910390fd5b6105f7565b428361014001351061053b578260000160208101906104cd9190612357565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610531906130dd565b60405180910390fd5b5b8260400135600160008560200160208101906105579190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560800160208101906105a69190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ef919061347f565b925050819055505b61060b8260026118d290919063ffffffff16565b7f199deba8a6a6013af443143040bbb1ec3f4313f2db743530e1dc4b0cd40f1b51833360405161063c92919061327f565b60405180910390a15050600160008190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260005414156106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b49061321d565b60405180910390fd5b60026000819055506000428361014001356106d891906134d5565b1015610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071090612efd565b60405180910390fd5b8160c001602081019061072c9190612496565b62ffffff168260a00160208101906107449190612496565b62ffffff16141561078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190612fdd565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168260a00160208101906107c39190612496565b62ffffff16148061080f57507f000000000000000000000000000000000000000000000000000000000000000062ffffff168260c00160208101906108089190612496565b62ffffff16145b61084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590612f5d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168260a00160208101906108879190612496565b62ffffff1614156109a7576108ad8260600160208101906108a89190612357565b611adc565b156108fd57816040013534146108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ef9061303d565b60405180910390fd5b6109a2565b60003414610940576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610937906130fd565b60405180910390fd5b6109628260600160208101906109569190612357565b33308560400135611b14565b6109a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099890612ebd565b60405180910390fd5b5b610c48565b8160c00160208101906109ba9190612496565b62ffffff167f000000000000000000000000000000000000000000000000000000000000000062ffffff1614610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90612ffd565b60405180910390fd5b816020016020810190610a389190612357565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9c90612edd565b60405180910390fd5b816040013560016000846020016020810190610ac19190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846080016020810190610b109190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b83906131bd565b60405180910390fd5b816040013560016000846020016020810190610ba89190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846080016020810190610bf79190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c4091906134d5565b925050819055505b6000610c5383611643565b9050610c8c6040518060600160405280856040013581526020018561014001358152602001838152506002611bbb90919063ffffffff16565b7f6b8d6a2cec3e696832b71a0098f172d93c793ef03c1e1b93689a626b941d13fc8333604051610cbd92919061327f565b60405180910390a1809150506001600081905550919050565b60026000541415610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d139061321d565b60405180910390fd5b6002600081905550610d2d81611adc565b15610d7957813414610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b906131fd565b60405180910390fd5b610e08565b60003414610dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db39061315d565b60405180910390fd5b610dc881333085611b14565b610e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfe90612f3d565b60405180910390fd5b5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e94919061347f565b925050819055507f9d278c56ba6dc86a12eefe6b43112bd6e06648eb4ec0b950ee2d783d40e2acb4338284604051610ece93929190612d74565b60405180910390a160016000819055505050565b60026000541415610f28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1f9061321d565b60405180910390fd5b60026000819055506000610f3b84611643565b90506000610f5382600261180590919063ffffffff16565b90508460400135816000015114610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f969061311d565b60405180910390fd5b846101400135816020015114610fea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe19061307d565b60405180910390fd5b846000016020810190610ffd9190612357565b73ffffffffffffffffffffffffffffffffffffffff166110618386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611cee565b73ffffffffffffffffffffffffffffffffffffffff16146110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae906131dd565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168560a00160208101906110f09190612496565b62ffffff1614156111bb578460400135600160008760200160208101906111179190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008760600160208101906111669190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111af919061347f565b925050819055506113af565b600067ffffffffffffffff8111156111fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561122e5781602001600182028036833780820191505090505b508051906020012085806101000190611247919061332c565b604051611255929190612d14565b604051809103902014156112da576112968560600160208101906112799190612357565b8660e001602081019061128c9190612357565b876040013561189f565b6112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc9061323d565b60405180910390fd5b6113ae565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d80ff0a86806101000190611327919061332c565b6040518363ffffffff1660e01b8152600401611344929190612e79565b600060405180830381600087803b15801561135e57600080fd5b505af192505050801561136f575060015b6113ac576113a68560800160208101906113899190612357565b8660e001602081019061139c9190612357565b876040013561189f565b506113ad565b5b5b5b6113c38260026118d290919063ffffffff16565b7f280df9efeebc705987d91447e4d3d8129dc6df8ff02e029459f598e7217981e9858585336040516113f894939291906132af565b60405180910390a150506001600081905550505050565b60026000541415611455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144c9061321d565b60405180910390fd5b600260008190555082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561151c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115139061313d565b60405180910390fd5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115a891906134d5565b925050819055506115ba82828561189f565b6115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f09061305d565b60405180910390fd5b7f7da12116be8cb7af4b2d9e9b4a2ca2c3a3243ddd6fd3a94411902367b8eed5683383858460405161162e9493929190612dab565b60405180910390a16001600081905550505050565b6000806040518061012001604052808460000160208101906116659190612357565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460200160208101906116939190612357565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460600160208101906116c19190612357565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460800160208101906116ef9190612357565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460a001602081019061171d9190612496565b62ffffff1681526020018460c001602081019061173a9190612496565b62ffffff1681526020018460e00160208101906117579190612357565b73ffffffffffffffffffffffffffffffffffffffff16815260200184806101000190611783919061332c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018461012001358152509050806040516020016117e7919061325d565b60405160208183030381529060405280519060200120915050919050565b61180d61224f565b6118178383611db8565b611856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184d90612f9d565b60405180910390fd5b8260000160008381526020019081526020016000206000016040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b60006118aa84611adc565b6118be576118b9848484611e50565b6118c9565b6118c88383611e66565b5b90509392505050565b6118db81611eec565b1561191b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119129061301d565b60405180910390fd5b6119258282611db8565b611964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195b90612f9d565b60405180910390fd5b60008260000160008381526020019081526020016000206003015490506000836001016001856001018054905061199b91906134d5565b815481106119d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050818460000160008381526020019081526020016000206003018190555080846001018381548110611a39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555083600001600084815260200190815260200160002060008082016000808201600090556001820160009055600282016000905550506003820160009055505083600101805480611ac0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000611bb185858585604051602401611b2f93929190612d74565b6040516020818303038152906040527f23b872dd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f02565b9050949350505050565b600081604001519050611bcd81611eec565b15611c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c049061301d565b60405180910390fd5b611c178382611db8565b15611c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4e9061317d565b60405180910390fd5b6040518060400160405280838152602001846001018054905081525083600001600083815260200190815260200160002060008201518160000160008201518160000155602082015181600101556040820151816002015550506020820151816003015590505082600101819080600181540180825580915050600190039060005260206000200160009091909190915055505050565b600080600080604185511415611d1b576020850151925060408501519150606085015160001a9050611da1565b604085511415611d65576040850151602086015193507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81169250601b8160ff1c01915050611da0565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9790612f1d565b60405180910390fd5b5b611dad86828585611fef565b935050505092915050565b6000611dc382611eec565b158015611dd857506000836001018054905014155b8015611e485750611e47836001018460000160008581526020019081526020016000206003015481548110611e36577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548361217a565b5b905092915050565b6000611e5d848484612187565b90509392505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611e8f90612d44565b60006040518083038185875af1925050503d8060008114611ecc576040519150601f19603f3d011682016040523d82523d6000602084013e611ed1565b606091505b5091509150611ee0828261222b565b60019250505092915050565b6000611efb826000801b61217a565b9050919050565b6000611f0d8361223c565b611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f43906130bd565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051611f749190612d2d565b6000604051808303816000865af19150503d8060008114611fb1576040519150601f19603f3d011682016040523d82523d6000602084013e611fb6565b606091505b5091509150611fc5828261222b565b600081511480611fe5575080806020019051810190611fe491906123bc565b5b9250505092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115612057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204e90612fbd565b60405180910390fd5b601b8460ff16148061206c5750601c8460ff16145b6120ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a29061309d565b60405180910390fd5b6000600186868686604051600081526020016040526040516120d09493929190612e34565b6020604051602081039080840390855afa1580156120f2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561216e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216590612e9d565b60405180910390fd5b80915050949350505050565b6000818314905092915050565b60006122228484846040516024016121a0929190612df0565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f02565b90509392505050565b8161223857805160208201fd5b5050565b600080823b905060008111915050919050565b60405180606001604052806000815260200160008152602001600080191681525090565b60008135905061228281613c1c565b92915050565b60008135905061229781613c33565b92915050565b6000815190506122ac81613c4a565b92915050565b6000813590506122c181613c61565b92915050565b60008083601f8401126122d957600080fd5b8235905067ffffffffffffffff8111156122f257600080fd5b60208301915083600182028301111561230a57600080fd5b9250929050565b6000610160828403121561232457600080fd5b81905092915050565b60008135905061233c81613c78565b92915050565b60008135905061235181613c8f565b92915050565b60006020828403121561236957600080fd5b600061237784828501612273565b91505092915050565b6000806040838503121561239357600080fd5b60006123a185828601612273565b92505060206123b285828601612273565b9150509250929050565b6000602082840312156123ce57600080fd5b60006123dc8482850161229d565b91505092915050565b6000602082840312156123f757600080fd5b600082013567ffffffffffffffff81111561241157600080fd5b61241d84828501612311565b91505092915050565b60008060006040848603121561243b57600080fd5b600084013567ffffffffffffffff81111561245557600080fd5b61246186828701612311565b935050602084013567ffffffffffffffff81111561247e57600080fd5b61248a868287016122c7565b92509250509250925092565b6000602082840312156124a857600080fd5b60006124b68482850161232d565b91505092915050565b600080604083850312156124d257600080fd5b60006124e085828601612342565b92505060206124f185828601612273565b9150509250929050565b60008060006060848603121561251057600080fd5b600061251e86828701612342565b935050602061252f86828701612273565b925050604061254086828701612288565b9150509250925092565b61255381613589565b82525050565b61256281613509565b82525050565b61257181613509565b82525050565b61258081613539565b82525050565b61258f81613539565b82525050565b60006125a1838561338e565b93506125ae8385846135bf565b6125b783613630565b840190509392505050565b60006125ce838561339f565b93506125db8385846135bf565b6125e483613630565b840190509392505050565b60006125fb83856133b0565b93506126088385846135bf565b82840190509392505050565b600061261f82613383565b612629818561338e565b93506126398185602086016135ce565b61264281613630565b840191505092915050565b600061265882613383565b61266281856133b0565b93506126728185602086016135ce565b80840191505092915050565b600061268b6018836133bb565b915061269682613641565b602082019050919050565b60006126ae601e836133bb565b91506126b98261366a565b602082019050919050565b60006126d16018836133bb565b91506126dc82613693565b602082019050919050565b60006126f46018836133bb565b91506126ff826136bc565b602082019050919050565b6000612717601f836133bb565b9150612722826136e5565b602082019050919050565b600061273a6023836133bb565b91506127458261370e565b604082019050919050565b600061275d6019836133bb565b91506127688261375d565b602082019050919050565b60006127806017836133bb565b915061278b82613786565b602082019050919050565b60006127a36024836133bb565b91506127ae826137af565b604082019050919050565b60006127c66022836133bb565b91506127d1826137fe565b604082019050919050565b60006127e96016836133bb565b91506127f48261384d565b602082019050919050565b600061280c6020836133bb565b915061281782613876565b602082019050919050565b600061282f6020836133bb565b915061283a8261389f565b602082019050919050565b60006128526017836133bb565b915061285d826138c8565b602082019050919050565b60006128756020836133bb565b9150612880826138f1565b602082019050919050565b60006128986016836133bb565b91506128a38261391a565b602082019050919050565b60006128bb6022836133bb565b91506128c682613943565b604082019050919050565b60006128de6011836133bb565b91506128e982613992565b602082019050919050565b60006129016018836133bb565b915061290c826139bb565b602082019050919050565b6000612924601e836133bb565b915061292f826139e4565b602082019050919050565b60006129476016836133bb565b915061295282613a0d565b602082019050919050565b600061296a6023836133bb565b915061297582613a36565b604082019050919050565b600061298d6023836133bb565b915061299882613a85565b604082019050919050565b60006129b06028836133bb565b91506129bb82613ad4565b604082019050919050565b60006129d36000836133b0565b91506129de82613b23565b600082019050919050565b60006129f6601a836133bb565b9150612a0182613b26565b602082019050919050565b6000612a19601f836133bb565b9150612a2482613b4f565b602082019050919050565b6000612a3c601a836133bb565b9150612a4782613b78565b602082019050919050565b6000612a5f601c836133bb565b9150612a6a82613ba1565b602082019050919050565b6000612a82601f836133bb565b9150612a8d82613bca565b602082019050919050565b6000612aa56018836133bb565b9150612ab082613bf3565b602082019050919050565b600061012083016000830151612ad46000860182612559565b506020830151612ae76020860182612559565b506040830151612afa6040860182612559565b506060830151612b0d6060860182612559565b506080830151612b206080860182612cc9565b5060a0830151612b3360a0860182612cc9565b5060c0830151612b4660c0860182612559565b5060e083015184820360e0860152612b5e8282612614565b915050610100830151612b75610100860182612577565b508091505092915050565b60006101608301612b9460008401846133cc565b612ba16000860182612559565b50612baf60208401846133cc565b612bbc6020860182612559565b50612bca6040840184613468565b612bd76040860182612ce7565b50612be560608401846133cc565b612bf26060860182612559565b50612c0060808401846133cc565b612c0d6080860182612559565b50612c1b60a0840184613451565b612c2860a0860182612cc9565b50612c3660c0840184613451565b612c4360c0860182612cc9565b50612c5160e08401846133cc565b612c5e60e0860182612559565b50612c6d6101008401846133fa565b858303610100870152612c81838284612595565b92505050612c936101208401846133e3565b612ca1610120860182612577565b50612cb0610140840184613468565b612cbe610140860182612ce7565b508091505092915050565b612cd281613563565b82525050565b612ce181613563565b82525050565b612cf081613572565b82525050565b612cff81613572565b82525050565b612d0e8161357c565b82525050565b6000612d218284866125ef565b91508190509392505050565b6000612d39828461264d565b915081905092915050565b6000612d4f826129c6565b9150819050919050565b6000602082019050612d6e6000830184612568565b92915050565b6000606082019050612d896000830186612568565b612d966020830185612568565b612da36040830184612cf6565b949350505050565b6000608082019050612dc06000830187612568565b612dcd6020830186612568565b612dda6040830185612cf6565b612de7606083018461254a565b95945050505050565b6000604082019050612e056000830185612568565b612e126020830184612cf6565b9392505050565b6000602082019050612e2e6000830184612586565b92915050565b6000608082019050612e496000830187612586565b612e566020830186612d05565b612e636040830185612586565b612e706060830184612586565b95945050505050565b60006020820190508181036000830152612e948184866125c2565b90509392505050565b60006020820190508181036000830152612eb68161267e565b9050919050565b60006020820190508181036000830152612ed6816126a1565b9050919050565b60006020820190508181036000830152612ef6816126c4565b9050919050565b60006020820190508181036000830152612f16816126e7565b9050919050565b60006020820190508181036000830152612f368161270a565b9050919050565b60006020820190508181036000830152612f568161272d565b9050919050565b60006020820190508181036000830152612f7681612750565b9050919050565b60006020820190508181036000830152612f9681612773565b9050919050565b60006020820190508181036000830152612fb681612796565b9050919050565b60006020820190508181036000830152612fd6816127b9565b9050919050565b60006020820190508181036000830152612ff6816127dc565b9050919050565b60006020820190508181036000830152613016816127ff565b9050919050565b6000602082019050818103600083015261303681612822565b9050919050565b6000602082019050818103600083015261305681612845565b9050919050565b6000602082019050818103600083015261307681612868565b9050919050565b600060208201905081810360008301526130968161288b565b9050919050565b600060208201905081810360008301526130b6816128ae565b9050919050565b600060208201905081810360008301526130d6816128d1565b9050919050565b600060208201905081810360008301526130f6816128f4565b9050919050565b6000602082019050818103600083015261311681612917565b9050919050565b600060208201905081810360008301526131368161293a565b9050919050565b600060208201905081810360008301526131568161295d565b9050919050565b6000602082019050818103600083015261317681612980565b9050919050565b60006020820190508181036000830152613196816129a3565b9050919050565b600060208201905081810360008301526131b6816129e9565b9050919050565b600060208201905081810360008301526131d681612a0c565b9050919050565b600060208201905081810360008301526131f681612a2f565b9050919050565b6000602082019050818103600083015261321681612a52565b9050919050565b6000602082019050818103600083015261323681612a75565b9050919050565b6000602082019050818103600083015261325681612a98565b9050919050565b600060208201905081810360008301526132778184612abb565b905092915050565b600060408201905081810360008301526132998185612b80565b90506132a86020830184612568565b9392505050565b600060608201905081810360008301526132c98187612b80565b905081810360208301526132de8185876125c2565b90506132ed6040830184612568565b95945050505050565b600060208201905061330b6000830184612cd8565b92915050565b60006020820190506133266000830184612cf6565b92915050565b6000808335600160200384360303811261334557600080fd5b80840192508235915067ffffffffffffffff82111561336357600080fd5b60208301925060018202360383131561337b57600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006133db6020840184612273565b905092915050565b60006133f260208401846122b2565b905092915050565b6000808335600160200384360303811261341357600080fd5b83810192508235915060208301925067ffffffffffffffff82111561343757600080fd5b60018202360384131561344957600080fd5b509250929050565b6000613460602084018461232d565b905092915050565b60006134776020840184612342565b905092915050565b600061348a82613572565b915061349583613572565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134ca576134c9613601565b5b828201905092915050565b60006134e082613572565b91506134eb83613572565b9250828210156134fe576134fd613601565b5b828203905092915050565b600061351482613543565b9050919050565b600061352682613543565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006135948261359b565b9050919050565b60006135a6826135ad565b9050919050565b60006135b882613543565b9050919050565b82818337600083830152505050565b60005b838110156135ec5780820151818401526020810190506135d1565b838111156135fb576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f707265706172653a2045524332305f5452414e534645525f4641494c45440000600082015250565b7f707265706172653a20524f555445525f4d49534d415443480000000000000000600082015250565b7f707265706172653a2054494d454f55545f544f4f5f4c4f570000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f6164644c69717569646974793a2045524332305f5452414e534645525f46414960008201527f4c45440000000000000000000000000000000000000000000000000000000000602082015250565b7f707265706172653a20494e56414c49445f434841494e49445300000000000000600082015250565b7f63616e63656c3a205452414e534645525f4641494c4544000000000000000000600082015250565b7f4c69624974657261626c654d617070696e673a204449474553545f4e4f545f4660008201527f4f554e4400000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f707265706172653a2053414d455f434841494e49445300000000000000000000600082015250565b7f707265706172653a20494e56414c49445f524543454956494e475f434841494e600082015250565b7f4c69624974657261626c654d617070696e673a20454d5054595f444947455354600082015250565b7f707265706172653a2056414c55455f4d49534d41544348000000000000000000600082015250565b7f72656d6f76654c69717569646974793a205452414e534645525f4641494c4544600082015250565b7f63616e63656c3a20494e56414c49445f45585049525900000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c696245524332303a204e4f5f434f4445000000000000000000000000000000600082015250565b7f63616e63656c3a20555345525f4d5553545f43414e43454c0000000000000000600082015250565b7f707265706172653a204554485f574954485f4552435f5452414e534645520000600082015250565b7f63616e63656c3a20494e56414c49445f414d4f554e5400000000000000000000600082015250565b7f72656d6f76654c69717569646974793a20494e53554646494349454e545f465560008201527f4e44530000000000000000000000000000000000000000000000000000000000602082015250565b7f6164644c69717569646974793a204554485f574954485f4552435f5452414e5360008201527f4645520000000000000000000000000000000000000000000000000000000000602082015250565b7f4c69624974657261626c654d617070696e673a204449474553545f414c52454160008201527f44595f4144444544000000000000000000000000000000000000000000000000602082015250565b50565b7f63616e63656c3a20524f555445525f4d5553545f43414e43454c000000000000600082015250565b7f707265706172653a20494e53554646494349454e545f4c495155494449545900600082015250565b7f66756c66696c6c3a20494e56414c49445f5349474e4154555245000000000000600082015250565b7f6164644c69717569646974793a2056414c55455f4d49534d4154434800000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f66756c66696c6c3a205452414e534645525f4641494c45440000000000000000600082015250565b613c2581613509565b8114613c3057600080fd5b50565b613c3c8161351b565b8114613c4757600080fd5b50565b613c538161352d565b8114613c5e57600080fd5b50565b613c6a81613539565b8114613c7557600080fd5b50565b613c8181613563565b8114613c8c57600080fd5b50565b613c9881613572565b8114613ca357600080fd5b5056fea264697066735822122078a6cbeb80435e7e2e6d8a36bad176dd604ce5892b4b842e3dc15c4697ad00a864736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80639a8a0592116100595780639a8a059214610147578063c06adaee14610172578063c95f9d0e146101a2578063e9088189146101be578063f31abcc4146101e757610086565b8063294402cc1461008b57806341258b5c146100b6578063543ad1df146100f35780637c32fba91461011e575b600080fd5b34801561009757600080fd5b506100a0610210565b6040516100ad9190612d59565b60405180910390f35b3480156100c257600080fd5b506100dd60048036038101906100d89190612380565b610234565b6040516100ea9190613311565b60405180910390f35b3480156100ff57600080fd5b50610108610259565b6040516101159190613311565b60405180910390f35b34801561012a57600080fd5b50610145600480360381019061014091906123e5565b61025e565b005b34801561015357600080fd5b5061015c610651565b60405161016991906132f6565b60405180910390f35b61018c600480360381019061018791906123e5565b610675565b6040516101999190612e19565b60405180910390f35b6101bc60048036038101906101b791906124bf565b610cd6565b005b3480156101ca57600080fd5b506101e560048036038101906101e09190612426565b610ee2565b005b3480156101f357600080fd5b5061020e600480360381019061020991906124fb565b61140f565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b6001602052816000526040600020602052806000526040600020600091509150505481565b600081565b600260005414156102a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029b9061321d565b60405180910390fd5b600260008190555060006102b782611643565b905060006102cf82600261180590919063ffffffff16565b9050826040013581600001511461031b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103129061311d565b60405180910390fd5b826101400135816020015114610366576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035d9061307d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168360a001602081019061039f9190612496565b62ffffff1614156104ae574283610140013510610437578260200160208101906103c99190612357565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042d9061319d565b60405180910390fd5b5b61046a83606001602081019061044d9190612357565b8460000160208101906104609190612357565b856040013561189f565b6104a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a090612f7d565b60405180910390fd5b6105f7565b428361014001351061053b578260000160208101906104cd9190612357565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610531906130dd565b60405180910390fd5b5b8260400135600160008560200160208101906105579190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008560800160208101906105a69190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105ef919061347f565b925050819055505b61060b8260026118d290919063ffffffff16565b7f199deba8a6a6013af443143040bbb1ec3f4313f2db743530e1dc4b0cd40f1b51833360405161063c92919061327f565b60405180910390a15050600160008190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260005414156106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b49061321d565b60405180910390fd5b60026000819055506000428361014001356106d891906134d5565b1015610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071090612efd565b60405180910390fd5b8160c001602081019061072c9190612496565b62ffffff168260a00160208101906107449190612496565b62ffffff16141561078a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078190612fdd565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168260a00160208101906107c39190612496565b62ffffff16148061080f57507f000000000000000000000000000000000000000000000000000000000000000062ffffff168260c00160208101906108089190612496565b62ffffff16145b61084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590612f5d565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168260a00160208101906108879190612496565b62ffffff1614156109a7576108ad8260600160208101906108a89190612357565b611adc565b156108fd57816040013534146108f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ef9061303d565b60405180910390fd5b6109a2565b60003414610940576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610937906130fd565b60405180910390fd5b6109628260600160208101906109569190612357565b33308560400135611b14565b6109a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099890612ebd565b60405180910390fd5b5b610c48565b8160c00160208101906109ba9190612496565b62ffffff167f000000000000000000000000000000000000000000000000000000000000000062ffffff1614610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90612ffd565b60405180910390fd5b816020016020810190610a389190612357565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9c90612edd565b60405180910390fd5b816040013560016000846020016020810190610ac19190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846080016020810190610b109190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b83906131bd565b60405180910390fd5b816040013560016000846020016020810190610ba89190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846080016020810190610bf79190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c4091906134d5565b925050819055505b6000610c5383611643565b9050610c8c6040518060600160405280856040013581526020018561014001358152602001838152506002611bbb90919063ffffffff16565b7f6b8d6a2cec3e696832b71a0098f172d93c793ef03c1e1b93689a626b941d13fc8333604051610cbd92919061327f565b60405180910390a1809150506001600081905550919050565b60026000541415610d1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d139061321d565b60405180910390fd5b6002600081905550610d2d81611adc565b15610d7957813414610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b906131fd565b60405180910390fd5b610e08565b60003414610dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db39061315d565b60405180910390fd5b610dc881333085611b14565b610e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfe90612f3d565b60405180910390fd5b5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e94919061347f565b925050819055507f9d278c56ba6dc86a12eefe6b43112bd6e06648eb4ec0b950ee2d783d40e2acb4338284604051610ece93929190612d74565b60405180910390a160016000819055505050565b60026000541415610f28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1f9061321d565b60405180910390fd5b60026000819055506000610f3b84611643565b90506000610f5382600261180590919063ffffffff16565b90508460400135816000015114610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f969061311d565b60405180910390fd5b846101400135816020015114610fea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe19061307d565b60405180910390fd5b846000016020810190610ffd9190612357565b73ffffffffffffffffffffffffffffffffffffffff166110618386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611cee565b73ffffffffffffffffffffffffffffffffffffffff16146110b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ae906131dd565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168560a00160208101906110f09190612496565b62ffffff1614156111bb578460400135600160008760200160208101906111179190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008760600160208101906111669190612357565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111af919061347f565b925050819055506113af565b600067ffffffffffffffff8111156111fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561122e5781602001600182028036833780820191505090505b508051906020012085806101000190611247919061332c565b604051611255929190612d14565b604051809103902014156112da576112968560600160208101906112799190612357565b8660e001602081019061128c9190612357565b876040013561189f565b6112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc9061323d565b60405180910390fd5b6113ae565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d80ff0a86806101000190611327919061332c565b6040518363ffffffff1660e01b8152600401611344929190612e79565b600060405180830381600087803b15801561135e57600080fd5b505af192505050801561136f575060015b6113ac576113a68560800160208101906113899190612357565b8660e001602081019061139c9190612357565b876040013561189f565b506113ad565b5b5b5b6113c38260026118d290919063ffffffff16565b7f280df9efeebc705987d91447e4d3d8129dc6df8ff02e029459f598e7217981e9858585336040516113f894939291906132af565b60405180910390a150506001600081905550505050565b60026000541415611455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144c9061321d565b60405180910390fd5b600260008190555082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561151c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115139061313d565b60405180910390fd5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115a891906134d5565b925050819055506115ba82828561189f565b6115f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f09061305d565b60405180910390fd5b7f7da12116be8cb7af4b2d9e9b4a2ca2c3a3243ddd6fd3a94411902367b8eed5683383858460405161162e9493929190612dab565b60405180910390a16001600081905550505050565b6000806040518061012001604052808460000160208101906116659190612357565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460200160208101906116939190612357565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460600160208101906116c19190612357565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460800160208101906116ef9190612357565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460a001602081019061171d9190612496565b62ffffff1681526020018460c001602081019061173a9190612496565b62ffffff1681526020018460e00160208101906117579190612357565b73ffffffffffffffffffffffffffffffffffffffff16815260200184806101000190611783919061332c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018461012001358152509050806040516020016117e7919061325d565b60405160208183030381529060405280519060200120915050919050565b61180d61224f565b6118178383611db8565b611856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184d90612f9d565b60405180910390fd5b8260000160008381526020019081526020016000206000016040518060600160405290816000820154815260200160018201548152602001600282015481525050905092915050565b60006118aa84611adc565b6118be576118b9848484611e50565b6118c9565b6118c88383611e66565b5b90509392505050565b6118db81611eec565b1561191b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119129061301d565b60405180910390fd5b6119258282611db8565b611964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195b90612f9d565b60405180910390fd5b60008260000160008381526020019081526020016000206003015490506000836001016001856001018054905061199b91906134d5565b815481106119d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050818460000160008381526020019081526020016000206003018190555080846001018381548110611a39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555083600001600084815260200190815260200160002060008082016000808201600090556001820160009055600282016000905550506003820160009055505083600101805480611ac0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000611bb185858585604051602401611b2f93929190612d74565b6040516020818303038152906040527f23b872dd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f02565b9050949350505050565b600081604001519050611bcd81611eec565b15611c0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c049061301d565b60405180910390fd5b611c178382611db8565b15611c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4e9061317d565b60405180910390fd5b6040518060400160405280838152602001846001018054905081525083600001600083815260200190815260200160002060008201518160000160008201518160000155602082015181600101556040820151816002015550506020820151816003015590505082600101819080600181540180825580915050600190039060005260206000200160009091909190915055505050565b600080600080604185511415611d1b576020850151925060408501519150606085015160001a9050611da1565b604085511415611d65576040850151602086015193507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81169250601b8160ff1c01915050611da0565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9790612f1d565b60405180910390fd5b5b611dad86828585611fef565b935050505092915050565b6000611dc382611eec565b158015611dd857506000836001018054905014155b8015611e485750611e47836001018460000160008581526020019081526020016000206003015481548110611e36577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548361217a565b5b905092915050565b6000611e5d848484612187565b90509392505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1684604051611e8f90612d44565b60006040518083038185875af1925050503d8060008114611ecc576040519150601f19603f3d011682016040523d82523d6000602084013e611ed1565b606091505b5091509150611ee0828261222b565b60019250505092915050565b6000611efb826000801b61217a565b9050919050565b6000611f0d8361223c565b611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f43906130bd565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051611f749190612d2d565b6000604051808303816000865af19150503d8060008114611fb1576040519150601f19603f3d011682016040523d82523d6000602084013e611fb6565b606091505b5091509150611fc5828261222b565b600081511480611fe5575080806020019051810190611fe491906123bc565b5b9250505092915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115612057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204e90612fbd565b60405180910390fd5b601b8460ff16148061206c5750601c8460ff16145b6120ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a29061309d565b60405180910390fd5b6000600186868686604051600081526020016040526040516120d09493929190612e34565b6020604051602081039080840390855afa1580156120f2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561216e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216590612e9d565b60405180910390fd5b80915050949350505050565b6000818314905092915050565b60006122228484846040516024016121a0929190612df0565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f02565b90509392505050565b8161223857805160208201fd5b5050565b600080823b905060008111915050919050565b60405180606001604052806000815260200160008152602001600080191681525090565b60008135905061228281613c1c565b92915050565b60008135905061229781613c33565b92915050565b6000815190506122ac81613c4a565b92915050565b6000813590506122c181613c61565b92915050565b60008083601f8401126122d957600080fd5b8235905067ffffffffffffffff8111156122f257600080fd5b60208301915083600182028301111561230a57600080fd5b9250929050565b6000610160828403121561232457600080fd5b81905092915050565b60008135905061233c81613c78565b92915050565b60008135905061235181613c8f565b92915050565b60006020828403121561236957600080fd5b600061237784828501612273565b91505092915050565b6000806040838503121561239357600080fd5b60006123a185828601612273565b92505060206123b285828601612273565b9150509250929050565b6000602082840312156123ce57600080fd5b60006123dc8482850161229d565b91505092915050565b6000602082840312156123f757600080fd5b600082013567ffffffffffffffff81111561241157600080fd5b61241d84828501612311565b91505092915050565b60008060006040848603121561243b57600080fd5b600084013567ffffffffffffffff81111561245557600080fd5b61246186828701612311565b935050602084013567ffffffffffffffff81111561247e57600080fd5b61248a868287016122c7565b92509250509250925092565b6000602082840312156124a857600080fd5b60006124b68482850161232d565b91505092915050565b600080604083850312156124d257600080fd5b60006124e085828601612342565b92505060206124f185828601612273565b9150509250929050565b60008060006060848603121561251057600080fd5b600061251e86828701612342565b935050602061252f86828701612273565b925050604061254086828701612288565b9150509250925092565b61255381613589565b82525050565b61256281613509565b82525050565b61257181613509565b82525050565b61258081613539565b82525050565b61258f81613539565b82525050565b60006125a1838561338e565b93506125ae8385846135bf565b6125b783613630565b840190509392505050565b60006125ce838561339f565b93506125db8385846135bf565b6125e483613630565b840190509392505050565b60006125fb83856133b0565b93506126088385846135bf565b82840190509392505050565b600061261f82613383565b612629818561338e565b93506126398185602086016135ce565b61264281613630565b840191505092915050565b600061265882613383565b61266281856133b0565b93506126728185602086016135ce565b80840191505092915050565b600061268b6018836133bb565b915061269682613641565b602082019050919050565b60006126ae601e836133bb565b91506126b98261366a565b602082019050919050565b60006126d16018836133bb565b91506126dc82613693565b602082019050919050565b60006126f46018836133bb565b91506126ff826136bc565b602082019050919050565b6000612717601f836133bb565b9150612722826136e5565b602082019050919050565b600061273a6023836133bb565b91506127458261370e565b604082019050919050565b600061275d6019836133bb565b91506127688261375d565b602082019050919050565b60006127806017836133bb565b915061278b82613786565b602082019050919050565b60006127a36024836133bb565b91506127ae826137af565b604082019050919050565b60006127c66022836133bb565b91506127d1826137fe565b604082019050919050565b60006127e96016836133bb565b91506127f48261384d565b602082019050919050565b600061280c6020836133bb565b915061281782613876565b602082019050919050565b600061282f6020836133bb565b915061283a8261389f565b602082019050919050565b60006128526017836133bb565b915061285d826138c8565b602082019050919050565b60006128756020836133bb565b9150612880826138f1565b602082019050919050565b60006128986016836133bb565b91506128a38261391a565b602082019050919050565b60006128bb6022836133bb565b91506128c682613943565b604082019050919050565b60006128de6011836133bb565b91506128e982613992565b602082019050919050565b60006129016018836133bb565b915061290c826139bb565b602082019050919050565b6000612924601e836133bb565b915061292f826139e4565b602082019050919050565b60006129476016836133bb565b915061295282613a0d565b602082019050919050565b600061296a6023836133bb565b915061297582613a36565b604082019050919050565b600061298d6023836133bb565b915061299882613a85565b604082019050919050565b60006129b06028836133bb565b91506129bb82613ad4565b604082019050919050565b60006129d36000836133b0565b91506129de82613b23565b600082019050919050565b60006129f6601a836133bb565b9150612a0182613b26565b602082019050919050565b6000612a19601f836133bb565b9150612a2482613b4f565b602082019050919050565b6000612a3c601a836133bb565b9150612a4782613b78565b602082019050919050565b6000612a5f601c836133bb565b9150612a6a82613ba1565b602082019050919050565b6000612a82601f836133bb565b9150612a8d82613bca565b602082019050919050565b6000612aa56018836133bb565b9150612ab082613bf3565b602082019050919050565b600061012083016000830151612ad46000860182612559565b506020830151612ae76020860182612559565b506040830151612afa6040860182612559565b506060830151612b0d6060860182612559565b506080830151612b206080860182612cc9565b5060a0830151612b3360a0860182612cc9565b5060c0830151612b4660c0860182612559565b5060e083015184820360e0860152612b5e8282612614565b915050610100830151612b75610100860182612577565b508091505092915050565b60006101608301612b9460008401846133cc565b612ba16000860182612559565b50612baf60208401846133cc565b612bbc6020860182612559565b50612bca6040840184613468565b612bd76040860182612ce7565b50612be560608401846133cc565b612bf26060860182612559565b50612c0060808401846133cc565b612c0d6080860182612559565b50612c1b60a0840184613451565b612c2860a0860182612cc9565b50612c3660c0840184613451565b612c4360c0860182612cc9565b50612c5160e08401846133cc565b612c5e60e0860182612559565b50612c6d6101008401846133fa565b858303610100870152612c81838284612595565b92505050612c936101208401846133e3565b612ca1610120860182612577565b50612cb0610140840184613468565b612cbe610140860182612ce7565b508091505092915050565b612cd281613563565b82525050565b612ce181613563565b82525050565b612cf081613572565b82525050565b612cff81613572565b82525050565b612d0e8161357c565b82525050565b6000612d218284866125ef565b91508190509392505050565b6000612d39828461264d565b915081905092915050565b6000612d4f826129c6565b9150819050919050565b6000602082019050612d6e6000830184612568565b92915050565b6000606082019050612d896000830186612568565b612d966020830185612568565b612da36040830184612cf6565b949350505050565b6000608082019050612dc06000830187612568565b612dcd6020830186612568565b612dda6040830185612cf6565b612de7606083018461254a565b95945050505050565b6000604082019050612e056000830185612568565b612e126020830184612cf6565b9392505050565b6000602082019050612e2e6000830184612586565b92915050565b6000608082019050612e496000830187612586565b612e566020830186612d05565b612e636040830185612586565b612e706060830184612586565b95945050505050565b60006020820190508181036000830152612e948184866125c2565b90509392505050565b60006020820190508181036000830152612eb68161267e565b9050919050565b60006020820190508181036000830152612ed6816126a1565b9050919050565b60006020820190508181036000830152612ef6816126c4565b9050919050565b60006020820190508181036000830152612f16816126e7565b9050919050565b60006020820190508181036000830152612f368161270a565b9050919050565b60006020820190508181036000830152612f568161272d565b9050919050565b60006020820190508181036000830152612f7681612750565b9050919050565b60006020820190508181036000830152612f9681612773565b9050919050565b60006020820190508181036000830152612fb681612796565b9050919050565b60006020820190508181036000830152612fd6816127b9565b9050919050565b60006020820190508181036000830152612ff6816127dc565b9050919050565b60006020820190508181036000830152613016816127ff565b9050919050565b6000602082019050818103600083015261303681612822565b9050919050565b6000602082019050818103600083015261305681612845565b9050919050565b6000602082019050818103600083015261307681612868565b9050919050565b600060208201905081810360008301526130968161288b565b9050919050565b600060208201905081810360008301526130b6816128ae565b9050919050565b600060208201905081810360008301526130d6816128d1565b9050919050565b600060208201905081810360008301526130f6816128f4565b9050919050565b6000602082019050818103600083015261311681612917565b9050919050565b600060208201905081810360008301526131368161293a565b9050919050565b600060208201905081810360008301526131568161295d565b9050919050565b6000602082019050818103600083015261317681612980565b9050919050565b60006020820190508181036000830152613196816129a3565b9050919050565b600060208201905081810360008301526131b6816129e9565b9050919050565b600060208201905081810360008301526131d681612a0c565b9050919050565b600060208201905081810360008301526131f681612a2f565b9050919050565b6000602082019050818103600083015261321681612a52565b9050919050565b6000602082019050818103600083015261323681612a75565b9050919050565b6000602082019050818103600083015261325681612a98565b9050919050565b600060208201905081810360008301526132778184612abb565b905092915050565b600060408201905081810360008301526132998185612b80565b90506132a86020830184612568565b9392505050565b600060608201905081810360008301526132c98187612b80565b905081810360208301526132de8185876125c2565b90506132ed6040830184612568565b95945050505050565b600060208201905061330b6000830184612cd8565b92915050565b60006020820190506133266000830184612cf6565b92915050565b6000808335600160200384360303811261334557600080fd5b80840192508235915067ffffffffffffffff82111561336357600080fd5b60208301925060018202360383131561337b57600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006133db6020840184612273565b905092915050565b60006133f260208401846122b2565b905092915050565b6000808335600160200384360303811261341357600080fd5b83810192508235915060208301925067ffffffffffffffff82111561343757600080fd5b60018202360384131561344957600080fd5b509250929050565b6000613460602084018461232d565b905092915050565b60006134776020840184612342565b905092915050565b600061348a82613572565b915061349583613572565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134ca576134c9613601565b5b828201905092915050565b60006134e082613572565b91506134eb83613572565b9250828210156134fe576134fd613601565b5b828203905092915050565b600061351482613543565b9050919050565b600061352682613543565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006135948261359b565b9050919050565b60006135a6826135ad565b9050919050565b60006135b882613543565b9050919050565b82818337600083830152505050565b60005b838110156135ec5780820151818401526020810190506135d1565b838111156135fb576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f707265706172653a2045524332305f5452414e534645525f4641494c45440000600082015250565b7f707265706172653a20524f555445525f4d49534d415443480000000000000000600082015250565b7f707265706172653a2054494d454f55545f544f4f5f4c4f570000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f6164644c69717569646974793a2045524332305f5452414e534645525f46414960008201527f4c45440000000000000000000000000000000000000000000000000000000000602082015250565b7f707265706172653a20494e56414c49445f434841494e49445300000000000000600082015250565b7f63616e63656c3a205452414e534645525f4641494c4544000000000000000000600082015250565b7f4c69624974657261626c654d617070696e673a204449474553545f4e4f545f4660008201527f4f554e4400000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f707265706172653a2053414d455f434841494e49445300000000000000000000600082015250565b7f707265706172653a20494e56414c49445f524543454956494e475f434841494e600082015250565b7f4c69624974657261626c654d617070696e673a20454d5054595f444947455354600082015250565b7f707265706172653a2056414c55455f4d49534d41544348000000000000000000600082015250565b7f72656d6f76654c69717569646974793a205452414e534645525f4641494c4544600082015250565b7f63616e63656c3a20494e56414c49445f45585049525900000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4c696245524332303a204e4f5f434f4445000000000000000000000000000000600082015250565b7f63616e63656c3a20555345525f4d5553545f43414e43454c0000000000000000600082015250565b7f707265706172653a204554485f574954485f4552435f5452414e534645520000600082015250565b7f63616e63656c3a20494e56414c49445f414d4f554e5400000000000000000000600082015250565b7f72656d6f76654c69717569646974793a20494e53554646494349454e545f465560008201527f4e44530000000000000000000000000000000000000000000000000000000000602082015250565b7f6164644c69717569646974793a204554485f574954485f4552435f5452414e5360008201527f4645520000000000000000000000000000000000000000000000000000000000602082015250565b7f4c69624974657261626c654d617070696e673a204449474553545f414c52454160008201527f44595f4144444544000000000000000000000000000000000000000000000000602082015250565b50565b7f63616e63656c3a20524f555445525f4d5553545f43414e43454c000000000000600082015250565b7f707265706172653a20494e53554646494349454e545f4c495155494449545900600082015250565b7f66756c66696c6c3a20494e56414c49445f5349474e4154555245000000000000600082015250565b7f6164644c69717569646974793a2056414c55455f4d49534d4154434800000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f66756c66696c6c3a205452414e534645525f4641494c45440000000000000000600082015250565b613c2581613509565b8114613c3057600080fd5b50565b613c3c8161351b565b8114613c4757600080fd5b50565b613c538161352d565b8114613c5e57600080fd5b50565b613c6a81613539565b8114613c7557600080fd5b50565b613c8181613563565b8114613c8c57600080fd5b50565b613c9881613572565b8114613ca357600080fd5b5056fea264697066735822122078a6cbeb80435e7e2e6d8a36bad176dd604ce5892b4b842e3dc15c4697ad00a864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 45,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 615,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "routerBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 618,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "activeTransactions",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(IterableMapping)1624_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(UnsignedTransactionDataWithIndex)1615_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibIterableMapping.UnsignedTransactionDataWithIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(UnsignedTransactionDataWithIndex)1615_storage"
      },
      "t_struct(IterableMapping)1624_storage": {
        "encoding": "inplace",
        "label": "struct LibIterableMapping.IterableMapping",
        "members": [
          {
            "astId": 1620,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "transactions",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(UnsignedTransactionDataWithIndex)1615_storage)"
          },
          {
            "astId": 1623,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "digests",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UnsignedTransactionData)1234_storage": {
        "encoding": "inplace",
        "label": "struct UnsignedTransactionData",
        "members": [
          {
            "astId": 1229,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1231,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "expiry",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1233,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "digest",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UnsignedTransactionDataWithIndex)1615_storage": {
        "encoding": "inplace",
        "label": "struct LibIterableMapping.UnsignedTransactionDataWithIndex",
        "members": [
          {
            "astId": 1612,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "transaction",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(UnsignedTransactionData)1234_storage"
          },
          {
            "astId": 1614,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "index",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}