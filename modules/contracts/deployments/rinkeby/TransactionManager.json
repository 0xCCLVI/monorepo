{
  "address": "0x28C0C29daB6954b5f25e011e8Db6178981E69960",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multisend",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_chainId",
          "type": "uint24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionPrepared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getActiveTransactionsByUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "digest",
              "type": "bytes32"
            }
          ],
          "internalType": "struct VariableTransactionData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multisend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "name": "prepare",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "sendingChainId",
              "type": "uint24"
            },
            {
              "internalType": "uint24",
              "name": "receivingChainId",
              "type": "uint24"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfe06d1c00641f935d4e4bf66f63f33521e3ebc269002e20ebaa396983e8be281",
  "receipt": {
    "to": null,
    "from": "0x3b66Db1b41B37510851cB03eC0Be3377DcE3f422",
    "contractAddress": "0x28C0C29daB6954b5f25e011e8Db6178981E69960",
    "transactionIndex": 13,
    "gasUsed": "4301891",
    "logsBloom": "0x
    "blockHash": "0x5cb4f545ff8c9c4af64cb8eb0ff4f494f5f348f0b8a3f9538e2633c71a25538a",
    "transactionHash": "0xfe06d1c00641f935d4e4bf66f63f33521e3ebc269002e20ebaa396983e8be281",
    "logs": [],
    "blockNumber": 8818546,
    "cumulativeGasUsed": "5230330",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "4"
  ],
  "solcInputHash": "4ecf93eb079fc0ba8992bbf191e00e92",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multisend\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_chainId\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionPrepared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfill\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getActiveTransactionsByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"internalType\":\"struct VariableTransactionData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"prepare\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sendingChainId\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"receivingChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,address)\":{\"params\":{\"amount\":\"The amount of liquidity to add for the router\",\"assetId\":\"The address (or `address(0)` if native asset) of the                asset you're adding liquidity for\"}},\"getActiveTransactionsByUser(address)\":{\"details\":\"returns all active transactions for a given user\"}},\"stateVariables\":{\"chainId\":{\"details\":\"The chain id of the contract, is passed in to avoid any evm issues\"},\"multisend\":{\"details\":\"Address of the deployed multisending helper contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransactionManager.sol\":\"TransactionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSendCallOnly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\n/// @notice The guard logic is not required here as this contract doesn't support nested delegate calls\\ncontract MultiSendCallOnly {\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation has to be uint8(0) in this version (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    /// @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\\n    ///         but reverts if a transaction tries to use a delegatecall.\\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n    function multiSend(bytes memory transactions) public payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                    case 0 {\\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\\n                    }\\n                    // This version does not allow delegatecalls\\n                    case 1 {\\n                        revert(0, 0)\\n                    }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb11f27129bb1cfc16e0cfb5056bd0fbb3b01de6294d75996ff2fac613dce1d63\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"contracts/TransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./interfaces/ITransactionManager.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./lib/LibERC20.sol\\\";\\nimport \\\"./lib/LibIterableMapping.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSendCallOnly.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract TransactionManager is ReentrancyGuard, ITransactionManager {\\n\\n    using LibIterableMapping for LibIterableMapping.IterableMapping;\\n\\n    // Mapping of router to balance specific to asset\\n    mapping(address => mapping(address => uint256)) public routerBalances;\\n\\n    /// @notice  Contains all the variable parts of a transaction, and a block\\n    ///          number to look up the rest of the data via events. The \\n    ///          variable parts of the transaction data cannot be signed in the \\n    ///          digest, since then the digest and signature would be different \\n    ///          for sending and receiving chains. Must be iterable so user can\\n    ///          always pull their pending transactions without knowing the \\n    ///          digest.\\n    LibIterableMapping.IterableMapping activeTransactions;\\n\\n    /// @dev The chain id of the contract, is passed in to avoid any evm issues\\n    uint24 public immutable chainId;\\n\\n    /// @dev Address of the deployed multisending helper contract\\n    address public immutable multisend;\\n\\n    // TODO: determine min timeout\\n    uint256 public constant MIN_TIMEOUT = 0;\\n\\n    constructor(address _multisend, uint24 _chainId) {\\n        multisend = _multisend;\\n        chainId = _chainId;\\n    }\\n\\n    /// @dev returns all active transactions for a given user\\n    function getActiveTransactionsByUser(address user) external view override returns (VariableTransactionData[] memory) {\\n      return activeTransactions.getTransactionsByUser(user);\\n    }\\n\\n    /// @param amount The amount of liquidity to add for the router\\n    /// @param assetId The address (or `address(0)` if native asset) of the\\n    ///                asset you're adding liquidity for\\n    function addLiquidity(uint256 amount, address assetId)\\n        external  \\n        payable \\n        override \\n        nonReentrant\\n    {\\n        // Validate correct amounts are transferred\\n        if (LibAsset.isEther(assetId)) {\\n            require(msg.value == amount, \\\"addLiquidity: VALUE_MISMATCH\\\");\\n        } else {\\n            require(msg.value == 0, \\\"addLiquidity: ETH_WITH_ERC_TRANSFER\\\");\\n            require(\\n                LibERC20.transferFrom(\\n                    assetId,\\n                    msg.sender,\\n                    address(this),\\n                    amount\\n                ),\\n                \\\"addLiquidity: ERC20_TRANSFER_FAILED\\\"\\n            );\\n        }\\n\\n        // Update the router balances\\n        routerBalances[msg.sender][assetId] += amount;\\n\\n        // Emit event\\n        emit LiquidityAdded(msg.sender, assetId, amount);\\n    }\\n\\n    function removeLiquidity(uint256 amount, address assetId, address payable recipient)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        // Check that the amount can be deducted for the router\\n        // TODO is this check worth the extra gas?\\n        require(routerBalances[msg.sender][assetId] >= amount, \\\"removeLiquidity: INSUFFICIENT_FUNDS\\\");\\n\\n        // Update router balances\\n        routerBalances[msg.sender][assetId] -= amount;\\n\\n        // Transfer from contract to router\\n        require(LibAsset.transferAsset(assetId, recipient, amount), \\\"removeLiquidity: TRANSFER_FAILED\\\");\\n\\n        // Emit event\\n        emit LiquidityRemoved(msg.sender, assetId, amount, recipient);\\n    }\\n\\n    function prepare(\\n        InvariantTransactionData calldata txData,\\n        uint256 amount,\\n        uint256 expiry\\n    ) external payable override nonReentrant returns (InvariantTransactionData memory) {\\n        // Make sure the expiry is greater than min\\n        require((expiry - block.timestamp) >= MIN_TIMEOUT, \\\"prepare: TIMEOUT_TOO_LOW\\\");\\n\\n        // Make sure the chains are different\\n        require(txData.sendingChainId != txData.receivingChainId, \\\"prepare: SAME_CHAINIDS\\\");\\n\\n        // Make sure the chains are relevant\\n        require(txData.sendingChainId == chainId || \\n            txData.receivingChainId == chainId, \\\"prepare: INVALID_CHAINIDS\\\");\\n\\n        // Sanity check: valid fallback\\n        require(txData.receivingAddress != address(0), \\\"prepare: INVALID_RECEIVING_ADDRESS\\\");\\n        \\n        // Make sure the hash is not a duplicate\\n        bytes32 digest = hashTransactionData(txData);\\n        require(!activeTransactions.digestExists(digest), \\\"prepare: DUPLICATE_DIGEST\\\");\\n\\n        // First determine if this is sender side or receiver side\\n        if (txData.sendingChainId == chainId) {\\n            // This is sender side prepare\\n\\n            // Validate correct amounts and transfer\\n            if (LibAsset.isEther(txData.sendingAssetId)) {\\n                require(msg.value == amount, \\\"prepare: VALUE_MISMATCH\\\");\\n            } else {\\n                require(msg.value == 0, \\\"prepare: ETH_WITH_ERC_TRANSFER\\\");\\n                require(\\n                    LibERC20.transferFrom(\\n                        txData.sendingAssetId,\\n                        msg.sender,\\n                        address(this),\\n                        amount\\n                    ),\\n                    \\\"prepare: ERC20_TRANSFER_FAILED\\\"\\n                );\\n            }\\n        } else {\\n            // This is receiver side prepare\\n\\n            // Check that the caller is the router\\n            require(msg.sender == txData.router, \\\"prepare: ROUTER_MISMATCH\\\");\\n            require(msg.value == 0, \\\"prepare: ETH_WITH_ROUTER_PREPARE\\\");\\n\\n            // Check that router has liquidity\\n            // TODO do we need explicit check vs implicit from safemath below?\\n            require(routerBalances[txData.router][txData.receivingAssetId] >= amount, \\\"prepare: INSUFFICIENT_LIQUIDITY\\\");\\n\\n            // NOTE: Timeout and amounts should have been decremented offchain\\n\\n            // NOTE: after some consideration, it feels like it's better to leave amount/fee\\n            // validation *outside* the contracts as we likely want the logic to be flexible\\n\\n            // Pull funds from router balance (use msg.sender here to mitigate 3rd party attack)\\n\\n            // What would happen if some router tried to swoop in and steal another router's spot?\\n            // - 3rd party router could EITHER use original txData or replace txData.router with itself\\n            // - if original txData, 3rd party router would basically be paying for original router\\n            // - if relaced router address, user sig on digest would not unlock sender side\\n            routerBalances[txData.router][txData.receivingAssetId] -= amount;\\n        }\\n\\n        // Store the transaction variants\\n        activeTransactions.addTransaction(\\n          VariableTransactionData({ amount: amount, expiry: expiry, digest: digest, user: txData.user, blockNumber: block.number })\\n        );\\n\\n        // Emit event\\n        emit TransactionPrepared(txData, amount, expiry, block.number, msg.sender);\\n        return txData;\\n    }\\n\\n    function fulfill(\\n        InvariantTransactionData calldata txData,\\n        uint256 relayerFee,\\n        bytes calldata signature // signature on fee + digest\\n    ) external override nonReentrant returns (InvariantTransactionData memory) {\\n        // Make sure params match against stored data\\n        // Also checks that there is an active transfer here\\n        // Also checks that sender or receiver chainID is this chainId (bc we \\n        // checked it previously)\\n        bytes32 digest = hashTransactionData(txData);\\n\\n        // Retrieving this will revert if the record does not exist by the\\n        // digest (which asserts all but tx.amount, tx.expiry)\\n        VariableTransactionData memory record = activeTransactions.getTransactionByDigest(digest);\\n\\n        require(record.expiry > block.timestamp, \\\"fulfill: EXPIRED\\\");\\n\\n        // Validate signature\\n        require(recoverFulfillSignature(txData, relayerFee, signature) == txData.user, \\\"fulfill: INVALID_SIGNATURE\\\");\\n\\n        // Sanity check: fee < amount\\n        // TODO: Do we need this check? Safemath would catch it below\\n        require(relayerFee < record.amount, \\\"fulfill: INVALID_RELAYER_FEE\\\");\\n\\n        // Remove the active transaction\\n        activeTransactions.removeTransaction(digest);\\n    \\n        if (txData.sendingChainId == chainId) {\\n            // Complete tx to router\\n            // NOTE: there is no fee taken on the sending side for the relayer\\n            routerBalances[txData.router][txData.sendingAssetId] += record.amount;\\n        } else {\\n            // Complete tx to user\\n            // Get the amount to send\\n            uint256 toSend = record.amount - relayerFee;\\n\\n            // Send the relayer the fee\\n            if (relayerFee > 0) {\\n                require(LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee), \\\"fulfill: FEE_TRANSFER_FAILED\\\");\\n            }\\n\\n            if (keccak256(txData.callData) == keccak256(new bytes(0))) {\\n                // No external calls, send directly to receiving address\\n                require(LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend), \\\"fulfill: TRANSFER_FAILED\\\");\\n            } else {\\n                // Handle external calls with a fallback to the receiving\\n                // address\\n                // TODO: This would allow us to execute an arbitrary transfer to drain the contracts\\n                // We'll need to change this to use vector pattern with *explicit* amount.\\n                try MultiSendCallOnly(multisend).multiSend(txData.callData) {\\n                } catch {\\n                  require(LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend), \\\"fulfill: TRANSFER_FAILED\\\");\\n                }\\n            }\\n        }\\n\\n        // Emit event\\n        emit TransactionFulfilled(txData, record.amount, record.expiry, record.blockNumber, relayerFee, signature, msg.sender);\\n\\n        return txData;\\n    }\\n\\n    // Tx can be \\\"collaboratively\\\" cancelled by the receiver at any time and by the sender after expiry\\n    function cancel(\\n        InvariantTransactionData calldata txData,\\n        bytes calldata signature\\n    ) external override nonReentrant returns (InvariantTransactionData memory) {     \\n        // Make sure params match against stored data\\n        // Also checks that there is an active transfer here\\n        // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\\n        bytes32 digest = hashTransactionData(txData);\\n        \\n        // Retrieving this will revert if the record does not exist by the\\n        // digest (which asserts all but tx.amount, tx.expiry)\\n        VariableTransactionData memory record = activeTransactions.getTransactionByDigest(digest);\\n\\n        if (txData.sendingChainId == chainId) {\\n            // Sender side --> funds go back to user\\n            if (record.expiry >= block.timestamp) {\\n                // Timeout has not expired and tx may only be cancelled by router\\n                require(msg.sender == txData.router, \\\"cancel: ROUTER_MUST_CANCEL\\\");\\n            }\\n            // Return to user\\n            require(LibAsset.transferAsset(txData.sendingAssetId, payable(txData.user), record.amount), \\\"cancel: TRANSFER_FAILED\\\");\\n\\n        } else {\\n            // Receiver side --> funds go back to router\\n            if (record.expiry >= block.timestamp) {\\n                // Timeout has not expired and tx may only be cancelled by user\\n                // Validate signature\\n                require(recoverCancelSignature(txData, signature) == txData.user, \\\"cancel: INVALID_SIGNATURE\\\");\\n            }\\n            // Return to router\\n            routerBalances[txData.router][txData.receivingAssetId] += record.amount;\\n        }\\n\\n        // Remove the active transaction\\n        activeTransactions.removeTransaction(digest);\\n\\n        // Emit event\\n        emit TransactionCancelled(txData, record.amount, record.expiry, record.blockNumber, msg.sender);\\n\\n        // Return\\n        return txData;\\n    }\\n\\n    // Private functions\\n    function recoverFulfillSignature(\\n      InvariantTransactionData calldata txData,\\n      uint256 relayerFee,\\n      bytes calldata signature\\n    ) internal pure returns (address) {\\n      // Create the digest\\n      bytes32 txDigest = hashTransactionData(txData);\\n\\n      // Create the signed payload\\n      SignedFulfillData memory payload = SignedFulfillData({\\n        txDigest: txDigest,\\n        relayerFee: relayerFee\\n      });\\n\\n      bytes32 signed = keccak256(abi.encode(payload));\\n      // Recover\\n      return ECDSA.recover(ECDSA.toEthSignedMessageHash(signed), signature);\\n    }\\n\\n    function recoverCancelSignature(\\n      InvariantTransactionData calldata txData,\\n      bytes calldata signature\\n    ) internal pure returns (address) {\\n      // Create the digest\\n      bytes32 txDigest = hashTransactionData(txData);\\n\\n      // Create the signed payload\\n      SignedCancelData memory payload = SignedCancelData({\\n        txDigest: txDigest,\\n        cancel: \\\"cancel\\\"\\n      });\\n\\n      // Recover\\n      bytes32 signed = keccak256(abi.encode(payload));\\n      // Recover\\n      return ECDSA.recover(ECDSA.toEthSignedMessageHash(signed), signature);\\n    }\\n\\n    function hashTransactionData(InvariantTransactionData calldata txData)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        InvariantTransactionData memory data = InvariantTransactionData({\\n          user: txData.user,\\n          router: txData.router,\\n          sendingAssetId: txData.sendingAssetId,\\n          receivingAssetId: txData.receivingAssetId,\\n          sendingChainId: txData.sendingChainId,\\n          receivingChainId: txData.receivingChainId,\\n          receivingAddress: txData.receivingAddress,\\n          callData: txData.callData,\\n          transactionId: txData.transactionId\\n        });\\n        return keccak256(abi.encode(data));\\n    }\\n}\",\"keccak256\":\"0x90a21310b8863c8eccfc814987320ec26c7cdf7cdefbad09b49ec7e7f3faf2ec\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\n\\nstruct VariableTransactionData {\\n  address user;\\n  uint256 amount;\\n  uint256 expiry;\\n  uint256 blockNumber;\\n  bytes32 digest;\\n}\\n\\ninterface ITransactionManager {\\n  // Structs\\n  // TODO: Add bid data if needed?\\n  // TODO: make this structure invariant *only* (consolidate with below)\\n  // Then, we can pass in amount/expiry explicitly and use only the record values\\n  // which will reduce duplication/confusion\\n  struct InvariantTransactionData {\\n    address user;\\n    address router;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address receivingAddress;\\n    uint24 sendingChainId;\\n    uint24 receivingChainId;\\n    bytes callData;\\n    bytes32 transactionId;\\n  }\\n\\n  struct SignedCancelData {\\n    bytes32 txDigest;\\n    string cancel;\\n  }\\n\\n  struct SignedFulfillData {\\n    bytes32 txDigest;\\n    uint256 relayerFee;\\n  }\\n\\n  // Liquidity events\\n  event LiquidityAdded(\\n    address router,\\n    address assetId,\\n    uint256 amount\\n  );\\n\\n  event LiquidityRemoved(\\n    address router,\\n    address assetId,\\n    uint256 amount,\\n    address recipient\\n  );\\n\\n  // Transaction events\\n  // TODO: structure\\n  event TransactionPrepared(\\n    InvariantTransactionData txData,\\n    uint256 amount,\\n    uint256 expiry,\\n    uint256 blockNumber,\\n    address caller\\n  );\\n\\n  event TransactionFulfilled(\\n    InvariantTransactionData txData,\\n    uint256 amount,\\n    uint256 expiry,\\n    uint256 blockNumber,\\n    uint256 relayerFee,\\n    bytes signature,\\n    address caller\\n  );\\n\\n  event TransactionCancelled(\\n    InvariantTransactionData txData,\\n    uint256 amount,\\n    uint256 expiry,\\n    uint256 blockNumber,\\n    address caller\\n  );\\n\\n  // Getters\\n  function getActiveTransactionsByUser(address user) external view returns (VariableTransactionData[] memory);\\n\\n  // Router only methods\\n  function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n  function removeLiquidity(uint256 amount, address assetId, address payable recipient) external;\\n\\n  // Transaction methods\\n  function prepare(InvariantTransactionData calldata txData, uint256 amount, uint256 expiry) external payable returns (InvariantTransactionData memory);\\n\\n  function fulfill(InvariantTransactionData calldata txData, uint256 relayerFee, bytes calldata signature) external returns (InvariantTransactionData memory);\\n\\n  function cancel(InvariantTransactionData calldata txData, bytes calldata signature) external returns (InvariantTransactionData memory);\\n}\",\"keccak256\":\"0x3e9a5e347058949200e9ef2e9b7777ad28fba23f24e47cdd2cfca169c6ea8fc9\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./LibERC20.sol\\\";\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/// @title LibAsset\\n/// @author Connext <support@connext.network>\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of in-channel assets. It is designed to safely handle all asset\\n///         transfers out of channel in the event of an onchain dispute. Also\\n///         safely handles ERC20 transfers that may be non-compliant\\nlibrary LibAsset {\\n    address constant ETHER_ASSETID = address(0);\\n\\n    function isEther(address assetId) internal pure returns (bool) {\\n        return assetId == ETHER_ASSETID;\\n    }\\n\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return\\n            isEther(assetId)\\n                ? address(this).balance\\n                : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    function transferEther(address payable recipient, uint256 amount)\\n        internal\\n        returns (bool)\\n    {\\n        (bool success, bytes memory returnData) =\\n            recipient.call{value: amount}(\\\"\\\");\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return true;\\n    }\\n\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return LibERC20.transfer(assetId, recipient, amount);\\n    }\\n\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\n    // both standard-compliant ones as well as tokens that exhibit the\\n    // missing-return-value bug.\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            isEther(assetId)\\n                ? transferEther(recipient, amount)\\n                : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4a90c857d2ed06aa0f5af822b63736d4675ddaa03feff7bfef8dad4108e5ebf7\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title LibERC20\\n/// @author Connext <support@connext.network>\\n/// @notice This library provides several functions to safely handle\\n///         noncompliant tokens (i.e. does not return a boolean from\\n///         the transfer function)\\n\\nlibrary LibERC20 {\\n    function wrapCall(address assetId, bytes memory callData)\\n        internal\\n        returns (bool)\\n    {\\n        require(Address.isContract(assetId), \\\"LibERC20: NO_CODE\\\");\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\n    }\\n\\n    function approve(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"approve(address,uint256)\\\",\\n                    spender,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transferFrom(\\n        address assetId,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\",\\n                    sender,\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transfer(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb18bb79acb4608a8552ba819d443c727ee5bcc3fac214f55412a91c21491c08e\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibIterableMapping.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"../interfaces/ITransactionManager.sol\\\";\\n\\n/// @title LibIterableMapping\\n/// @author Connext <support@connext.network>\\n/// @notice This library provides an efficient way to store and retrieve\\n///         VariableTransactionData. This contract is used to manage the \\n///         transactions stored by `TransactionManager.sol`\\nlibrary LibIterableMapping {\\n    struct VariableTransactionDataWithIndex {\\n        VariableTransactionData transaction;\\n        uint256 index;\\n    }\\n\\n    struct IterableMapping {\\n        mapping(bytes32 => VariableTransactionDataWithIndex) transactions;\\n        bytes32[] digests;\\n    }\\n\\n    function digestEqual(bytes32 s, bytes32 t)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return s == t;\\n    }\\n\\n    function isEmptyString(bytes32 s) internal pure returns (bool) {\\n        return digestEqual(s, bytes32(0));\\n    }\\n\\n    function digestExists(IterableMapping storage self, bytes32 digest)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return\\n            !isEmptyString(digest) &&\\n            self.digests.length != 0 &&\\n            digestEqual(self.digests[self.transactions[digest].index], digest);\\n    }\\n\\n    function length(IterableMapping storage self)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return self.digests.length;\\n    }\\n\\n    function getTransactionByDigest(\\n        IterableMapping storage self,\\n        bytes32 digest\\n    ) internal view returns (VariableTransactionData memory) {\\n        require(digestExists(self, digest), \\\"LibIterableMapping: DIGEST_NOT_FOUND\\\");\\n        return self.transactions[digest].transaction;\\n    }\\n\\n    function getTransactionByIndex(\\n        IterableMapping storage self,\\n        uint256 index\\n    ) internal view returns (VariableTransactionData memory) {\\n        require(index < self.digests.length, \\\"LibIterableMapping: INVALID_INDEX\\\");\\n        return self.transactions[self.digests[index]].transaction;\\n    }\\n\\n    // DO NOT USE THIS IN A WRITE OPERATION\\n    // Two for loops make this very expensive\\n    function getTransactionsByUser(\\n        IterableMapping storage self,\\n        address user\\n    ) internal view returns (VariableTransactionData[] memory) {\\n        uint256 l = self.digests.length;\\n\\n        // First determine how many user txs there are for array length\\n        uint256 userTxs = 0;\\n        for (uint256 i = 0; i < l; i++) {\\n            if (self.transactions[self.digests[i]].transaction.user == user) {\\n              userTxs += 1;\\n            }\\n        }\\n\\n        // Add each user tx to array at index\\n        VariableTransactionData[] memory userTransactions = new VariableTransactionData[](userTxs);\\n        uint256 idx = 0;\\n        for (uint256 i = 0; i < l; i++) {\\n            if (self.transactions[self.digests[i]].transaction.user == user) {\\n              userTransactions[idx] = self.transactions[self.digests[i]].transaction;\\n              idx += 1;\\n            }\\n        }\\n\\n        return userTransactions;\\n    }\\n\\n    function getTransactions(IterableMapping storage self)\\n        internal\\n        view\\n        returns (VariableTransactionData[] memory)\\n    {\\n        uint256 l = self.digests.length;\\n        VariableTransactionData[] memory transactions = new VariableTransactionData[](l);\\n        for (uint256 i = 0; i < l; i++) {\\n            transactions[i] = self.transactions[self.digests[i]].transaction;\\n        }\\n        return transactions;\\n    }\\n\\n    function addTransaction(\\n        IterableMapping storage self,\\n        VariableTransactionData memory transaction\\n    ) internal {\\n        bytes32 digest = transaction.digest;\\n        require(!isEmptyString(digest), \\\"LibIterableMapping: EMPTY_DIGEST\\\");\\n        require(!digestExists(self, digest), \\\"LibIterableMapping: DIGEST_ALREADY_ADDED\\\");\\n        self.transactions[digest] = VariableTransactionDataWithIndex({\\n            transaction: transaction,\\n            index: self.digests.length\\n        });\\n        self.digests.push(digest);\\n    }\\n\\n    function removeTransaction(\\n        IterableMapping storage self,\\n        bytes32 digest\\n    ) internal {\\n        require(!isEmptyString(digest), \\\"LibIterableMapping: EMPTY_DIGEST\\\");\\n        require(digestExists(self, digest), \\\"LibIterableMapping: DIGEST_NOT_FOUND\\\");\\n        uint256 index = self.transactions[digest].index;\\n        bytes32 lastDigest = self.digests[self.digests.length - 1];\\n        self.transactions[lastDigest].index = index;\\n        self.digests[index] = lastDigest;\\n        delete self.transactions[digest];\\n        self.digests.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xe66987728d26e0849a54ac47a9083f0affe9a3dd2eac81044d48f2cf7ea4a1b1\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\n/// @title LibUtils\\n/// @author Connext <support@connext.network>\\n/// @notice Contains a helper to revert if a call was not successfully\\n///         made\\nlibrary LibUtils {\\n    // If success is false, reverts and passes on the revert string.\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\n        internal\\n        pure\\n    {\\n        if (!success) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0edf57f77c196ec737ae6fb77ddc5e3d99ab3fb2a411b1e4a0ebc77580785e13\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80639a8a0592116100595780639a8a059214610196578063c159c798146101c1578063c95f9d0e146101fe578063ef855ea11461021a578063f31abcc41461025757610091565b806325650c7414610096578063294402cc146100c65780633d1025a3146100f157806341258b5c1461012e578063543ad1df1461016b575b600080fd5b6100b060048036038101906100ab9190612edc565b610280565b6040516100bd919061405c565b60405180910390f35b3480156100d257600080fd5b506100db6109a9565b6040516100e89190613a18565b60405180910390f35b3480156100fd57600080fd5b5061011860048036038101906101139190612de8565b6109cd565b604051610125919061405c565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190612d83565b610d5d565b60405161016291906140d6565b60405180910390f35b34801561017757600080fd5b50610180610d82565b60405161018d91906140d6565b60405180910390f35b3480156101a257600080fd5b506101ab610d87565b6040516101b891906140bb565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190612d5a565b610dab565b6040516101f59190613ad8565b60405180910390f35b61021860048036038101906102139190612f6c565b610dc8565b005b34801561022657600080fd5b50610241600480360381019061023c9190612e58565b610fd4565b60405161024e919061405c565b60405180910390f35b34801561026357600080fd5b5061027e60048036038101906102799190612fa8565b611590565b005b610288612a0b565b600260005414156102ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c590613f43565b60405180910390fd5b6002600081905550600042836102e49190614339565b1015610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031c90613bc3565b60405180910390fd5b8360c00160208101906103389190612f43565b62ffffff168460a00160208101906103509190612f43565b62ffffff161415610396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038d90613cc3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168460a00160208101906103cf9190612f43565b62ffffff16148061041b57507f000000000000000000000000000000000000000000000000000000000000000062ffffff168460c00160208101906104149190612f43565b62ffffff16145b61045a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045190613c43565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168460800160208101906104859190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1614156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390613d03565b60405180910390fd5b60006104e7856117c4565b90506104fd81600261198590919063ffffffff16565b1561053d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053490613dc3565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168560a00160208101906105769190612f43565b62ffffff16141561068e5761059c8560400160208101906105979190612d5a565b611a1d565b156105e8578334146105e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105da90613d63565b60405180910390fd5b610689565b6000341461062b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062290613e03565b60405180910390fd5b6106498560400160208101906106419190612d5a565b333087611a55565b610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90613b83565b60405180910390fd5b5b6108ec565b8460200160208101906106a19190612d5a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070590613ba3565b60405180910390fd5b60003414610751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074890613e63565b60405180910390fd5b83600160008760200160208101906107699190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008760600160208101906107b89190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082b90613ee3565b60405180910390fd5b836001600087602001602081019061084c9190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087606001602081019061089b9190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108e49190614339565b925050819055505b61094e6040518060a0016040528087600001602081019061090d9190612d5a565b73ffffffffffffffffffffffffffffffffffffffff168152602001868152602001858152602001438152602001838152506002611afc90919063ffffffff16565b7fc862246df76fd76d8adfb93ba5d841b82e17d3b0ff766cfd9e8cfb4573fe142d8585854333604051610985959493929190613f83565b60405180910390a184610997906143ff565b91505060016000819055509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6109d5612a0b565b60026000541415610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1290613f43565b60405180910390fd5b60026000819055506000610a2e856117c4565b90506000610a46826002611c8090919063ffffffff16565b90507f000000000000000000000000000000000000000000000000000000000000000062ffffff168660a0016020810190610a819190612f43565b62ffffff161415610b8f5742816040015110610b1857856020016020810190610aaa9190612d5a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0e90613ec3565b60405180910390fd5b5b610b4b866040016020810190610b2e9190612d5a565b876000016020810190610b419190612d5a565b8360200151611d7a565b610b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8190613c63565b60405180910390fd5b610ce1565b42816040015110610c2557856000016020810190610bad9190612d5a565b73ffffffffffffffffffffffffffffffffffffffff16610bce878787611dad565b73ffffffffffffffffffffffffffffffffffffffff1614610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90613d43565b60405180910390fd5b5b806020015160016000886020016020810190610c419190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000886060016020810190610c909190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cd991906142e3565b925050819055505b610cf5826002611e9690919063ffffffff16565b7f0ecffec899d722e124b5e137078c404cff9257ddc5dff56437b2127e8eba60218682602001518360400151846060015133604051610d38959493929190613f83565b60405180910390a185610d4a906143ff565b9250505060016000819055509392505050565b6001602052816000526040600020602052806000526040600020600091509150505481565b600081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060610dc18260026120cf90919063ffffffff16565b9050919050565b60026000541415610e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0590613f43565b60405180910390fd5b6002600081905550610e1f81611a1d565b15610e6b57813414610e66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5d90613f23565b60405180910390fd5b610efa565b60003414610eae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea590613e83565b60405180910390fd5b610eba81333085611a55565b610ef9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef090613c23565b60405180910390fd5b5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f8691906142e3565b925050819055507f9d278c56ba6dc86a12eefe6b43112bd6e06648eb4ec0b950ee2d783d40e2acb4338284604051610fc093929190613a33565b60405180910390a160016000819055505050565b610fdc612a0b565b60026000541415611022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101990613f43565b60405180910390fd5b60026000819055506000611035866117c4565b9050600061104d826002611c8090919063ffffffff16565b905042816040015111611095576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108c90613e23565b60405180910390fd5b8660000160208101906110a89190612d5a565b73ffffffffffffffffffffffffffffffffffffffff166110ca8888888861245d565b73ffffffffffffffffffffffffffffffffffffffff1614611120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111790613f03565b60405180910390fd5b80602001518610611166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115d90613c03565b60405180910390fd5b61117a826002611e9690919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000062ffffff168760a00160208101906111b39190612f43565b62ffffff16141561127e578060200151600160008960200160208101906111da9190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008960400160208101906112299190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127291906142e3565b92505081905550611521565b60008682602001516112909190614339565b905060008711156112f8576112b88860600160208101906112b19190612d5a565b3389611d7a565b6112f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ee90613d23565b60405180910390fd5b5b600067ffffffffffffffff811115611339577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561136b5781602001600182028036833780820191505090505b5080519060200120888060e0019061138391906140f1565b6040516113919291906139ad565b60405180910390201415611412576113ce8860600160208101906113b59190612d5a565b8960800160208101906113c89190612d5a565b83611d7a565b61140d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140490613f63565b60405180910390fd5b61151f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d80ff0a898060e0019061145e91906140f1565b6040518363ffffffff1660e01b815260040161147b929190613b3f565b600060405180830381600087803b15801561149557600080fd5b505af19250505080156114a6575060015b61151d576114d98860600160208101906114c09190612d5a565b8960800160208101906114d39190612d5a565b83611d7a565b611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f90613f63565b60405180910390fd5b61151e565b5b5b505b7fccb3211af2fdc98e056f05ef5472e958ee23bc2c238d7d1c12f8a8fde2f19e9e878260200151836040015184606001518a8a8a3360405161156a989796959493929190613fdd565b60405180910390a18661157c906143ff565b925050506001600081905550949350505050565b600260005414156115d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cd90613f43565b60405180910390fd5b600260008190555082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561169d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169490613e43565b60405180910390fd5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117299190614339565b9250508190555061173b828285611d7a565b61177a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177190613d83565b60405180910390fd5b7f7da12116be8cb7af4b2d9e9b4a2ca2c3a3243ddd6fd3a94411902367b8eed568338385846040516117af9493929190613a6a565b60405180910390a16001600081905550505050565b6000806040518061012001604052808460000160208101906117e69190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460200160208101906118149190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460400160208101906118429190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460600160208101906118709190612d5a565b73ffffffffffffffffffffffffffffffffffffffff16815260200184608001602081019061189e9190612d5a565b73ffffffffffffffffffffffffffffffffffffffff1681526020018460a00160208101906118cc9190612f43565b62ffffff1681526020018460c00160208101906118e99190612f43565b62ffffff168152602001848060e0019061190391906140f1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001846101000135815250905080604051602001611967919061405c565b60405160208183030381529060405280519060200120915050919050565b600061199082612512565b1580156119a557506000836001018054905014155b8015611a155750611a14836001018460000160008581526020019081526020016000206005015481548110611a03577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015483612528565b5b905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000611af285858585604051602401611a7093929190613a33565b6040516020818303038152906040527f23b872dd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612535565b9050949350505050565b600081608001519050611b0e81612512565b15611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4590613ce3565b60405180910390fd5b611b588382611985565b15611b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8f90613ea3565b60405180910390fd5b6040518060400160405280838152602001846001018054905081525083600001600083815260200190815260200160002060008201518160000160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015550506020820151816005015590505082600101819080600181540180825580915050600190039060005260206000200160009091909190915055505050565b611c88612ad2565b611c928383611985565b611cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc890613c83565b60405180910390fd5b8260000160008381526020019081526020016000206000016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905092915050565b6000611d8584611a1d565b611d9957611d94848484612622565b611da4565b611da38383612638565b5b90509392505050565b600080611db9856117c4565b9050600060405180604001604052808381526020016040518060400160405280600681526020017f63616e63656c00000000000000000000000000000000000000000000000000008152508152509050600081604051602001611e1c919061407e565b604051602081830303815290604052805190602001209050611e8a611e40826126be565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126ee565b93505050509392505050565b611e9f81612512565b15611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed690613ce3565b60405180910390fd5b611ee98282611985565b611f28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1f90613c83565b60405180910390fd5b600082600001600083815260200190815260200160002060050154905060008360010160018560010180549050611f5f9190614339565b81548110611f96577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050818460000160008381526020019081526020016000206005018190555080846001018381548110611ffd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508360000160008481526020019081526020016000206000808201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090556004820160009055505060058201600090555050836001018054806120b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60606000836001018054905090506000805b828110156121c1578473ffffffffffffffffffffffffffffffffffffffff16866000016000886001018481548110612142577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156121ae576001826121ab91906142e3565b91505b80806121b9906144a9565b9150506120e1565b5060008167ffffffffffffffff811115612204577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561223d57816020015b61222a612ad2565b8152602001906001900390816122225790505b5090506000805b8481101561244f578673ffffffffffffffffffffffffffffffffffffffff168860000160008a60010184815481106122a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154815260200190815260200160002060000160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561243c57876000016000896001018381548110612343577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015481526020019081526020016000206000016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152602001600482015481525050838381518110612421577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525060018261243991906142e3565b91505b8080612447906144a9565b915050612244565b508194505050505092915050565b600080612469866117c4565b90506000604051806040016040528083815260200187815250905060008160405160200161249791906140a0565b6040516020818303038152906040528051906020012090506125056124bb826126be565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506126ee565b9350505050949350505050565b6000612521826000801b612528565b9050919050565b6000818314905092915050565b6000612540836127b8565b61257f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257690613de3565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516125a791906139c6565b6000604051808303816000865af19150503d80600081146125e4576040519150601f19603f3d011682016040523d82523d6000602084013e6125e9565b606091505b50915091506125f882826127cb565b6000815114806126185750808060200190518101906126179190612dbf565b5b9250505092915050565b600061262f8484846127dc565b90509392505050565b60008060008473ffffffffffffffffffffffffffffffffffffffff168460405161266190613a03565b60006040518083038185875af1925050503d806000811461269e576040519150601f19603f3d011682016040523d82523d6000602084013e6126a3565b606091505b50915091506126b282826127cb565b60019250505092915050565b6000816040516020016126d191906139dd565b604051602081830303815290604052805190602001209050919050565b60008060008060418551141561271b576020850151925060408501519150606085015160001a90506127a1565b604085511415612765576040850151602086015193507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81169250601b8160ff1c019150506127a0565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279790613be3565b60405180910390fd5b5b6127ad86828585612880565b935050505092915050565b600080823b905060008111915050919050565b816127d857805160208201fd5b5050565b60006128778484846040516024016127f5929190613aaf565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612535565b90509392505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c11156128e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128df90613ca3565b60405180910390fd5b601b8460ff1614806128fd5750601c8460ff16145b61293c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293390613da3565b60405180910390fd5b6000600186868686604051600081526020016040526040516129619493929190613afa565b6020604051602081039080840390855afa158015612983573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f690613b63565b60405180910390fd5b80915050949350505050565b604051806101200160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600062ffffff168152602001600062ffffff16815260200160608152602001600080191681525090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600080191681525090565b6000612b2d612b288461416d565b614148565b905082815260208101848484011115612b4557600080fd5b612b50848285614436565b509392505050565b600081359050612b6781614c10565b92915050565b600081359050612b7c81614c27565b92915050565b600081519050612b9181614c3e565b92915050565b600081359050612ba681614c55565b92915050565b60008083601f840112612bbe57600080fd5b8235905067ffffffffffffffff811115612bd757600080fd5b602083019150836001820283011115612bef57600080fd5b9250929050565b600082601f830112612c0757600080fd5b8135612c17848260208601612b1a565b91505092915050565b60006101208284031215612c3357600080fd5b81905092915050565b60006101208284031215612c4f57600080fd5b612c5a610120614148565b90506000612c6a84828501612b58565b6000830152506020612c7e84828501612b58565b6020830152506040612c9284828501612b58565b6040830152506060612ca684828501612b58565b6060830152506080612cba84828501612b58565b60808301525060a0612cce84828501612d30565b60a08301525060c0612ce284828501612d30565b60c08301525060e082013567ffffffffffffffff811115612d0257600080fd5b612d0e84828501612bf6565b60e083015250610100612d2384828501612b97565b6101008301525092915050565b600081359050612d3f81614c6c565b92915050565b600081359050612d5481614c83565b92915050565b600060208284031215612d6c57600080fd5b6000612d7a84828501612b58565b91505092915050565b60008060408385031215612d9657600080fd5b6000612da485828601612b58565b9250506020612db585828601612b58565b9150509250929050565b600060208284031215612dd157600080fd5b6000612ddf84828501612b82565b91505092915050565b600080600060408486031215612dfd57600080fd5b600084013567ffffffffffffffff811115612e1757600080fd5b612e2386828701612c20565b935050602084013567ffffffffffffffff811115612e4057600080fd5b612e4c86828701612bac565b92509250509250925092565b60008060008060608587031215612e6e57600080fd5b600085013567ffffffffffffffff811115612e8857600080fd5b612e9487828801612c20565b9450506020612ea587828801612d45565b935050604085013567ffffffffffffffff811115612ec257600080fd5b612ece87828801612bac565b925092505092959194509250565b600080600060608486031215612ef157600080fd5b600084013567ffffffffffffffff811115612f0b57600080fd5b612f1786828701612c20565b9350506020612f2886828701612d45565b9250506040612f3986828701612d45565b9150509250925092565b600060208284031215612f5557600080fd5b6000612f6384828501612d30565b91505092915050565b60008060408385031215612f7f57600080fd5b6000612f8d85828601612d45565b9250506020612f9e85828601612b58565b9150509250929050565b600080600060608486031215612fbd57600080fd5b6000612fcb86828701612d45565b9350506020612fdc86828701612b58565b9250506040612fed86828701612b6d565b9150509250925092565b600061300383836138fa565b60a08301905092915050565b613018816143ed565b82525050565b6130278161436d565b82525050565b6130368161436d565b82525050565b6000613047826141ae565b61305181856141dc565b935061305c8361419e565b8060005b8381101561308d5781516130748882612ff7565b975061307f836141cf565b925050600181019050613060565b5085935050505092915050565b6130a38161439d565b82525050565b6130b28161439d565b82525050565b6130c96130c48261439d565b6144f2565b82525050565b60006130db83856141ed565b93506130e8838584614436565b6130f18361455a565b840190509392505050565b600061310883856141fe565b9350613115838584614436565b61311e8361455a565b840190509392505050565b6000613135838561420f565b9350613142838584614436565b82840190509392505050565b6000613159826141b9565b61316381856141ed565b9350613173818560208601614445565b61317c8161455a565b840191505092915050565b6000613192826141b9565b61319c818561420f565b93506131ac818560208601614445565b80840191505092915050565b60006131c3826141c4565b6131cd818561421a565b93506131dd818560208601614445565b6131e68161455a565b840191505092915050565b60006131fe60188361422b565b91506132098261456b565b602082019050919050565b6000613221601e8361422b565b915061322c82614594565b602082019050919050565b600061324460188361422b565b915061324f826145bd565b602082019050919050565b600061326760188361422b565b9150613272826145e6565b602082019050919050565b600061328a601f8361422b565b91506132958261460f565b602082019050919050565b60006132ad601c8361423c565b91506132b882614638565b601c82019050919050565b60006132d0601c8361422b565b91506132db82614661565b602082019050919050565b60006132f360238361422b565b91506132fe8261468a565b604082019050919050565b600061331660198361422b565b9150613321826146d9565b602082019050919050565b600061333960178361422b565b915061334482614702565b602082019050919050565b600061335c60248361422b565b91506133678261472b565b604082019050919050565b600061337f60228361422b565b915061338a8261477a565b604082019050919050565b60006133a260168361422b565b91506133ad826147c9565b602082019050919050565b60006133c560208361422b565b91506133d0826147f2565b602082019050919050565b60006133e860228361422b565b91506133f38261481b565b604082019050919050565b600061340b601c8361422b565b91506134168261486a565b602082019050919050565b600061342e60198361422b565b915061343982614893565b602082019050919050565b600061345160178361422b565b915061345c826148bc565b602082019050919050565b600061347460208361422b565b915061347f826148e5565b602082019050919050565b600061349760228361422b565b91506134a28261490e565b604082019050919050565b60006134ba60198361422b565b91506134c58261495d565b602082019050919050565b60006134dd60118361422b565b91506134e882614986565b602082019050919050565b6000613500601e8361422b565b915061350b826149af565b602082019050919050565b600061352360108361422b565b915061352e826149d8565b602082019050919050565b600061354660238361422b565b915061355182614a01565b604082019050919050565b600061356960208361422b565b915061357482614a50565b602082019050919050565b600061358c60238361422b565b915061359782614a79565b604082019050919050565b60006135af60288361422b565b91506135ba82614ac8565b604082019050919050565b60006135d260008361420f565b91506135dd82614b17565b600082019050919050565b60006135f5601a8361422b565b915061360082614b1a565b602082019050919050565b6000613618601f8361422b565b915061362382614b43565b602082019050919050565b600061363b601a8361422b565b915061364682614b6c565b602082019050919050565b600061365e601c8361422b565b915061366982614b95565b602082019050919050565b6000613681601f8361422b565b915061368c82614bbe565b602082019050919050565b60006136a460188361422b565b91506136af82614be7565b602082019050919050565b600061012083016136ce6000840184614247565b6136db600086018261301e565b506136e96020840184614247565b6136f6602086018261301e565b506137046040840184614247565b613711604086018261301e565b5061371f6060840184614247565b61372c606086018261301e565b5061373a6080840184614247565b613747608086018261301e565b5061375560a08401846142cc565b61376260a0860182613962565b5061377060c08401846142cc565b61377d60c0860182613962565b5061378b60e0840184614275565b85830360e087015261379e8382846130cf565b925050506137b061010084018461425e565b6137be61010086018261309a565b508091505092915050565b6000610120830160008301516137e2600086018261301e565b5060208301516137f5602086018261301e565b506040830151613808604086018261301e565b50606083015161381b606086018261301e565b50608083015161382e608086018261301e565b5060a083015161384160a0860182613962565b5060c083015161385460c0860182613962565b5060e083015184820360e086015261386c828261314e565b91505061010083015161388361010086018261309a565b508091505092915050565b60006040830160008301516138a6600086018261309a565b50602083015184820360208601526138be82826131b8565b9150508091505092915050565b6040820160008201516138e1600085018261309a565b5060208201516138f46020850182613980565b50505050565b60a082016000820151613910600085018261301e565b5060208201516139236020850182613980565b5060408201516139366040850182613980565b5060608201516139496060850182613980565b50608082015161395c608085018261309a565b50505050565b61396b816143c7565b82525050565b61397a816143c7565b82525050565b613989816143d6565b82525050565b613998816143d6565b82525050565b6139a7816143e0565b82525050565b60006139ba828486613129565b91508190509392505050565b60006139d28284613187565b915081905092915050565b60006139e8826132a0565b91506139f482846130b8565b60208201915081905092915050565b6000613a0e826135c5565b9150819050919050565b6000602082019050613a2d600083018461302d565b92915050565b6000606082019050613a48600083018661302d565b613a55602083018561302d565b613a62604083018461398f565b949350505050565b6000608082019050613a7f600083018761302d565b613a8c602083018661302d565b613a99604083018561398f565b613aa6606083018461300f565b95945050505050565b6000604082019050613ac4600083018561302d565b613ad1602083018461398f565b9392505050565b60006020820190508181036000830152613af2818461303c565b905092915050565b6000608082019050613b0f60008301876130a9565b613b1c602083018661399e565b613b2960408301856130a9565b613b3660608301846130a9565b95945050505050565b60006020820190508181036000830152613b5a8184866130fc565b90509392505050565b60006020820190508181036000830152613b7c816131f1565b9050919050565b60006020820190508181036000830152613b9c81613214565b9050919050565b60006020820190508181036000830152613bbc81613237565b9050919050565b60006020820190508181036000830152613bdc8161325a565b9050919050565b60006020820190508181036000830152613bfc8161327d565b9050919050565b60006020820190508181036000830152613c1c816132c3565b9050919050565b60006020820190508181036000830152613c3c816132e6565b9050919050565b60006020820190508181036000830152613c5c81613309565b9050919050565b60006020820190508181036000830152613c7c8161332c565b9050919050565b60006020820190508181036000830152613c9c8161334f565b9050919050565b60006020820190508181036000830152613cbc81613372565b9050919050565b60006020820190508181036000830152613cdc81613395565b9050919050565b60006020820190508181036000830152613cfc816133b8565b9050919050565b60006020820190508181036000830152613d1c816133db565b9050919050565b60006020820190508181036000830152613d3c816133fe565b9050919050565b60006020820190508181036000830152613d5c81613421565b9050919050565b60006020820190508181036000830152613d7c81613444565b9050919050565b60006020820190508181036000830152613d9c81613467565b9050919050565b60006020820190508181036000830152613dbc8161348a565b9050919050565b60006020820190508181036000830152613ddc816134ad565b9050919050565b60006020820190508181036000830152613dfc816134d0565b9050919050565b60006020820190508181036000830152613e1c816134f3565b9050919050565b60006020820190508181036000830152613e3c81613516565b9050919050565b60006020820190508181036000830152613e5c81613539565b9050919050565b60006020820190508181036000830152613e7c8161355c565b9050919050565b60006020820190508181036000830152613e9c8161357f565b9050919050565b60006020820190508181036000830152613ebc816135a2565b9050919050565b60006020820190508181036000830152613edc816135e8565b9050919050565b60006020820190508181036000830152613efc8161360b565b9050919050565b60006020820190508181036000830152613f1c8161362e565b9050919050565b60006020820190508181036000830152613f3c81613651565b9050919050565b60006020820190508181036000830152613f5c81613674565b9050919050565b60006020820190508181036000830152613f7c81613697565b9050919050565b600060a0820190508181036000830152613f9d81886136ba565b9050613fac602083018761398f565b613fb9604083018661398f565b613fc6606083018561398f565b613fd3608083018461302d565b9695505050505050565b600060e0820190508181036000830152613ff7818b6136ba565b9050614006602083018a61398f565b614013604083018961398f565b614020606083018861398f565b61402d608083018761398f565b81810360a08301526140408185876130fc565b905061404f60c083018461302d565b9998505050505050505050565b6000602082019050818103600083015261407681846137c9565b905092915050565b60006020820190508181036000830152614098818461388e565b905092915050565b60006040820190506140b560008301846138cb565b92915050565b60006020820190506140d06000830184613971565b92915050565b60006020820190506140eb600083018461398f565b92915050565b6000808335600160200384360303811261410a57600080fd5b80840192508235915067ffffffffffffffff82111561412857600080fd5b60208301925060018202360383131561414057600080fd5b509250929050565b6000614152614163565b905061415e8282614478565b919050565b6000604051905090565b600067ffffffffffffffff8211156141885761418761452b565b5b6141918261455a565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006142566020840184612b58565b905092915050565b600061426d6020840184612b97565b905092915050565b6000808335600160200384360303811261428e57600080fd5b83810192508235915060208301925067ffffffffffffffff8211156142b257600080fd5b6001820236038413156142c457600080fd5b509250929050565b60006142db6020840184612d30565b905092915050565b60006142ee826143d6565b91506142f9836143d6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561432e5761432d6144fc565b5b828201905092915050565b6000614344826143d6565b915061434f836143d6565b925082821015614362576143616144fc565b5b828203905092915050565b6000614378826143a7565b9050919050565b600061438a826143a7565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006143f882614412565b9050919050565b600061440b3683612c3c565b9050919050565b600061441d82614424565b9050919050565b600061442f826143a7565b9050919050565b82818337600083830152505050565b60005b83811015614463578082015181840152602081019050614448565b83811115614472576000848401525b50505050565b6144818261455a565b810181811067ffffffffffffffff821117156144a05761449f61452b565b5b80604052505050565b60006144b4826143d6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144e7576144e66144fc565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f707265706172653a2045524332305f5452414e534645525f4641494c45440000600082015250565b7f707265706172653a20524f555445525f4d49534d415443480000000000000000600082015250565b7f707265706172653a2054494d454f55545f544f4f5f4c4f570000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f66756c66696c6c3a20494e56414c49445f52454c415945525f46454500000000600082015250565b7f6164644c69717569646974793a2045524332305f5452414e534645525f46414960008201527f4c45440000000000000000000000000000000000000000000000000000000000602082015250565b7f707265706172653a20494e56414c49445f434841494e49445300000000000000600082015250565b7f63616e63656c3a205452414e534645525f4641494c4544000000000000000000600082015250565b7f4c69624974657261626c654d617070696e673a204449474553545f4e4f545f4660008201527f4f554e4400000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f707265706172653a2053414d455f434841494e49445300000000000000000000600082015250565b7f4c69624974657261626c654d617070696e673a20454d5054595f444947455354600082015250565b7f707265706172653a20494e56414c49445f524543454956494e475f414444524560008201527f5353000000000000000000000000000000000000000000000000000000000000602082015250565b7f66756c66696c6c3a204645455f5452414e534645525f4641494c454400000000600082015250565b7f63616e63656c3a20494e56414c49445f5349474e415455524500000000000000600082015250565b7f707265706172653a2056414c55455f4d49534d41544348000000000000000000600082015250565b7f72656d6f76654c69717569646974793a205452414e534645525f4641494c4544600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f707265706172653a204455504c49434154455f44494745535400000000000000600082015250565b7f4c696245524332303a204e4f5f434f4445000000000000000000000000000000600082015250565b7f707265706172653a204554485f574954485f4552435f5452414e534645520000600082015250565b7f66756c66696c6c3a204558504952454400000000000000000000000000000000600082015250565b7f72656d6f76654c69717569646974793a20494e53554646494349454e545f465560008201527f4e44530000000000000000000000000000000000000000000000000000000000602082015250565b7f707265706172653a204554485f574954485f524f555445525f50524550415245600082015250565b7f6164644c69717569646974793a204554485f574954485f4552435f5452414e5360008201527f4645520000000000000000000000000000000000000000000000000000000000602082015250565b7f4c69624974657261626c654d617070696e673a204449474553545f414c52454160008201527f44595f4144444544000000000000000000000000000000000000000000000000602082015250565b50565b7f63616e63656c3a20524f555445525f4d5553545f43414e43454c000000000000600082015250565b7f707265706172653a20494e53554646494349454e545f4c495155494449545900600082015250565b7f66756c66696c6c3a20494e56414c49445f5349474e4154555245000000000000600082015250565b7f6164644c69717569646974793a2056414c55455f4d49534d4154434800000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f66756c66696c6c3a205452414e534645525f4641494c45440000000000000000600082015250565b614c198161436d565b8114614c2457600080fd5b50565b614c308161437f565b8114614c3b57600080fd5b50565b614c4781614391565b8114614c5257600080fd5b50565b614c5e8161439d565b8114614c6957600080fd5b50565b614c75816143c7565b8114614c8057600080fd5b50565b614c8c816143d6565b8114614c9757600080fd5b5056fea26469706673582212205506d03a8292af424e31fddce46eab2f7ea4988e2c68934a036c944c46bc0bad64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,address)": {
        "params": {
          "amount": "The amount of liquidity to add for the router",
          "assetId": "The address (or `address(0)` if native asset) of the                asset you're adding liquidity for"
        }
      },
      "getActiveTransactionsByUser(address)": {
        "details": "returns all active transactions for a given user"
      }
    },
    "stateVariables": {
      "chainId": {
        "details": "The chain id of the contract, is passed in to avoid any evm issues"
      },
      "multisend": {
        "details": "Address of the deployed multisending helper contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 592,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "routerBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 596,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "activeTransactions",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(IterableMapping)1808_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(VariableTransactionDataWithIndex)1799_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibIterableMapping.VariableTransactionDataWithIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(VariableTransactionDataWithIndex)1799_storage"
      },
      "t_struct(IterableMapping)1808_storage": {
        "encoding": "inplace",
        "label": "struct LibIterableMapping.IterableMapping",
        "members": [
          {
            "astId": 1804,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "transactions",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(VariableTransactionDataWithIndex)1799_storage)"
          },
          {
            "astId": 1807,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "digests",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VariableTransactionData)1387_storage": {
        "encoding": "inplace",
        "label": "struct VariableTransactionData",
        "members": [
          {
            "astId": 1378,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1380,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1382,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "expiry",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1384,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "blockNumber",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1386,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "digest",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(VariableTransactionDataWithIndex)1799_storage": {
        "encoding": "inplace",
        "label": "struct LibIterableMapping.VariableTransactionDataWithIndex",
        "members": [
          {
            "astId": 1796,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "transaction",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(VariableTransactionData)1387_storage"
          },
          {
            "astId": 1798,
            "contract": "contracts/TransactionManager.sol:TransactionManager",
            "label": "index",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}