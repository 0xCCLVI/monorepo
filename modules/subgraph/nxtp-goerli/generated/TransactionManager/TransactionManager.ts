// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class TransactionCancelled extends ethereum.Event {
  get params(): TransactionCancelled__Params {
    return new TransactionCancelled__Params(this);
  }
}

export class TransactionCancelled__Params {
  _event: TransactionCancelled;

  constructor(event: TransactionCancelled) {
    this._event = event;
  }

  get txData(): TransactionCancelledTxDataStruct {
    return this._event.parameters[0].value.toTuple() as TransactionCancelledTxDataStruct;
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransactionCancelledTxDataStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get router(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainId(): i32 {
    return this[5].toI32();
  }

  get receivingChainId(): i32 {
    return this[6].toI32();
  }

  get receivingAddress(): Address {
    return this[7].toAddress();
  }

  get callData(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get expiry(): BigInt {
    return this[10].toBigInt();
  }
}

export class TransactionFulfilled extends ethereum.Event {
  get params(): TransactionFulfilled__Params {
    return new TransactionFulfilled__Params(this);
  }
}

export class TransactionFulfilled__Params {
  _event: TransactionFulfilled;

  constructor(event: TransactionFulfilled) {
    this._event = event;
  }

  get txData(): TransactionFulfilledTxDataStruct {
    return this._event.parameters[0].value.toTuple() as TransactionFulfilledTxDataStruct;
  }

  get signature(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class TransactionFulfilledTxDataStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get router(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainId(): i32 {
    return this[5].toI32();
  }

  get receivingChainId(): i32 {
    return this[6].toI32();
  }

  get receivingAddress(): Address {
    return this[7].toAddress();
  }

  get callData(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get expiry(): BigInt {
    return this[10].toBigInt();
  }
}

export class TransactionPrepared extends ethereum.Event {
  get params(): TransactionPrepared__Params {
    return new TransactionPrepared__Params(this);
  }
}

export class TransactionPrepared__Params {
  _event: TransactionPrepared;

  constructor(event: TransactionPrepared) {
    this._event = event;
  }

  get txData(): TransactionPreparedTxDataStruct {
    return this._event.parameters[0].value.toTuple() as TransactionPreparedTxDataStruct;
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransactionPreparedTxDataStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get router(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainId(): i32 {
    return this[5].toI32();
  }

  get receivingChainId(): i32 {
    return this[6].toI32();
  }

  get receivingAddress(): Address {
    return this[7].toAddress();
  }

  get callData(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get expiry(): BigInt {
    return this[10].toBigInt();
  }
}

export class TransactionManager extends ethereum.SmartContract {
  static bind(address: Address): TransactionManager {
    return new TransactionManager("TransactionManager", address);
  }

  MIN_TIMEOUT(): BigInt {
    let result = super.call("MIN_TIMEOUT", "MIN_TIMEOUT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_TIMEOUT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_TIMEOUT", "MIN_TIMEOUT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chainId(): i32 {
    let result = super.call("chainId", "chainId():(uint24)", []);

    return result[0].toI32();
  }

  try_chainId(): ethereum.CallResult<i32> {
    let result = super.tryCall("chainId", "chainId():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  multisend(): Address {
    let result = super.call("multisend", "multisend():(address)", []);

    return result[0].toAddress();
  }

  try_multisend(): ethereum.CallResult<Address> {
    let result = super.tryCall("multisend", "multisend():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  routerBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "routerBalances",
      "routerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_routerBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "routerBalances",
      "routerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _multisend(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _chainId(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assetId(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get txData(): CancelCallTxDataStruct {
    return this._call.inputValues[0].value.toTuple() as CancelCallTxDataStruct;
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CancelCallTxDataStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get router(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainId(): i32 {
    return this[5].toI32();
  }

  get receivingChainId(): i32 {
    return this[6].toI32();
  }

  get receivingAddress(): Address {
    return this[7].toAddress();
  }

  get callData(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get expiry(): BigInt {
    return this[10].toBigInt();
  }
}

export class FulfillCall extends ethereum.Call {
  get inputs(): FulfillCall__Inputs {
    return new FulfillCall__Inputs(this);
  }

  get outputs(): FulfillCall__Outputs {
    return new FulfillCall__Outputs(this);
  }
}

export class FulfillCall__Inputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get txData(): FulfillCallTxDataStruct {
    return this._call.inputValues[0].value.toTuple() as FulfillCallTxDataStruct;
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class FulfillCall__Outputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }
}

export class FulfillCallTxDataStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get router(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainId(): i32 {
    return this[5].toI32();
  }

  get receivingChainId(): i32 {
    return this[6].toI32();
  }

  get receivingAddress(): Address {
    return this[7].toAddress();
  }

  get callData(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get expiry(): BigInt {
    return this[10].toBigInt();
  }
}

export class PrepareCall extends ethereum.Call {
  get inputs(): PrepareCall__Inputs {
    return new PrepareCall__Inputs(this);
  }

  get outputs(): PrepareCall__Outputs {
    return new PrepareCall__Outputs(this);
  }
}

export class PrepareCall__Inputs {
  _call: PrepareCall;

  constructor(call: PrepareCall) {
    this._call = call;
  }

  get txData(): PrepareCallTxDataStruct {
    return this._call.inputValues[0].value.toTuple() as PrepareCallTxDataStruct;
  }
}

export class PrepareCall__Outputs {
  _call: PrepareCall;

  constructor(call: PrepareCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PrepareCallTxDataStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get router(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainId(): i32 {
    return this[5].toI32();
  }

  get receivingChainId(): i32 {
    return this[6].toI32();
  }

  get receivingAddress(): Address {
    return this[7].toAddress();
  }

  get callData(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get expiry(): BigInt {
    return this[10].toBigInt();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assetId(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}
