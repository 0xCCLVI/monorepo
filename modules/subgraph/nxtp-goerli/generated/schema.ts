// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AssetBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AssetBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AssetBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AssetBalance", id.toString(), this);
  }

  static load(id: string): AssetBalance | null {
    return store.get("AssetBalance", id) as AssetBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): i32 {
    let value = this.get("amount");
    return value.toI32();
  }

  set amount(value: i32) {
    this.set("amount", Value.fromI32(value));
  }

  get router(): string {
    let value = this.get("router");
    return value.toString();
  }

  set router(value: string) {
    this.set("router", Value.fromString(value));
  }
}

export class Router extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Router entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Router entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Router", id.toString(), this);
  }

  static load(id: string): Router | null {
    return store.get("Router", id) as Router | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetBalances(): Array<string> {
    let value = this.get("assetBalances");
    return value.toStringArray();
  }

  set assetBalances(value: Array<string>) {
    this.set("assetBalances", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get router(): string {
    let value = this.get("router");
    return value.toString();
  }

  set router(value: string) {
    this.set("router", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get sendingAssetId(): Bytes {
    let value = this.get("sendingAssetId");
    return value.toBytes();
  }

  set sendingAssetId(value: Bytes) {
    this.set("sendingAssetId", Value.fromBytes(value));
  }

  get receivingAssetId(): Bytes {
    let value = this.get("receivingAssetId");
    return value.toBytes();
  }

  set receivingAssetId(value: Bytes) {
    this.set("receivingAssetId", Value.fromBytes(value));
  }

  get sendingChainId(): i32 {
    let value = this.get("sendingChainId");
    return value.toI32();
  }

  set sendingChainId(value: i32) {
    this.set("sendingChainId", Value.fromI32(value));
  }

  get receivingChainId(): i32 {
    let value = this.get("receivingChainId");
    return value.toI32();
  }

  set receivingChainId(value: i32) {
    this.set("receivingChainId", Value.fromI32(value));
  }

  get receivingAddress(): Bytes {
    let value = this.get("receivingAddress");
    return value.toBytes();
  }

  set receivingAddress(value: Bytes) {
    this.set("receivingAddress", Value.fromBytes(value));
  }

  get callData(): Bytes {
    let value = this.get("callData");
    return value.toBytes();
  }

  set callData(value: Bytes) {
    this.set("callData", Value.fromBytes(value));
  }

  get transactionId(): Bytes {
    let value = this.get("transactionId");
    return value.toBytes();
  }

  set transactionId(value: Bytes) {
    this.set("transactionId", Value.fromBytes(value));
  }

  get expiry(): i32 {
    let value = this.get("expiry");
    return value.toI32();
  }

  set expiry(value: i32) {
    this.set("expiry", Value.fromI32(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}
