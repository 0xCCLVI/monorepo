{
  "address": "0x91641216fff930aac6e7b8d383bcb1adab02c5be",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iMultisend",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedBid",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bidSignature",
          "type": "bytes"
        }
      ],
      "name": "TransactionPrepared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeTransactionBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iMultisend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "_txData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encodedBid",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "bidSignature",
          "type": "bytes"
        }
      ],
      "name": "prepare",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blockNumber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transactionStatus",
      "outputs": [
        {
          "internalType": "enum ITransactionManager.TransactionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x64d0b4111610f844be8433a1aefa49ac236e50f7e921e58c2318f79c9c60a3de",
  "receipt": {
    "to": null,
    "from": "0xdc150c5db2cd1d1d8e505f824abd90aef887cac6",
    "contractAddress": "0x91641216fff930aac6e7b8d383bcb1adab02c5be",
    "transactionIndex": "0x6",
    "gasUsed": "0x24fa5c",
    "logsBloom": "0x
    "blockHash": "0xaba437f33a9390f4dcd8ab48b6dac691887f63c2c269f8866671928c8c3a7275",
    "transactionHash": "0x64d0b4111610f844be8433a1aefa49ac236e50f7e921e58c2318f79c9c60a3de",
    "logs": [],
    "blockNumber": "0x870a43",
    "cumulativeGasUsed": "0x34509b",
    "status": "0x1"
  },
  "args": [
    "0x5F0c3EAB4161FDDd83cF1C1e5BBc0673A50584c9",
    "4"
  ],
  "solcInputHash": "046ce2b626f23a1e233043de11118b3b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iMultisend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"TransactionPrepared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeTransactionBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfill\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iMultisend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"_txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"prepare\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactionStatus\",\"outputs\":[{\"internalType\":\"enum ITransactionManager.TransactionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,address)\":{\"params\":{\"amount\":\"The amount of liquidity to add for the router\",\"assetId\":\"The address (or `address(0)` if native asset) of the                asset you're adding liquidity for\"}}},\"stateVariables\":{\"activeTransactionBlocks\":{\"details\":\"Maping of user address to blocks where active transfers      were created.\"},\"chainId\":{\"details\":\"The chain id of the contract, is passed in to avoid any evm issues\"},\"iMultisend\":{\"details\":\"Address of the deployed multisending interpreter contract\"},\"routerBalances\":{\"details\":\"Mapping of router to balance specific to asset\"},\"transactionStatus\":{\"details\":\"Mapping of hash of `TransactionData` to status of a transaction\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransactionManager.sol\":\"TransactionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSendCallOnly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\n/// @notice The guard logic is not required here as this contract doesn't support nested delegate calls\\ncontract MultiSendCallOnly {\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation has to be uint8(0) in this version (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    /// @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\\n    ///         but reverts if a transaction tries to use a delegatecall.\\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n    function multiSend(bytes memory transactions) public payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                    case 0 {\\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\\n                    }\\n                    // This version does not allow delegatecalls\\n                    case 1 {\\n                        revert(0, 0)\\n                    }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb11f27129bb1cfc16e0cfb5056bd0fbb3b01de6294d75996ff2fac613dce1d63\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"contracts/TransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./interfaces/ITransactionManager.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./lib/LibERC20.sol\\\";\\nimport \\\"./interpreters/MultisendInterpreter.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract TransactionManager is ReentrancyGuard, ITransactionManager {\\n  /// @dev Mapping of router to balance specific to asset\\n  mapping(address => mapping(address => uint256)) public routerBalances;\\n\\n  /// @dev Maping of user address to blocks where active transfers\\n  ///      were created.\\n  mapping(address => uint256[]) public activeTransactionBlocks;\\n\\n  /// @dev Mapping of hash of `TransactionData` to status of a transaction\\n  mapping(bytes32 => TransactionStatus) public transactionStatus;\\n\\n  /// @dev The chain id of the contract, is passed in to avoid any evm issues\\n  uint256 public immutable chainId;\\n\\n  /// @dev Address of the deployed multisending interpreter contract\\n  address public immutable iMultisend;\\n\\n  uint256 public constant MIN_TIMEOUT = 24 hours;\\n\\n  constructor(address _iMultisend, uint256 _chainId) {\\n    iMultisend = _iMultisend;\\n    chainId = _chainId;\\n  }\\n\\n  /// @param amount The amount of liquidity to add for the router\\n  /// @param assetId The address (or `address(0)` if native asset) of the\\n  ///                asset you're adding liquidity for\\n  function addLiquidity(uint256 amount, address assetId) external payable override nonReentrant {\\n    // Validate correct amounts are transferred\\n    if (LibAsset.isEther(assetId)) {\\n      require(msg.value == amount, \\\"addLiquidity: VALUE_MISMATCH\\\");\\n    } else {\\n      require(msg.value == 0, \\\"addLiquidity: ETH_WITH_ERC_TRANSFER\\\");\\n      require(LibERC20.transferFrom(assetId, msg.sender, address(this), amount), \\\"addLiquidity: ERC20_TRANSFER_FAILED\\\");\\n    }\\n\\n    // Update the router balances\\n    routerBalances[msg.sender][assetId] += amount;\\n\\n    // Emit event\\n    emit LiquidityAdded(msg.sender, assetId, amount);\\n  }\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    address assetId,\\n    address payable recipient\\n  ) external override nonReentrant {\\n    // Check that the amount can be deducted for the router\\n    // TODO is this check worth the extra gas?\\n    require(routerBalances[msg.sender][assetId] >= amount, \\\"removeLiquidity: INSUFFICIENT_FUNDS\\\");\\n\\n    // Update router balances\\n    routerBalances[msg.sender][assetId] -= amount;\\n\\n    // Transfer from contract to router\\n    require(LibAsset.transferAsset(assetId, recipient, amount), \\\"removeLiquidity: TRANSFER_FAILED\\\");\\n\\n    // Emit event\\n    emit LiquidityRemoved(msg.sender, assetId, amount, recipient);\\n  }\\n\\n  function prepare(\\n    InvariantTransactionData calldata _txData,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata encodedBid,\\n    bytes calldata bidSignature\\n  ) external payable override nonReentrant returns (TransactionData memory) {\\n    // Make sure the expiry is greater than min\\n    require((expiry - block.timestamp) >= MIN_TIMEOUT, \\\"prepare: TIMEOUT_TOO_LOW\\\");\\n\\n    // Make sure the chains are different\\n    require(_txData.sendingChainId != _txData.receivingChainId, \\\"prepare: SAME_CHAINIDS\\\");\\n\\n    // Make sure the chains are relevant\\n    require(_txData.sendingChainId == chainId || _txData.receivingChainId == chainId, \\\"prepare: INVALID_CHAINIDS\\\");\\n\\n    // Sanity check: valid fallback\\n    require(_txData.receivingAddress != address(0), \\\"prepare: INVALID_RECEIVING_ADDRESS\\\");\\n\\n    // Make sure the hash is not a duplicate\\n    TransactionData memory txData = TransactionData({\\n      user: _txData.user,\\n      router: _txData.router,\\n      sendingAssetId: _txData.sendingAssetId,\\n      receivingAssetId: _txData.receivingAssetId,\\n      receivingAddress: _txData.receivingAddress,\\n      callData: _txData.callData,\\n      transactionId: _txData.transactionId,\\n      amount: amount,\\n      expiry: expiry,\\n      blockNumber: block.number,\\n      sendingChainId: _txData.sendingChainId,\\n      receivingChainId: _txData.receivingChainId\\n    });\\n    bytes32 digest = keccak256(abi.encode(txData));\\n    require(transactionStatus[digest] == TransactionStatus.Empty, \\\"prepare: DIGEST_EXISTS\\\");\\n\\n    // Store the transaction variants\\n    transactionStatus[digest] = TransactionStatus.Pending;\\n\\n    // Store active blocks\\n    activeTransactionBlocks[txData.user].push(block.number);\\n\\n    // First determine if this is sender side or receiver side\\n    if (txData.sendingChainId == chainId) {\\n      // This is sender side prepare\\n\\n      // Validate correct amounts and transfer\\n      if (LibAsset.isEther(txData.sendingAssetId)) {\\n        require(msg.value == txData.amount, \\\"prepare: VALUE_MISMATCH\\\");\\n      } else {\\n        require(msg.value == 0, \\\"prepare: ETH_WITH_ERC_TRANSFER\\\");\\n        require(\\n          LibERC20.transferFrom(txData.sendingAssetId, msg.sender, address(this), txData.amount),\\n          \\\"prepare: ERC20_TRANSFER_FAILED\\\"\\n        );\\n      }\\n    } else {\\n      // This is receiver side prepare\\n\\n      // Check that the caller is the router\\n      require(msg.sender == txData.router, \\\"prepare: ROUTER_MISMATCH\\\");\\n      require(msg.value == 0, \\\"prepare: ETH_WITH_ROUTER_PREPARE\\\");\\n\\n      // Check that router has liquidity\\n      // TODO do we need explicit check vs implicit from safemath below?\\n      require(\\n        routerBalances[txData.router][txData.receivingAssetId] >= txData.amount,\\n        \\\"prepare: INSUFFICIENT_LIQUIDITY\\\"\\n      );\\n\\n      // NOTE: Timeout and amounts should have been decremented offchain\\n\\n      // NOTE: after some consideration, it feels like it's better to leave amount/fee\\n      // validation *outside* the contracts as we likely want the logic to be flexible\\n\\n      // Pull funds from router balance (use msg.sender here to mitigate 3rd party attack)\\n\\n      // What would happen if some router tried to swoop in and steal another router's spot?\\n      // - 3rd party router could EITHER use original txData or replace txData.router with itself\\n      // - if original txData, 3rd party router would basically be paying for original router\\n      // - if relaced router address, user sig on digest would not unlock sender side\\n      routerBalances[txData.router][txData.receivingAssetId] -= txData.amount;\\n    }\\n\\n    // Emit event\\n    emit TransactionPrepared(txData, msg.sender, encodedBid, bidSignature);\\n    return txData;\\n  }\\n\\n  function fulfill(\\n    TransactionData calldata txData,\\n    uint256 relayerFee,\\n    bytes calldata signature // signature on fee + digest\\n  ) external override nonReentrant returns (TransactionData memory) {\\n    // Make sure params match against stored data\\n    // Also checks that there is an active transfer here\\n    // Also checks that sender or receiver chainID is this chainId (bc we\\n    // checked it previously)\\n    bytes32 digest = keccak256(abi.encode(txData));\\n\\n    require(transactionStatus[digest] == TransactionStatus.Pending, \\\"fulfill: INVALID_TX_STATUS\\\");\\n\\n    require(txData.expiry > block.timestamp, \\\"fulfill: EXPIRED\\\");\\n\\n    // Validate signature\\n    require(recoverFulfillSignature(txData, relayerFee, signature) == txData.user, \\\"fulfill: INVALID_SIGNATURE\\\");\\n\\n    // Sanity check: fee < amount\\n    // TODO: Do we need this check? Safemath would catch it below\\n    require(relayerFee < txData.amount, \\\"fulfill: INVALID_RELAYER_FEE\\\");\\n\\n    // Mark transaction as fulfilled\\n    transactionStatus[digest] = TransactionStatus.Completed;\\n\\n    // Remove active blocks\\n    removeUserActiveBlocks(txData.user, txData.blockNumber);\\n\\n    // TODO: user cant accidentally fulfill sender\\n    if (txData.sendingChainId == chainId) {\\n      // Complete tx to router\\n      // NOTE: there is no fee taken on the sending side for the relayer\\n      routerBalances[txData.router][txData.sendingAssetId] += txData.amount;\\n    } else {\\n      // Complete tx to user\\n      // Get the amount to send\\n      uint256 toSend = txData.amount - relayerFee;\\n\\n      // Send the relayer the fee\\n      if (relayerFee > 0) {\\n        require(\\n          LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee),\\n          \\\"fulfill: FEE_TRANSFER_FAILED\\\"\\n        );\\n      }\\n\\n      if (keccak256(txData.callData) == keccak256(new bytes(0))) {\\n        // No external calls, send directly to receiving address\\n        require(\\n          LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),\\n          \\\"fulfill: TRANSFER_FAILED\\\"\\n        );\\n      } else {\\n        // Handle external calls with a fallback to the receiving\\n        // address\\n        // TODO: This would allow us to execute an arbitrary transfer to drain the contracts\\n        // We'll need to change this to use vector pattern with *explicit* amount.\\n        // If it is a token, approve the amount to the interpreter\\n        try\\n          MultisendInterpreter(iMultisend).execute{value: LibAsset.isEther(txData.receivingAssetId) ? toSend : 0}(\\n            txData.receivingAssetId,\\n            toSend,\\n            txData.callData\\n          )\\n        {} catch {\\n          require(\\n            LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),\\n            \\\"fulfill: TRANSFER_FAILED\\\"\\n          );\\n        }\\n      }\\n    }\\n\\n    // Emit event\\n    emit TransactionFulfilled(txData, relayerFee, signature, msg.sender);\\n\\n    return txData;\\n  }\\n\\n  // Tx can be \\\"collaboratively\\\" cancelled by the receiver at any time and by the sender after expiry\\n  function cancel(TransactionData calldata txData, bytes calldata signature)\\n    external\\n    override\\n    nonReentrant\\n    returns (TransactionData memory)\\n  {\\n    // Make sure params match against stored data\\n    // Also checks that there is an active transfer here\\n    // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\\n    bytes32 digest = keccak256(abi.encode(txData));\\n\\n    require(transactionStatus[digest] == TransactionStatus.Pending, \\\"cancel: INVALID_TX_STATUS\\\");\\n\\n    // Mark transaction as complete\\n    transactionStatus[digest] = TransactionStatus.Completed;\\n\\n    if (txData.sendingChainId == chainId) {\\n      // Sender side --> funds go back to user\\n      if (txData.expiry >= block.timestamp) {\\n        // Timeout has not expired and tx may only be cancelled by router\\n        require(msg.sender == txData.router, \\\"cancel: ROUTER_MUST_CANCEL\\\");\\n      }\\n      // Return to user\\n      require(\\n        LibAsset.transferAsset(txData.sendingAssetId, payable(txData.user), txData.amount),\\n        \\\"cancel: TRANSFER_FAILED\\\"\\n      );\\n    } else {\\n      // Receiver side --> funds go back to router\\n      if (txData.expiry >= block.timestamp) {\\n        // Timeout has not expired and tx may only be cancelled by user\\n        // Validate signature\\n        require(recoverCancelSignature(txData, signature) == txData.user, \\\"cancel: INVALID_SIGNATURE\\\");\\n      }\\n      // Return to router\\n      routerBalances[txData.router][txData.receivingAssetId] += txData.amount;\\n    }\\n\\n    // Remove active blocks\\n    removeUserActiveBlocks(txData.user, txData.blockNumber);\\n\\n    // Emit event\\n    emit TransactionCancelled(txData, msg.sender);\\n\\n    // Return\\n    return txData;\\n  }\\n\\n  // Private functions\\n  function removeUserActiveBlocks(address user, uint256 preparedBlock) internal {\\n    // Remove active blocks\\n    uint256 newLength = activeTransactionBlocks[user].length - 1;\\n    uint256[] memory updated = new uint256[](newLength);\\n    bool removed = false;\\n    uint256 updatedIdx = 0;\\n    for (uint256 i; i < newLength + 1; i++) {\\n      // Handle case where there could be more than one tx added in a block\\n      // And only one should be removed\\n      if (!removed && activeTransactionBlocks[user][i] == preparedBlock) {\\n        removed = true;\\n        continue;\\n      }\\n      updated[updatedIdx] = activeTransactionBlocks[user][i];\\n      updatedIdx++;\\n    }\\n    activeTransactionBlocks[user] = updated;\\n  }\\n\\n  function recoverFulfillSignature(\\n    TransactionData calldata txData,\\n    uint256 relayerFee,\\n    bytes calldata signature\\n  ) internal pure returns (address) {\\n    // Create the digest\\n    bytes32 invariantDigest = hashInvariantTransactionData(txData);\\n\\n    // Create the signed payload\\n    SignedFulfillData memory payload = SignedFulfillData({invariantDigest: invariantDigest, relayerFee: relayerFee});\\n\\n    bytes32 signed = keccak256(abi.encode(payload));\\n    // Recover\\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(signed), signature);\\n  }\\n\\n  function recoverCancelSignature(TransactionData calldata txData, bytes calldata signature)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    // Create the digest\\n    bytes32 invariantDigest = hashInvariantTransactionData(txData);\\n\\n    // Create the signed payload\\n    SignedCancelData memory payload = SignedCancelData({invariantDigest: invariantDigest, cancel: \\\"cancel\\\"});\\n\\n    // Recover\\n    bytes32 signed = keccak256(abi.encode(payload));\\n    // Recover\\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(signed), signature);\\n  }\\n\\n  function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\\n    InvariantTransactionData memory invariant = InvariantTransactionData({\\n      user: txData.user,\\n      router: txData.router,\\n      sendingAssetId: txData.sendingAssetId,\\n      receivingAssetId: txData.receivingAssetId,\\n      receivingAddress: txData.receivingAddress,\\n      sendingChainId: txData.sendingChainId,\\n      receivingChainId: txData.receivingChainId,\\n      callData: txData.callData,\\n      transactionId: txData.transactionId\\n    });\\n    return keccak256(abi.encode(invariant));\\n  }\\n}\\n\",\"keccak256\":\"0x8a580ed53b7ff8dbbe5816864b243dd867c93a8b8b4bb59deff16529163c65f8\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMultisendInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\ninterface IMultisendInterpreter {\\n  function execute(\\n    address assetId,\\n    uint256 amount,\\n    bytes calldata callData\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0xaee4d34852f300f9c65dcbeca3ed1fcdb6b2271c13124151304cd24fad0881fd\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\ninterface ITransactionManager {\\n  // Structs\\n  struct InvariantTransactionData {\\n    address user;\\n    address router;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address receivingAddress;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    bytes callData;\\n    bytes32 transactionId;\\n  }\\n\\n  enum TransactionStatus {\\n    Empty,\\n    Pending,\\n    Completed\\n  }\\n\\n  struct TransactionData {\\n    address user;\\n    address router;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address receivingAddress;\\n    bytes callData;\\n    bytes32 transactionId;\\n    uint256 amount;\\n    uint256 expiry;\\n    uint256 blockNumber;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n  }\\n\\n  struct SignedCancelData {\\n    bytes32 invariantDigest;\\n    string cancel;\\n  }\\n\\n  struct SignedFulfillData {\\n    bytes32 invariantDigest;\\n    uint256 relayerFee;\\n  }\\n\\n  // Liquidity events\\n  event LiquidityAdded(address router, address assetId, uint256 amount);\\n\\n  event LiquidityRemoved(address router, address assetId, uint256 amount, address recipient);\\n\\n  // Transaction events\\n  // TODO: structure\\n  event TransactionPrepared(TransactionData txData, address caller, bytes encodedBid, bytes bidSignature);\\n\\n  event TransactionFulfilled(TransactionData txData, uint256 relayerFee, bytes signature, address caller);\\n\\n  event TransactionCancelled(TransactionData txData, address caller);\\n\\n  // Getters\\n\\n  // Router only methods\\n  function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    address assetId,\\n    address payable recipient\\n  ) external;\\n\\n  // Transaction methods\\n  function prepare(\\n    InvariantTransactionData calldata txData,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata encodedBid,\\n    bytes calldata bidSignature\\n  ) external payable returns (TransactionData memory);\\n\\n  function fulfill(\\n    TransactionData calldata txData,\\n    uint256 relayerFee,\\n    bytes calldata signature\\n  ) external returns (TransactionData memory);\\n\\n  function cancel(TransactionData calldata txData, bytes calldata signature) external returns (TransactionData memory);\\n}\\n\",\"keccak256\":\"0xafcba3bbb32bfdb127e6711a984041a55d263c3751928b21874bcecaa10c7a0c\",\"license\":\"UNLICENSED\"},\"contracts/interpreters/MultisendInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"../interfaces/IMultisendInterpreter.sol\\\";\\nimport \\\"../lib/LibAsset.sol\\\";\\nimport \\\"../lib/LibERC20.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSendCallOnly.sol\\\";\\n\\ncontract MultisendInterpreter is IMultisendInterpreter {\\n  /// @dev Address of the deployed multisending helper contract\\n  address public immutable multisend;\\n\\n  constructor(address _multisend) {\\n    multisend = _multisend;\\n  }\\n\\n  function execute(\\n    address assetId,\\n    uint256 amount,\\n    bytes calldata callData\\n  ) external payable override {\\n    if (LibAsset.isEther(assetId)) {\\n      require(msg.value == amount, \\\"execute: VALUE_MISMATCH\\\");\\n      MultiSendCallOnly(multisend).multiSend{value: msg.value}(callData);\\n    } else {\\n      require(msg.value == 0, \\\"execute: ETH_WITH_ERC_TRANSFER\\\");\\n      require(LibERC20.approve(assetId, multisend, amount), \\\"execute: APPROVE_FAILED\\\");\\n\\n      MultiSendCallOnly(multisend).multiSend(callData);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x4284597b5f1575aca14bf5cbaf66639c76ff176fca8ca5e31f73e660da410055\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./LibERC20.sol\\\";\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/// @title LibAsset\\n/// @author Connext <support@connext.network>\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of in-channel assets. It is designed to safely handle all asset\\n///         transfers out of channel in the event of an onchain dispute. Also\\n///         safely handles ERC20 transfers that may be non-compliant\\nlibrary LibAsset {\\n    address constant ETHER_ASSETID = address(0);\\n\\n    function isEther(address assetId) internal pure returns (bool) {\\n        return assetId == ETHER_ASSETID;\\n    }\\n\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return\\n            isEther(assetId)\\n                ? address(this).balance\\n                : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    function transferEther(address payable recipient, uint256 amount)\\n        internal\\n        returns (bool)\\n    {\\n        (bool success, bytes memory returnData) =\\n            recipient.call{value: amount}(\\\"\\\");\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return true;\\n    }\\n\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return LibERC20.transfer(assetId, recipient, amount);\\n    }\\n\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\n    // both standard-compliant ones as well as tokens that exhibit the\\n    // missing-return-value bug.\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            isEther(assetId)\\n                ? transferEther(recipient, amount)\\n                : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x4a90c857d2ed06aa0f5af822b63736d4675ddaa03feff7bfef8dad4108e5ebf7\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title LibERC20\\n/// @author Connext <support@connext.network>\\n/// @notice This library provides several functions to safely handle\\n///         noncompliant tokens (i.e. does not return a boolean from\\n///         the transfer function)\\n\\nlibrary LibERC20 {\\n    function wrapCall(address assetId, bytes memory callData)\\n        internal\\n        returns (bool)\\n    {\\n        require(Address.isContract(assetId), \\\"LibERC20: NO_CODE\\\");\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\n    }\\n\\n    function approve(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"approve(address,uint256)\\\",\\n                    spender,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transferFrom(\\n        address assetId,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\",\\n                    sender,\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transfer(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb18bb79acb4608a8552ba819d443c727ee5bcc3fac214f55412a91c21491c08e\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.1;\\n\\n/// @title LibUtils\\n/// @author Connext <support@connext.network>\\n/// @notice Contains a helper to revert if a call was not successfully\\n///         made\\nlibrary LibUtils {\\n    // If success is false, reverts and passes on the revert string.\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\n        internal\\n        pure\\n    {\\n        if (!success) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0edf57f77c196ec737ae6fb77ddc5e3d99ab3fb2a411b1e4a0ebc77580785e13\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002b5b38038062002b5b833981016040819052620000349162000055565b600160005560609190911b6001600160601b03191660a0526080526200008f565b6000806040838503121562000068578182fd5b82516001600160a01b03811681146200007f578283fd5b6020939093015192949293505050565b60805160a05160601c612a79620000e26000396000818161021f015261069b015260008181610199015281816104aa015281816108a4015281816108d101528181610bc80152610fd60152612a796000f3fe60806040526004361061009c5760003560e01c80638a0d24ac116100645780638a0d24ac146101675780639a8a059214610187578063c95f9d0e146101bb578063cfecf7b9146101d0578063d0a8d00d1461020d578063f31abcc41461025957600080fd5b80630e8a7552146100a157806341258b5c146100d7578063450f67431461011d578063543ad1df1461013057806389b56d8c14610147575b600080fd5b3480156100ad57600080fd5b506100c16100bc36600461227c565b610279565b6040516100ce919061278c565b60405180910390f35b3480156100e357600080fd5b5061010f6100f23660046120cf565b600160209081526000928352604080842090915290825290205481565b6040519081526020016100ce565b6100c161012b36600461216a565b6107c5565b34801561013c57600080fd5b5061010f6201518081565b34801561015357600080fd5b506100c1610162366004612216565b610ed8565b34801561017357600080fd5b5061010f610182366004612107565b61125a565b34801561019357600080fd5b5061010f7f000000000000000000000000000000000000000000000000000000000000000081565b6101ce6101c93660046122e9565b61128b565b005b3480156101dc57600080fd5b506102006101eb366004612152565b60036020526000908152604090205460ff1681565b6040516100ce91906125cc565b34801561021957600080fd5b506102417f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ce565b34801561026557600080fd5b506101ce61027436600461230d565b61145d565b610281611ef3565b600260005414156102ad5760405162461bcd60e51b81526004016102a4906125f4565b60405180910390fd5b600260009081556040516102c5908790602001612708565b60408051601f1981840301815291905280516020909101209050600160008281526003602052604090205460ff16600281111561031257634e487b7160e01b600052602160045260246000fd5b1461035f5760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20494e56414c49445f54585f53544154555300000000000060448201526064016102a4565b42866101000135116103a65760405162461bcd60e51b815260206004820152601060248201526f199d5b199a5b1b0e881156141254915160821b60448201526064016102a4565b6103b360208701876120ac565b6001600160a01b03166103c8878787876115ed565b6001600160a01b03161461041e5760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20494e56414c49445f5349474e415455524500000000000060448201526064016102a4565b8560e0013585106104715760405162461bcd60e51b815260206004820152601c60248201527f66756c66696c6c3a20494e56414c49445f52454c415945525f4645450000000060448201526064016102a4565b6000818152600360209081526040909120805460ff191660021790556104a89061049d908801886120ac565b87610120013561168c565b7f0000000000000000000000000000000000000000000000000000000000000000866101400135141561055d5760e0860135600160006104ee60408a0160208b016120ac565b6001600160a01b03166001600160a01b03168152602001908152602001600020600088604001602081019061052391906120ac565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461055291906128aa565b9091555061076e9050565b600061056d8660e08901356128c2565b905085156105db5761058f6105886080890160608a016120ac565b3388611840565b6105db5760405162461bcd60e51b815260206004820152601c60248201527f66756c66696c6c3a204645455f5452414e534645525f4641494c45440000000060448201526064016102a4565b604080516000815260208101918290525190206105fb60a08901896127f6565b604051610609929190612578565b604051809103902014156106915761064061062a6080890160608a016120ac565b61063a60a08a0160808b016120ac565b83611840565b61068c5760405162461bcd60e51b815260206004820152601860248201527f66756c66696c6c3a205452414e534645525f4641494c4544000000000000000060448201526064016102a4565b61076c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b61d27f66106e06106d360808b0160608c016120ac565b6001600160a01b03161590565b6106eb5760006106ed565b825b6106fd60808b0160608c016120ac565b8461070b60a08d018d6127f6565b6040518663ffffffff1660e01b815260040161072a94939291906125a4565b6000604051808303818588803b15801561074357600080fd5b505af193505050508015610755575060015b61076c5761064061062a6080890160608a016120ac565b505b7fb54f37fca88fdf829020c2655cae0d62aa82e4c7fa3afef494dc2099863601c986868686336040516107a5959493929190612745565b60405180910390a16107b6866128d9565b60016000559695505050505050565b6107cd611ef3565b600260005414156107f05760405162461bcd60e51b81526004016102a4906125f4565b60026000556201518061080342886128c2565b10156108515760405162461bcd60e51b815260206004820152601860248201527f707265706172653a2054494d454f55545f544f4f5f4c4f57000000000000000060448201526064016102a4565b8760c001358860a0013514156108a25760405162461bcd60e51b8152602060048201526016602482015275707265706172653a2053414d455f434841494e49445360501b60448201526064016102a4565b7f00000000000000000000000000000000000000000000000000000000000000008860a0013514806108f757507f00000000000000000000000000000000000000000000000000000000000000008860c00135145b6109435760405162461bcd60e51b815260206004820152601960248201527f707265706172653a20494e56414c49445f434841494e4944530000000000000060448201526064016102a4565b600061095560a08a0160808b016120ac565b6001600160a01b031614156109b75760405162461bcd60e51b815260206004820152602260248201527f707265706172653a20494e56414c49445f524543454956494e475f4144445245604482015261535360f01b60648201526084016102a4565b604080516101808101909152600090806109d460208c018c6120ac565b6001600160a01b031681526020018a60200160208101906109f591906120ac565b6001600160a01b03168152602001610a1360608c0160408d016120ac565b6001600160a01b03168152602001610a3160808c0160608d016120ac565b6001600160a01b03168152602001610a4f60a08c0160808d016120ac565b6001600160a01b03168152602001610a6a60e08c018c6127f6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506101008c013560208084019190915260408084018d9052606084018c905243608085015260a0808f01359085015260c0808f0135940193909352915192935091610aec9184910161278c565b60408051601f19818403018152919052805160209091012090506000808281526003602052604090205460ff166002811115610b3857634e487b7160e01b600052602160045260246000fd5b14610b7e5760405162461bcd60e51b8152602060048201526016602482015275707265706172653a204449474553545f45584953545360501b60448201526064016102a4565b6000818152600360209081526040808320805460ff1916600190811790915585516001600160a01b03168452600283529083208054918201815583529120439101556101408201517f00000000000000000000000000000000000000000000000000000000000000001415610d055760408201516001600160a01b0316610c57578160e001513414610c525760405162461bcd60e51b815260206004820152601760248201527f707265706172653a2056414c55455f4d49534d4154434800000000000000000060448201526064016102a4565b610e85565b3415610ca55760405162461bcd60e51b815260206004820152601e60248201527f707265706172653a204554485f574954485f4552435f5452414e53464552000060448201526064016102a4565b610cb9826040015133308560e00151611873565b610c525760405162461bcd60e51b815260206004820152601e60248201527f707265706172653a2045524332305f5452414e534645525f4641494c4544000060448201526064016102a4565b81602001516001600160a01b0316336001600160a01b031614610d6a5760405162461bcd60e51b815260206004820152601860248201527f707265706172653a20524f555445525f4d49534d41544348000000000000000060448201526064016102a4565b3415610db85760405162461bcd60e51b815260206004820181905260248201527f707265706172653a204554485f574954485f524f555445525f5052455041524560448201526064016102a4565b60e08201516020808401516001600160a01b03908116600090815260018352604080822060608801519093168252919092529020541015610e3b5760405162461bcd60e51b815260206004820152601f60248201527f707265706172653a20494e53554646494349454e545f4c49515549444954590060448201526064016102a4565b60e08201516020808401516001600160a01b039081166000908152600183526040808220606088015190931682529190925281208054909190610e7f9084906128c2565b90915550505b7f89025036b76b3de5dc27235b15b78697f2068f40a3e219e73ae301480c9ecd79823389898989604051610ebe9695949392919061279f565b60405180910390a150600160005598975050505050505050565b610ee0611ef3565b60026000541415610f035760405162461bcd60e51b81526004016102a4906125f4565b60026000908155604051610f1b908690602001612708565b60408051601f1981840301815291905280516020909101209050600160008281526003602052604090205460ff166002811115610f6857634e487b7160e01b600052602160045260246000fd5b14610fb55760405162461bcd60e51b815260206004820152601960248201527f63616e63656c3a20494e56414c49445f54585f5354415455530000000000000060448201526064016102a4565b6000818152600360205260409020805460ff191660021790556101408501357f000000000000000000000000000000000000000000000000000000000000000014156110f25742856101000135106110775761101760408601602087016120ac565b6001600160a01b0316336001600160a01b0316146110775760405162461bcd60e51b815260206004820152601a60248201527f63616e63656c3a20524f555445525f4d5553545f43414e43454c00000000000060448201526064016102a4565b6110a161108a60608701604088016120ac565b61109760208801886120ac565b8760e00135611840565b6110ed5760405162461bcd60e51b815260206004820152601760248201527f63616e63656c3a205452414e534645525f4641494c454400000000000000000060448201526064016102a4565b6111ef565b42856101000135106111755761110b60208601866120ac565b6001600160a01b031661111f8686866118d8565b6001600160a01b0316146111755760405162461bcd60e51b815260206004820152601960248201527f63616e63656c3a20494e56414c49445f5349474e41545552450000000000000060448201526064016102a4565b60e08501356001600061118e6040890160208a016120ac565b6001600160a01b0316815260208101919091526040016000908120906111ba6080890160608a016120ac565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111e991906128aa565b90915550505b61120a6111ff60208701876120ac565b86610120013561168c565b7f115bbef6e9f9ac324ddf40157561578cd7450f1264f867339ec7f8e6573eb98b853360405161123b92919061271b565b60405180910390a161124c856128d9565b600160005595945050505050565b6002602052816000526040600020818154811061127657600080fd5b90600052602060002001600091509150505481565b600260005414156112ae5760405162461bcd60e51b81526004016102a4906125f4565b60026000556001600160a01b038116611315578134146113105760405162461bcd60e51b815260206004820152601c60248201527f6164644c69717569646974793a2056414c55455f4d49534d415443480000000060448201526064016102a4565b6113d3565b341561136f5760405162461bcd60e51b815260206004820152602360248201527f6164644c69717569646974793a204554485f574954485f4552435f5452414e536044820152622322a960e91b60648201526084016102a4565b61137b81333085611873565b6113d35760405162461bcd60e51b815260206004820152602360248201527f6164644c69717569646974793a2045524332305f5452414e534645525f46414960448201526213115160ea1b60648201526084016102a4565b3360009081526001602090815260408083206001600160a01b0385168452909152812080548492906114069084906128aa565b9091555050604080513381526001600160a01b03831660208201529081018390527f9d278c56ba6dc86a12eefe6b43112bd6e06648eb4ec0b950ee2d783d40e2acb49060600160405180910390a150506001600055565b600260005414156114805760405162461bcd60e51b81526004016102a4906125f4565b600260009081553381526001602090815260408083206001600160a01b03861684529091529020548311156115035760405162461bcd60e51b815260206004820152602360248201527f72656d6f76654c69717569646974793a20494e53554646494349454e545f46556044820152624e445360e81b60648201526084016102a4565b3360009081526001602090815260408083206001600160a01b0386168452909152812080548592906115369084906128c2565b909155506115479050828285611840565b6115935760405162461bcd60e51b815260206004820181905260248201527f72656d6f76654c69717569646974793a205452414e534645525f4641494c454460448201526064016102a4565b604080513381526001600160a01b0384811660208301528183018690528316606082015290517f7da12116be8cb7af4b2d9e9b4a2ca2c3a3243ddd6fd3a94411902367b8eed5689181900360800190a15050600160005550565b6000806115f98661195f565b60408051808201825282815260208082018981528351808301869052905181850152835180820385018152606090910190935282519201919091209192509061168061164482611a9c565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611aef92505050565b98975050505050505050565b6001600160a01b0382166000908152600260205260408120546116b1906001906128c2565b905060008167ffffffffffffffff8111156116dc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611705578160200160208202803683370190505b50905060008060005b6117198560016128aa565b81101561180d578215801561177157506001600160a01b038716600090815260026020526040902080548791908390811061176457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154145b1561177f57600192506117fb565b6001600160a01b03871660009081526002602052604090208054829081106117b757634e487b7160e01b600052603260045260246000fd5b90600052602060002001548483815181106117e257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152816117f7816129e4565b9250505b80611805816129e4565b91505061170e565b506001600160a01b0386166000908152600260209081526040909120845161183792860190611f56565b50505050505050565b60006001600160a01b038416156118615761185c848484611ba5565b61186b565b61186b8383611bb2565b949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526000906118cf90869060840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b179052611c21565b95945050505050565b6000806118e48561195f565b9050600060405180604001604052808381526020016040518060400160405280600681526020016518d85b98d95b60d21b815250815250905060008160405160200161193091906126e3565b60405160208183030381529060405280519060200120905061195461164482611a9c565b979650505050505050565b60408051610120810190915260009081908061197e60208601866120ac565b6001600160a01b0316815260200184602001602081019061199f91906120ac565b6001600160a01b031681526020016119bd60608601604087016120ac565b6001600160a01b031681526020016119db60808601606087016120ac565b6001600160a01b031681526020016119f960a08601608087016120ac565b6001600160a01b0316815261014085013560208201526101608501356040820152606001611a2a60a08601866127f6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060c0850135602091820152604051919250611a7e9183910161262b565b60405160208183030381529060405280519060200120915050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b600080600080845160411415611b195750505060208201516040830151606084015160001a611b8f565b845160401415611b475750505060408201516020830151906001600160ff1b0381169060ff1c601b01611b8f565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102a4565b611b9b86828585611cee565b9695505050505050565b600061186b848484611e8e565b6000806000846001600160a01b03168460405160006040518083038185875af1925050503d8060008114611c02576040519150601f19603f3d011682016040523d82523d6000602084013e611c07565b606091505b5091509150611c168282611ee2565b506001949350505050565b6000823b611c655760405162461bcd60e51b81526020600482015260116024820152704c696245524332303a204e4f5f434f444560781b60448201526064016102a4565b600080846001600160a01b031684604051611c809190612588565b6000604051808303816000865af19150503d8060008114611cbd576040519150601f19603f3d011682016040523d82523d6000602084013e611cc2565b606091505b5091509150611cd18282611ee2565b805115806118cf5750808060200190518101906118cf9190612132565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611d6b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102a4565b8360ff16601b1480611d8057508360ff16601c145b611dd75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016102a4565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611e2b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118cf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102a4565b6040516001600160a01b03831660248201526044810182905260009061186b90859060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052611c21565b81611eef57805160208201fd5b5050565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a082015260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b828054828255906000526020600020908101928215611f91579160200282015b82811115611f91578251825591602001919060010190611f76565b50611f9d929150611fa1565b5090565b5b80821115611f9d5760008155600101611fa2565b8035611fc181612a2b565b919050565b60008083601f840112611fd7578182fd5b50813567ffffffffffffffff811115611fee578182fd5b60208301915083602082850101111561200657600080fd5b9250929050565b600082601f83011261201d578081fd5b813567ffffffffffffffff8082111561203857612038612a15565b604051601f8301601f19908116603f0116810190828211818310171561206057612060612a15565b81604052838152866020858801011115612078578485fd5b8360208701602083013792830160200193909352509392505050565b600061018082840312156120a6578081fd5b50919050565b6000602082840312156120bd578081fd5b81356120c881612a2b565b9392505050565b600080604083850312156120e1578081fd5b82356120ec81612a2b565b915060208301356120fc81612a2b565b809150509250929050565b60008060408385031215612119578182fd5b823561212481612a2b565b946020939093013593505050565b600060208284031215612143578081fd5b815180151581146120c8578182fd5b600060208284031215612163578081fd5b5035919050565b600080600080600080600060a0888a031215612184578283fd5b873567ffffffffffffffff8082111561219b578485fd5b90890190610120828c0312156121af578485fd5b9097506020890135965060408901359550606089013590808211156121d2578485fd5b6121de8b838c01611fc6565b909650945060808a01359150808211156121f6578384fd5b506122038a828b01611fc6565b989b979a50959850939692959293505050565b60008060006040848603121561222a578283fd5b833567ffffffffffffffff80821115612241578485fd5b61224d87838801612094565b94506020860135915080821115612262578384fd5b5061226f86828701611fc6565b9497909650939450505050565b60008060008060608587031215612291578384fd5b843567ffffffffffffffff808211156122a8578586fd5b6122b488838901612094565b95506020870135945060408701359150808211156122d0578384fd5b506122dd87828801611fc6565b95989497509550505050565b600080604083850312156122fb578182fd5b8235915060208301356120fc81612a2b565b600080600060608486031215612321578283fd5b83359250602084013561233381612a2b565b9150604084013561234381612a2b565b809150509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845261238f8160208601602086016129b4565b601f01601f19169290920160200192915050565b60006101806123c2846123b585611fb6565b6001600160a01b03169052565b6123ce60208401611fb6565b6001600160a01b031660208501526123e860408401611fb6565b6001600160a01b0316604085015261240260608401611fb6565b6001600160a01b0316606085015261241c60808401611fb6565b6001600160a01b0316608085015261243760a0840184612865565b8260a087015261244a838701828461234e565b60c0868101359088015260e0808701359088015261010080870135908801526101208087013590880152610140808701359088015261016095860135959096019490945250929392505050565b80516001600160a01b03168252600061018060208301516124c360208601826001600160a01b03169052565b5060408301516124de60408601826001600160a01b03169052565b5060608301516124f960608601826001600160a01b03169052565b50608083015161251460808601826001600160a01b03169052565b5060a08301518160a086015261252c82860182612377565b60c0858101519087015260e08086015190870152610100808601519087015261012080860151908701526101408086015190870152610160948501519490950193909352509192915050565b8183823760009101908152919050565b6000825161259a8184602087016129b4565b9190910192915050565b60018060a01b0385168152836020820152606060408201526000611b9b60608301848661234e565b60208101600383106125ee57634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602081526126456020820183516001600160a01b03169052565b6000602083015161266160408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a083015160c083015260c083015160e083015260e083015161012061010081818601526126d3610140860184612377565b9501519301929092525090919050565b60208152815160208201526000602083015160408084015261186b6060840182612377565b6020815260006120c860208301846123a3565b60408152600061272e60408301856123a3565b905060018060a01b03831660208301529392505050565b60808152600061275860808301886123a3565b866020840152828103604084015261277181868861234e565b91505060018060a01b03831660608301529695505050505050565b6020815260006120c86020830184612497565b6080815260006127b26080830189612497565b6001600160a01b038816602084015282810360408401526127d481878961234e565b905082810360608401526127e981858761234e565b9998505050505050505050565b6000808335601e1984360301811261280c578283fd5b83018035915067ffffffffffffffff821115612826578283fd5b60200191503681900382131561200657600080fd5b604051610180810167ffffffffffffffff8111828210171561285f5761285f612a15565b60405290565b6000808335601e1984360301811261287b578283fd5b830160208101925035905067ffffffffffffffff81111561289b57600080fd5b80360383131561200657600080fd5b600082198211156128bd576128bd6129ff565b500190565b6000828210156128d4576128d46129ff565b500390565b600061018082360312156128eb578081fd5b6128f361283b565b6128fc83611fb6565b815261290a60208401611fb6565b602082015261291b60408401611fb6565b604082015261292c60608401611fb6565b606082015261293d60808401611fb6565b608082015260a083013567ffffffffffffffff81111561295b578283fd5b6129673682860161200d565b60a08301525060c0838101359082015260e0808401359082015261010080840135908201526101208084013590820152610140808401359082015261016092830135928101929092525090565b60005b838110156129cf5781810151838201526020016129b7565b838111156129de576000848401525b50505050565b60006000198214156129f8576129f86129ff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612a4057600080fd5b5056fea2646970667358221220461c5d5c43290a9f3b4e106573b5072579e9fd78eb1d68f5e55f7f7069dd303664736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80638a0d24ac116100645780638a0d24ac146101675780639a8a059214610187578063c95f9d0e146101bb578063cfecf7b9146101d0578063d0a8d00d1461020d578063f31abcc41461025957600080fd5b80630e8a7552146100a157806341258b5c146100d7578063450f67431461011d578063543ad1df1461013057806389b56d8c14610147575b600080fd5b3480156100ad57600080fd5b506100c16100bc36600461227c565b610279565b6040516100ce919061278c565b60405180910390f35b3480156100e357600080fd5b5061010f6100f23660046120cf565b600160209081526000928352604080842090915290825290205481565b6040519081526020016100ce565b6100c161012b36600461216a565b6107c5565b34801561013c57600080fd5b5061010f6201518081565b34801561015357600080fd5b506100c1610162366004612216565b610ed8565b34801561017357600080fd5b5061010f610182366004612107565b61125a565b34801561019357600080fd5b5061010f7f000000000000000000000000000000000000000000000000000000000000000081565b6101ce6101c93660046122e9565b61128b565b005b3480156101dc57600080fd5b506102006101eb366004612152565b60036020526000908152604090205460ff1681565b6040516100ce91906125cc565b34801561021957600080fd5b506102417f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100ce565b34801561026557600080fd5b506101ce61027436600461230d565b61145d565b610281611ef3565b600260005414156102ad5760405162461bcd60e51b81526004016102a4906125f4565b60405180910390fd5b600260009081556040516102c5908790602001612708565b60408051601f1981840301815291905280516020909101209050600160008281526003602052604090205460ff16600281111561031257634e487b7160e01b600052602160045260246000fd5b1461035f5760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20494e56414c49445f54585f53544154555300000000000060448201526064016102a4565b42866101000135116103a65760405162461bcd60e51b815260206004820152601060248201526f199d5b199a5b1b0e881156141254915160821b60448201526064016102a4565b6103b360208701876120ac565b6001600160a01b03166103c8878787876115ed565b6001600160a01b03161461041e5760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20494e56414c49445f5349474e415455524500000000000060448201526064016102a4565b8560e0013585106104715760405162461bcd60e51b815260206004820152601c60248201527f66756c66696c6c3a20494e56414c49445f52454c415945525f4645450000000060448201526064016102a4565b6000818152600360209081526040909120805460ff191660021790556104a89061049d908801886120ac565b87610120013561168c565b7f0000000000000000000000000000000000000000000000000000000000000000866101400135141561055d5760e0860135600160006104ee60408a0160208b016120ac565b6001600160a01b03166001600160a01b03168152602001908152602001600020600088604001602081019061052391906120ac565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461055291906128aa565b9091555061076e9050565b600061056d8660e08901356128c2565b905085156105db5761058f6105886080890160608a016120ac565b3388611840565b6105db5760405162461bcd60e51b815260206004820152601c60248201527f66756c66696c6c3a204645455f5452414e534645525f4641494c45440000000060448201526064016102a4565b604080516000815260208101918290525190206105fb60a08901896127f6565b604051610609929190612578565b604051809103902014156106915761064061062a6080890160608a016120ac565b61063a60a08a0160808b016120ac565b83611840565b61068c5760405162461bcd60e51b815260206004820152601860248201527f66756c66696c6c3a205452414e534645525f4641494c4544000000000000000060448201526064016102a4565b61076c565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b61d27f66106e06106d360808b0160608c016120ac565b6001600160a01b03161590565b6106eb5760006106ed565b825b6106fd60808b0160608c016120ac565b8461070b60a08d018d6127f6565b6040518663ffffffff1660e01b815260040161072a94939291906125a4565b6000604051808303818588803b15801561074357600080fd5b505af193505050508015610755575060015b61076c5761064061062a6080890160608a016120ac565b505b7fb54f37fca88fdf829020c2655cae0d62aa82e4c7fa3afef494dc2099863601c986868686336040516107a5959493929190612745565b60405180910390a16107b6866128d9565b60016000559695505050505050565b6107cd611ef3565b600260005414156107f05760405162461bcd60e51b81526004016102a4906125f4565b60026000556201518061080342886128c2565b10156108515760405162461bcd60e51b815260206004820152601860248201527f707265706172653a2054494d454f55545f544f4f5f4c4f57000000000000000060448201526064016102a4565b8760c001358860a0013514156108a25760405162461bcd60e51b8152602060048201526016602482015275707265706172653a2053414d455f434841494e49445360501b60448201526064016102a4565b7f00000000000000000000000000000000000000000000000000000000000000008860a0013514806108f757507f00000000000000000000000000000000000000000000000000000000000000008860c00135145b6109435760405162461bcd60e51b815260206004820152601960248201527f707265706172653a20494e56414c49445f434841494e4944530000000000000060448201526064016102a4565b600061095560a08a0160808b016120ac565b6001600160a01b031614156109b75760405162461bcd60e51b815260206004820152602260248201527f707265706172653a20494e56414c49445f524543454956494e475f4144445245604482015261535360f01b60648201526084016102a4565b604080516101808101909152600090806109d460208c018c6120ac565b6001600160a01b031681526020018a60200160208101906109f591906120ac565b6001600160a01b03168152602001610a1360608c0160408d016120ac565b6001600160a01b03168152602001610a3160808c0160608d016120ac565b6001600160a01b03168152602001610a4f60a08c0160808d016120ac565b6001600160a01b03168152602001610a6a60e08c018c6127f6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506101008c013560208084019190915260408084018d9052606084018c905243608085015260a0808f01359085015260c0808f0135940193909352915192935091610aec9184910161278c565b60408051601f19818403018152919052805160209091012090506000808281526003602052604090205460ff166002811115610b3857634e487b7160e01b600052602160045260246000fd5b14610b7e5760405162461bcd60e51b8152602060048201526016602482015275707265706172653a204449474553545f45584953545360501b60448201526064016102a4565b6000818152600360209081526040808320805460ff1916600190811790915585516001600160a01b03168452600283529083208054918201815583529120439101556101408201517f00000000000000000000000000000000000000000000000000000000000000001415610d055760408201516001600160a01b0316610c57578160e001513414610c525760405162461bcd60e51b815260206004820152601760248201527f707265706172653a2056414c55455f4d49534d4154434800000000000000000060448201526064016102a4565b610e85565b3415610ca55760405162461bcd60e51b815260206004820152601e60248201527f707265706172653a204554485f574954485f4552435f5452414e53464552000060448201526064016102a4565b610cb9826040015133308560e00151611873565b610c525760405162461bcd60e51b815260206004820152601e60248201527f707265706172653a2045524332305f5452414e534645525f4641494c4544000060448201526064016102a4565b81602001516001600160a01b0316336001600160a01b031614610d6a5760405162461bcd60e51b815260206004820152601860248201527f707265706172653a20524f555445525f4d49534d41544348000000000000000060448201526064016102a4565b3415610db85760405162461bcd60e51b815260206004820181905260248201527f707265706172653a204554485f574954485f524f555445525f5052455041524560448201526064016102a4565b60e08201516020808401516001600160a01b03908116600090815260018352604080822060608801519093168252919092529020541015610e3b5760405162461bcd60e51b815260206004820152601f60248201527f707265706172653a20494e53554646494349454e545f4c49515549444954590060448201526064016102a4565b60e08201516020808401516001600160a01b039081166000908152600183526040808220606088015190931682529190925281208054909190610e7f9084906128c2565b90915550505b7f89025036b76b3de5dc27235b15b78697f2068f40a3e219e73ae301480c9ecd79823389898989604051610ebe9695949392919061279f565b60405180910390a150600160005598975050505050505050565b610ee0611ef3565b60026000541415610f035760405162461bcd60e51b81526004016102a4906125f4565b60026000908155604051610f1b908690602001612708565b60408051601f1981840301815291905280516020909101209050600160008281526003602052604090205460ff166002811115610f6857634e487b7160e01b600052602160045260246000fd5b14610fb55760405162461bcd60e51b815260206004820152601960248201527f63616e63656c3a20494e56414c49445f54585f5354415455530000000000000060448201526064016102a4565b6000818152600360205260409020805460ff191660021790556101408501357f000000000000000000000000000000000000000000000000000000000000000014156110f25742856101000135106110775761101760408601602087016120ac565b6001600160a01b0316336001600160a01b0316146110775760405162461bcd60e51b815260206004820152601a60248201527f63616e63656c3a20524f555445525f4d5553545f43414e43454c00000000000060448201526064016102a4565b6110a161108a60608701604088016120ac565b61109760208801886120ac565b8760e00135611840565b6110ed5760405162461bcd60e51b815260206004820152601760248201527f63616e63656c3a205452414e534645525f4641494c454400000000000000000060448201526064016102a4565b6111ef565b42856101000135106111755761110b60208601866120ac565b6001600160a01b031661111f8686866118d8565b6001600160a01b0316146111755760405162461bcd60e51b815260206004820152601960248201527f63616e63656c3a20494e56414c49445f5349474e41545552450000000000000060448201526064016102a4565b60e08501356001600061118e6040890160208a016120ac565b6001600160a01b0316815260208101919091526040016000908120906111ba6080890160608a016120ac565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111e991906128aa565b90915550505b61120a6111ff60208701876120ac565b86610120013561168c565b7f115bbef6e9f9ac324ddf40157561578cd7450f1264f867339ec7f8e6573eb98b853360405161123b92919061271b565b60405180910390a161124c856128d9565b600160005595945050505050565b6002602052816000526040600020818154811061127657600080fd5b90600052602060002001600091509150505481565b600260005414156112ae5760405162461bcd60e51b81526004016102a4906125f4565b60026000556001600160a01b038116611315578134146113105760405162461bcd60e51b815260206004820152601c60248201527f6164644c69717569646974793a2056414c55455f4d49534d415443480000000060448201526064016102a4565b6113d3565b341561136f5760405162461bcd60e51b815260206004820152602360248201527f6164644c69717569646974793a204554485f574954485f4552435f5452414e536044820152622322a960e91b60648201526084016102a4565b61137b81333085611873565b6113d35760405162461bcd60e51b815260206004820152602360248201527f6164644c69717569646974793a2045524332305f5452414e534645525f46414960448201526213115160ea1b60648201526084016102a4565b3360009081526001602090815260408083206001600160a01b0385168452909152812080548492906114069084906128aa565b9091555050604080513381526001600160a01b03831660208201529081018390527f9d278c56ba6dc86a12eefe6b43112bd6e06648eb4ec0b950ee2d783d40e2acb49060600160405180910390a150506001600055565b600260005414156114805760405162461bcd60e51b81526004016102a4906125f4565b600260009081553381526001602090815260408083206001600160a01b03861684529091529020548311156115035760405162461bcd60e51b815260206004820152602360248201527f72656d6f76654c69717569646974793a20494e53554646494349454e545f46556044820152624e445360e81b60648201526084016102a4565b3360009081526001602090815260408083206001600160a01b0386168452909152812080548592906115369084906128c2565b909155506115479050828285611840565b6115935760405162461bcd60e51b815260206004820181905260248201527f72656d6f76654c69717569646974793a205452414e534645525f4641494c454460448201526064016102a4565b604080513381526001600160a01b0384811660208301528183018690528316606082015290517f7da12116be8cb7af4b2d9e9b4a2ca2c3a3243ddd6fd3a94411902367b8eed5689181900360800190a15050600160005550565b6000806115f98661195f565b60408051808201825282815260208082018981528351808301869052905181850152835180820385018152606090910190935282519201919091209192509061168061164482611a9c565b87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611aef92505050565b98975050505050505050565b6001600160a01b0382166000908152600260205260408120546116b1906001906128c2565b905060008167ffffffffffffffff8111156116dc57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611705578160200160208202803683370190505b50905060008060005b6117198560016128aa565b81101561180d578215801561177157506001600160a01b038716600090815260026020526040902080548791908390811061176457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154145b1561177f57600192506117fb565b6001600160a01b03871660009081526002602052604090208054829081106117b757634e487b7160e01b600052603260045260246000fd5b90600052602060002001548483815181106117e257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152816117f7816129e4565b9250505b80611805816129e4565b91505061170e565b506001600160a01b0386166000908152600260209081526040909120845161183792860190611f56565b50505050505050565b60006001600160a01b038416156118615761185c848484611ba5565b61186b565b61186b8383611bb2565b949350505050565b6040516001600160a01b03808516602483015283166044820152606481018290526000906118cf90869060840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b179052611c21565b95945050505050565b6000806118e48561195f565b9050600060405180604001604052808381526020016040518060400160405280600681526020016518d85b98d95b60d21b815250815250905060008160405160200161193091906126e3565b60405160208183030381529060405280519060200120905061195461164482611a9c565b979650505050505050565b60408051610120810190915260009081908061197e60208601866120ac565b6001600160a01b0316815260200184602001602081019061199f91906120ac565b6001600160a01b031681526020016119bd60608601604087016120ac565b6001600160a01b031681526020016119db60808601606087016120ac565b6001600160a01b031681526020016119f960a08601608087016120ac565b6001600160a01b0316815261014085013560208201526101608501356040820152606001611a2a60a08601866127f6565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060c0850135602091820152604051919250611a7e9183910161262b565b60405160208183030381529060405280519060200120915050919050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b600080600080845160411415611b195750505060208201516040830151606084015160001a611b8f565b845160401415611b475750505060408201516020830151906001600160ff1b0381169060ff1c601b01611b8f565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102a4565b611b9b86828585611cee565b9695505050505050565b600061186b848484611e8e565b6000806000846001600160a01b03168460405160006040518083038185875af1925050503d8060008114611c02576040519150601f19603f3d011682016040523d82523d6000602084013e611c07565b606091505b5091509150611c168282611ee2565b506001949350505050565b6000823b611c655760405162461bcd60e51b81526020600482015260116024820152704c696245524332303a204e4f5f434f444560781b60448201526064016102a4565b600080846001600160a01b031684604051611c809190612588565b6000604051808303816000865af19150503d8060008114611cbd576040519150601f19603f3d011682016040523d82523d6000602084013e611cc2565b606091505b5091509150611cd18282611ee2565b805115806118cf5750808060200190518101906118cf9190612132565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115611d6b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102a4565b8360ff16601b1480611d8057508360ff16601c145b611dd75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016102a4565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015611e2b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166118cf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102a4565b6040516001600160a01b03831660248201526044810182905260009061186b90859060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052611c21565b81611eef57805160208201fd5b5050565b604080516101808101825260008082526020820181905291810182905260608082018390526080820183905260a082015260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b828054828255906000526020600020908101928215611f91579160200282015b82811115611f91578251825591602001919060010190611f76565b50611f9d929150611fa1565b5090565b5b80821115611f9d5760008155600101611fa2565b8035611fc181612a2b565b919050565b60008083601f840112611fd7578182fd5b50813567ffffffffffffffff811115611fee578182fd5b60208301915083602082850101111561200657600080fd5b9250929050565b600082601f83011261201d578081fd5b813567ffffffffffffffff8082111561203857612038612a15565b604051601f8301601f19908116603f0116810190828211818310171561206057612060612a15565b81604052838152866020858801011115612078578485fd5b8360208701602083013792830160200193909352509392505050565b600061018082840312156120a6578081fd5b50919050565b6000602082840312156120bd578081fd5b81356120c881612a2b565b9392505050565b600080604083850312156120e1578081fd5b82356120ec81612a2b565b915060208301356120fc81612a2b565b809150509250929050565b60008060408385031215612119578182fd5b823561212481612a2b565b946020939093013593505050565b600060208284031215612143578081fd5b815180151581146120c8578182fd5b600060208284031215612163578081fd5b5035919050565b600080600080600080600060a0888a031215612184578283fd5b873567ffffffffffffffff8082111561219b578485fd5b90890190610120828c0312156121af578485fd5b9097506020890135965060408901359550606089013590808211156121d2578485fd5b6121de8b838c01611fc6565b909650945060808a01359150808211156121f6578384fd5b506122038a828b01611fc6565b989b979a50959850939692959293505050565b60008060006040848603121561222a578283fd5b833567ffffffffffffffff80821115612241578485fd5b61224d87838801612094565b94506020860135915080821115612262578384fd5b5061226f86828701611fc6565b9497909650939450505050565b60008060008060608587031215612291578384fd5b843567ffffffffffffffff808211156122a8578586fd5b6122b488838901612094565b95506020870135945060408701359150808211156122d0578384fd5b506122dd87828801611fc6565b95989497509550505050565b600080604083850312156122fb578182fd5b8235915060208301356120fc81612a2b565b600080600060608486031215612321578283fd5b83359250602084013561233381612a2b565b9150604084013561234381612a2b565b809150509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845261238f8160208601602086016129b4565b601f01601f19169290920160200192915050565b60006101806123c2846123b585611fb6565b6001600160a01b03169052565b6123ce60208401611fb6565b6001600160a01b031660208501526123e860408401611fb6565b6001600160a01b0316604085015261240260608401611fb6565b6001600160a01b0316606085015261241c60808401611fb6565b6001600160a01b0316608085015261243760a0840184612865565b8260a087015261244a838701828461234e565b60c0868101359088015260e0808701359088015261010080870135908801526101208087013590880152610140808701359088015261016095860135959096019490945250929392505050565b80516001600160a01b03168252600061018060208301516124c360208601826001600160a01b03169052565b5060408301516124de60408601826001600160a01b03169052565b5060608301516124f960608601826001600160a01b03169052565b50608083015161251460808601826001600160a01b03169052565b5060a08301518160a086015261252c82860182612377565b60c0858101519087015260e08086015190870152610100808601519087015261012080860151908701526101408086015190870152610160948501519490950193909352509192915050565b8183823760009101908152919050565b6000825161259a8184602087016129b4565b9190910192915050565b60018060a01b0385168152836020820152606060408201526000611b9b60608301848661234e565b60208101600383106125ee57634e487b7160e01b600052602160045260246000fd5b91905290565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602081526126456020820183516001600160a01b03169052565b6000602083015161266160408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b03811660808401525060808301516001600160a01b03811660a08401525060a083015160c083015260c083015160e083015260e083015161012061010081818601526126d3610140860184612377565b9501519301929092525090919050565b60208152815160208201526000602083015160408084015261186b6060840182612377565b6020815260006120c860208301846123a3565b60408152600061272e60408301856123a3565b905060018060a01b03831660208301529392505050565b60808152600061275860808301886123a3565b866020840152828103604084015261277181868861234e565b91505060018060a01b03831660608301529695505050505050565b6020815260006120c86020830184612497565b6080815260006127b26080830189612497565b6001600160a01b038816602084015282810360408401526127d481878961234e565b905082810360608401526127e981858761234e565b9998505050505050505050565b6000808335601e1984360301811261280c578283fd5b83018035915067ffffffffffffffff821115612826578283fd5b60200191503681900382131561200657600080fd5b604051610180810167ffffffffffffffff8111828210171561285f5761285f612a15565b60405290565b6000808335601e1984360301811261287b578283fd5b830160208101925035905067ffffffffffffffff81111561289b57600080fd5b80360383131561200657600080fd5b600082198211156128bd576128bd6129ff565b500190565b6000828210156128d4576128d46129ff565b500390565b600061018082360312156128eb578081fd5b6128f361283b565b6128fc83611fb6565b815261290a60208401611fb6565b602082015261291b60408401611fb6565b604082015261292c60608401611fb6565b606082015261293d60808401611fb6565b608082015260a083013567ffffffffffffffff81111561295b578283fd5b6129673682860161200d565b60a08301525060c0838101359082015260e0808401359082015261010080840135908201526101208084013590820152610140808401359082015261016092830135928101929092525090565b60005b838110156129cf5781810151838201526020016129b7565b838111156129de576000848401525b50505050565b60006000198214156129f8576129f86129ff565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612a4057600080fd5b5056fea2646970667358221220461c5d5c43290a9f3b4e106573b5072579e9fd78eb1d68f5e55f7f7069dd303664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,address)": {
        "params": {
          "amount": "The amount of liquidity to add for the router",
          "assetId": "The address (or `address(0)` if native asset) of the                asset you're adding liquidity for"
        }
      }
    },
    "stateVariables": {
      "activeTransactionBlocks": {
        "details": "Maping of user address to blocks where active transfers      were created."
      },
      "chainId": {
        "details": "The chain id of the contract, is passed in to avoid any evm issues"
      },
      "iMultisend": {
        "details": "Address of the deployed multisending interpreter contract"
      },
      "routerBalances": {
        "details": "Mapping of router to balance specific to asset"
      },
      "transactionStatus": {
        "details": "Mapping of hash of `TransactionData` to status of a transaction"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1143,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "routerBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1149,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "activeTransactionBlocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1155,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "transactionStatus",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_enum(TransactionStatus)2176)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(TransactionStatus)2176": {
        "encoding": "inplace",
        "label": "enum ITransactionManager.TransactionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_enum(TransactionStatus)2176)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum ITransactionManager.TransactionStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(TransactionStatus)2176"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}