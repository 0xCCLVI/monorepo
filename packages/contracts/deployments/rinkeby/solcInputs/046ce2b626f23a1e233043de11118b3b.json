{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/test/TestERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport '../interfaces/IERC20Minimal.sol';\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/* This token is ONLY useful for testing\n * Anybody can mint as many tokens as they like\n * Anybody can burn anyone else's tokens\n */\ncontract TestERC20 is ERC20 {\n    constructor() ERC20(\"Test Token\", \"TEST\") {\n        _mint(msg.sender, 1000000 ether);\n    }\n\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external {\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/lib/LibAsset.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"./LibERC20.sol\";\nimport \"./LibUtils.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\n/// @title LibAsset\n/// @author Connext <support@connext.network>\n/// @notice This library contains helpers for dealing with onchain transfers\n///         of in-channel assets. It is designed to safely handle all asset\n///         transfers out of channel in the event of an onchain dispute. Also\n///         safely handles ERC20 transfers that may be non-compliant\nlibrary LibAsset {\n    address constant ETHER_ASSETID = address(0);\n\n    function isEther(address assetId) internal pure returns (bool) {\n        return assetId == ETHER_ASSETID;\n    }\n\n    function getOwnBalance(address assetId) internal view returns (uint256) {\n        return\n            isEther(assetId)\n                ? address(this).balance\n                : IERC20(assetId).balanceOf(address(this));\n    }\n\n    function transferEther(address payable recipient, uint256 amount)\n        internal\n        returns (bool)\n    {\n        (bool success, bytes memory returnData) =\n            recipient.call{value: amount}(\"\");\n        LibUtils.revertIfCallFailed(success, returnData);\n        return true;\n    }\n\n    function transferERC20(\n        address assetId,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        return LibERC20.transfer(assetId, recipient, amount);\n    }\n\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\n    // both standard-compliant ones as well as tokens that exhibit the\n    // missing-return-value bug.\n    function transferAsset(\n        address assetId,\n        address payable recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        return\n            isEther(assetId)\n                ? transferEther(recipient, amount)\n                : transferERC20(assetId, recipient, amount);\n    }\n}\n"
    },
    "contracts/lib/LibERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"./LibUtils.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title LibERC20\n/// @author Connext <support@connext.network>\n/// @notice This library provides several functions to safely handle\n///         noncompliant tokens (i.e. does not return a boolean from\n///         the transfer function)\n\nlibrary LibERC20 {\n    function wrapCall(address assetId, bytes memory callData)\n        internal\n        returns (bool)\n    {\n        require(Address.isContract(assetId), \"LibERC20: NO_CODE\");\n        (bool success, bytes memory returnData) = assetId.call(callData);\n        LibUtils.revertIfCallFailed(success, returnData);\n        return returnData.length == 0 || abi.decode(returnData, (bool));\n    }\n\n    function approve(\n        address assetId,\n        address spender,\n        uint256 amount\n    ) internal returns (bool) {\n        return\n            wrapCall(\n                assetId,\n                abi.encodeWithSignature(\n                    \"approve(address,uint256)\",\n                    spender,\n                    amount\n                )\n            );\n    }\n\n    function transferFrom(\n        address assetId,\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        return\n            wrapCall(\n                assetId,\n                abi.encodeWithSignature(\n                    \"transferFrom(address,address,uint256)\",\n                    sender,\n                    recipient,\n                    amount\n                )\n            );\n    }\n\n    function transfer(\n        address assetId,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        return\n            wrapCall(\n                assetId,\n                abi.encodeWithSignature(\n                    \"transfer(address,uint256)\",\n                    recipient,\n                    amount\n                )\n            );\n    }\n}\n"
    },
    "contracts/lib/LibUtils.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\n/// @title LibUtils\n/// @author Connext <support@connext.network>\n/// @notice Contains a helper to revert if a call was not successfully\n///         made\nlibrary LibUtils {\n    // If success is false, reverts and passes on the revert string.\n    function revertIfCallFailed(bool success, bytes memory returnData)\n        internal\n        pure\n    {\n        if (!success) {\n            assembly {\n                revert(add(returnData, 0x20), mload(returnData))\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/TransactionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"./interfaces/ITransactionManager.sol\";\nimport \"./lib/LibAsset.sol\";\nimport \"./lib/LibERC20.sol\";\nimport \"./interpreters/MultisendInterpreter.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\ncontract TransactionManager is ReentrancyGuard, ITransactionManager {\n  /// @dev Mapping of router to balance specific to asset\n  mapping(address => mapping(address => uint256)) public routerBalances;\n\n  /// @dev Maping of user address to blocks where active transfers\n  ///      were created.\n  mapping(address => uint256[]) public activeTransactionBlocks;\n\n  /// @dev Mapping of hash of `TransactionData` to status of a transaction\n  mapping(bytes32 => TransactionStatus) public transactionStatus;\n\n  /// @dev The chain id of the contract, is passed in to avoid any evm issues\n  uint256 public immutable chainId;\n\n  /// @dev Address of the deployed multisending interpreter contract\n  address public immutable iMultisend;\n\n  uint256 public constant MIN_TIMEOUT = 24 hours;\n\n  constructor(address _iMultisend, uint256 _chainId) {\n    iMultisend = _iMultisend;\n    chainId = _chainId;\n  }\n\n  /// @param amount The amount of liquidity to add for the router\n  /// @param assetId The address (or `address(0)` if native asset) of the\n  ///                asset you're adding liquidity for\n  function addLiquidity(uint256 amount, address assetId) external payable override nonReentrant {\n    // Validate correct amounts are transferred\n    if (LibAsset.isEther(assetId)) {\n      require(msg.value == amount, \"addLiquidity: VALUE_MISMATCH\");\n    } else {\n      require(msg.value == 0, \"addLiquidity: ETH_WITH_ERC_TRANSFER\");\n      require(LibERC20.transferFrom(assetId, msg.sender, address(this), amount), \"addLiquidity: ERC20_TRANSFER_FAILED\");\n    }\n\n    // Update the router balances\n    routerBalances[msg.sender][assetId] += amount;\n\n    // Emit event\n    emit LiquidityAdded(msg.sender, assetId, amount);\n  }\n\n  function removeLiquidity(\n    uint256 amount,\n    address assetId,\n    address payable recipient\n  ) external override nonReentrant {\n    // Check that the amount can be deducted for the router\n    // TODO is this check worth the extra gas?\n    require(routerBalances[msg.sender][assetId] >= amount, \"removeLiquidity: INSUFFICIENT_FUNDS\");\n\n    // Update router balances\n    routerBalances[msg.sender][assetId] -= amount;\n\n    // Transfer from contract to router\n    require(LibAsset.transferAsset(assetId, recipient, amount), \"removeLiquidity: TRANSFER_FAILED\");\n\n    // Emit event\n    emit LiquidityRemoved(msg.sender, assetId, amount, recipient);\n  }\n\n  function prepare(\n    InvariantTransactionData calldata _txData,\n    uint256 amount,\n    uint256 expiry,\n    bytes calldata encodedBid,\n    bytes calldata bidSignature\n  ) external payable override nonReentrant returns (TransactionData memory) {\n    // Make sure the expiry is greater than min\n    require((expiry - block.timestamp) >= MIN_TIMEOUT, \"prepare: TIMEOUT_TOO_LOW\");\n\n    // Make sure the chains are different\n    require(_txData.sendingChainId != _txData.receivingChainId, \"prepare: SAME_CHAINIDS\");\n\n    // Make sure the chains are relevant\n    require(_txData.sendingChainId == chainId || _txData.receivingChainId == chainId, \"prepare: INVALID_CHAINIDS\");\n\n    // Sanity check: valid fallback\n    require(_txData.receivingAddress != address(0), \"prepare: INVALID_RECEIVING_ADDRESS\");\n\n    // Make sure the hash is not a duplicate\n    TransactionData memory txData = TransactionData({\n      user: _txData.user,\n      router: _txData.router,\n      sendingAssetId: _txData.sendingAssetId,\n      receivingAssetId: _txData.receivingAssetId,\n      receivingAddress: _txData.receivingAddress,\n      callData: _txData.callData,\n      transactionId: _txData.transactionId,\n      amount: amount,\n      expiry: expiry,\n      blockNumber: block.number,\n      sendingChainId: _txData.sendingChainId,\n      receivingChainId: _txData.receivingChainId\n    });\n    bytes32 digest = keccak256(abi.encode(txData));\n    require(transactionStatus[digest] == TransactionStatus.Empty, \"prepare: DIGEST_EXISTS\");\n\n    // Store the transaction variants\n    transactionStatus[digest] = TransactionStatus.Pending;\n\n    // Store active blocks\n    activeTransactionBlocks[txData.user].push(block.number);\n\n    // First determine if this is sender side or receiver side\n    if (txData.sendingChainId == chainId) {\n      // This is sender side prepare\n\n      // Validate correct amounts and transfer\n      if (LibAsset.isEther(txData.sendingAssetId)) {\n        require(msg.value == txData.amount, \"prepare: VALUE_MISMATCH\");\n      } else {\n        require(msg.value == 0, \"prepare: ETH_WITH_ERC_TRANSFER\");\n        require(\n          LibERC20.transferFrom(txData.sendingAssetId, msg.sender, address(this), txData.amount),\n          \"prepare: ERC20_TRANSFER_FAILED\"\n        );\n      }\n    } else {\n      // This is receiver side prepare\n\n      // Check that the caller is the router\n      require(msg.sender == txData.router, \"prepare: ROUTER_MISMATCH\");\n      require(msg.value == 0, \"prepare: ETH_WITH_ROUTER_PREPARE\");\n\n      // Check that router has liquidity\n      // TODO do we need explicit check vs implicit from safemath below?\n      require(\n        routerBalances[txData.router][txData.receivingAssetId] >= txData.amount,\n        \"prepare: INSUFFICIENT_LIQUIDITY\"\n      );\n\n      // NOTE: Timeout and amounts should have been decremented offchain\n\n      // NOTE: after some consideration, it feels like it's better to leave amount/fee\n      // validation *outside* the contracts as we likely want the logic to be flexible\n\n      // Pull funds from router balance (use msg.sender here to mitigate 3rd party attack)\n\n      // What would happen if some router tried to swoop in and steal another router's spot?\n      // - 3rd party router could EITHER use original txData or replace txData.router with itself\n      // - if original txData, 3rd party router would basically be paying for original router\n      // - if relaced router address, user sig on digest would not unlock sender side\n      routerBalances[txData.router][txData.receivingAssetId] -= txData.amount;\n    }\n\n    // Emit event\n    emit TransactionPrepared(txData, msg.sender, encodedBid, bidSignature);\n    return txData;\n  }\n\n  function fulfill(\n    TransactionData calldata txData,\n    uint256 relayerFee,\n    bytes calldata signature // signature on fee + digest\n  ) external override nonReentrant returns (TransactionData memory) {\n    // Make sure params match against stored data\n    // Also checks that there is an active transfer here\n    // Also checks that sender or receiver chainID is this chainId (bc we\n    // checked it previously)\n    bytes32 digest = keccak256(abi.encode(txData));\n\n    require(transactionStatus[digest] == TransactionStatus.Pending, \"fulfill: INVALID_TX_STATUS\");\n\n    require(txData.expiry > block.timestamp, \"fulfill: EXPIRED\");\n\n    // Validate signature\n    require(recoverFulfillSignature(txData, relayerFee, signature) == txData.user, \"fulfill: INVALID_SIGNATURE\");\n\n    // Sanity check: fee < amount\n    // TODO: Do we need this check? Safemath would catch it below\n    require(relayerFee < txData.amount, \"fulfill: INVALID_RELAYER_FEE\");\n\n    // Mark transaction as fulfilled\n    transactionStatus[digest] = TransactionStatus.Completed;\n\n    // Remove active blocks\n    removeUserActiveBlocks(txData.user, txData.blockNumber);\n\n    // TODO: user cant accidentally fulfill sender\n    if (txData.sendingChainId == chainId) {\n      // Complete tx to router\n      // NOTE: there is no fee taken on the sending side for the relayer\n      routerBalances[txData.router][txData.sendingAssetId] += txData.amount;\n    } else {\n      // Complete tx to user\n      // Get the amount to send\n      uint256 toSend = txData.amount - relayerFee;\n\n      // Send the relayer the fee\n      if (relayerFee > 0) {\n        require(\n          LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee),\n          \"fulfill: FEE_TRANSFER_FAILED\"\n        );\n      }\n\n      if (keccak256(txData.callData) == keccak256(new bytes(0))) {\n        // No external calls, send directly to receiving address\n        require(\n          LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),\n          \"fulfill: TRANSFER_FAILED\"\n        );\n      } else {\n        // Handle external calls with a fallback to the receiving\n        // address\n        // TODO: This would allow us to execute an arbitrary transfer to drain the contracts\n        // We'll need to change this to use vector pattern with *explicit* amount.\n        // If it is a token, approve the amount to the interpreter\n        try\n          MultisendInterpreter(iMultisend).execute{value: LibAsset.isEther(txData.receivingAssetId) ? toSend : 0}(\n            txData.receivingAssetId,\n            toSend,\n            txData.callData\n          )\n        {} catch {\n          require(\n            LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),\n            \"fulfill: TRANSFER_FAILED\"\n          );\n        }\n      }\n    }\n\n    // Emit event\n    emit TransactionFulfilled(txData, relayerFee, signature, msg.sender);\n\n    return txData;\n  }\n\n  // Tx can be \"collaboratively\" cancelled by the receiver at any time and by the sender after expiry\n  function cancel(TransactionData calldata txData, bytes calldata signature)\n    external\n    override\n    nonReentrant\n    returns (TransactionData memory)\n  {\n    // Make sure params match against stored data\n    // Also checks that there is an active transfer here\n    // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\n    bytes32 digest = keccak256(abi.encode(txData));\n\n    require(transactionStatus[digest] == TransactionStatus.Pending, \"cancel: INVALID_TX_STATUS\");\n\n    // Mark transaction as complete\n    transactionStatus[digest] = TransactionStatus.Completed;\n\n    if (txData.sendingChainId == chainId) {\n      // Sender side --> funds go back to user\n      if (txData.expiry >= block.timestamp) {\n        // Timeout has not expired and tx may only be cancelled by router\n        require(msg.sender == txData.router, \"cancel: ROUTER_MUST_CANCEL\");\n      }\n      // Return to user\n      require(\n        LibAsset.transferAsset(txData.sendingAssetId, payable(txData.user), txData.amount),\n        \"cancel: TRANSFER_FAILED\"\n      );\n    } else {\n      // Receiver side --> funds go back to router\n      if (txData.expiry >= block.timestamp) {\n        // Timeout has not expired and tx may only be cancelled by user\n        // Validate signature\n        require(recoverCancelSignature(txData, signature) == txData.user, \"cancel: INVALID_SIGNATURE\");\n      }\n      // Return to router\n      routerBalances[txData.router][txData.receivingAssetId] += txData.amount;\n    }\n\n    // Remove active blocks\n    removeUserActiveBlocks(txData.user, txData.blockNumber);\n\n    // Emit event\n    emit TransactionCancelled(txData, msg.sender);\n\n    // Return\n    return txData;\n  }\n\n  // Private functions\n  function removeUserActiveBlocks(address user, uint256 preparedBlock) internal {\n    // Remove active blocks\n    uint256 newLength = activeTransactionBlocks[user].length - 1;\n    uint256[] memory updated = new uint256[](newLength);\n    bool removed = false;\n    uint256 updatedIdx = 0;\n    for (uint256 i; i < newLength + 1; i++) {\n      // Handle case where there could be more than one tx added in a block\n      // And only one should be removed\n      if (!removed && activeTransactionBlocks[user][i] == preparedBlock) {\n        removed = true;\n        continue;\n      }\n      updated[updatedIdx] = activeTransactionBlocks[user][i];\n      updatedIdx++;\n    }\n    activeTransactionBlocks[user] = updated;\n  }\n\n  function recoverFulfillSignature(\n    TransactionData calldata txData,\n    uint256 relayerFee,\n    bytes calldata signature\n  ) internal pure returns (address) {\n    // Create the digest\n    bytes32 invariantDigest = hashInvariantTransactionData(txData);\n\n    // Create the signed payload\n    SignedFulfillData memory payload = SignedFulfillData({invariantDigest: invariantDigest, relayerFee: relayerFee});\n\n    bytes32 signed = keccak256(abi.encode(payload));\n    // Recover\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(signed), signature);\n  }\n\n  function recoverCancelSignature(TransactionData calldata txData, bytes calldata signature)\n    internal\n    pure\n    returns (address)\n  {\n    // Create the digest\n    bytes32 invariantDigest = hashInvariantTransactionData(txData);\n\n    // Create the signed payload\n    SignedCancelData memory payload = SignedCancelData({invariantDigest: invariantDigest, cancel: \"cancel\"});\n\n    // Recover\n    bytes32 signed = keccak256(abi.encode(payload));\n    // Recover\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(signed), signature);\n  }\n\n  function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\n    InvariantTransactionData memory invariant = InvariantTransactionData({\n      user: txData.user,\n      router: txData.router,\n      sendingAssetId: txData.sendingAssetId,\n      receivingAssetId: txData.receivingAssetId,\n      receivingAddress: txData.receivingAddress,\n      sendingChainId: txData.sendingChainId,\n      receivingChainId: txData.receivingChainId,\n      callData: txData.callData,\n      transactionId: txData.transactionId\n    });\n    return keccak256(abi.encode(invariant));\n  }\n}\n"
    },
    "contracts/interfaces/ITransactionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\ninterface ITransactionManager {\n  // Structs\n  struct InvariantTransactionData {\n    address user;\n    address router;\n    address sendingAssetId;\n    address receivingAssetId;\n    address receivingAddress;\n    uint256 sendingChainId;\n    uint256 receivingChainId;\n    bytes callData;\n    bytes32 transactionId;\n  }\n\n  enum TransactionStatus {\n    Empty,\n    Pending,\n    Completed\n  }\n\n  struct TransactionData {\n    address user;\n    address router;\n    address sendingAssetId;\n    address receivingAssetId;\n    address receivingAddress;\n    bytes callData;\n    bytes32 transactionId;\n    uint256 amount;\n    uint256 expiry;\n    uint256 blockNumber;\n    uint256 sendingChainId;\n    uint256 receivingChainId;\n  }\n\n  struct SignedCancelData {\n    bytes32 invariantDigest;\n    string cancel;\n  }\n\n  struct SignedFulfillData {\n    bytes32 invariantDigest;\n    uint256 relayerFee;\n  }\n\n  // Liquidity events\n  event LiquidityAdded(address router, address assetId, uint256 amount);\n\n  event LiquidityRemoved(address router, address assetId, uint256 amount, address recipient);\n\n  // Transaction events\n  // TODO: structure\n  event TransactionPrepared(TransactionData txData, address caller, bytes encodedBid, bytes bidSignature);\n\n  event TransactionFulfilled(TransactionData txData, uint256 relayerFee, bytes signature, address caller);\n\n  event TransactionCancelled(TransactionData txData, address caller);\n\n  // Getters\n\n  // Router only methods\n  function addLiquidity(uint256 amount, address assetId) external payable;\n\n  function removeLiquidity(\n    uint256 amount,\n    address assetId,\n    address payable recipient\n  ) external;\n\n  // Transaction methods\n  function prepare(\n    InvariantTransactionData calldata txData,\n    uint256 amount,\n    uint256 expiry,\n    bytes calldata encodedBid,\n    bytes calldata bidSignature\n  ) external payable returns (TransactionData memory);\n\n  function fulfill(\n    TransactionData calldata txData,\n    uint256 relayerFee,\n    bytes calldata signature\n  ) external returns (TransactionData memory);\n\n  function cancel(TransactionData calldata txData, bytes calldata signature) external returns (TransactionData memory);\n}\n"
    },
    "contracts/interpreters/MultisendInterpreter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"../interfaces/IMultisendInterpreter.sol\";\nimport \"../lib/LibAsset.sol\";\nimport \"../lib/LibERC20.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/libraries/MultiSendCallOnly.sol\";\n\ncontract MultisendInterpreter is IMultisendInterpreter {\n  /// @dev Address of the deployed multisending helper contract\n  address public immutable multisend;\n\n  constructor(address _multisend) {\n    multisend = _multisend;\n  }\n\n  function execute(\n    address assetId,\n    uint256 amount,\n    bytes calldata callData\n  ) external payable override {\n    if (LibAsset.isEther(assetId)) {\n      require(msg.value == amount, \"execute: VALUE_MISMATCH\");\n      MultiSendCallOnly(multisend).multiSend{value: msg.value}(callData);\n    } else {\n      require(msg.value == 0, \"execute: ETH_WITH_ERC_TRANSFER\");\n      require(LibERC20.approve(assetId, multisend, amount), \"execute: APPROVE_FAILED\");\n\n      MultiSendCallOnly(multisend).multiSend(callData);\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // Divide the signature in r, s and v variables\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n        } else if (signature.length == 64) {\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let vs := mload(add(signature, 0x40))\n                r := mload(add(signature, 0x20))\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n                v := add(shr(255, vs), 27)\n            }\n        } else {\n            revert(\"ECDSA: invalid signature length\");\n        }\n\n        return recover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \"ECDSA: invalid signature 's' value\");\n        require(v == 27 || v == 28, \"ECDSA: invalid signature 'v' value\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        return signer;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/interfaces/IMultisendInterpreter.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\ninterface IMultisendInterpreter {\n  function execute(\n    address assetId,\n    uint256 amount,\n    bytes calldata callData\n  ) external payable;\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/libraries/MultiSendCallOnly.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\n/// @notice The guard logic is not required here as this contract doesn't support nested delegate calls\ncontract MultiSendCallOnly {\n    /// @dev Sends multiple transactions and reverts all if one fails.\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\n    ///                     operation has to be uint8(0) in this version (=> 1 byte),\n    ///                     to as a address (=> 20 bytes),\n    ///                     value as a uint256 (=> 32 bytes),\n    ///                     data length as a uint256 (=> 32 bytes),\n    ///                     data as bytes.\n    ///                     see abi.encodePacked for more information on packed encoding\n    /// @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\n    ///         but reverts if a transaction tries to use a delegatecall.\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\n    function multiSend(bytes memory transactions) public payable {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let length := mload(transactions)\n            let i := 0x20\n            for {\n                // Pre block is not used in \"while mode\"\n            } lt(i, length) {\n                // Post block is not used in \"while mode\"\n            } {\n                // First byte of the data is the operation.\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\n                // This will also zero out unused data.\n                let operation := shr(0xf8, mload(add(transactions, i)))\n                // We offset the load address by 1 byte (operation byte)\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\n                let value := mload(add(transactions, add(i, 0x15)))\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\n                let dataLength := mload(add(transactions, add(i, 0x35)))\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\n                let data := add(transactions, add(i, 0x55))\n                let success := 0\n                switch operation\n                    case 0 {\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\n                    }\n                    // This version does not allow delegatecalls\n                    case 1 {\n                        revert(0, 0)\n                    }\n                if eq(success, 0) {\n                    revert(0, 0)\n                }\n                // Next entry starts at 85 byte + data length\n                i := add(i, add(0x55, dataLength))\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/LibERC20Test.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"../lib/LibERC20.sol\";\n\n/// @title LibERC20Test\n/// @author Connext\n/// @notice Used to easily test the internal methods of\n///         LibERC20.sol by aliasing them to public\n///         methods.\n\ncontract LibERC20Test {\n  \n  constructor() {}\n\n  function wrapCall(address assetId, bytes memory callData) public returns (bool) {\n    return LibERC20.wrapCall(assetId, callData);\n  }\n\n  function approve(\n    address assetId,\n    address spender,\n    uint256 amount\n  ) public returns (bool) {\n    return LibERC20.approve(assetId, spender, amount);\n  }\n\n  function transferFrom(\n    address assetId,\n    address sender,\n    address recipient,\n    uint256 amount\n  ) public returns (bool) {\n    return LibERC20.transferFrom(assetId, sender, recipient, amount);\n  }\n\n  function transfer(\n    address assetId,\n    address recipient,\n    uint256 amount\n  ) public returns (bool) {\n    return LibERC20.transfer(assetId, recipient, amount);\n  }\n}\n"
    },
    "contracts/test/LibAssetTest.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.1;\n\nimport \"../lib/LibAsset.sol\";\n\n/// @title LibAssetTest\n/// @author Connext\n/// @notice Used to easily test the internal methods of\n///         LibAsset.sol by aliasing them to public\n///         methods.\n\ncontract LibAssetTest {\n  \n  constructor() {}\n\n  function isEther(address assetId) public pure returns (bool) {\n    return LibAsset.isEther(assetId);\n  }\n\n  function getOwnBalance(address assetId) public view returns (uint256) {\n    return LibAsset.getOwnBalance(assetId);\n  }\n\n  function transferEther(address payable recipient, uint256 amount) public returns (bool) {\n    return LibAsset.transferEther(recipient, amount);\n  }\n\n  function transferERC20(\n    address assetId,\n    address recipient,\n    uint256 amount\n  ) public returns (bool) {\n    return LibAsset.transferERC20(assetId, recipient, amount);\n  }\n\n  // This function is a wrapper for transfers of Ether or ERC20 tokens,\n  // both standard-compliant ones as well as tokens that exhibit the\n  // missing-return-value bug.\n  function transferAsset(\n    address assetId,\n    address payable recipient,\n    uint256 amount\n  ) public returns (bool) {\n    return LibAsset.transferAsset(assetId, recipient, amount);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}