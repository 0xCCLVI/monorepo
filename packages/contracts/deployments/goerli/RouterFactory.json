{
  "address": "0x81e8C7e3091aEf05e79b2612f12E45bcFce69ee3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transactionManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creater",
          "type": "address"
        }
      ],
      "name": "RouterCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "createRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transactionManager",
          "type": "address"
        }
      ],
      "name": "setTransactionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionManager",
      "outputs": [
        {
          "internalType": "contract ITransactionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe003ac818d1f4b9fb05c3b0168f1a7b7930d1fea123aa7e26a66f2e0b9986018",
  "receipt": {
    "to": null,
    "from": "0x627306090abaB3A6e1400e9345bC60c78a8BEf57",
    "contractAddress": "0x81e8C7e3091aEf05e79b2612f12E45bcFce69ee3",
    "transactionIndex": 1,
    "gasUsed": "1687002",
    "logsBloom": "0x
    "blockHash": "0xd3f278c8e40690b0338e73d597aa593c6535c9101787da2c02adb302527456fa",
    "transactionHash": "0xe003ac818d1f4b9fb05c3b0168f1a7b7930d1fea123aa7e26a66f2e0b9986018",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5911047,
        "transactionHash": "0xe003ac818d1f4b9fb05c3b0168f1a7b7930d1fea123aa7e26a66f2e0b9986018",
        "address": "0x81e8C7e3091aEf05e79b2612f12E45bcFce69ee3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xd3f278c8e40690b0338e73d597aa593c6535c9101787da2c02adb302527456fa"
      }
    ],
    "blockNumber": 5911047,
    "cumulativeGasUsed": "1811062",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb6cb4893F7e27aDF1bdda1d283A6b344A1F57D58",
    "5"
  ],
  "solcInputHash": "9ebbc1bd8a803f3faeb2ab7c97f06ee2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transactionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creater\",\"type\":\"address\"}],\"name\":\"RouterCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"createRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transactionManager\",\"type\":\"address\"}],\"name\":\"setTransactionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionManager\",\"outputs\":[{\"internalType\":\"contract ITransactionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"chainId\":{\"details\":\"The stored chain id of the contract, may be passed in to avoid any       evm issues\"},\"routerAddresses\":{\"details\":\"Mapping of signer to created Router contract address\"},\"transactionManager\":{\"details\":\"The transaction Manager contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RouterFactory.sol\":\"RouterFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/ITransactionManager.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ncontract Router is Ownable {\\n\\n  ITransactionManager public immutable transactionManager;\\n\\n  address public recipient;\\n\\n  address public signer;\\n\\n  uint256 private immutable chainId;\\n\\n  struct SignedRemoveLiquidityData {\\n    uint256 amount;\\n    address assetId;\\n    uint256 chainId; // For domain separation\\n    address signer; // For domain separation\\n  }\\n\\n  constructor(address _transactionManager, address _signer, address _recipient, address _owner, uint256 _chainId) {\\n    transactionManager = ITransactionManager(_transactionManager);\\n    signer = _signer;\\n    recipient = _recipient;\\n    chainId = _chainId;\\n    transferOwnership(_owner);\\n  }\\n\\n  function setRecipient(address _recipient) external onlyOwner {\\n    recipient = _recipient;\\n  }\\n\\n  function setSigner(address _signer) external onlyOwner {\\n    signer = _signer;\\n  }\\n\\n  function removeLiquidity(uint256 amount, address assetId, bytes calldata signature) external {\\n    if (msg.sender != signer) {\\n      SignedRemoveLiquidityData memory payload = SignedRemoveLiquidityData({\\n        amount: amount,\\n        assetId: assetId,\\n        chainId: chainId,\\n        signer: signer\\n      });\\n      address recovered = recoverSignature(abi.encode(payload), signature);\\n      require(recovered == signer, \\\"Router signature is not valid\\\");\\n    }\\n\\n    return transactionManager.removeLiquidity(amount, assetId, payable(recipient));\\n  }\\n\\n  function prepare(\\n    ITransactionManager.PrepareArgs calldata args, \\n    bytes calldata signature\\n  ) payable external returns (ITransactionManager.TransactionData memory) {\\n    if (msg.sender != signer) {\\n      address recovered = recoverSignature(abi.encode(args), signature);\\n      require(recovered == signer, \\\"Router signature is not valid\\\");\\n    }\\n\\n    return transactionManager.prepare{ value: LibAsset.isNativeAsset(args.invariantData.sendingAssetId) ? msg.value : 0 }(args);\\n  }\\n\\n  function fulfill(\\n    ITransactionManager.FulfillArgs calldata args, \\n    bytes calldata signature\\n  ) external returns (ITransactionManager.TransactionData memory) {\\n    if (msg.sender != signer) {\\n      address recovered = recoverSignature(abi.encode(args), signature);\\n      require(recovered == signer, \\\"Router signature is not valid\\\");\\n    }\\n\\n    return transactionManager.fulfill(args);\\n  }\\n\\n  function cancel(\\n    ITransactionManager.CancelArgs calldata args, \\n    bytes calldata signature\\n  ) external returns (ITransactionManager.TransactionData memory) {\\n    if (msg.sender != signer) {\\n      address recovered = recoverSignature(abi.encode(args), signature);\\n      require(recovered == signer, \\\"Router signature is not valid\\\");\\n    }\\n\\n    return transactionManager.cancel(args);\\n  }\\n\\n  /**\\n    * @notice Holds the logic to recover the signer from an encoded payload.\\n    *         Will hash and convert to an eth signed message.\\n    * @param encodedPayload The payload that was signed\\n    * @param signature The signature you are recovering the signer from\\n    */\\n  function recoverSignature(bytes memory encodedPayload, bytes calldata  signature) internal pure returns (address) {\\n    // Recover\\n    return ECDSA.recover(\\n      ECDSA.toEthSignedMessageHash(keccak256(encodedPayload)),\\n      signature\\n    );\\n  }\\n}\",\"keccak256\":\"0x728ebf27c015d218cb0dbdf7b3ab8363a3109b7e78fa08a33da3271a21f92e40\",\"license\":\"UNLICENSED\"},\"contracts/RouterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IRouterFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ITransactionManager.sol\\\";\\nimport \\\"./Router.sol\\\";\\n\\ncontract RouterFactory is IRouterFactory, Ownable {\\n\\n  /**\\n  * @dev The stored chain id of the contract, may be passed in to avoid any \\n  *      evm issues\\n  */\\n  uint256 private immutable chainId;\\n\\n    /**\\n    * @dev The transaction Manager contract\\n    */\\n  ITransactionManager public transactionManager;\\n\\n   /**\\n    * @dev Mapping of signer to created Router contract address\\n    */\\n  mapping(address => address) public routerAddresses;\\n\\n  constructor(address _transactionManager, uint256 _chainId) {\\n    chainId = _chainId;\\n    transactionManager = ITransactionManager(_transactionManager);\\n  }\\n\\n  function setTransactionManager(address _transactionManager) external onlyOwner {\\n    transactionManager = ITransactionManager(_transactionManager);\\n  }\\n\\n  function createRouter(address signer, address recipient) override external returns (address) {\\n    Router router = new Router(address(transactionManager), signer, recipient, msg.sender, chainId);\\n\\n    routerAddresses[signer] = address(router);\\n    emit RouterCreated(address(router), signer, recipient, msg.sender);\\n    return address(router);\\n  }\\n}\\n\",\"keccak256\":\"0xb56e497c9f5a39d93045614592767b0a5153b81f467e8716950709cd432cd56d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRouterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface IRouterFactory {\\n  event RouterCreated(address router, address signer, address receipient, address creater);\\n\\n  function createRouter(address router, address recipient) external returns (address);\\n}\\n\",\"keccak256\":\"0xeba8862c0f30cc9d970c96b0894262e24f3fbcac777bf249c687f9fce9df82a9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface ITransactionManager {\\n  // Structs\\n\\n  // Holds all data that is constant between sending and\\n  // receiving chains. The hash of this is what gets signed\\n  // to ensure the signature can be used on both chains.\\n  struct InvariantTransactionData {\\n    address receivingChainTxManagerAddress;\\n    address user;\\n    address router;\\n    address initiator; // msg.sender of sending side\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address sendingChainFallback; // funds sent here on cancel\\n    address receivingAddress;\\n    address callTo;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    bytes32 callDataHash; // hashed to prevent free option\\n    bytes32 transactionId;\\n  }\\n\\n  // Holds all data that varies between sending and receiving\\n  // chains. The hash of this is stored onchain to ensure the\\n  // information passed in is valid.\\n  struct VariantTransactionData {\\n    uint256 amount;\\n    uint256 expiry;\\n    uint256 preparedBlockNumber;\\n  }\\n\\n  // All Transaction data, constant and variable\\n  struct TransactionData {\\n    address receivingChainTxManagerAddress;\\n    address user;\\n    address router;\\n    address initiator; // msg.sender of sending side\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address sendingChainFallback;\\n    address receivingAddress;\\n    address callTo;\\n    bytes32 callDataHash;\\n    bytes32 transactionId;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    uint256 amount;\\n    uint256 expiry;\\n    uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\\n  }\\n\\n  // The structure of the signed data for fulfill\\n  struct SignedFulfillData {\\n    bytes32 transactionId;\\n    uint256 relayerFee;\\n    string functionIdentifier; // \\\"fulfill\\\" or \\\"cancel\\\"\\n    uint256 receivingChainId; // For domain separation\\n    address receivingChainTxManagerAddress; // For domain separation\\n  }\\n\\n  // The structure of the signed data for cancellation\\n  struct SignedCancelData {\\n    bytes32 transactionId;\\n    string functionIdentifier;\\n    uint256 receivingChainId;\\n    address receivingChainTxManagerAddress; // For domain separation\\n  }\\n\\n  /**\\n    * Arguments for calling prepare()\\n    * @param invariantData The data for a crosschain transaction that will\\n    *                      not change between sending and receiving chains.\\n    *                      The hash of this data is used as the key to store \\n    *                      the inforamtion that does change between chains \\n    *                      (amount,expiry,preparedBlock) for verification\\n    * @param amount The amount of the transaction on this chain\\n    * @param expiry The block.timestamp when the transaction will no longer be\\n    *               fulfillable and is freely cancellable on this chain\\n    * @param encryptedCallData The calldata to be executed when the tx is\\n    *                          fulfilled. Used in the function to allow the user\\n    *                          to reconstruct the tx from events. Hash is stored\\n    *                          onchain to prevent shenanigans.\\n    * @param encodedBid The encoded bid that was accepted by the user for this\\n    *                   crosschain transfer. It is supplied as a param to the\\n    *                   function but is only used in event emission\\n    * @param bidSignature The signature of the bidder on the encoded bid for\\n    *                     this transaction. Only used within the function for\\n    *                     event emission. The validity of the bid and\\n    *                     bidSignature are enforced offchain\\n    * @param encodedMeta The meta for the function\\n    */\\n  struct PrepareArgs {\\n    InvariantTransactionData invariantData;\\n    uint256 amount;\\n    uint256 expiry;\\n    bytes encryptedCallData;\\n    bytes encodedBid;\\n    bytes bidSignature;\\n    bytes encodedMeta;\\n  }\\n\\n  /**\\n    * @param txData All of the data (invariant and variant) for a crosschain\\n    *               transaction. The variant data provided is checked against\\n    *               what was stored when the `prepare` function was called.\\n    * @param relayerFee The fee that should go to the relayer when they are\\n    *                   calling the function on the receiving chain for the user\\n    * @param signature The users signature on the transaction id + fee that\\n    *                  can be used by the router to unlock the transaction on \\n    *                  the sending chain\\n    * @param callData The calldata to be sent to and executed by the \\n    *                 `FulfillHelper`\\n    * @param encodedMeta The meta for the function\\n    */\\n  struct FulfillArgs {\\n    TransactionData txData;\\n    uint256 relayerFee;\\n    bytes signature;\\n    bytes callData;\\n    bytes encodedMeta;\\n  }\\n\\n  /**\\n    * Arguments for calling cancel()\\n    * @param txData All of the data (invariant and variant) for a crosschain\\n    *               transaction. The variant data provided is checked against\\n    *               what was stored when the `prepare` function was called.\\n    * @param signature The user's signature that allows a transaction to be\\n    *                  cancelled by a relayer\\n    * @param encodedMeta The meta for the function\\n    */\\n  struct CancelArgs {\\n    TransactionData txData;\\n    bytes signature;\\n    bytes encodedMeta;\\n  }\\n\\n  // Adding/removing asset events\\n  event RouterAdded(address indexed addedRouter, address indexed caller);\\n\\n  event RouterRemoved(address indexed removedRouter, address indexed caller);\\n\\n  // Adding/removing router events\\n  event AssetAdded(address indexed addedAssetId, address indexed caller);\\n\\n  event AssetRemoved(address indexed removedAssetId, address indexed caller);\\n\\n  // Liquidity events\\n  event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\\n\\n  event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\\n\\n  // Transaction events\\n  event TransactionPrepared(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    TransactionData txData,\\n    address caller,\\n    PrepareArgs args\\n  );\\n\\n  event TransactionFulfilled(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    FulfillArgs args,\\n    bool success,\\n    bool isContract,\\n    bytes returnData,\\n    address caller\\n  );\\n\\n  event TransactionCancelled(\\n    address indexed user,\\n    address indexed router,\\n    bytes32 indexed transactionId,\\n    CancelArgs args,\\n    address caller\\n  );\\n\\n  // Getters\\n  function getChainId() external view returns (uint256);\\n\\n  function getStoredChainId() external view returns (uint256);\\n\\n  // Owner only methods\\n  function addRouter(address router) external;\\n\\n  function removeRouter(address router) external;\\n\\n  function addAssetId(address assetId) external;\\n\\n  function removeAssetId(address assetId) external;\\n\\n  // Router only methods\\n  function addLiquidityFor(uint256 amount, address assetId, address router) external payable;\\n\\n  function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    address assetId,\\n    address payable recipient\\n  ) external;\\n\\n  // Methods for crosschain transfers\\n  // called in the following order (in happy case)\\n  // 1. prepare by user on sending chain\\n  // 2. prepare by router on receiving chain\\n  // 3. fulfill by user on receiving chain\\n  // 4. fulfill by router on sending chain\\n  function prepare(\\n    PrepareArgs calldata args\\n  ) external payable returns (TransactionData memory);\\n\\n  function fulfill(\\n    FulfillArgs calldata args\\n  ) external returns (TransactionData memory);\\n\\n  function cancel(CancelArgs calldata args) external returns (TransactionData memory);\\n}\\n\",\"keccak256\":\"0x3dcce1c0f5fd1206cc6c56dfe62bcd922c3aaf165dbb424affe2f029064a04f2\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n* @title LibAsset\\n* @author Connext <support@connext.network>\\n* @notice This library contains helpers for dealing with onchain transfers\\n*         of assets, including accounting for the native asset `assetId`\\n*         conventions and any noncompliant ERC20 transfers\\n*/\\nlibrary LibAsset {\\n  /** \\n  * @dev All native assets use the empty address for their asset id\\n  *      by convention\\n  */\\n  address constant NATIVE_ASSETID = address(0);\\n\\n  /** \\n  * @notice Determines whether the given assetId is the native asset\\n  * @param assetId The asset identifier to evaluate\\n  * @return Boolean indicating if the asset is the native asset\\n  */\\n  function isNativeAsset(address assetId) internal pure returns (bool) {\\n    return assetId == NATIVE_ASSETID;\\n  }\\n\\n  /** \\n  * @notice Gets the balance of the inheriting contract for the given asset\\n  * @param assetId The asset identifier to get the balance of\\n  * @return Balance held by contracts using this library\\n  */\\n  function getOwnBalance(address assetId) internal view returns (uint256) {\\n    return\\n      isNativeAsset(assetId)\\n        ? address(this).balance\\n        : IERC20(assetId).balanceOf(address(this));\\n  }\\n\\n  /** \\n  * @notice Transfers ether from the inheriting contract to a given\\n  *         recipient\\n  * @param recipient Address to send ether to\\n  * @param amount Amount to send to given recipient\\n  */\\n  function transferNativeAsset(address payable recipient, uint256 amount)\\n      internal\\n  {\\n    Address.sendValue(recipient, amount);\\n  }\\n\\n  /** \\n  * @notice Transfers tokens from the inheriting contract to a given\\n  *         recipient\\n  * @param assetId Token address to transfer\\n  * @param recipient Address to send ether to\\n  * @param amount Amount to send to given recipient\\n  */\\n  function transferERC20(\\n      address assetId,\\n      address recipient,\\n      uint256 amount\\n  ) internal {\\n    SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n  }\\n\\n  /** \\n  * @notice Transfers tokens from a sender to a given recipient\\n  * @param assetId Token address to transfer\\n  * @param from Address of sender/owner\\n  * @param to Address of recipient/spender\\n  * @param amount Amount to transfer from owner to spender\\n  */\\n  function transferFromERC20(\\n    address assetId,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal {\\n    SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n  }\\n\\n  /** \\n  * @notice Increases the allowance of a token to a spender\\n  * @param assetId Token address of asset to increase allowance of\\n  * @param spender Account whos allowance is increased\\n  * @param amount Amount to increase allowance by\\n  */\\n  function increaseERC20Allowance(\\n    address assetId,\\n    address spender,\\n    uint256 amount\\n  ) internal {\\n    require(!isNativeAsset(assetId), \\\"#IA:034\\\");\\n    SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n  }\\n\\n  /**\\n  * @notice Decreases the allowance of a token to a spender\\n  * @param assetId Token address of asset to decrease allowance of\\n  * @param spender Account whos allowance is decreased\\n  * @param amount Amount to decrease allowance by\\n  */\\n  function decreaseERC20Allowance(\\n    address assetId,\\n    address spender,\\n    uint256 amount\\n  ) internal {\\n    require(!isNativeAsset(assetId), \\\"#DA:034\\\");\\n    SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\\n  }\\n\\n  /**\\n  * @notice Wrapper function to transfer a given asset (native or erc20) to\\n  *         some recipient. Should handle all non-compliant return value\\n  *         tokens as well by using the SafeERC20 contract by open zeppelin.\\n  * @param assetId Asset id for transfer (address(0) for native asset, \\n  *                token address for erc20s)\\n  * @param recipient Address to send asset to\\n  * @param amount Amount to send to given recipient\\n  */\\n  function transferAsset(\\n      address assetId,\\n      address payable recipient,\\n      uint256 amount\\n  ) internal {\\n    isNativeAsset(assetId)\\n      ? transferNativeAsset(recipient, amount)\\n      : transferERC20(assetId, recipient, amount);\\n  }\\n}\",\"keccak256\":\"0x6c450345fa4742df16176aba0ae74bbca4608cdd66880079ee5e04a6ea8e2951\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611db6380380611db683398101604081905261002f916100b0565b61003833610060565b608052600180546001600160a01b0319166001600160a01b03929092169190911790556100e8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100c2578182fd5b82516001600160a01b03811681146100d8578283fd5b6020939093015192949293505050565b608051611cb361010360003960006101d70152611cb36000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ef5780637f629efc146100f75780638da5cb5b1461010a578063f2fde38b1461011b57600080fd5b80630b1fa61c146100825780631f16a046146100975780633b716452146100dc575b600080fd5b6100956100903660046103e6565b61012e565b005b6100c06100a53660046103e6565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6001546100c0906001600160a01b031681565b610095610183565b6100c0610105366004610407565b6101b9565b6000546001600160a01b03166100c0565b6100956101293660046103e6565b6102d2565b6000546001600160a01b031633146101615760405162461bcd60e51b815260040161015890610439565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146101ad5760405162461bcd60e51b815260040161015890610439565b6101b7600061036d565b565b600080600160009054906101000a90046001600160a01b03168484337f0000000000000000000000000000000000000000000000000000000000000000604051610202906103bd565b6001600160a01b039586168152938516602085015291841660408401529092166060820152608081019190915260a001604051809103906000f08015801561024e573d6000803e3d6000fd5b506001600160a01b0385811660008181526002602090815260409182902080548686166001600160a01b031990911681179091558251908152908101929092529186168183015233606082015290519192507fe8e811674d167b407a67a22f592a226ade5e34b608e7d56721f82422f3b98197919081900360800190a19392505050565b6000546001600160a01b031633146102fc5760405162461bcd60e51b815260040161015890610439565b6001600160a01b0381166103615760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610158565b61036a8161036d565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61180f8061046f83390190565b80356001600160a01b03811681146103e157600080fd5b919050565b6000602082840312156103f7578081fd5b610400826103ca565b9392505050565b60008060408385031215610419578081fd5b610422836103ca565b9150610430602084016103ca565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60c06040523480156200001157600080fd5b506040516200180f3803806200180f8339810160408190526200003491620001de565b6200003f336200009c565b6001600160601b0319606086901b16608052600280546001600160a01b038681166001600160a01b031992831617909255600180549286169290911691909117905560a08190526200009182620000ec565b505050505062000244565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200014c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001b35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000143565b620001be816200009c565b50565b80516001600160a01b0381168114620001d957600080fd5b919050565b600080600080600060a08688031215620001f6578081fd5b6200020186620001c1565b94506200021160208701620001c1565b93506200022160408701620001c1565b92506200023160608701620001c1565b9150608086015190509295509295909350565b60805160601c60a05161158762000288600039600061065901526000818160fb015281816103b8015281816104c101528181610562015261072101526115876000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101945780639da42bac146101b2578063c48bf4a6146101df578063d2baa168146101ff578063d4132a0b14610212578063f2fde38b1461023257600080fd5b8063238ac933146100ac5780633b716452146100e95780633bbed4a01461011d57806366d003ac1461013f5780636c19e7831461015f578063715018a61461017f575b600080fd5b3480156100b857600080fd5b506002546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f557600080fd5b506100cc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561012957600080fd5b5061013d610138366004610c72565b610252565b005b34801561014b57600080fd5b506001546100cc906001600160a01b031681565b34801561016b57600080fd5b5061013d61017a366004610c72565b6102a7565b34801561018b57600080fd5b5061013d6102f3565b3480156101a057600080fd5b506000546001600160a01b03166100cc565b3480156101be57600080fd5b506101d26101cd366004610d03565b610329565b6040516100e09190611388565b3480156101eb57600080fd5b506101d26101fa366004610c95565b610448565b6101d261020d366004610d42565b6104f6565b34801561021e57600080fd5b5061013d61022d366004610e85565b610624565b34801561023e57600080fd5b5061013d61024d366004610c72565b610785565b6000546001600160a01b031633146102855760405162461bcd60e51b815260040161027c90611078565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102d15760405162461bcd60e51b815260040161027c90611078565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461031d5760405162461bcd60e51b815260040161027c90611078565b6103276000610820565b565b610331610b8c565b6002546001600160a01b031633146103a157600061036f85604051602001610359919061111b565b6040516020818303038152906040528585610870565b6002549091506001600160a01b0380831691161461039f5760405162461bcd60e51b815260040161027c90611041565b505b6040516301362a3560e71b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b151a80906103ed90879060040161111b565b61020060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190610d81565b949350505050565b610450610b8c565b6002546001600160a01b031633146104aa5760006104788560405160200161035991906110ad565b6002549091506001600160a01b038083169116146104a85760405162461bcd60e51b815260040161027c90611041565b505b604051635f48d15d60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063be91a2ba906103ed9087906004016110ad565b6104fe610b8c565b6002546001600160a01b031633146105585760006105268560405160200161035991906111b7565b6002549091506001600160a01b038083169116146105565760405162461bcd60e51b815260040161027c90611041565b505b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d94593726105a761059a60a0880160808901610c72565b6001600160a01b03161590565b6105b25760006105b4565b345b866040518363ffffffff1660e01b81526004016105d191906111b7565b610200604051808303818588803b1580156105eb57600080fd5b505af11580156105ff573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104409190610d81565b6002546001600160a01b031633146106f05760408051608080820183528682526001600160a01b0386811660208085019182527f00000000000000000000000000000000000000000000000000000000000000008587019081526002548416606080880191825288519384018d90529351851697830197909752519181019190915293511690830152906000906106bd9060a001610359565b6002549091506001600160a01b038083169116146106ed5760405162461bcd60e51b815260040161027c90611041565b50505b600154604051633cc6af3160e21b8152600481018690526001600160a01b03858116602483015291821660448201527f00000000000000000000000000000000000000000000000000000000000000009091169063f31abcc490606401600060405180830381600087803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146107af5760405162461bcd60e51b815260040161027c90611078565b6001600160a01b0381166108145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027c565b61081d81610820565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006104406108d385805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061090f92505050565b60008151604114156109435760208201516040830151606084015160001a610939868285856109b9565b93505050506109b3565b81516040141561096b5760208201516040830151610962858383610b62565b925050506109b3565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161027c565b92915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610a365760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161027c565b8360ff16601b1480610a4b57508360ff16601c145b610aa25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161027c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015610af6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610b595760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161027c565b95945050505050565b60006001600160ff1b03821660ff83901c601b01610b82868287856109b9565b9695505050505050565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081019190915290565b8035610c1b8161153c565b919050565b8051610c1b8161153c565b60008083601f840112610c3c578182fd5b50813567ffffffffffffffff811115610c53578182fd5b602083019150836020828501011115610c6b57600080fd5b9250929050565b600060208284031215610c83578081fd5b8135610c8e8161153c565b9392505050565b600080600060408486031215610ca9578182fd5b833567ffffffffffffffff80821115610cc0578384fd5b908501906102408288031215610cd4578384fd5b90935060208501359080821115610ce9578384fd5b50610cf686828701610c2b565b9497909650939450505050565b600080600060408486031215610d17578283fd5b833567ffffffffffffffff80821115610d2e578485fd5b908501906102808288031215610cd4578485fd5b600080600060408486031215610d56578283fd5b833567ffffffffffffffff80821115610d6d578485fd5b908501906102608288031215610cd4578485fd5b60006102008284031215610d93578081fd5b610d9b6114bf565b610da483610c20565b8152610db260208401610c20565b6020820152610dc360408401610c20565b6040820152610dd460608401610c20565b6060820152610de560808401610c20565b6080820152610df660a08401610c20565b60a0820152610e0760c08401610c20565b60c0820152610e1860e08401610c20565b60e0820152610100610e2b818501610c20565b9082015261012083810151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0928301519281019290925250919050565b60008060008060608587031215610e9a578081fd5b843593506020850135610eac8161153c565b9250604085013567ffffffffffffffff811115610ec7578182fd5b610ed387828801610c2b565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b610f2282610f1583610c10565b6001600160a01b03169052565b610f2e60208201610c10565b6001600160a01b03166020830152610f4860408201610c10565b6001600160a01b03166040830152610f6260608201610c10565b6001600160a01b03166060830152610f7c60808201610c10565b6001600160a01b03166080830152610f9660a08201610c10565b6001600160a01b031660a0830152610fb060c08201610c10565b6001600160a01b031660c0830152610fca60e08201610c10565b6001600160a01b031660e0830152610100610fe6828201610c10565b6001600160a01b03169083015261012081810135908301526101408082013590830152610160808201359083015261018080820135908301526101a080820135908301526101c080820135908301526101e090810135910152565b6020808252601d908201527f526f75746572207369676e6174757265206973206e6f742076616c6964000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526110be6020820183610f08565b60006110ce6102008401846114f7565b61024061022081818701526110e861026087018486610edf565b93506110f6818801886114f7565b878603601f19018489015293509050611110848483610edf565b979650505050505050565b6020815261112c6020820183610f08565b600061022061020084013581840152611147818501856114f7565b915061028061024081818701526111636102a087018585610edf565b9350611171818801886114f7565b93509050601f1961026081888703018189015261118f868685610edf565b955061119d818a018a6114f7565b955092505080878603018388015250611110848483610edf565b602081526111cb60208201610f1584610c10565b60006111d960208401610c10565b6001600160a01b0381166040840152506111f560408401610c10565b6001600160a01b03811660608401525061121160608401610c10565b6001600160a01b03811660808401525061122d60808401610c10565b6001600160a01b03811660a08401525061124960a08401610c10565b6001600160a01b03811660c08401525061126560c08401610c10565b6001600160a01b03811660e08401525061128160e08401610c10565b610100611298818501836001600160a01b03169052565b6112a3818601610c10565b9150506101206112bd818501836001600160a01b03169052565b6101409150808501358285015250610160818501358185015261018091508085013582850152506101a081850135818501526101c091508085013582850152506101e08185013581850152611314818601866114f7565b92509050610260610200818187015261133261028087018585610edf565b9350611340818801886114f7565b93509050601f1961022081888703018189015261135e868685610edf565b955061136c818a018a6114f7565b955092505061024081888703018189015261118f868685610edf565b81516001600160a01b03168152610200810160208301516113b460208401826001600160a01b03169052565b5060408301516113cf60408401826001600160a01b03169052565b5060608301516113ea60608401826001600160a01b03169052565b50608083015161140560808401826001600160a01b03169052565b5060a083015161142060a08401826001600160a01b03169052565b5060c083015161143b60c08401826001600160a01b03169052565b5060e083015161145660e08401826001600160a01b03169052565b50610100838101516001600160a01b03169083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e092830151929091019190915290565b604051610200810167ffffffffffffffff811182821017156114f157634e487b7160e01b600052604160045260246000fd5b60405290565b6000808335601e1984360301811261150d578283fd5b830160208101925035905067ffffffffffffffff81111561152d57600080fd5b803603831315610c6b57600080fd5b6001600160a01b038116811461081d57600080fdfea26469706673582212202b295f390175d2b5732e7c308d7e5d9e0c51645fc014041526a6bd21aca60ed264736f6c63430008040033a2646970667358221220a94b1d21f0330e42aa8e71d4add77b57bb1f7d3d6059f5e9d3e038482fda885964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ef5780637f629efc146100f75780638da5cb5b1461010a578063f2fde38b1461011b57600080fd5b80630b1fa61c146100825780631f16a046146100975780633b716452146100dc575b600080fd5b6100956100903660046103e6565b61012e565b005b6100c06100a53660046103e6565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6001546100c0906001600160a01b031681565b610095610183565b6100c0610105366004610407565b6101b9565b6000546001600160a01b03166100c0565b6100956101293660046103e6565b6102d2565b6000546001600160a01b031633146101615760405162461bcd60e51b815260040161015890610439565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146101ad5760405162461bcd60e51b815260040161015890610439565b6101b7600061036d565b565b600080600160009054906101000a90046001600160a01b03168484337f0000000000000000000000000000000000000000000000000000000000000000604051610202906103bd565b6001600160a01b039586168152938516602085015291841660408401529092166060820152608081019190915260a001604051809103906000f08015801561024e573d6000803e3d6000fd5b506001600160a01b0385811660008181526002602090815260409182902080548686166001600160a01b031990911681179091558251908152908101929092529186168183015233606082015290519192507fe8e811674d167b407a67a22f592a226ade5e34b608e7d56721f82422f3b98197919081900360800190a19392505050565b6000546001600160a01b031633146102fc5760405162461bcd60e51b815260040161015890610439565b6001600160a01b0381166103615760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610158565b61036a8161036d565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61180f8061046f83390190565b80356001600160a01b03811681146103e157600080fd5b919050565b6000602082840312156103f7578081fd5b610400826103ca565b9392505050565b60008060408385031215610419578081fd5b610422836103ca565b9150610430602084016103ca565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fe60c06040523480156200001157600080fd5b506040516200180f3803806200180f8339810160408190526200003491620001de565b6200003f336200009c565b6001600160601b0319606086901b16608052600280546001600160a01b038681166001600160a01b031992831617909255600180549286169290911691909117905560a08190526200009182620000ec565b505050505062000244565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146200014c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620001b35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000143565b620001be816200009c565b50565b80516001600160a01b0381168114620001d957600080fd5b919050565b600080600080600060a08688031215620001f6578081fd5b6200020186620001c1565b94506200021160208701620001c1565b93506200022160408701620001c1565b92506200023160608701620001c1565b9150608086015190509295509295909350565b60805160601c60a05161158762000288600039600061065901526000818160fb015281816103b8015281816104c101528181610562015261072101526115876000f3fe6080604052600436106100a75760003560e01c80638da5cb5b116100645780638da5cb5b146101945780639da42bac146101b2578063c48bf4a6146101df578063d2baa168146101ff578063d4132a0b14610212578063f2fde38b1461023257600080fd5b8063238ac933146100ac5780633b716452146100e95780633bbed4a01461011d57806366d003ac1461013f5780636c19e7831461015f578063715018a61461017f575b600080fd5b3480156100b857600080fd5b506002546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100f557600080fd5b506100cc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561012957600080fd5b5061013d610138366004610c72565b610252565b005b34801561014b57600080fd5b506001546100cc906001600160a01b031681565b34801561016b57600080fd5b5061013d61017a366004610c72565b6102a7565b34801561018b57600080fd5b5061013d6102f3565b3480156101a057600080fd5b506000546001600160a01b03166100cc565b3480156101be57600080fd5b506101d26101cd366004610d03565b610329565b6040516100e09190611388565b3480156101eb57600080fd5b506101d26101fa366004610c95565b610448565b6101d261020d366004610d42565b6104f6565b34801561021e57600080fd5b5061013d61022d366004610e85565b610624565b34801561023e57600080fd5b5061013d61024d366004610c72565b610785565b6000546001600160a01b031633146102855760405162461bcd60e51b815260040161027c90611078565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102d15760405162461bcd60e51b815260040161027c90611078565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461031d5760405162461bcd60e51b815260040161027c90611078565b6103276000610820565b565b610331610b8c565b6002546001600160a01b031633146103a157600061036f85604051602001610359919061111b565b6040516020818303038152906040528585610870565b6002549091506001600160a01b0380831691161461039f5760405162461bcd60e51b815260040161027c90611041565b505b6040516301362a3560e71b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639b151a80906103ed90879060040161111b565b61020060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104409190610d81565b949350505050565b610450610b8c565b6002546001600160a01b031633146104aa5760006104788560405160200161035991906110ad565b6002549091506001600160a01b038083169116146104a85760405162461bcd60e51b815260040161027c90611041565b505b604051635f48d15d60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063be91a2ba906103ed9087906004016110ad565b6104fe610b8c565b6002546001600160a01b031633146105585760006105268560405160200161035991906111b7565b6002549091506001600160a01b038083169116146105565760405162461bcd60e51b815260040161027c90611041565b505b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d94593726105a761059a60a0880160808901610c72565b6001600160a01b03161590565b6105b25760006105b4565b345b866040518363ffffffff1660e01b81526004016105d191906111b7565b610200604051808303818588803b1580156105eb57600080fd5b505af11580156105ff573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104409190610d81565b6002546001600160a01b031633146106f05760408051608080820183528682526001600160a01b0386811660208085019182527f00000000000000000000000000000000000000000000000000000000000000008587019081526002548416606080880191825288519384018d90529351851697830197909752519181019190915293511690830152906000906106bd9060a001610359565b6002549091506001600160a01b038083169116146106ed5760405162461bcd60e51b815260040161027c90611041565b50505b600154604051633cc6af3160e21b8152600481018690526001600160a01b03858116602483015291821660448201527f00000000000000000000000000000000000000000000000000000000000000009091169063f31abcc490606401600060405180830381600087803b15801561076757600080fd5b505af115801561077b573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146107af5760405162461bcd60e51b815260040161027c90611078565b6001600160a01b0381166108145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027c565b61081d81610820565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006104406108d385805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061090f92505050565b60008151604114156109435760208201516040830151606084015160001a610939868285856109b9565b93505050506109b3565b81516040141561096b5760208201516040830151610962858383610b62565b925050506109b3565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161027c565b92915050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115610a365760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161027c565b8360ff16601b1480610a4b57508360ff16601c145b610aa25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161027c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015610af6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610b595760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161027c565b95945050505050565b60006001600160ff1b03821660ff83901c601b01610b82868287856109b9565b9695505050505050565b6040805161020081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081018290526101a081018290526101c081018290526101e081019190915290565b8035610c1b8161153c565b919050565b8051610c1b8161153c565b60008083601f840112610c3c578182fd5b50813567ffffffffffffffff811115610c53578182fd5b602083019150836020828501011115610c6b57600080fd5b9250929050565b600060208284031215610c83578081fd5b8135610c8e8161153c565b9392505050565b600080600060408486031215610ca9578182fd5b833567ffffffffffffffff80821115610cc0578384fd5b908501906102408288031215610cd4578384fd5b90935060208501359080821115610ce9578384fd5b50610cf686828701610c2b565b9497909650939450505050565b600080600060408486031215610d17578283fd5b833567ffffffffffffffff80821115610d2e578485fd5b908501906102808288031215610cd4578485fd5b600080600060408486031215610d56578283fd5b833567ffffffffffffffff80821115610d6d578485fd5b908501906102608288031215610cd4578485fd5b60006102008284031215610d93578081fd5b610d9b6114bf565b610da483610c20565b8152610db260208401610c20565b6020820152610dc360408401610c20565b6040820152610dd460608401610c20565b6060820152610de560808401610c20565b6080820152610df660a08401610c20565b60a0820152610e0760c08401610c20565b60c0820152610e1860e08401610c20565b60e0820152610100610e2b818501610c20565b9082015261012083810151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0928301519281019290925250919050565b60008060008060608587031215610e9a578081fd5b843593506020850135610eac8161153c565b9250604085013567ffffffffffffffff811115610ec7578182fd5b610ed387828801610c2b565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b610f2282610f1583610c10565b6001600160a01b03169052565b610f2e60208201610c10565b6001600160a01b03166020830152610f4860408201610c10565b6001600160a01b03166040830152610f6260608201610c10565b6001600160a01b03166060830152610f7c60808201610c10565b6001600160a01b03166080830152610f9660a08201610c10565b6001600160a01b031660a0830152610fb060c08201610c10565b6001600160a01b031660c0830152610fca60e08201610c10565b6001600160a01b031660e0830152610100610fe6828201610c10565b6001600160a01b03169083015261012081810135908301526101408082013590830152610160808201359083015261018080820135908301526101a080820135908301526101c080820135908301526101e090810135910152565b6020808252601d908201527f526f75746572207369676e6174757265206973206e6f742076616c6964000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602081526110be6020820183610f08565b60006110ce6102008401846114f7565b61024061022081818701526110e861026087018486610edf565b93506110f6818801886114f7565b878603601f19018489015293509050611110848483610edf565b979650505050505050565b6020815261112c6020820183610f08565b600061022061020084013581840152611147818501856114f7565b915061028061024081818701526111636102a087018585610edf565b9350611171818801886114f7565b93509050601f1961026081888703018189015261118f868685610edf565b955061119d818a018a6114f7565b955092505080878603018388015250611110848483610edf565b602081526111cb60208201610f1584610c10565b60006111d960208401610c10565b6001600160a01b0381166040840152506111f560408401610c10565b6001600160a01b03811660608401525061121160608401610c10565b6001600160a01b03811660808401525061122d60808401610c10565b6001600160a01b03811660a08401525061124960a08401610c10565b6001600160a01b03811660c08401525061126560c08401610c10565b6001600160a01b03811660e08401525061128160e08401610c10565b610100611298818501836001600160a01b03169052565b6112a3818601610c10565b9150506101206112bd818501836001600160a01b03169052565b6101409150808501358285015250610160818501358185015261018091508085013582850152506101a081850135818501526101c091508085013582850152506101e08185013581850152611314818601866114f7565b92509050610260610200818187015261133261028087018585610edf565b9350611340818801886114f7565b93509050601f1961022081888703018189015261135e868685610edf565b955061136c818a018a6114f7565b955092505061024081888703018189015261118f868685610edf565b81516001600160a01b03168152610200810160208301516113b460208401826001600160a01b03169052565b5060408301516113cf60408401826001600160a01b03169052565b5060608301516113ea60608401826001600160a01b03169052565b50608083015161140560808401826001600160a01b03169052565b5060a083015161142060a08401826001600160a01b03169052565b5060c083015161143b60c08401826001600160a01b03169052565b5060e083015161145660e08401826001600160a01b03169052565b50610100838101516001600160a01b03169083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e092830151929091019190915290565b604051610200810167ffffffffffffffff811182821017156114f157634e487b7160e01b600052604160045260246000fd5b60405290565b6000808335601e1984360301811261150d578283fd5b830160208101925035905067ffffffffffffffff81111561152d57600080fd5b803603831315610c6b57600080fd5b6001600160a01b038116811461081d57600080fdfea26469706673582212202b295f390175d2b5732e7c308d7e5d9e0c51645fc014041526a6bd21aca60ed264736f6c63430008040033a2646970667358221220a94b1d21f0330e42aa8e71d4add77b57bb1f7d3d6059f5e9d3e038482fda885964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "chainId": {
        "details": "The stored chain id of the contract, may be passed in to avoid any       evm issues"
      },
      "routerAddresses": {
        "details": "Mapping of signer to created Router contract address"
      },
      "transactionManager": {
        "details": "The transaction Manager contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RouterFactory.sol:RouterFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3231,
        "contract": "contracts/RouterFactory.sol:RouterFactory",
        "label": "transactionManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITransactionManager)5455"
      },
      {
        "astId": 3236,
        "contract": "contracts/RouterFactory.sol:RouterFactory",
        "label": "routerAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITransactionManager)5455": {
        "encoding": "inplace",
        "label": "contract ITransactionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}