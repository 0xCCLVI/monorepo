{
  "address": "0xaa94D6b381bE3Fc507Ea4D3384F7792EF32D13ed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iMultisend",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransactionFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedCallData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedBid",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bidSignature",
          "type": "bytes"
        }
      ],
      "name": "TransactionPrepared",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeTransactionBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancel",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "txData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "fulfill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iMultisend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ITransactionManager.InvariantTransactionData",
          "name": "invariantData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encryptedCallData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "encodedBid",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "bidSignature",
          "type": "bytes"
        }
      ],
      "name": "prepare",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAssetId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sendingChainFallback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receivingAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "callDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "transactionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sendingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "receivingChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preparedBlockNumber",
              "type": "uint256"
            }
          ],
          "internalType": "struct ITransactionManager.TransactionData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "assetId",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "variantTransactionData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9a6781582937ee69b56852f8bce018e6ee203a97c21d3f5a1b3db34dee0447a",
  "receipt": {
    "to": null,
    "from": "0x627306090abaB3A6e1400e9345bC60c78a8BEf57",
    "contractAddress": "0xaa94D6b381bE3Fc507Ea4D3384F7792EF32D13ed",
    "transactionIndex": 3,
    "gasUsed": "2703820",
    "logsBloom": "0x
    "blockHash": "0x34e32ce588d24b223ca931a7d6e757fbc7655f185d18af50a9a55347020e947f",
    "transactionHash": "0xf9a6781582937ee69b56852f8bce018e6ee203a97c21d3f5a1b3db34dee0447a",
    "logs": [],
    "blockNumber": 5093232,
    "cumulativeGasUsed": "3162711",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDB5D05aedBd848ffaa2CD4C817e296DB6BF2DD3B",
    "5"
  ],
  "solcInputHash": "73c0ab5062be99e33281729588e336c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iMultisend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransactionFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"TransactionPrepared\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeTransactionBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancel\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"txData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"fulfill\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iMultisend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct ITransactionManager.InvariantTransactionData\",\"name\":\"invariantData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedBid\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"prepare\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingChainFallback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"callDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sendingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivingChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preparedBlockNumber\",\"type\":\"uint256\"}],\"internalType\":\"struct ITransactionManager.TransactionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"variantTransactionData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Connext <support@connext.network>\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256,address)\":{\"params\":{\"amount\":\"The amount of liquidity to add for the router\",\"assetId\":\"The address (or `address(0)` if native asset) of the                asset you're adding liquidity for\"}},\"cancel((address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes)\":{\"params\":{\"relayerFee\":\"The fee that should go to the relayer when they are                   calling the function for the user\",\"signature\":\"The user's signature that allows a transaction to be                  cancelled on the receiving chain.\",\"txData\":\"All of the data (invariant and variant) for a crosschain               transaction. The variant data provided is checked against               what was stored when the `prepare` function was called.\"}},\"fulfill((address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes)\":{\"params\":{\"relayerFee\":\"The fee that should go to the relayer when they are                   calling the function on the receiving chain for the user\",\"signature\":\"The users signature on the invariant data + fee that                  can be used by the router to unlock the transaction on                   the sending chain\",\"txData\":\"All of the data (invariant and variant) for a crosschain               transaction. The variant data provided is checked against               what was stored when the `prepare` function was called.\"}},\"prepare((address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes)\":{\"params\":{\"amount\":\"The amount of the transaction on this chain\",\"bidSignature\":\"The signature of the bidder on the encoded bid for                     this transaction. Only used within the function for                     event emission. The validity of the bid and                     bidSignature are enforced offchain\",\"encodedBid\":\"The encoded bid that was accepted by the user for this                   crosschain transfer. It is supplied as a param to the                   function but is only used in event emission\",\"encryptedCallData\":\"The calldata to be executed when the tx is                          fulfilled. Used in the function to allow the user                          to reconstruct the tx from events. Hash is stored                          onchain to prevent shenanigans.\",\"expiry\":\"The block.timestamp when the transaction will no longer be               fulfillable and is freely cancellable on this chain\",\"invariantData\":\"The data for a crosschain transaction that will                      not change between sending and receiving chains.                      The hash of this data is used as the key to store                       the inforamtion that does change between chains                       (amount, expiry,preparedBlock) for verification\"}},\"removeLiquidity(uint256,address,address)\":{\"params\":{\"amount\":\"The amount of liquidity to remove for the router\",\"assetId\":\"The address (or `address(0)` if native asset) of the                asset you're removing liquidity for\",\"recipient\":\"The address that will receive the liquidity being removed\"}}},\"stateVariables\":{\"MIN_TIMEOUT\":{\"details\":\"Minimum timeout (will be the lowest on the receiving chain)\"},\"activeTransactionBlocks\":{\"details\":\"Mapping of user address to blocks where active transfers      were created.\"},\"chainId\":{\"details\":\"The chain id of the contract, is passed in to avoid any evm issues\"},\"iMultisend\":{\"details\":\"Address of the deployed multisending interpreter contract\"},\"routerBalances\":{\"details\":\"Mapping of router to balance specific to asset\"},\"variantTransactionData\":{\"details\":\"Mapping of hash of `InvariantTransactionData` to the hash\"}},\"title\":\"TransactionManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256,address)\":{\"notice\":\"This is used by any router to increase their available         liquidity for a given asset.\"},\"cancel((address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes)\":{\"notice\":\"Any crosschain transaction can be cancelled after it has been         created to prevent indefinite lock up of funds. After the         transaction has expired, anyone can cancel it. Before the         expiry, only the recipient of the funds on the given chain is         able to cancel. On the sending chain, this means only the router         is able to cancel before the expiry, while only the user can         prematurely cancel on the receiving chain.\"},\"fulfill((address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes)\":{\"notice\":\"This function completes a crosschain transaction. When called on         the receiving chain, the user reveals their signature on the         invariant parts of the transaction data and is sent the          appropriate amount. The router then uses this signature to         unlock the corresponding funds on the receiving chain, which are         then added back to their available liquidity. The user includes a         relayer fee since it is not assumed they will have gas on the         receiving chain. This function *must* be called before the         transaction expiry has elapsed.\"},\"prepare((address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes)\":{\"notice\":\"This function creates a crosschain transaction. When called on         the sending chain, the user is expected to lock up funds. When         called on the receiving chain, the router deducts the transfer         amount from the available liquidity. The majority of the         information about a given transfer does not change between chains,         with three notable exceptions: `amount`, `expiry`, and          `preparedBlock`. The `amount` and `expiry` are decremented         between sending and receiving chains to provide an incentive for          the router to complete the transaction and time for the router to         fulfill the transaction on the sending chain after the unlocking         signature is revealed, respectively.\"},\"removeLiquidity(uint256,address,address)\":{\"notice\":\"This is used by any router to decrease their available         liquidity for a given asset.\"}},\"notice\":\"This contract holds the logic to facilitate crosschain transactions.         Transactions go through three phases:         1. Route Auction: User broadcasts to our network signalling their          desired route. Routers respond with sealed bids containing          commitments to fulfilling the transaction within a certain time and          price range.         2. Prepare: Once the auction is completed, the transaction can be          prepared. The user submits a transaction to `TransactionManager`          contract on sender-side chain containing router's signed bid. This          transaction locks up the users funds on the sending chiain. Upon          detecting an event containing their signed bid from the chain,          router submits the same transaction to `TransactionManager` on the          receiver-side chain, and locks up a corresponding amount of          liquidity. The amount locked on the receiving chain is `sending          amount - auction fee` so the router is incentivized to complete the          transaction.         3. Fulfill: Upon detecting the `TransactionPrepared` event on the          receiver-side chain, the user signs a message and sends it to a          relayer, who will earn a fee for submission. The relayer (which may          be the router) then submits the message to the `TransactionManager`          to complete their transaction on receiver-side chain and claim the          funds locked by the router. A relayer is used here to allow users          to submit transactions with arbitrary calldata on the receiving          chain without needing gas to do so. The router then submits the          same signed message and completes transaction on sender-side,          unlocking the original `amount`.         If a transaction is not fulfilled within a fixed timeout, it          reverts and can be reclaimed by the party that called `prepare` on          each chain (initiator). Additionally, transactions can be cancelled          unilaterally by the person owed funds on that chain (router for          sending chain, user for receiving chain) prior to expiry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransactionManager.sol\":\"TransactionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSendCallOnly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\\n/// @author Stefan George - <stefan@gnosis.io>\\n/// @author Richard Meissner - <richard@gnosis.io>\\n/// @notice The guard logic is not required here as this contract doesn't support nested delegate calls\\ncontract MultiSendCallOnly {\\n    /// @dev Sends multiple transactions and reverts all if one fails.\\n    /// @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\\n    ///                     operation has to be uint8(0) in this version (=> 1 byte),\\n    ///                     to as a address (=> 20 bytes),\\n    ///                     value as a uint256 (=> 32 bytes),\\n    ///                     data length as a uint256 (=> 32 bytes),\\n    ///                     data as bytes.\\n    ///                     see abi.encodePacked for more information on packed encoding\\n    /// @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\\n    ///         but reverts if a transaction tries to use a delegatecall.\\n    /// @notice This method is payable as delegatecalls keep the msg.value from the previous call\\n    ///         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\\n    function multiSend(bytes memory transactions) public payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let length := mload(transactions)\\n            let i := 0x20\\n            for {\\n                // Pre block is not used in \\\"while mode\\\"\\n            } lt(i, length) {\\n                // Post block is not used in \\\"while mode\\\"\\n            } {\\n                // First byte of the data is the operation.\\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\\n                // This will also zero out unused data.\\n                let operation := shr(0xf8, mload(add(transactions, i)))\\n                // We offset the load address by 1 byte (operation byte)\\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\\n                let value := mload(add(transactions, add(i, 0x15)))\\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\\n                let dataLength := mload(add(transactions, add(i, 0x35)))\\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\\n                let data := add(transactions, add(i, 0x55))\\n                let success := 0\\n                switch operation\\n                    case 0 {\\n                        success := call(gas(), to, value, data, dataLength, 0, 0)\\n                    }\\n                    // This version does not allow delegatecalls\\n                    case 1 {\\n                        revert(0, 0)\\n                    }\\n                if eq(success, 0) {\\n                    revert(0, 0)\\n                }\\n                // Next entry starts at 85 byte + data length\\n                i := add(i, add(0x55, dataLength))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb11f27129bb1cfc16e0cfb5056bd0fbb3b01de6294d75996ff2fac613dce1d63\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"contracts/TransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/ITransactionManager.sol\\\";\\nimport \\\"./lib/LibAsset.sol\\\";\\nimport \\\"./lib/LibERC20.sol\\\";\\nimport \\\"./interpreters/MultisendInterpreter.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n// Outstanding qs:\\n// - what happens if you have unique user data, but duplicate tx ids?\\n//   no requires here would catch this, the tx would be properly prepared\\n//\\n// - we validate all the inputs but the amount, bidSignature, and encodedBid.\\n//   bidSignature and encodedBid could be used as slashing later, and their\\n//   validation is out of scope of this function. But, do we want to be able\\n//   to use this to send 0-value amounts? basically as some incentivized\\n//   relayer? would that break bidding?\\n\\n\\n/// @title TransactionManager\\n/// @author Connext <support@connext.network>\\n/// @notice This contract holds the logic to facilitate crosschain transactions.\\n///         Transactions go through three phases:\\n///\\n///         1. Route Auction: User broadcasts to our network signalling their \\n///         desired route. Routers respond with sealed bids containing \\n///         commitments to fulfilling the transaction within a certain time and \\n///         price range.\\n///\\n///         2. Prepare: Once the auction is completed, the transaction can be \\n///         prepared. The user submits a transaction to `TransactionManager` \\n///         contract on sender-side chain containing router's signed bid. This \\n///         transaction locks up the users funds on the sending chiain. Upon \\n///         detecting an event containing their signed bid from the chain, \\n///         router submits the same transaction to `TransactionManager` on the \\n///         receiver-side chain, and locks up a corresponding amount of \\n///         liquidity. The amount locked on the receiving chain is `sending \\n///         amount - auction fee` so the router is incentivized to complete the \\n///         transaction.\\n///\\n///         3. Fulfill: Upon detecting the `TransactionPrepared` event on the \\n///         receiver-side chain, the user signs a message and sends it to a \\n///         relayer, who will earn a fee for submission. The relayer (which may \\n///         be the router) then submits the message to the `TransactionManager` \\n///         to complete their transaction on receiver-side chain and claim the \\n///         funds locked by the router. A relayer is used here to allow users \\n///         to submit transactions with arbitrary calldata on the receiving \\n///         chain without needing gas to do so. The router then submits the \\n///         same signed message and completes transaction on sender-side, \\n///         unlocking the original `amount`.\\n///\\n///         If a transaction is not fulfilled within a fixed timeout, it \\n///         reverts and can be reclaimed by the party that called `prepare` on \\n///         each chain (initiator). Additionally, transactions can be cancelled \\n///         unilaterally by the person owed funds on that chain (router for \\n///         sending chain, user for receiving chain) prior to expiry.\\n\\ncontract TransactionManager is ReentrancyGuard, ITransactionManager {\\n  /// @dev Mapping of router to balance specific to asset\\n  mapping(address => mapping(address => uint256)) public routerBalances;\\n\\n  /// @dev Mapping of user address to blocks where active transfers\\n  ///      were created.\\n  mapping(address => uint256[]) public activeTransactionBlocks;\\n\\n  /// @dev Mapping of hash of `InvariantTransactionData` to the hash\\n  //       of the `VariantTransactionData`\\n  mapping(bytes32 => bytes32) public variantTransactionData;\\n\\n  /// @dev The chain id of the contract, is passed in to avoid any evm issues\\n  uint256 public immutable chainId;\\n\\n  /// @dev Address of the deployed multisending interpreter contract\\n  address public immutable iMultisend;\\n\\n  /// @dev Minimum timeout (will be the lowest on the receiving chain)\\n  uint256 public constant MIN_TIMEOUT = 24 hours;\\n\\n  constructor(address _iMultisend, uint256 _chainId) {\\n    iMultisend = _iMultisend;\\n    chainId = _chainId;\\n  }\\n\\n  /// @notice This is used by any router to increase their available\\n  ///         liquidity for a given asset.\\n  /// @param amount The amount of liquidity to add for the router\\n  /// @param assetId The address (or `address(0)` if native asset) of the\\n  ///                asset you're adding liquidity for\\n  function addLiquidity(uint256 amount, address assetId) external payable override nonReentrant {\\n    // Sanity check: nonzero amounts\\n    require(amount > 0, \\\"addLiquidity: AMOUNT_IS_ZERO\\\");\\n\\n    // Validate correct amounts are transferred\\n    if (LibAsset.isEther(assetId)) {\\n      require(msg.value == amount, \\\"addLiquidity: VALUE_MISMATCH\\\");\\n    } else {\\n      require(msg.value == 0, \\\"addLiquidity: ETH_WITH_ERC_TRANSFER\\\");\\n      require(LibERC20.transferFrom(assetId, msg.sender, address(this), amount), \\\"addLiquidity: ERC20_TRANSFER_FAILED\\\");\\n    }\\n\\n    // Update the router balances\\n    routerBalances[msg.sender][assetId] += amount;\\n\\n    // Emit event\\n    emit LiquidityAdded(msg.sender, assetId, amount);\\n  }\\n\\n  /// @notice This is used by any router to decrease their available\\n  ///         liquidity for a given asset.\\n  /// @param amount The amount of liquidity to remove for the router\\n  /// @param assetId The address (or `address(0)` if native asset) of the\\n  ///                asset you're removing liquidity for\\n  /// @param recipient The address that will receive the liquidity being removed\\n  function removeLiquidity(\\n    uint256 amount,\\n    address assetId,\\n    address payable recipient\\n  ) external override nonReentrant {\\n    // Sanity check: nonzero amounts\\n    require(amount > 0, \\\"removeLiquidity: AMOUNT_IS_ZERO\\\");\\n\\n    // Sanity check: amount can be deducted for the router\\n    require(routerBalances[msg.sender][assetId] >= amount, \\\"removeLiquidity: INSUFFICIENT_FUNDS\\\");\\n\\n    // Update router balances\\n    routerBalances[msg.sender][assetId] -= amount;\\n\\n    // Transfer from contract to specified recipient\\n    require(LibAsset.transferAsset(assetId, recipient, amount), \\\"removeLiquidity: TRANSFER_FAILED\\\");\\n\\n    // Emit event\\n    emit LiquidityRemoved(msg.sender, assetId, amount, recipient);\\n  }\\n\\n  /// @notice This function creates a crosschain transaction. When called on\\n  ///         the sending chain, the user is expected to lock up funds. When\\n  ///         called on the receiving chain, the router deducts the transfer\\n  ///         amount from the available liquidity. The majority of the\\n  ///         information about a given transfer does not change between chains,\\n  ///         with three notable exceptions: `amount`, `expiry`, and \\n  ///         `preparedBlock`. The `amount` and `expiry` are decremented\\n  ///         between sending and receiving chains to provide an incentive for \\n  ///         the router to complete the transaction and time for the router to\\n  ///         fulfill the transaction on the sending chain after the unlocking\\n  ///         signature is revealed, respectively.\\n  /// @param invariantData The data for a crosschain transaction that will\\n  ///                      not change between sending and receiving chains.\\n  ///                      The hash of this data is used as the key to store \\n  ///                      the inforamtion that does change between chains \\n  ///                      (amount, expiry,preparedBlock) for verification\\n  /// @param amount The amount of the transaction on this chain\\n  /// @param expiry The block.timestamp when the transaction will no longer be\\n  ///               fulfillable and is freely cancellable on this chain\\n  /// @param encryptedCallData The calldata to be executed when the tx is\\n  ///                          fulfilled. Used in the function to allow the user\\n  ///                          to reconstruct the tx from events. Hash is stored\\n  ///                          onchain to prevent shenanigans.\\n  /// @param encodedBid The encoded bid that was accepted by the user for this\\n  ///                   crosschain transfer. It is supplied as a param to the\\n  ///                   function but is only used in event emission\\n  /// @param bidSignature The signature of the bidder on the encoded bid for\\n  ///                     this transaction. Only used within the function for\\n  ///                     event emission. The validity of the bid and\\n  ///                     bidSignature are enforced offchain\\n  function prepare(\\n    InvariantTransactionData calldata invariantData,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata encryptedCallData,\\n    bytes calldata encodedBid,\\n    bytes calldata bidSignature\\n  ) external payable override nonReentrant returns (TransactionData memory) {\\n    // Sanity check: user is sensible\\n    require(invariantData.user != address(0), \\\"prepare: USER_EMPTY\\\");\\n\\n    // Sanity check: router is sensible\\n    require(invariantData.router != address(0), \\\"prepare: ROUTER_EMPTY\\\");\\n\\n    // Sanity check: valid fallback\\n    require(invariantData.receivingAddress != address(0), \\\"prepare: RECEIVING_ADDRESS_EMPTY\\\");\\n\\n    // Make sure the chains are different\\n    require(invariantData.sendingChainId != invariantData.receivingChainId, \\\"prepare: SAME_CHAINIDS\\\");\\n\\n    // Make sure the chains are relevant\\n    require(invariantData.sendingChainId == chainId || invariantData.receivingChainId == chainId, \\\"prepare: INVALID_CHAINIDS\\\");\\n\\n    // Make sure the expiry is greater than min\\n    require((expiry - block.timestamp) >= MIN_TIMEOUT, \\\"prepare: TIMEOUT_TOO_LOW\\\");\\n\\n    // Sanity check: amount is sensible\\n    require(amount > 0, \\\"prepare: AMOUNT_IS_ZERO\\\");\\n\\n    // Make sure the hash is not a duplicate\\n    bytes32 digest = keccak256(abi.encode(invariantData));\\n    require(variantTransactionData[digest] == bytes32(0), \\\"prepare: DIGEST_EXISTS\\\");\\n\\n    // NOTE: the `encodedBid` and `bidSignature` are simply passed through\\n    //       to the contract emitted event to ensure the availability of\\n    //       this information. Their validity is asserted offchain, and\\n    //       is out of scope of this contract. They are used as inputs so\\n    //       in the event of a router or user crash, they may recover the\\n    //       correct bid information without requiring an offchain store.\\n\\n    // Store the transaction variants\\n    variantTransactionData[digest] = keccak256(abi.encode(VariantTransactionData({\\n      amount: amount,\\n      expiry: expiry,\\n      preparedBlockNumber: block.number\\n    })));\\n\\n    // Store active blocks\\n    activeTransactionBlocks[invariantData.user].push(block.number);\\n\\n    // First determine if this is sender side or receiver side\\n    if (invariantData.sendingChainId == chainId) {\\n      // This is sender side prepare. The user is beginning the process of \\n      // submitting an onchain tx after accepting some bid. They should\\n      // lock their funds in the contract for the router to claim after\\n      // they have revealed their signature on the receiving chain via\\n      // submitting a corresponding `fulfill` tx\\n\\n      // Validate correct amounts on msg and transfer from user to\\n      // contract\\n      if (LibAsset.isEther(invariantData.sendingAssetId)) {\\n        require(msg.value == amount, \\\"prepare: VALUE_MISMATCH\\\");\\n      } else {\\n        require(msg.value == 0, \\\"prepare: ETH_WITH_ERC_TRANSFER\\\");\\n        require(\\n          LibERC20.transferFrom(invariantData.sendingAssetId, msg.sender, address(this), amount),\\n          \\\"prepare: ERC20_TRANSFER_FAILED\\\"\\n        );\\n      }\\n    } else {\\n      // This is receiver side prepare. The router has proposed a bid on the\\n      // transfer which the user has accepted. They can now lock up their\\n      // own liquidity on th receiving chain, which the user can unlock by\\n      // calling `fulfill`. When creating the `amount` and `expiry` on the\\n      // receiving chain, the router should have decremented both. The\\n      // expiry should be decremented to ensure the router has time to\\n      // complete the sender-side transaction after the user completes the\\n      // receiver-side transactoin. The amount should be decremented to act as\\n      // a fee to incentivize the router to complete the transaction properly.\\n\\n      // Check that the caller is the router\\n      require(msg.sender == invariantData.router, \\\"prepare: ROUTER_MISMATCH\\\");\\n\\n      // Check that the router isnt accidentally locking funds in the contract\\n      require(msg.value == 0, \\\"prepare: ETH_WITH_ROUTER_PREPARE\\\");\\n\\n      // Check that router has liquidity\\n      require(\\n        routerBalances[invariantData.router][invariantData.receivingAssetId] >= amount,\\n        \\\"prepare: INSUFFICIENT_LIQUIDITY\\\"\\n      );\\n\\n      // Decrement the router liquidity\\n      routerBalances[invariantData.router][invariantData.receivingAssetId] -= amount;\\n    }\\n\\n    // Emit event\\n    TransactionData memory txData = TransactionData({\\n      user: invariantData.user,\\n      router: invariantData.router,\\n      sendingAssetId: invariantData.sendingAssetId,\\n      receivingAssetId: invariantData.receivingAssetId,\\n      sendingChainFallback: invariantData.sendingChainFallback,\\n      receivingAddress: invariantData.receivingAddress,\\n      callDataHash: invariantData.callDataHash,\\n      transactionId: invariantData.transactionId,\\n      sendingChainId: invariantData.sendingChainId,\\n      receivingChainId: invariantData.receivingChainId,\\n      amount: amount,\\n      expiry: expiry,\\n      preparedBlockNumber: block.number\\n    });\\n    emit TransactionPrepared(txData, msg.sender, encryptedCallData, encodedBid, bidSignature);\\n    return txData;\\n  }\\n\\n\\n\\n  /// @notice This function completes a crosschain transaction. When called on\\n  ///         the receiving chain, the user reveals their signature on the\\n  ///         invariant parts of the transaction data and is sent the \\n  ///         appropriate amount. The router then uses this signature to\\n  ///         unlock the corresponding funds on the receiving chain, which are\\n  ///         then added back to their available liquidity. The user includes a\\n  ///         relayer fee since it is not assumed they will have gas on the\\n  ///         receiving chain. This function *must* be called before the\\n  ///         transaction expiry has elapsed.\\n  /// @param txData All of the data (invariant and variant) for a crosschain\\n  ///               transaction. The variant data provided is checked against\\n  ///               what was stored when the `prepare` function was called.\\n  /// @param relayerFee The fee that should go to the relayer when they are\\n  ///                   calling the function on the receiving chain for the user\\n  /// @param signature The users signature on the invariant data + fee that\\n  ///                  can be used by the router to unlock the transaction on \\n  ///                  the sending chain\\n  function fulfill(\\n    TransactionData calldata txData,\\n    uint256 relayerFee,\\n    bytes calldata signature, // signature on fee + digest\\n    bytes calldata callData\\n  ) external override nonReentrant returns (TransactionData memory) {\\n    // Get the hash of the invariant tx data. This hash is the same\\n    // between sending and receiving chains. The variant data is stored\\n    // in the contract when `prepare` is called within the mapping.\\n    bytes32 digest = hashInvariantTransactionData(txData);\\n\\n    // Make sure that the variant data matches what was stored\\n    require(variantTransactionData[digest] == hashVariantTransactionData(txData), \\\"fulfill: INVALID_VARIANT_DATA\\\");\\n\\n    // Make sure the expiry has not elapsed\\n    require(txData.expiry > block.timestamp, \\\"fulfill: EXPIRED\\\");\\n\\n    // Make sure the transaction wasn't already completed\\n    require(txData.preparedBlockNumber > 0, \\\"fulfill: ALREADY_COMPLETED\\\");\\n\\n    // Validate the user has signed\\n    require(recoverFulfillSignature(txData, relayerFee, signature) == txData.user, \\\"fulfill: INVALID_SIGNATURE\\\");\\n\\n    // Sanity check: fee < amount\\n    require(relayerFee < txData.amount, \\\"fulfill: INVALID_RELAYER_FEE\\\");\\n\\n    // Check provided callData matches stored hash\\n    require(keccak256(callData) == txData.callDataHash, \\\"fulfill: INVALID_CALL_DATA\\\");\\n\\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\\n    // mapping is explicitly *not* zeroed out so users who come online without\\n    // a store can tell the difference between a transaction that has not been\\n    // prepared, and a transaction that was already completed on the receiver\\n    // chain.\\n    variantTransactionData[digest] = keccak256(abi.encode(VariantTransactionData({\\n      amount: txData.amount,\\n      expiry: txData.expiry,\\n      preparedBlockNumber: 0\\n    })));\\n\\n    // Remove the transaction prepared block from the active blocks\\n    removeUserActiveBlocks(txData.user, txData.preparedBlockNumber);\\n\\n    if (txData.sendingChainId == chainId) {\\n      // The router is completing the transaction, they should get the\\n      // amount that the user deposited credited to their liquidity\\n      // reserves.\\n\\n      // Make sure that the user is not accidentally fulfilling the transaction\\n      // on the sending chain\\n      require(msg.sender == txData.router, \\\"fulfill: ROUTER_MISMATCH\\\");\\n\\n      // Complete tx to router for original sending amount\\n      routerBalances[txData.router][txData.sendingAssetId] += txData.amount;\\n    } else {\\n      // The user is completing the transaction, they should get the\\n      // amount that the router deposited less fees for relayer.\\n\\n      // Get the amount to send\\n      uint256 toSend = txData.amount - relayerFee;\\n\\n      // Send the relayer the fee\\n      if (relayerFee > 0) {\\n        require(\\n          LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee),\\n          \\\"fulfill: FEE_TRANSFER_FAILED\\\"\\n        );\\n      }\\n\\n      // Handle receiver chain external calls if needed\\n      if (txData.callDataHash == keccak256(new bytes(0))) {\\n        // No external calls, send directly to receiving address\\n        require(\\n          LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),\\n          \\\"fulfill: TRANSFER_FAILED\\\"\\n        );\\n      } else {\\n        // Handle external calls with a fallback to the receiving\\n        // address in case the call fails so the funds dont remain\\n        // locked.\\n        try\\n          MultisendInterpreter(iMultisend).execute{value: LibAsset.isEther(txData.receivingAssetId) ? toSend : 0}(\\n            txData.receivingAssetId,\\n            toSend,\\n            callData\\n          )\\n        {} catch {\\n          // Regardless of error within the callData execution, send funds\\n          // to the predetermined fallback address\\n          require(\\n            LibAsset.transferAsset(txData.receivingAssetId, payable(txData.receivingAddress), toSend),\\n            \\\"fulfill: TRANSFER_FAILED\\\"\\n          );\\n        }\\n      }\\n    }\\n\\n    // Emit event\\n    emit TransactionFulfilled(txData, relayerFee, signature, callData, msg.sender);\\n\\n    return txData;\\n  }\\n\\n  /// @notice Any crosschain transaction can be cancelled after it has been\\n  ///         created to prevent indefinite lock up of funds. After the\\n  ///         transaction has expired, anyone can cancel it. Before the\\n  ///         expiry, only the recipient of the funds on the given chain is\\n  ///         able to cancel. On the sending chain, this means only the router\\n  ///         is able to cancel before the expiry, while only the user can\\n  ///         prematurely cancel on the receiving chain.\\n  /// @param txData All of the data (invariant and variant) for a crosschain\\n  ///               transaction. The variant data provided is checked against\\n  ///               what was stored when the `prepare` function was called.\\n  /// @param relayerFee The fee that should go to the relayer when they are\\n  ///                   calling the function for the user\\n  /// @param signature The user's signature that allows a transaction to be\\n  ///                  cancelled on the receiving chain.\\n  function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature)\\n    external\\n    override\\n    nonReentrant\\n    returns (TransactionData memory)\\n  {\\n    // Make sure params match against stored data\\n    // Also checks that there is an active transfer here\\n    // Also checks that sender or receiver chainID is this chainId (bc we checked it previously)\\n\\n    // Get the hash of the invariant tx data. This hash is the same\\n    // between sending and receiving chains. The variant data is stored\\n    // in the contract when `prepare` is called within the mapping.\\n    bytes32 digest = hashInvariantTransactionData(txData);\\n\\n    // Verify the variant data is correct\\n    require(variantTransactionData[digest] == hashVariantTransactionData(txData), \\\"cancel: INVALID_VARIANT_DATA\\\");\\n\\n    // Make sure the transaction wasn't already completed\\n    require(txData.preparedBlockNumber > 0, \\\"cancel: ALREADY_COMPLETED\\\");\\n\\n    // To prevent `fulfill` / `cancel` from being called multiple times, the\\n    // preparedBlockNumber is set to 0 before being hashed. The value of the\\n    // mapping is explicitly *not* zeroed out so users who come online without\\n    // a store can tell the difference between a transaction that has not been\\n    // prepared, and a transaction that was already completed on the receiver\\n    // chain.\\n    variantTransactionData[digest] = keccak256(abi.encode(VariantTransactionData({\\n      amount: txData.amount,\\n      expiry: txData.expiry,\\n      preparedBlockNumber: 0\\n    })));\\n\\n    // Remove active blocks\\n    removeUserActiveBlocks(txData.user, txData.preparedBlockNumber);\\n\\n    // Return the appropriate locked funds\\n    if (txData.sendingChainId == chainId) {\\n      // Sender side, funds must be returned to the user\\n      if (txData.expiry >= block.timestamp) {\\n        // Timeout has not expired and tx may only be cancelled by router\\n        // NOTE: no need to validate the signature here, since you are requiring\\n        // the router must be the sender when the cancellation is during the\\n        // fulfill-able window\\n        require(msg.sender == txData.router, \\\"cancel: ROUTER_MUST_CANCEL\\\");\\n\\n        // Return totality of locked funds to provided fallbacl\\n        require(\\n          LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), txData.amount),\\n          \\\"cancel: TRANSFER_FAILED\\\"\\n        );\\n      } else {\\n        // When the user could be unlocking funds through a relayer, validate\\n        // their signature and payout the relayer.\\n        if (relayerFee > 0) {\\n          require(recoverCancelSignature(txData, relayerFee, signature) == txData.user, \\\"cancel: INVALID_SIGNATURE\\\");\\n\\n          require(\\n            LibAsset.transferAsset(txData.receivingAssetId, payable(msg.sender), relayerFee),\\n            \\\"cancel: FEE_TRANSFER_FAILED\\\"\\n          );\\n        }\\n\\n        // Get the amount to refund the user\\n        uint256 toRefund = txData.amount - relayerFee;\\n\\n        // Return locked funds to sending chain fallback\\n        require(\\n          LibAsset.transferAsset(txData.sendingAssetId, payable(txData.sendingChainFallback), toRefund),\\n          \\\"cancel: TRANSFER_FAILED\\\"\\n        );\\n      }\\n\\n    } else {\\n      // Receiver side, router liquidity is returned\\n      if (txData.expiry >= block.timestamp) {\\n        // Timeout has not expired and tx may only be cancelled by user\\n        // Validate signature\\n        require(recoverCancelSignature(txData, relayerFee, signature) == txData.user, \\\"cancel: INVALID_SIGNATURE\\\");\\n\\n        // NOTE: there is no incentive here for relayers to submit this on\\n        // behalf of the user (i.e. fee not respected) because the user has not\\n        // locked funds on this contract.\\n      }\\n\\n      // Return liquidity to router\\n      routerBalances[txData.router][txData.receivingAssetId] += txData.amount;\\n    }\\n\\n    // Emit event\\n    emit TransactionCancelled(txData, relayerFee, msg.sender);\\n\\n    // Return\\n    return txData;\\n  }\\n\\n  //////////////////////////\\n  /// Private functions ///\\n  //////////////////////////\\n\\n  /// @notice Removes a given block from the tracked activeTransactionBlocks\\n  ///         array for the user. Called when transactions are completed.\\n  /// @param user User who has completed a transaction\\n  /// @param preparedBlock The TransactionData.preparedBlockNumber to remove\\n  function removeUserActiveBlocks(address user, uint256 preparedBlock) internal {\\n    // Remove active blocks\\n    uint256 newLength = activeTransactionBlocks[user].length - 1;\\n    uint256[] memory updated = new uint256[](newLength);\\n    bool removed = false;\\n    uint256 updatedIdx = 0;\\n    for (uint256 i; i < newLength + 1; i++) {\\n      // Handle case where there could be more than one tx added in a block\\n      // And only one should be removed\\n      if (!removed && activeTransactionBlocks[user][i] == preparedBlock) {\\n        removed = true;\\n        continue;\\n      }\\n      updated[updatedIdx] = activeTransactionBlocks[user][i];\\n      updatedIdx++;\\n    }\\n    activeTransactionBlocks[user] = updated;\\n  }\\n\\n  /// @notice Recovers the signer from the signature provided to the `fulfill`\\n  ///         function. Returns the address recovered\\n  /// @param txData TransactionData of the transaction being fulfilled\\n  /// @param relayerFee The fee paid to the relayer for submitting the fulfill\\n  ///                   tx on behalf of the user.\\n  /// @param signature The signature you are recovering the signer from\\n  function recoverFulfillSignature(\\n    TransactionData calldata txData,\\n    uint256 relayerFee,\\n    bytes calldata signature\\n  ) internal pure returns (address) {\\n    // Create the digest\\n    bytes32 invariantDigest = hashInvariantTransactionData(txData);\\n\\n    // Create the signed payload\\n    SignedFulfillData memory payload = SignedFulfillData({invariantDigest: invariantDigest, relayerFee: relayerFee});\\n\\n    // Recover\\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(abi.encode(payload))), signature);\\n  }\\n\\n  /// @notice Recovers the signer from the signature provided to the `cancel`\\n  ///         function. Returns the address recovered\\n  /// @param txData TransactionData of the transaction being fulfilled\\n  /// @param relayerFee The fee paid to the relayer for submitting the cancel\\n  ///                   tx on behalf of the user.\\n  /// @param signature The signature you are recovering the signer from\\n  function recoverCancelSignature(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    // Create the digest\\n    bytes32 invariantDigest = hashInvariantTransactionData(txData);\\n\\n    // Create the signed payload\\n    SignedCancelData memory payload = SignedCancelData({invariantDigest: invariantDigest, cancel: \\\"cancel\\\", relayerFee: relayerFee});\\n\\n    // Recover\\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(keccak256(abi.encode(payload))), signature);\\n  }\\n\\n  /// @notice Returns the hash of only the invariant portions of a given\\n  ///         crosschain transaction\\n  /// @param txData TransactionData to hash\\n  function hashInvariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\\n    InvariantTransactionData memory invariant = InvariantTransactionData({\\n      user: txData.user,\\n      router: txData.router,\\n      sendingAssetId: txData.sendingAssetId,\\n      receivingAssetId: txData.receivingAssetId,\\n      sendingChainFallback: txData.sendingChainFallback,\\n      receivingAddress: txData.receivingAddress,\\n      sendingChainId: txData.sendingChainId,\\n      receivingChainId: txData.receivingChainId,\\n      callDataHash: txData.callDataHash,\\n      transactionId: txData.transactionId\\n    });\\n    return keccak256(abi.encode(invariant));\\n  }\\n\\n  /// @notice Returns the hash of only the variant portions of a given\\n  ///         crosschain transaction\\n  /// @param txData TransactionData to hash\\n  function hashVariantTransactionData(TransactionData calldata txData) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(VariantTransactionData({\\n      amount: txData.amount,\\n      expiry: txData.expiry,\\n      preparedBlockNumber: txData.preparedBlockNumber\\n    })));\\n  }\\n}\\n\",\"keccak256\":\"0x9787c9fe068b204f70d7dca2f1663274d21995c90a6172a0ae723a0d78e402b9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMultisendInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface IMultisendInterpreter {\\n  function execute(\\n    address assetId,\\n    uint256 amount,\\n    bytes calldata callData\\n  ) external payable;\\n}\\n\",\"keccak256\":\"0x365750c26545408a30a35d5b831f2a341a66e2c9c44b8b57530c5041c2eba08c\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ITransactionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\ninterface ITransactionManager {\\n  // Structs\\n\\n  // Holds all data that is constant between sending and\\n  // receiving chains. The hash of this is what gets signed\\n  // to ensure the signature can be used on both chains.\\n  struct InvariantTransactionData {\\n    address user;\\n    address router;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address sendingChainFallback; // funds sent here on cancel\\n    address receivingAddress;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    bytes32 callDataHash; // hashed to prevent free option\\n    bytes32 transactionId;\\n  }\\n\\n  // Holds all data that varies between sending and receiving\\n  // chains. The hash of this is stored onchain to ensure the\\n  // information passed in is valid.\\n  struct VariantTransactionData {\\n    uint256 amount;\\n    uint256 expiry;\\n    uint256 preparedBlockNumber;\\n  }\\n\\n  // All Transaction data, constant and variable\\n  struct TransactionData {\\n    address user;\\n    address router;\\n    address sendingAssetId;\\n    address receivingAssetId;\\n    address sendingChainFallback;\\n    address receivingAddress;\\n    bytes32 callDataHash;\\n    bytes32 transactionId;\\n    uint256 sendingChainId;\\n    uint256 receivingChainId;\\n    uint256 amount;\\n    uint256 expiry;\\n    uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\\n  }\\n\\n  // The structure of the signed data for cancellations\\n  struct SignedCancelData {\\n    bytes32 invariantDigest;\\n    uint256 relayerFee;\\n    string cancel; // just the string \\\"cancel\\\"\\n  }\\n\\n  // The structure of the signed data for cancellations\\n  struct SignedFulfillData {\\n    bytes32 invariantDigest;\\n    uint256 relayerFee;\\n  }\\n\\n  // Liquidity events\\n  event LiquidityAdded(address router, address assetId, uint256 amount);\\n\\n  event LiquidityRemoved(address router, address assetId, uint256 amount, address recipient);\\n\\n  // Transaction events\\n  event TransactionPrepared(TransactionData txData, address caller, bytes encryptedCallData, bytes encodedBid, bytes bidSignature);\\n\\n  event TransactionFulfilled(TransactionData txData, uint256 relayerFee, bytes signature, bytes callData, address caller);\\n\\n  event TransactionCancelled(TransactionData txData, uint256 relayerFee, address caller);\\n\\n  // Router only methods\\n  function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    address assetId,\\n    address payable recipient\\n  ) external;\\n\\n  // Methods for crosschain transfers\\n  // called in the following order (in happy case)\\n  // 1. prepare by user on sending chain\\n  // 2. prepare by router on receiving chain\\n  // 3. fulfill by user on receiving chain\\n  // 4. fulfill by router on sending chain\\n  function prepare(\\n    InvariantTransactionData calldata txData,\\n    uint256 amount,\\n    uint256 expiry,\\n    bytes calldata encryptedCallData,\\n    bytes calldata encodedBid,\\n    bytes calldata bidSignature\\n  ) external payable returns (TransactionData memory);\\n\\n  function fulfill(\\n    TransactionData calldata txData,\\n    uint256 relayerFee,\\n    bytes calldata signature,\\n    bytes calldata callData\\n  ) external returns (TransactionData memory);\\n\\n  function cancel(TransactionData calldata txData, uint256 relayerFee, bytes calldata signature) external returns (TransactionData memory);\\n}\\n\",\"keccak256\":\"0xff1a0e3022c2e4225acfd525d869dc5dbab194255f35ef319d954b129a56582f\",\"license\":\"UNLICENSED\"},\"contracts/interpreters/MultisendInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/IMultisendInterpreter.sol\\\";\\nimport \\\"../lib/LibAsset.sol\\\";\\nimport \\\"../lib/LibERC20.sol\\\";\\nimport \\\"@gnosis.pm/safe-contracts/contracts/libraries/MultiSendCallOnly.sol\\\";\\n\\n/// @title MultisendInterpreter\\n/// @author Connext <support@connext.network>\\n/// @notice This contract uses the @gnosis.pm MultiSendCallOnly helper function\\n///         to safely execute any calldata included in crosschain transfers.\\n/// @dev Should always be handled with a try-catch in nxtp to prevent funds\\n///      funds from being indefinitely locked.\\n\\ncontract MultisendInterpreter is IMultisendInterpreter {\\n  /// @dev Address of the deployed multisending helper contract\\n  address public immutable multisend;\\n\\n  constructor(address _multisend) {\\n    multisend = _multisend;\\n  }\\n\\n  function execute(\\n    address assetId,\\n    uint256 amount,\\n    bytes calldata callData\\n  ) external payable override {\\n    if (LibAsset.isEther(assetId)) {\\n      require(msg.value == amount, \\\"execute: VALUE_MISMATCH\\\");\\n      MultiSendCallOnly(multisend).multiSend{value: msg.value}(callData);\\n    } else {\\n      require(msg.value == 0, \\\"execute: ETH_WITH_ERC_TRANSFER\\\");\\n      require(LibERC20.approve(assetId, multisend, amount), \\\"execute: APPROVE_FAILED\\\");\\n\\n      MultiSendCallOnly(multisend).multiSend(callData);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x93d57561eafa9bb52955b6568ea840a937419bd372594caea2ee7125267b68a1\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibAsset.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"./LibERC20.sol\\\";\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/// @title LibAsset\\n/// @author Connext <support@connext.network>\\n/// @notice This library contains helpers for dealing with onchain transfers\\n///         of assets, including accounting for the native asset `assetId`\\n///         conventions and any noncompliant ERC20 transfers\\n\\nlibrary LibAsset {\\n    address constant ETHER_ASSETID = address(0);\\n\\n    function isEther(address assetId) internal pure returns (bool) {\\n        return assetId == ETHER_ASSETID;\\n    }\\n\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return\\n            isEther(assetId)\\n                ? address(this).balance\\n                : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    function transferEther(address payable recipient, uint256 amount)\\n        internal\\n        returns (bool)\\n    {\\n        (bool success, bytes memory returnData) =\\n            recipient.call{value: amount}(\\\"\\\");\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return true;\\n    }\\n\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return LibERC20.transfer(assetId, recipient, amount);\\n    }\\n\\n    // This function is a wrapper for transfers of Ether or ERC20 tokens,\\n    // both standard-compliant ones as well as tokens that exhibit the\\n    // missing-return-value bug.\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            isEther(assetId)\\n                ? transferEther(recipient, amount)\\n                : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf96f9ffbb3bb3838c6e52ac5e4824ea293b709561884c27dba6dfdfde87ea558\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"./LibUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title LibERC20\\n/// @author Connext <support@connext.network>\\n/// @notice This library provides several functions to safely handle\\n///         noncompliant tokens (i.e. does not return a boolean from\\n///         the transfer function)\\n\\nlibrary LibERC20 {\\n    function wrapCall(address assetId, bytes memory callData)\\n        internal\\n        returns (bool)\\n    {\\n        require(Address.isContract(assetId), \\\"LibERC20: NO_CODE\\\");\\n        (bool success, bytes memory returnData) = assetId.call(callData);\\n        LibUtils.revertIfCallFailed(success, returnData);\\n        return returnData.length == 0 || abi.decode(returnData, (bool));\\n    }\\n\\n    function approve(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"approve(address,uint256)\\\",\\n                    spender,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transferFrom(\\n        address assetId,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transferFrom(address,address,uint256)\\\",\\n                    sender,\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n\\n    function transfer(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return\\n            wrapCall(\\n                assetId,\\n                abi.encodeWithSignature(\\n                    \\\"transfer(address,uint256)\\\",\\n                    recipient,\\n                    amount\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x06eaf89a7f75b89daf010d76d2c7e263b7a58fb781c901668eb7402323fc7ea9\",\"license\":\"UNLICENSED\"},\"contracts/lib/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\n/// @title LibUtils\\n/// @author Connext <support@connext.network>\\n/// @notice Contains a helper to revert if a call was not successfully\\n///         made\\nlibrary LibUtils {\\n    /// @notice If success is false, reverts and passes on the revert string.\\n    function revertIfCallFailed(bool success, bytes memory returnData)\\n        internal\\n        pure\\n    {\\n        if (!success) {\\n            assembly {\\n                revert(add(returnData, 0x20), mload(returnData))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf1c6b1459f05c5d2796c2ab1558926ce8dc3408b2016746262fd186a84351335\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200306d3803806200306d833981016040819052620000349162000055565b600160005560609190911b6001600160601b03191660a0526080526200008f565b6000806040838503121562000068578182fd5b82516001600160a01b03811681146200007f578283fd5b6020939093015192949293505050565b60805160a05160601c612f8b620000e26000396000818161020f015261107a0152600081816101c60152818161041b015281816104480152818161068601528181610e3501526113160152612f8b6000f3fe60806040526004361061009c5760003560e01c806378e36d391161006457806378e36d39146101745780638a0d24ac146101945780639a8a0592146101b4578063c95f9d0e146101e8578063d0a8d00d146101fd578063f31abcc41461024957600080fd5b80633620340a146100a157806341258b5c146100ca578063543ad1df146101105780635e679856146101275780637272f1f614610154575b600080fd5b6100b46100af36600461262a565b610269565b6040516100c19190612df7565b60405180910390f35b3480156100d657600080fd5b506101026100e536600461258f565b600160209081526000928352604080842090915290825290205481565b6040519081526020016100c1565b34801561011c57600080fd5b506101026201518081565b34801561013357600080fd5b50610102610142366004612612565b60036020526000908152604090205481565b34801561016057600080fd5b506100b461016f36600461274e565b610b3a565b34801561018057600080fd5b506100b461018f3660046126f2565b611198565b3480156101a057600080fd5b506101026101af3660046125c7565b6116ec565b3480156101c057600080fd5b506101027f000000000000000000000000000000000000000000000000000000000000000081565b6101fb6101f63660046128a8565b61171d565b005b34801561020957600080fd5b506102317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c1565b34801561025557600080fd5b506101fb6102643660046128cc565b61193c565b610271612431565b6002600054141561029d5760405162461bcd60e51b815260040161029490612b52565b60405180910390fd5b600260009081556102b160208c018c61256c565b6001600160a01b031614156102fe5760405162461bcd60e51b8152602060048201526013602482015272707265706172653a20555345525f454d50545960681b6044820152606401610294565b600061031060408c0160208d0161256c565b6001600160a01b0316141561035f5760405162461bcd60e51b8152602060048201526015602482015274707265706172653a20524f555445525f454d50545960581b6044820152606401610294565b600061037160c08c0160a08d0161256c565b6001600160a01b031614156103c85760405162461bcd60e51b815260206004820181905260248201527f707265706172653a20524543454956494e475f414444524553535f454d5054596044820152606401610294565b8960e001358a60c0013514156104195760405162461bcd60e51b8152602060048201526016602482015275707265706172653a2053414d455f434841494e49445360501b6044820152606401610294565b7f00000000000000000000000000000000000000000000000000000000000000008a60c00135148061046e57507f00000000000000000000000000000000000000000000000000000000000000008a60e00135145b6104ba5760405162461bcd60e51b815260206004820152601960248201527f707265706172653a20494e56414c49445f434841494e494453000000000000006044820152606401610294565b620151806104c8428a612ec5565b10156105165760405162461bcd60e51b815260206004820152601860248201527f707265706172653a2054494d454f55545f544f4f5f4c4f5700000000000000006044820152606401610294565b600089116105665760405162461bcd60e51b815260206004820152601760248201527f707265706172653a20414d4f554e545f49535f5a45524f0000000000000000006044820152606401610294565b60008a6040516020016105799190612b89565b60408051601f19818403018152918152815160209283012060008181526003909352912054909150156105e75760405162461bcd60e51b8152602060048201526016602482015275707265706172653a204449474553545f45584953545360501b6044820152606401610294565b60408051606080820183528c825260208083018d81524393850193845284519182018f9052519381019390935290519082015260800160408051601f19818403018152918152815160209283012060008481526003845291822055600291610651908e018e61256c565b6001600160a01b03168152602080820192909252604001600090812080546001810182559082529190204391015560c08b01357f000000000000000000000000000000000000000000000000000000000000000014156107d9576106cb6106be60608d0160408e0161256c565b6001600160a01b03161590565b156107245789341461071f5760405162461bcd60e51b815260206004820152601760248201527f707265706172653a2056414c55455f4d49534d415443480000000000000000006044820152606401610294565b6109d5565b34156107725760405162461bcd60e51b815260206004820152601e60248201527f707265706172653a204554485f574954485f4552435f5452414e5346455200006044820152606401610294565b61078d61078560608d0160408e0161256c565b33308d611b1a565b61071f5760405162461bcd60e51b815260206004820152601e60248201527f707265706172653a2045524332305f5452414e534645525f4641494c454400006044820152606401610294565b6107e960408c0160208d0161256c565b6001600160a01b0316336001600160a01b0316146108495760405162461bcd60e51b815260206004820152601860248201527f707265706172653a20524f555445525f4d49534d4154434800000000000000006044820152606401610294565b34156108975760405162461bcd60e51b815260206004820181905260248201527f707265706172653a204554485f574954485f524f555445525f505245504152456044820152606401610294565b89600160008d60200160208101906108af919061256c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d60600160208101906108e4919061256c565b6001600160a01b03166001600160a01b031681526020019081526020016000205410156109535760405162461bcd60e51b815260206004820152601f60248201527f707265706172653a20494e53554646494349454e545f4c4951554944495459006044820152606401610294565b89600160008d602001602081019061096b919061256c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d60600160208101906109a0919061256c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109cf9190612ec5565b90915550505b604080516101a08101909152600090806109f260208f018f61256c565b6001600160a01b031681526020018d6020016020810190610a13919061256c565b6001600160a01b031681526020018d6040016020810190610a34919061256c565b6001600160a01b031681526020018d6060016020810190610a55919061256c565b6001600160a01b031681526020018d6080016020810190610a76919061256c565b6001600160a01b031681526020018d60a0016020810190610a97919061256c565b6001600160a01b031681526020018d610100013581526020018d610120013581526020018d60c0013581526020018d60e0013581526020018c81526020018b81526020014381525090507f8458983fcef064d5965143b5418528f18b3e1712cd44b491a195977b0838cbc581338b8b8b8b8b8b604051610b1e989796959493929190612e06565b60405180910390a160016000559b9a5050505050505050505050565b610b42612431565b60026000541415610b655760405162461bcd60e51b815260040161029490612b52565b60026000908155610b7588611b7f565b9050610b8088611c9e565b60008281526003602052604090205414610bdc5760405162461bcd60e51b815260206004820152601d60248201527f66756c66696c6c3a20494e56414c49445f56415249414e545f444154410000006044820152606401610294565b4288610160013511610c235760405162461bcd60e51b815260206004820152601060248201526f199d5b199a5b1b0e881156141254915160821b6044820152606401610294565b600088610180013511610c785760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20414c52454144595f434f4d504c455445440000000000006044820152606401610294565b610c85602089018961256c565b6001600160a01b0316610c9a89898989611d07565b6001600160a01b031614610cf05760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20494e56414c49445f5349474e41545552450000000000006044820152606401610294565b8761014001358710610d445760405162461bcd60e51b815260206004820152601c60248201527f66756c66696c6c3a20494e56414c49445f52454c415945525f464545000000006044820152606401610294565b8760c001358484604051610d59929190612afe565b604051809103902014610dae5760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20494e56414c49445f43414c4c5f444154410000000000006044820152606401610294565b60408051606080820183526101408b01358083526101608c013560208085019182526000948601948552855190810192909252519381019390935290519082015260800160408051601f1981840301815291815281516020928301206000848152600384529190912055610e3390610e28908a018a61256c565b896101800135611da8565b7f00000000000000000000000000000000000000000000000000000000000000008861010001351415610f5957610e706040890160208a0161256c565b6001600160a01b0316336001600160a01b031614610ed05760405162461bcd60e51b815260206004820152601860248201527f66756c66696c6c3a20524f555445525f4d49534d4154434800000000000000006044820152606401610294565b61014088013560016000610eea60408c0160208d0161256c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a6040016020810190610f1f919061256c565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610f4e9190612ead565b909155506111359050565b6000610f6a886101408b0135612ec5565b90508715610fd857610f8c610f8560808b0160608c0161256c565b338a611f5c565b610fd85760405162461bcd60e51b815260206004820152601c60248201527f66756c66696c6c3a204645455f5452414e534645525f4641494c4544000000006044820152606401610294565b6040805160008152602081019182905251902060c08a013514156110705761101f61100960808b0160608c0161256c565b61101960c08c0160a08d0161256c565b83611f5c565b61106b5760405162461bcd60e51b815260206004820152601860248201527f66756c66696c6c3a205452414e534645525f4641494c454400000000000000006044820152606401610294565b611133565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b61d27f66110b26106be60808d0160608e0161256c565b6110bd5760006110bf565b825b6110cf60808d0160608e0161256c565b8489896040518663ffffffff1660e01b81526004016110f19493929190612b2a565b6000604051808303818588803b15801561110a57600080fd5b505af19350505050801561111c575060015b6111335761101f61100960808b0160608c0161256c565b505b7f76729c0386627de3f8e7d017a91885048c3daca792de0e27803f1cca04b8a0f8888888888888336040516111709796959493929190612d99565b60405180910390a1611187368990038901896127da565b600160005598975050505050505050565b6111a0612431565b600260005414156111c35760405162461bcd60e51b815260040161029490612b52565b600260009081556111d386611b7f565b90506111de86611c9e565b6000828152600360205260409020541461123a5760405162461bcd60e51b815260206004820152601c60248201527f63616e63656c3a20494e56414c49445f56415249414e545f44415441000000006044820152606401610294565b60008661018001351161128f5760405162461bcd60e51b815260206004820152601960248201527f63616e63656c3a20414c52454144595f434f4d504c45544544000000000000006044820152606401610294565b60408051606080820183526101408901358083526101608a013560208085019182526000948601948552855190810192909252519381019390935290519082015260800160408051601f1981840301815291815281516020928301206000848152600384529190912055611314906113099088018861256c565b876101800135611da8565b7f000000000000000000000000000000000000000000000000000000000000000086610100013514156115985742866101600135106114365761135d604087016020880161256c565b6001600160a01b0316336001600160a01b0316146113bd5760405162461bcd60e51b815260206004820152601a60248201527f63616e63656c3a20524f555445525f4d5553545f43414e43454c0000000000006044820152606401610294565b6113eb6113d0606088016040890161256c565b6113e060a0890160808a0161256c565b886101400135611f5c565b6114315760405162461bcd60e51b815260206004820152601760248201527618d85b98d95b0e881514905394d1915497d19052531151604a1b6044820152606401610294565b611693565b841561151657611449602087018761256c565b6001600160a01b031661145e87878787611f8f565b6001600160a01b0316146114b05760405162461bcd60e51b815260206004820152601960248201527863616e63656c3a20494e56414c49445f5349474e415455524560381b6044820152606401610294565b6114ca6114c3608088016060890161256c565b3387611f5c565b6115165760405162461bcd60e51b815260206004820152601b60248201527f63616e63656c3a204645455f5452414e534645525f4641494c454400000000006044820152606401610294565b600061152786610140890135612ec5565b905061154c61153c6060890160408a0161256c565b61101960a08a0160808b0161256c565b6115925760405162461bcd60e51b815260206004820152601760248201527618d85b98d95b0e881514905394d1915497d19052531151604a1b6044820152606401610294565b50611693565b4286610160013510611618576115b1602087018761256c565b6001600160a01b03166115c687878787611f8f565b6001600160a01b0316146116185760405162461bcd60e51b815260206004820152601960248201527863616e63656c3a20494e56414c49445f5349474e415455524560381b6044820152606401610294565b6101408601356001600061163260408a0160208b0161256c565b6001600160a01b03168152602081019190915260400160009081209061165e60808a0160608b0161256c565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461168d9190612ead565b90915550505b7f1daffb2728967012ac35bb2931cbe276e9aa3657aedb246b6ccdcce5553fbfc48686336040516116c693929190612d69565b60405180910390a16116dd368790038701876127da565b60016000559695505050505050565b6002602052816000526040600020818154811061170857600080fd5b90600052602060002001600091509150505481565b600260005414156117405760405162461bcd60e51b815260040161029490612b52565b6002600055816117925760405162461bcd60e51b815260206004820152601c60248201527f6164644c69717569646974793a20414d4f554e545f49535f5a45524f000000006044820152606401610294565b6001600160a01b0381166117f4578134146117ef5760405162461bcd60e51b815260206004820152601c60248201527f6164644c69717569646974793a2056414c55455f4d49534d41544348000000006044820152606401610294565b6118b2565b341561184e5760405162461bcd60e51b815260206004820152602360248201527f6164644c69717569646974793a204554485f574954485f4552435f5452414e536044820152622322a960e91b6064820152608401610294565b61185a81333085611b1a565b6118b25760405162461bcd60e51b815260206004820152602360248201527f6164644c69717569646974793a2045524332305f5452414e534645525f46414960448201526213115160ea1b6064820152608401610294565b3360009081526001602090815260408083206001600160a01b0385168452909152812080548492906118e5908490612ead565b9091555050604080513381526001600160a01b03831660208201529081018390527f9d278c56ba6dc86a12eefe6b43112bd6e06648eb4ec0b950ee2d783d40e2acb49060600160405180910390a150506001600055565b6002600054141561195f5760405162461bcd60e51b815260040161029490612b52565b6002600055826119b15760405162461bcd60e51b815260206004820152601f60248201527f72656d6f76654c69717569646974793a20414d4f554e545f49535f5a45524f006044820152606401610294565b3360009081526001602090815260408083206001600160a01b0386168452909152902054831115611a305760405162461bcd60e51b815260206004820152602360248201527f72656d6f76654c69717569646974793a20494e53554646494349454e545f46556044820152624e445360e81b6064820152608401610294565b3360009081526001602090815260408083206001600160a01b038616845290915281208054859290611a63908490612ec5565b90915550611a749050828285611f5c565b611ac05760405162461bcd60e51b815260206004820181905260248201527f72656d6f76654c69717569646974793a205452414e534645525f4641494c45446044820152606401610294565b604080513381526001600160a01b0384811660208301528183018690528316606082015290517f7da12116be8cb7af4b2d9e9b4a2ca2c3a3243ddd6fd3a94411902367b8eed5689181900360800190a15050600160005550565b6040516001600160a01b0380851660248301528316604482015260648101829052600090611b7690869060840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b179052611fe7565b95945050505050565b604080516101408101909152600090819080611b9e602086018661256c565b6001600160a01b03168152602001846020016020810190611bbf919061256c565b6001600160a01b03168152602001611bdd606086016040870161256c565b6001600160a01b03168152602001611bfb608086016060870161256c565b6001600160a01b03168152602001611c1960a086016080870161256c565b6001600160a01b03168152602001611c3760c0860160a0870161256c565b6001600160a01b03168152602001846101000135815260200184610120013581526020018460c0013581526020018460e00135815250905080604051602001611c809190612c4e565b60405160208183030381529060405280519060200120915050919050565b6040805160608082018352610140840135808352610160850135602080850191825261018087013594860194855285519081019290925251938101939093529051908201526000906080015b604051602081830303815290604052805190602001209050919050565b600080611d1386611b7f565b604080518082018252828152602080820189815283519182018590525192810192909252919250611d9d90611d61906060015b604051602081830303815290604052805190602001206120bf565b86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120fa92505050565b979650505050505050565b6001600160a01b038216600090815260026020526040812054611dcd90600190612ec5565b905060008167ffffffffffffffff811115611df857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e21578160200160208202803683370190505b50905060008060005b611e35856001612ead565b811015611f295782158015611e8d57506001600160a01b0387166000908152600260205260409020805487919083908110611e8057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154145b15611e9b5760019250611f17565b6001600160a01b0387166000908152600260205260409020805482908110611ed357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154848381518110611efe57634e487b7160e01b600052603260045260246000fd5b602090810291909101015281611f1381612f0c565b9250505b80611f2181612f0c565b915050611e2a565b506001600160a01b03861660009081526002602090815260409091208451611f539286019061249d565b50505050505050565b60006001600160a01b03841615611f7d57611f788484846121b0565b611f87565b611f8783836121bd565b949350505050565b600080611f9b86611b7f565b60408051606081018252828152602080820189905282518084018452600681526518d85b98d95b60d21b8183015282840152915192935091611d9d91611d6191611d4691859101612d19565b6000823b61202b5760405162461bcd60e51b81526020600482015260116024820152704c696245524332303a204e4f5f434f444560781b6044820152606401610294565b600080846001600160a01b0316846040516120469190612b0e565b6000604051808303816000865af19150503d8060008114612083576040519150601f19603f3d011682016040523d82523d6000602084013e612088565b606091505b5091509150612097828261222c565b805115806120b45750808060200190518101906120b491906125f2565b925050505b92915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01611cea565b6000806000808451604114156121245750505060208201516040830151606084015160001a61219a565b8451604014156121525750505060408201516020830151906001600160ff1b0381169060ff1c601b0161219a565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610294565b6121a68682858561223d565b9695505050505050565b6000611f878484846123dd565b6000806000846001600160a01b03168460405160006040518083038185875af1925050503d806000811461220d576040519150601f19603f3d011682016040523d82523d6000602084013e612212565b606091505b5091509150612221828261222c565b506001949350505050565b8161223957805160208201fd5b5050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156122ba5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610294565b8360ff16601b14806122cf57508360ff16601c145b6123265760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610294565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa15801561237a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b765760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610294565b6040516001600160a01b038316602482015260448101829052600090611f8790859060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052611fe7565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081019190915290565b8280548282559060005260206000209081019282156124d8579160200282015b828111156124d85782518255916020019190600101906124bd565b506124e49291506124e8565b5090565b5b808211156124e457600081556001016124e9565b803561250881612f3d565b919050565b60008083601f84011261251e578182fd5b50813567ffffffffffffffff811115612535578182fd5b60208301915083602082850101111561254d57600080fd5b9250929050565b60006101a08284031215612566578081fd5b50919050565b60006020828403121561257d578081fd5b813561258881612f3d565b9392505050565b600080604083850312156125a1578081fd5b82356125ac81612f3d565b915060208301356125bc81612f3d565b809150509250929050565b600080604083850312156125d9578182fd5b82356125e481612f3d565b946020939093013593505050565b600060208284031215612603578081fd5b81518015158114612588578182fd5b600060208284031215612623578081fd5b5035919050565b6000806000806000806000806000898b036101e0811215612649578586fd5b61014080821215612658578687fd5b8b9a508a0135985050610160890135965061018089013567ffffffffffffffff80821115612684578687fd5b6126908d838e0161250d565b90985096506101a08c01359150808211156126a9578586fd5b6126b58d838e0161250d565b90965094506101c08c01359150808211156126ce578384fd5b506126db8c828d0161250d565b915080935050809150509295985092959850929598565b6000806000806101e08587031215612708578384fd5b6127128686612554565b93506101a085013592506101c085013567ffffffffffffffff811115612736578283fd5b6127428782880161250d565b95989497509550505050565b6000806000806000806102008789031215612767578182fd5b6127718888612554565b95506101a087013594506101c087013567ffffffffffffffff80821115612796578384fd5b6127a28a838b0161250d565b90965094506101e08901359150808211156127bb578384fd5b506127c889828a0161250d565b979a9699509497509295939492505050565b60006101a082840312156127ec578081fd5b6127f4612e75565b6127fd836124fd565b815261280b602084016124fd565b602082015261281c604084016124fd565b604082015261282d606084016124fd565b606082015261283e608084016124fd565b608082015261284f60a084016124fd565b60a082015260c0838101359082015260e080840135908201526101008084013590820152610120808401359082015261014080840135908201526101608084013590820152610180928301359281019290925250919050565b600080604083850312156128ba578182fd5b8235915060208301356125bc81612f3d565b6000806000606084860312156128e0578081fd5b8335925060208401356128f281612f3d565b9150604084013561290281612f3d565b809150509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61295082612943836124fd565b6001600160a01b03169052565b61295c602082016124fd565b6001600160a01b03166020830152612976604082016124fd565b6001600160a01b03166040830152612990606082016124fd565b6001600160a01b031660608301526129aa608082016124fd565b6001600160a01b031660808301526129c460a082016124fd565b6001600160a01b031660a083015260c0818101359083015260e08082013590830152610100808201359083015261012080820135908301526101408082013590830152610160808201359083015261018090810135910152565b80516001600160a01b031682526020810151612a4560208401826001600160a01b03169052565b506040810151612a6060408401826001600160a01b03169052565b506060810151612a7b60608401826001600160a01b03169052565b506080810151612a9660808401826001600160a01b03169052565b5060a0810151612ab160a08401826001600160a01b03169052565b5060c0818101519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b8183823760009101908152919050565b60008251612b20818460208701612edc565b9190910192915050565b60018060a01b03851681528360208201526060604082015260006121a660608301848661290d565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6101408101612b9b82612943856124fd565b612ba7602084016124fd565b6001600160a01b03166020830152612bc1604084016124fd565b6001600160a01b03166040830152612bdb606084016124fd565b6001600160a01b03166060830152612bf5608084016124fd565b6001600160a01b03166080830152612c0f60a084016124fd565b6001600160a01b031660a083015260c0838101359083015260e08084013590830152610100808401359083015261012092830135929091019190915290565b81516001600160a01b0316815261014081016020830151612c7a60208401826001600160a01b03169052565b506040830151612c9560408401826001600160a01b03169052565b506060830151612cb060608401826001600160a01b03169052565b506080830151612ccb60808401826001600160a01b03169052565b5060a0830151612ce660a08401826001600160a01b03169052565b5060c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b602081528151602082015260208201516040820152600060408301516060808401528051806080850152612d548160a0860160208501612edc565b601f01601f19169290920160a0019392505050565b6101e08101612d788286612936565b6101a08201939093526001600160a01b03919091166101c090910152919050565b6000610220612da8838b612936565b886101a0840152806101c0840152612dc3818401888a61290d565b90508281036101e0840152612dd981868861290d565b91505060018060a01b03831661020083015298975050505050505050565b6101a081016120b98284612a1e565b6000610220612e15838c612a1e565b6001600160a01b038a166101a08401526101c08301819052612e3a818401898b61290d565b90508281036101e0840152612e5081878961290d565b9050828103610200840152612e6681858761290d565b9b9a5050505050505050505050565b6040516101a0810167ffffffffffffffff81118282101715612ea757634e487b7160e01b600052604160045260246000fd5b60405290565b60008219821115612ec057612ec0612f27565b500190565b600082821015612ed757612ed7612f27565b500390565b60005b83811015612ef7578181015183820152602001612edf565b83811115612f06576000848401525b50505050565b6000600019821415612f2057612f20612f27565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612f5257600080fd5b5056fea2646970667358221220af0f30fce1b6c5607f71c34d710c2aa5ee1d153e6a9e2ca3cc55b1fa9c1b9ae364736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c806378e36d391161006457806378e36d39146101745780638a0d24ac146101945780639a8a0592146101b4578063c95f9d0e146101e8578063d0a8d00d146101fd578063f31abcc41461024957600080fd5b80633620340a146100a157806341258b5c146100ca578063543ad1df146101105780635e679856146101275780637272f1f614610154575b600080fd5b6100b46100af36600461262a565b610269565b6040516100c19190612df7565b60405180910390f35b3480156100d657600080fd5b506101026100e536600461258f565b600160209081526000928352604080842090915290825290205481565b6040519081526020016100c1565b34801561011c57600080fd5b506101026201518081565b34801561013357600080fd5b50610102610142366004612612565b60036020526000908152604090205481565b34801561016057600080fd5b506100b461016f36600461274e565b610b3a565b34801561018057600080fd5b506100b461018f3660046126f2565b611198565b3480156101a057600080fd5b506101026101af3660046125c7565b6116ec565b3480156101c057600080fd5b506101027f000000000000000000000000000000000000000000000000000000000000000081565b6101fb6101f63660046128a8565b61171d565b005b34801561020957600080fd5b506102317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c1565b34801561025557600080fd5b506101fb6102643660046128cc565b61193c565b610271612431565b6002600054141561029d5760405162461bcd60e51b815260040161029490612b52565b60405180910390fd5b600260009081556102b160208c018c61256c565b6001600160a01b031614156102fe5760405162461bcd60e51b8152602060048201526013602482015272707265706172653a20555345525f454d50545960681b6044820152606401610294565b600061031060408c0160208d0161256c565b6001600160a01b0316141561035f5760405162461bcd60e51b8152602060048201526015602482015274707265706172653a20524f555445525f454d50545960581b6044820152606401610294565b600061037160c08c0160a08d0161256c565b6001600160a01b031614156103c85760405162461bcd60e51b815260206004820181905260248201527f707265706172653a20524543454956494e475f414444524553535f454d5054596044820152606401610294565b8960e001358a60c0013514156104195760405162461bcd60e51b8152602060048201526016602482015275707265706172653a2053414d455f434841494e49445360501b6044820152606401610294565b7f00000000000000000000000000000000000000000000000000000000000000008a60c00135148061046e57507f00000000000000000000000000000000000000000000000000000000000000008a60e00135145b6104ba5760405162461bcd60e51b815260206004820152601960248201527f707265706172653a20494e56414c49445f434841494e494453000000000000006044820152606401610294565b620151806104c8428a612ec5565b10156105165760405162461bcd60e51b815260206004820152601860248201527f707265706172653a2054494d454f55545f544f4f5f4c4f5700000000000000006044820152606401610294565b600089116105665760405162461bcd60e51b815260206004820152601760248201527f707265706172653a20414d4f554e545f49535f5a45524f0000000000000000006044820152606401610294565b60008a6040516020016105799190612b89565b60408051601f19818403018152918152815160209283012060008181526003909352912054909150156105e75760405162461bcd60e51b8152602060048201526016602482015275707265706172653a204449474553545f45584953545360501b6044820152606401610294565b60408051606080820183528c825260208083018d81524393850193845284519182018f9052519381019390935290519082015260800160408051601f19818403018152918152815160209283012060008481526003845291822055600291610651908e018e61256c565b6001600160a01b03168152602080820192909252604001600090812080546001810182559082529190204391015560c08b01357f000000000000000000000000000000000000000000000000000000000000000014156107d9576106cb6106be60608d0160408e0161256c565b6001600160a01b03161590565b156107245789341461071f5760405162461bcd60e51b815260206004820152601760248201527f707265706172653a2056414c55455f4d49534d415443480000000000000000006044820152606401610294565b6109d5565b34156107725760405162461bcd60e51b815260206004820152601e60248201527f707265706172653a204554485f574954485f4552435f5452414e5346455200006044820152606401610294565b61078d61078560608d0160408e0161256c565b33308d611b1a565b61071f5760405162461bcd60e51b815260206004820152601e60248201527f707265706172653a2045524332305f5452414e534645525f4641494c454400006044820152606401610294565b6107e960408c0160208d0161256c565b6001600160a01b0316336001600160a01b0316146108495760405162461bcd60e51b815260206004820152601860248201527f707265706172653a20524f555445525f4d49534d4154434800000000000000006044820152606401610294565b34156108975760405162461bcd60e51b815260206004820181905260248201527f707265706172653a204554485f574954485f524f555445525f505245504152456044820152606401610294565b89600160008d60200160208101906108af919061256c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d60600160208101906108e4919061256c565b6001600160a01b03166001600160a01b031681526020019081526020016000205410156109535760405162461bcd60e51b815260206004820152601f60248201527f707265706172653a20494e53554646494349454e545f4c4951554944495459006044820152606401610294565b89600160008d602001602081019061096b919061256c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008d60600160208101906109a0919061256c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109cf9190612ec5565b90915550505b604080516101a08101909152600090806109f260208f018f61256c565b6001600160a01b031681526020018d6020016020810190610a13919061256c565b6001600160a01b031681526020018d6040016020810190610a34919061256c565b6001600160a01b031681526020018d6060016020810190610a55919061256c565b6001600160a01b031681526020018d6080016020810190610a76919061256c565b6001600160a01b031681526020018d60a0016020810190610a97919061256c565b6001600160a01b031681526020018d610100013581526020018d610120013581526020018d60c0013581526020018d60e0013581526020018c81526020018b81526020014381525090507f8458983fcef064d5965143b5418528f18b3e1712cd44b491a195977b0838cbc581338b8b8b8b8b8b604051610b1e989796959493929190612e06565b60405180910390a160016000559b9a5050505050505050505050565b610b42612431565b60026000541415610b655760405162461bcd60e51b815260040161029490612b52565b60026000908155610b7588611b7f565b9050610b8088611c9e565b60008281526003602052604090205414610bdc5760405162461bcd60e51b815260206004820152601d60248201527f66756c66696c6c3a20494e56414c49445f56415249414e545f444154410000006044820152606401610294565b4288610160013511610c235760405162461bcd60e51b815260206004820152601060248201526f199d5b199a5b1b0e881156141254915160821b6044820152606401610294565b600088610180013511610c785760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20414c52454144595f434f4d504c455445440000000000006044820152606401610294565b610c85602089018961256c565b6001600160a01b0316610c9a89898989611d07565b6001600160a01b031614610cf05760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20494e56414c49445f5349474e41545552450000000000006044820152606401610294565b8761014001358710610d445760405162461bcd60e51b815260206004820152601c60248201527f66756c66696c6c3a20494e56414c49445f52454c415945525f464545000000006044820152606401610294565b8760c001358484604051610d59929190612afe565b604051809103902014610dae5760405162461bcd60e51b815260206004820152601a60248201527f66756c66696c6c3a20494e56414c49445f43414c4c5f444154410000000000006044820152606401610294565b60408051606080820183526101408b01358083526101608c013560208085019182526000948601948552855190810192909252519381019390935290519082015260800160408051601f1981840301815291815281516020928301206000848152600384529190912055610e3390610e28908a018a61256c565b896101800135611da8565b7f00000000000000000000000000000000000000000000000000000000000000008861010001351415610f5957610e706040890160208a0161256c565b6001600160a01b0316336001600160a01b031614610ed05760405162461bcd60e51b815260206004820152601860248201527f66756c66696c6c3a20524f555445525f4d49534d4154434800000000000000006044820152606401610294565b61014088013560016000610eea60408c0160208d0161256c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008a6040016020810190610f1f919061256c565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610f4e9190612ead565b909155506111359050565b6000610f6a886101408b0135612ec5565b90508715610fd857610f8c610f8560808b0160608c0161256c565b338a611f5c565b610fd85760405162461bcd60e51b815260206004820152601c60248201527f66756c66696c6c3a204645455f5452414e534645525f4641494c4544000000006044820152606401610294565b6040805160008152602081019182905251902060c08a013514156110705761101f61100960808b0160608c0161256c565b61101960c08c0160a08d0161256c565b83611f5c565b61106b5760405162461bcd60e51b815260206004820152601860248201527f66756c66696c6c3a205452414e534645525f4641494c454400000000000000006044820152606401610294565b611133565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b61d27f66110b26106be60808d0160608e0161256c565b6110bd5760006110bf565b825b6110cf60808d0160608e0161256c565b8489896040518663ffffffff1660e01b81526004016110f19493929190612b2a565b6000604051808303818588803b15801561110a57600080fd5b505af19350505050801561111c575060015b6111335761101f61100960808b0160608c0161256c565b505b7f76729c0386627de3f8e7d017a91885048c3daca792de0e27803f1cca04b8a0f8888888888888336040516111709796959493929190612d99565b60405180910390a1611187368990038901896127da565b600160005598975050505050505050565b6111a0612431565b600260005414156111c35760405162461bcd60e51b815260040161029490612b52565b600260009081556111d386611b7f565b90506111de86611c9e565b6000828152600360205260409020541461123a5760405162461bcd60e51b815260206004820152601c60248201527f63616e63656c3a20494e56414c49445f56415249414e545f44415441000000006044820152606401610294565b60008661018001351161128f5760405162461bcd60e51b815260206004820152601960248201527f63616e63656c3a20414c52454144595f434f4d504c45544544000000000000006044820152606401610294565b60408051606080820183526101408901358083526101608a013560208085019182526000948601948552855190810192909252519381019390935290519082015260800160408051601f1981840301815291815281516020928301206000848152600384529190912055611314906113099088018861256c565b876101800135611da8565b7f000000000000000000000000000000000000000000000000000000000000000086610100013514156115985742866101600135106114365761135d604087016020880161256c565b6001600160a01b0316336001600160a01b0316146113bd5760405162461bcd60e51b815260206004820152601a60248201527f63616e63656c3a20524f555445525f4d5553545f43414e43454c0000000000006044820152606401610294565b6113eb6113d0606088016040890161256c565b6113e060a0890160808a0161256c565b886101400135611f5c565b6114315760405162461bcd60e51b815260206004820152601760248201527618d85b98d95b0e881514905394d1915497d19052531151604a1b6044820152606401610294565b611693565b841561151657611449602087018761256c565b6001600160a01b031661145e87878787611f8f565b6001600160a01b0316146114b05760405162461bcd60e51b815260206004820152601960248201527863616e63656c3a20494e56414c49445f5349474e415455524560381b6044820152606401610294565b6114ca6114c3608088016060890161256c565b3387611f5c565b6115165760405162461bcd60e51b815260206004820152601b60248201527f63616e63656c3a204645455f5452414e534645525f4641494c454400000000006044820152606401610294565b600061152786610140890135612ec5565b905061154c61153c6060890160408a0161256c565b61101960a08a0160808b0161256c565b6115925760405162461bcd60e51b815260206004820152601760248201527618d85b98d95b0e881514905394d1915497d19052531151604a1b6044820152606401610294565b50611693565b4286610160013510611618576115b1602087018761256c565b6001600160a01b03166115c687878787611f8f565b6001600160a01b0316146116185760405162461bcd60e51b815260206004820152601960248201527863616e63656c3a20494e56414c49445f5349474e415455524560381b6044820152606401610294565b6101408601356001600061163260408a0160208b0161256c565b6001600160a01b03168152602081019190915260400160009081209061165e60808a0160608b0161256c565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461168d9190612ead565b90915550505b7f1daffb2728967012ac35bb2931cbe276e9aa3657aedb246b6ccdcce5553fbfc48686336040516116c693929190612d69565b60405180910390a16116dd368790038701876127da565b60016000559695505050505050565b6002602052816000526040600020818154811061170857600080fd5b90600052602060002001600091509150505481565b600260005414156117405760405162461bcd60e51b815260040161029490612b52565b6002600055816117925760405162461bcd60e51b815260206004820152601c60248201527f6164644c69717569646974793a20414d4f554e545f49535f5a45524f000000006044820152606401610294565b6001600160a01b0381166117f4578134146117ef5760405162461bcd60e51b815260206004820152601c60248201527f6164644c69717569646974793a2056414c55455f4d49534d41544348000000006044820152606401610294565b6118b2565b341561184e5760405162461bcd60e51b815260206004820152602360248201527f6164644c69717569646974793a204554485f574954485f4552435f5452414e536044820152622322a960e91b6064820152608401610294565b61185a81333085611b1a565b6118b25760405162461bcd60e51b815260206004820152602360248201527f6164644c69717569646974793a2045524332305f5452414e534645525f46414960448201526213115160ea1b6064820152608401610294565b3360009081526001602090815260408083206001600160a01b0385168452909152812080548492906118e5908490612ead565b9091555050604080513381526001600160a01b03831660208201529081018390527f9d278c56ba6dc86a12eefe6b43112bd6e06648eb4ec0b950ee2d783d40e2acb49060600160405180910390a150506001600055565b6002600054141561195f5760405162461bcd60e51b815260040161029490612b52565b6002600055826119b15760405162461bcd60e51b815260206004820152601f60248201527f72656d6f76654c69717569646974793a20414d4f554e545f49535f5a45524f006044820152606401610294565b3360009081526001602090815260408083206001600160a01b0386168452909152902054831115611a305760405162461bcd60e51b815260206004820152602360248201527f72656d6f76654c69717569646974793a20494e53554646494349454e545f46556044820152624e445360e81b6064820152608401610294565b3360009081526001602090815260408083206001600160a01b038616845290915281208054859290611a63908490612ec5565b90915550611a749050828285611f5c565b611ac05760405162461bcd60e51b815260206004820181905260248201527f72656d6f76654c69717569646974793a205452414e534645525f4641494c45446044820152606401610294565b604080513381526001600160a01b0384811660208301528183018690528316606082015290517f7da12116be8cb7af4b2d9e9b4a2ca2c3a3243ddd6fd3a94411902367b8eed5689181900360800190a15050600160005550565b6040516001600160a01b0380851660248301528316604482015260648101829052600090611b7690869060840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b179052611fe7565b95945050505050565b604080516101408101909152600090819080611b9e602086018661256c565b6001600160a01b03168152602001846020016020810190611bbf919061256c565b6001600160a01b03168152602001611bdd606086016040870161256c565b6001600160a01b03168152602001611bfb608086016060870161256c565b6001600160a01b03168152602001611c1960a086016080870161256c565b6001600160a01b03168152602001611c3760c0860160a0870161256c565b6001600160a01b03168152602001846101000135815260200184610120013581526020018460c0013581526020018460e00135815250905080604051602001611c809190612c4e565b60405160208183030381529060405280519060200120915050919050565b6040805160608082018352610140840135808352610160850135602080850191825261018087013594860194855285519081019290925251938101939093529051908201526000906080015b604051602081830303815290604052805190602001209050919050565b600080611d1386611b7f565b604080518082018252828152602080820189815283519182018590525192810192909252919250611d9d90611d61906060015b604051602081830303815290604052805190602001206120bf565b86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120fa92505050565b979650505050505050565b6001600160a01b038216600090815260026020526040812054611dcd90600190612ec5565b905060008167ffffffffffffffff811115611df857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e21578160200160208202803683370190505b50905060008060005b611e35856001612ead565b811015611f295782158015611e8d57506001600160a01b0387166000908152600260205260409020805487919083908110611e8057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154145b15611e9b5760019250611f17565b6001600160a01b0387166000908152600260205260409020805482908110611ed357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154848381518110611efe57634e487b7160e01b600052603260045260246000fd5b602090810291909101015281611f1381612f0c565b9250505b80611f2181612f0c565b915050611e2a565b506001600160a01b03861660009081526002602090815260409091208451611f539286019061249d565b50505050505050565b60006001600160a01b03841615611f7d57611f788484846121b0565b611f87565b611f8783836121bd565b949350505050565b600080611f9b86611b7f565b60408051606081018252828152602080820189905282518084018452600681526518d85b98d95b60d21b8183015282840152915192935091611d9d91611d6191611d4691859101612d19565b6000823b61202b5760405162461bcd60e51b81526020600482015260116024820152704c696245524332303a204e4f5f434f444560781b6044820152606401610294565b600080846001600160a01b0316846040516120469190612b0e565b6000604051808303816000865af19150503d8060008114612083576040519150601f19603f3d011682016040523d82523d6000602084013e612088565b606091505b5091509150612097828261222c565b805115806120b45750808060200190518101906120b491906125f2565b925050505b92915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01611cea565b6000806000808451604114156121245750505060208201516040830151606084015160001a61219a565b8451604014156121525750505060408201516020830151906001600160ff1b0381169060ff1c601b0161219a565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610294565b6121a68682858561223d565b9695505050505050565b6000611f878484846123dd565b6000806000846001600160a01b03168460405160006040518083038185875af1925050503d806000811461220d576040519150601f19603f3d011682016040523d82523d6000602084013e612212565b606091505b5091509150612221828261222c565b506001949350505050565b8161223957805160208201fd5b5050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156122ba5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610294565b8360ff16601b14806122cf57508360ff16601c145b6123265760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610294565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa15801561237a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b765760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610294565b6040516001600160a01b038316602482015260448101829052600090611f8790859060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052611fe7565b604080516101a081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052610160810182905261018081019190915290565b8280548282559060005260206000209081019282156124d8579160200282015b828111156124d85782518255916020019190600101906124bd565b506124e49291506124e8565b5090565b5b808211156124e457600081556001016124e9565b803561250881612f3d565b919050565b60008083601f84011261251e578182fd5b50813567ffffffffffffffff811115612535578182fd5b60208301915083602082850101111561254d57600080fd5b9250929050565b60006101a08284031215612566578081fd5b50919050565b60006020828403121561257d578081fd5b813561258881612f3d565b9392505050565b600080604083850312156125a1578081fd5b82356125ac81612f3d565b915060208301356125bc81612f3d565b809150509250929050565b600080604083850312156125d9578182fd5b82356125e481612f3d565b946020939093013593505050565b600060208284031215612603578081fd5b81518015158114612588578182fd5b600060208284031215612623578081fd5b5035919050565b6000806000806000806000806000898b036101e0811215612649578586fd5b61014080821215612658578687fd5b8b9a508a0135985050610160890135965061018089013567ffffffffffffffff80821115612684578687fd5b6126908d838e0161250d565b90985096506101a08c01359150808211156126a9578586fd5b6126b58d838e0161250d565b90965094506101c08c01359150808211156126ce578384fd5b506126db8c828d0161250d565b915080935050809150509295985092959850929598565b6000806000806101e08587031215612708578384fd5b6127128686612554565b93506101a085013592506101c085013567ffffffffffffffff811115612736578283fd5b6127428782880161250d565b95989497509550505050565b6000806000806000806102008789031215612767578182fd5b6127718888612554565b95506101a087013594506101c087013567ffffffffffffffff80821115612796578384fd5b6127a28a838b0161250d565b90965094506101e08901359150808211156127bb578384fd5b506127c889828a0161250d565b979a9699509497509295939492505050565b60006101a082840312156127ec578081fd5b6127f4612e75565b6127fd836124fd565b815261280b602084016124fd565b602082015261281c604084016124fd565b604082015261282d606084016124fd565b606082015261283e608084016124fd565b608082015261284f60a084016124fd565b60a082015260c0838101359082015260e080840135908201526101008084013590820152610120808401359082015261014080840135908201526101608084013590820152610180928301359281019290925250919050565b600080604083850312156128ba578182fd5b8235915060208301356125bc81612f3d565b6000806000606084860312156128e0578081fd5b8335925060208401356128f281612f3d565b9150604084013561290281612f3d565b809150509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61295082612943836124fd565b6001600160a01b03169052565b61295c602082016124fd565b6001600160a01b03166020830152612976604082016124fd565b6001600160a01b03166040830152612990606082016124fd565b6001600160a01b031660608301526129aa608082016124fd565b6001600160a01b031660808301526129c460a082016124fd565b6001600160a01b031660a083015260c0818101359083015260e08082013590830152610100808201359083015261012080820135908301526101408082013590830152610160808201359083015261018090810135910152565b80516001600160a01b031682526020810151612a4560208401826001600160a01b03169052565b506040810151612a6060408401826001600160a01b03169052565b506060810151612a7b60608401826001600160a01b03169052565b506080810151612a9660808401826001600160a01b03169052565b5060a0810151612ab160a08401826001600160a01b03169052565b5060c0818101519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b8183823760009101908152919050565b60008251612b20818460208701612edc565b9190910192915050565b60018060a01b03851681528360208201526060604082015260006121a660608301848661290d565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6101408101612b9b82612943856124fd565b612ba7602084016124fd565b6001600160a01b03166020830152612bc1604084016124fd565b6001600160a01b03166040830152612bdb606084016124fd565b6001600160a01b03166060830152612bf5608084016124fd565b6001600160a01b03166080830152612c0f60a084016124fd565b6001600160a01b031660a083015260c0838101359083015260e08084013590830152610100808401359083015261012092830135929091019190915290565b81516001600160a01b0316815261014081016020830151612c7a60208401826001600160a01b03169052565b506040830151612c9560408401826001600160a01b03169052565b506060830151612cb060608401826001600160a01b03169052565b506080830151612ccb60808401826001600160a01b03169052565b5060a0830151612ce660a08401826001600160a01b03169052565b5060c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b602081528151602082015260208201516040820152600060408301516060808401528051806080850152612d548160a0860160208501612edc565b601f01601f19169290920160a0019392505050565b6101e08101612d788286612936565b6101a08201939093526001600160a01b03919091166101c090910152919050565b6000610220612da8838b612936565b886101a0840152806101c0840152612dc3818401888a61290d565b90508281036101e0840152612dd981868861290d565b91505060018060a01b03831661020083015298975050505050505050565b6101a081016120b98284612a1e565b6000610220612e15838c612a1e565b6001600160a01b038a166101a08401526101c08301819052612e3a818401898b61290d565b90508281036101e0840152612e5081878961290d565b9050828103610200840152612e6681858761290d565b9b9a5050505050505050505050565b6040516101a0810167ffffffffffffffff81118282101715612ea757634e487b7160e01b600052604160045260246000fd5b60405290565b60008219821115612ec057612ec0612f27565b500190565b600082821015612ed757612ed7612f27565b500390565b60005b83811015612ef7578181015183820152602001612edf565b83811115612f06576000848401525b50505050565b6000600019821415612f2057612f20612f27565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114612f5257600080fd5b5056fea2646970667358221220af0f30fce1b6c5607f71c34d710c2aa5ee1d153e6a9e2ca3cc55b1fa9c1b9ae364736f6c63430008040033",
  "devdoc": {
    "author": "Connext <support@connext.network>",
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256,address)": {
        "params": {
          "amount": "The amount of liquidity to add for the router",
          "assetId": "The address (or `address(0)` if native asset) of the                asset you're adding liquidity for"
        }
      },
      "cancel((address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes)": {
        "params": {
          "relayerFee": "The fee that should go to the relayer when they are                   calling the function for the user",
          "signature": "The user's signature that allows a transaction to be                  cancelled on the receiving chain.",
          "txData": "All of the data (invariant and variant) for a crosschain               transaction. The variant data provided is checked against               what was stored when the `prepare` function was called."
        }
      },
      "fulfill((address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes)": {
        "params": {
          "relayerFee": "The fee that should go to the relayer when they are                   calling the function on the receiving chain for the user",
          "signature": "The users signature on the invariant data + fee that                  can be used by the router to unlock the transaction on                   the sending chain",
          "txData": "All of the data (invariant and variant) for a crosschain               transaction. The variant data provided is checked against               what was stored when the `prepare` function was called."
        }
      },
      "prepare((address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes)": {
        "params": {
          "amount": "The amount of the transaction on this chain",
          "bidSignature": "The signature of the bidder on the encoded bid for                     this transaction. Only used within the function for                     event emission. The validity of the bid and                     bidSignature are enforced offchain",
          "encodedBid": "The encoded bid that was accepted by the user for this                   crosschain transfer. It is supplied as a param to the                   function but is only used in event emission",
          "encryptedCallData": "The calldata to be executed when the tx is                          fulfilled. Used in the function to allow the user                          to reconstruct the tx from events. Hash is stored                          onchain to prevent shenanigans.",
          "expiry": "The block.timestamp when the transaction will no longer be               fulfillable and is freely cancellable on this chain",
          "invariantData": "The data for a crosschain transaction that will                      not change between sending and receiving chains.                      The hash of this data is used as the key to store                       the inforamtion that does change between chains                       (amount, expiry,preparedBlock) for verification"
        }
      },
      "removeLiquidity(uint256,address,address)": {
        "params": {
          "amount": "The amount of liquidity to remove for the router",
          "assetId": "The address (or `address(0)` if native asset) of the                asset you're removing liquidity for",
          "recipient": "The address that will receive the liquidity being removed"
        }
      }
    },
    "stateVariables": {
      "MIN_TIMEOUT": {
        "details": "Minimum timeout (will be the lowest on the receiving chain)"
      },
      "activeTransactionBlocks": {
        "details": "Mapping of user address to blocks where active transfers      were created."
      },
      "chainId": {
        "details": "The chain id of the contract, is passed in to avoid any evm issues"
      },
      "iMultisend": {
        "details": "Address of the deployed multisending interpreter contract"
      },
      "routerBalances": {
        "details": "Mapping of router to balance specific to asset"
      },
      "variantTransactionData": {
        "details": "Mapping of hash of `InvariantTransactionData` to the hash"
      }
    },
    "title": "TransactionManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(uint256,address)": {
        "notice": "This is used by any router to increase their available         liquidity for a given asset."
      },
      "cancel((address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes)": {
        "notice": "Any crosschain transaction can be cancelled after it has been         created to prevent indefinite lock up of funds. After the         transaction has expired, anyone can cancel it. Before the         expiry, only the recipient of the funds on the given chain is         able to cancel. On the sending chain, this means only the router         is able to cancel before the expiry, while only the user can         prematurely cancel on the receiving chain."
      },
      "fulfill((address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes)": {
        "notice": "This function completes a crosschain transaction. When called on         the receiving chain, the user reveals their signature on the         invariant parts of the transaction data and is sent the          appropriate amount. The router then uses this signature to         unlock the corresponding funds on the receiving chain, which are         then added back to their available liquidity. The user includes a         relayer fee since it is not assumed they will have gas on the         receiving chain. This function *must* be called before the         transaction expiry has elapsed."
      },
      "prepare((address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes)": {
        "notice": "This function creates a crosschain transaction. When called on         the sending chain, the user is expected to lock up funds. When         called on the receiving chain, the router deducts the transfer         amount from the available liquidity. The majority of the         information about a given transfer does not change between chains,         with three notable exceptions: `amount`, `expiry`, and          `preparedBlock`. The `amount` and `expiry` are decremented         between sending and receiving chains to provide an incentive for          the router to complete the transaction and time for the router to         fulfill the transaction on the sending chain after the unlocking         signature is revealed, respectively."
      },
      "removeLiquidity(uint256,address,address)": {
        "notice": "This is used by any router to decrease their available         liquidity for a given asset."
      }
    },
    "notice": "This contract holds the logic to facilitate crosschain transactions.         Transactions go through three phases:         1. Route Auction: User broadcasts to our network signalling their          desired route. Routers respond with sealed bids containing          commitments to fulfilling the transaction within a certain time and          price range.         2. Prepare: Once the auction is completed, the transaction can be          prepared. The user submits a transaction to `TransactionManager`          contract on sender-side chain containing router's signed bid. This          transaction locks up the users funds on the sending chiain. Upon          detecting an event containing their signed bid from the chain,          router submits the same transaction to `TransactionManager` on the          receiver-side chain, and locks up a corresponding amount of          liquidity. The amount locked on the receiving chain is `sending          amount - auction fee` so the router is incentivized to complete the          transaction.         3. Fulfill: Upon detecting the `TransactionPrepared` event on the          receiver-side chain, the user signs a message and sends it to a          relayer, who will earn a fee for submission. The relayer (which may          be the router) then submits the message to the `TransactionManager`          to complete their transaction on receiver-side chain and claim the          funds locked by the router. A relayer is used here to allow users          to submit transactions with arbitrary calldata on the receiving          chain without needing gas to do so. The router then submits the          same signed message and completes transaction on sender-side,          unlocking the original `amount`.         If a transaction is not fulfilled within a fixed timeout, it          reverts and can be reclaimed by the party that called `prepare` on          each chain (initiator). Additionally, transactions can be cancelled          unilaterally by the person owed funds on that chain (router for          sending chain, user for receiving chain) prior to expiry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1144,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "routerBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1150,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "activeTransactionBlocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1155,
        "contract": "contracts/TransactionManager.sol:TransactionManager",
        "label": "variantTransactionData",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}