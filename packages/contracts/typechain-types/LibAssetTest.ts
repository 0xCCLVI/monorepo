/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LibAssetTestInterface extends utils.Interface {
  contractName: "LibAssetTest";
  functions: {
    "decreaseERC20Allowance(address,address,uint256)": FunctionFragment;
    "getOwnBalance(address)": FunctionFragment;
    "increaseERC20Allowance(address,address,uint256)": FunctionFragment;
    "isNativeAsset(address)": FunctionFragment;
    "transferAsset(address,address,uint256)": FunctionFragment;
    "transferERC20(address,address,uint256)": FunctionFragment;
    "transferFromERC20(address,address,address,uint256)": FunctionFragment;
    "transferNativeAsset(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decreaseERC20Allowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseERC20Allowance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNativeAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAsset",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromERC20",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferNativeAsset",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseERC20Allowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseERC20Allowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNativeAsset",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LibAssetTest extends BaseContract {
  contractName: "LibAssetTest";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibAssetTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decreaseERC20Allowance(
      assetId: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwnBalance(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseERC20Allowance(
      assetId: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isNativeAsset(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferAsset(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferERC20(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFromERC20(
      assetId: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferNativeAsset(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  decreaseERC20Allowance(
    assetId: string,
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwnBalance(assetId: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseERC20Allowance(
    assetId: string,
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isNativeAsset(assetId: string, overrides?: CallOverrides): Promise<boolean>;

  transferAsset(
    assetId: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferERC20(
    assetId: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFromERC20(
    assetId: string,
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferNativeAsset(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    decreaseERC20Allowance(
      assetId: string,
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnBalance(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseERC20Allowance(
      assetId: string,
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isNativeAsset(assetId: string, overrides?: CallOverrides): Promise<boolean>;

    transferAsset(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferERC20(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromERC20(
      assetId: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferNativeAsset(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    decreaseERC20Allowance(
      assetId: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwnBalance(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseERC20Allowance(
      assetId: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isNativeAsset(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAsset(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferERC20(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFromERC20(
      assetId: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferNativeAsset(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseERC20Allowance(
      assetId: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwnBalance(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseERC20Allowance(
      assetId: string,
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isNativeAsset(
      assetId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAsset(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferERC20(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFromERC20(
      assetId: string,
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferNativeAsset(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
