/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { UpgradeBeacon, UpgradeBeaconInterface } from "../UpgradeBeacon";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_initialImplementation",
        type: "address",
      },
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgrade",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x60a060405260405161031038038061031083398101604081905261002291610154565b61002b8261003d565b6001600160a01b031660805250610187565b6000546001600160a01b038281169116141561008b5760405162461bcd60e51b8152602060048201526008602482015267217570677261646560c01b60448201526064015b60405180910390fd5b61009e8161013260201b6101331760201c565b6100ea5760405162461bcd60e51b815260206004820152601860248201527f696d706c656d656e746174696f6e2021636f6e747261637400000000000000006044820152606401610082565b600080546001600160a01b0319166001600160a01b038316908117825560405190917ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d91a250565b3b151590565b80516001600160a01b038116811461014f57600080fd5b919050565b6000806040838503121561016757600080fd5b61017083610138565b915061017e60208401610138565b90509250929050565b60805161016f6101a16000396000600f015261016f6000f3fe6080604052336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100405760005460005260206000f35b60003561004c8161004f565b50005b6000546001600160a01b038281169116141561009d5760405162461bcd60e51b8152602060048201526008602482015267217570677261646560c01b60448201526064015b60405180910390fd5b803b6100eb5760405162461bcd60e51b815260206004820152601860248201527f696d706c656d656e746174696f6e2021636f6e747261637400000000000000006044820152606401610094565b600080546001600160a01b0319166001600160a01b038316908117825560405190917ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d91a250565b3b15159056fea2646970667358221220cfebce20b7c16edd38de8afa081ec3fee5aecfb90419970fdaedec7b7921857d64736f6c634300080b0033";

type UpgradeBeaconConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UpgradeBeaconConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UpgradeBeacon__factory extends ContractFactory {
  constructor(...args: UpgradeBeaconConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UpgradeBeacon";
  }

  deploy(
    _initialImplementation: string,
    _controller: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<UpgradeBeacon> {
    return super.deploy(
      _initialImplementation,
      _controller,
      overrides || {}
    ) as Promise<UpgradeBeacon>;
  }
  getDeployTransaction(
    _initialImplementation: string,
    _controller: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _initialImplementation,
      _controller,
      overrides || {}
    );
  }
  attach(address: string): UpgradeBeacon {
    return super.attach(address) as UpgradeBeacon;
  }
  connect(signer: Signer): UpgradeBeacon__factory {
    return super.connect(signer) as UpgradeBeacon__factory;
  }
  static readonly contractName: "UpgradeBeacon";
  public readonly contractName: "UpgradeBeacon";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UpgradeBeaconInterface {
    return new utils.Interface(_abi) as UpgradeBeaconInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UpgradeBeacon {
    return new Contract(address, _abi, signerOrProvider) as UpgradeBeacon;
  }
}
