/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibERC20Test, LibERC20TestInterface } from "../LibERC20Test";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "wrapCall",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104e2806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806315dacbea146100515780634c4960cd14610078578063beabacc81461008b578063e1f21c671461009e575b600080fd5b61006461005f3660046102fb565b6100b1565b604051901515815260200160405180910390f35b610064610086366004610380565b6100c8565b610064610099366004610345565b6100db565b6100646100ac366004610345565b6100f0565b60006100bf858585856100fd565b95945050505050565b60006100d48383610155565b9392505050565b60006100e8848484610226565b949350505050565b60006100e884848461027a565b6040516001600160a01b03808516602483015283166044820152606481018290526000906100bf90869060840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790525b6000823b61019d5760405162461bcd60e51b81526020600482015260116024820152704c696245524332303a204e4f5f434f444560781b604482015260640160405180910390fd5b600080846001600160a01b0316846040516101b8919061045d565b6000604051808303816000865af19150503d80600081146101f5576040519150601f19603f3d011682016040523d82523d6000602084013e6101fa565b606091505b509150915061020982826102ce565b805115806100bf5750808060200190518101906100bf919061043d565b6040516001600160a01b0383166024820152604481018290526000906100e890859060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b179052610155565b6040516001600160a01b0383166024820152604481018290526000906100e890859060640160408051601f198184030181529190526020810180516001600160e01b031663095ea7b360e01b179052610155565b816102db57805160208201fd5b5050565b80356001600160a01b03811681146102f657600080fd5b919050565b60008060008060808587031215610310578384fd5b610319856102df565b9350610327602086016102df565b9250610335604086016102df565b9396929550929360600135925050565b600080600060608486031215610359578283fd5b610362846102df565b9250610370602085016102df565b9150604084013590509250925092565b60008060408385031215610392578182fd5b61039b836102df565b9150602083013567ffffffffffffffff808211156103b7578283fd5b818501915085601f8301126103ca578283fd5b8135818111156103dc576103dc610496565b604051601f8201601f19908116603f0116810190838211818310171561040457610404610496565b8160405282815288602084870101111561041c578586fd5b82602086016020830137856020848301015280955050505050509250929050565b60006020828403121561044e578081fd5b815180151581146100d4578182fd5b60008251815b8181101561047d5760208186018101518583015201610463565b8181111561048b5782828501525b509190910192915050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212205880e2601112e195670e61c34ec73722b4712b71c84d17ddf4e966f316754d9f64736f6c63430008040033";

export class LibERC20Test__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibERC20Test> {
    return super.deploy(overrides || {}) as Promise<LibERC20Test>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibERC20Test {
    return super.attach(address) as LibERC20Test;
  }
  connect(signer: Signer): LibERC20Test__factory {
    return super.connect(signer) as LibERC20Test__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibERC20TestInterface {
    return new utils.Interface(_abi) as LibERC20TestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibERC20Test {
    return new Contract(address, _abi, signerOrProvider) as LibERC20Test;
  }
}
