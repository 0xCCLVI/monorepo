/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAggregator,
  TestAggregatorInterface,
} from "../TestAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x61bc0205",
        type: "bytes32",
      },
    ],
    name: "c_0x61bc0205",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260126000806101000a81548160ff021916908360ff1602179055506040518060400160405280601981526020017f436861696e6c696e6b20546573742041676772656761746f72000000000000008152506001908051906020019061006a929190610082565b50600160025534801561007c57600080fd5b50610186565b82805461008e90610125565b90600052602060002090601f0160209004810192826100b057600085556100f7565b82601f106100c957805160ff19168380011785556100f7565b828001600101855582156100f7579182015b828111156100f65782518255916020019190600101906100db565b5b5090506101049190610108565b5090565b5b80821115610121576000816000905550600101610109565b5090565b6000600282049050600182168061013d57607f821691505b6020821081141561015157610150610157565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610646806101956000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063313ce5671461006757806354fd4d50146100855780637284e416146100a35780639a6fc8f5146100c1578063b7fcffe0146100f5578063feaf968c14610111575b600080fd5b61006f610133565b60405161007c91906104c5565b60405180910390f35b61008d610144565b60405161009a9190610457565b60405180910390f35b6100ab61014a565b6040516100b89190610435565b60405180910390f35b6100db60048036038101906100d69190610397565b6101d8565b6040516100ec959493929190610472565b60405180910390f35b61010f600480360381019061010a919061036e565b61028d565b005b610119610290565b60405161012a959493929190610472565b60405180910390f35b60008054906101000a900460ff1681565b60025481565b6001805461015790610570565b80601f016020809104026020016040519081016040528092919081815260200182805461018390610570565b80156101d05780601f106101a5576101008083540402835291602001916101d0565b820191906000526020600020905b8154815290600101906020018083116101b357829003601f168201915b505050505081565b600080600080600061020c7ff14523738f6ae97c445df67339400b402b604b30cc02e1d7a064d8ab57778acb60001b61028d565b6102387fdc7fd514b3453a062e140372b939918ed9fd7d9839a5ea40ad11463a637615e260001b61028d565b6102647f646bdae72ba2795c01d4fbaadf7ed690256f5b4f0ecfd5a0d148748fe608d4e660001b61028d565b85670de0b6b3a7640000600042670de0b6b3a76400009450945094509450945091939590929450565b50565b60008060008060006102c47f8cdc90838e3bfb396ee4286587f809ad278c07787855c88598b973fa22d424a060001b61028d565b6102f07f3ad675cf72cb42e003470d37d03119ca4e45c82b91fd506458d1e658ecfbcd5360001b61028d565b61031c7f7ccc2d3cdda23f4b959f0d6c4457fb52a3bdd10441b5fbb5e0f3aaee2992ea9c60001b61028d565b6001670de0b6b3a7640000600042670de0b6b3a7640000945094509450945094509091929394565b600081359050610353816105e2565b92915050565b600081359050610368816105f9565b92915050565b60006020828403121561038057600080fd5b600061038e84828501610344565b91505092915050565b6000602082840312156103a957600080fd5b60006103b784828501610359565b91505092915050565b6103c981610506565b82525050565b60006103da826104e0565b6103e481856104eb565b93506103f481856020860161053d565b6103fd816105d1565b840191505092915050565b61041181610510565b82525050565b61042081610527565b82525050565b61042f8161051a565b82525050565b6000602082019050818103600083015261044f81846103cf565b905092915050565b600060208201905061046c6000830184610408565b92915050565b600060a0820190506104876000830188610417565b61049460208301876103c0565b6104a16040830186610408565b6104ae6060830185610408565b6104bb6080830184610417565b9695505050505050565b60006020820190506104da6000830184610426565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b8381101561055b578082015181840152602081019050610540565b8381111561056a576000848401525b50505050565b6000600282049050600182168061058857607f821691505b6020821081141561059c5761059b6105a2565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6105eb816104fc565b81146105f657600080fd5b50565b61060281610527565b811461060d57600080fd5b5056fea26469706673582212208c719f37c5c073bacbb5e4af46370e03e04c5f382f24cb359853909cf3424a4164736f6c63430008040033";

export class TestAggregator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestAggregator> {
    return super.deploy(overrides || {}) as Promise<TestAggregator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestAggregator {
    return super.attach(address) as TestAggregator;
  }
  connect(signer: Signer): TestAggregator__factory {
    return super.connect(signer) as TestAggregator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAggregatorInterface {
    return new utils.Interface(_abi) as TestAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAggregator {
    return new Contract(address, _abi, signerOrProvider) as TestAggregator;
  }
}
