/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAggregator,
  TestAggregatorInterface,
} from "../TestAggregator";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mockAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "updateMockAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260126000806101000a81548160ff021916908360ff1602179055506040518060400160405280601981526020017f436861696e6c696e6b20546573742041676772656761746f72000000000000008152506001908051906020019061006a92919061008e565b506001600255670de0b6b3a764000060035534801561008857600080fd5b50610192565b82805461009a90610131565b90600052602060002090601f0160209004810192826100bc5760008555610103565b82601f106100d557805160ff1916838001178555610103565b82800160010185558215610103579182015b828111156101025782518255916020019190600101906100e7565b5b5090506101109190610114565b5090565b5b8082111561012d576000816000905550600101610115565b5090565b6000600282049050600182168061014957607f821691505b6020821081141561015d5761015c610163565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610589806101a16000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637284e4161161005b5780637284e416146100da5780639a6fc8f5146100f8578063f0f463271461012c578063feaf968c1461014a5761007d565b8063313ce5671461008257806354fd4d50146100a0578063575ac1e6146100be575b600080fd5b61008a61016c565b6040516100979190610412565b60405180910390f35b6100a861017d565b6040516100b591906103a4565b60405180910390f35b6100d860048036038101906100d391906102a0565b610183565b005b6100e261018d565b6040516100ef9190610382565b60405180910390f35b610112600480360381019061010d91906102c9565b61021b565b6040516101239594939291906103bf565b60405180910390f35b610134610246565b6040516101419190610367565b60405180910390f35b61015261024c565b6040516101639594939291906103bf565b60405180910390f35b60008054906101000a900460ff1681565b60025481565b8060038190555050565b6001805461019a906104b3565b80601f01602080910402602001604051908101604052809291908181526020018280546101c6906104b3565b80156102135780601f106101e857610100808354040283529160200191610213565b820191906000526020600020905b8154815290600101906020018083116101f657829003601f168201915b505050505081565b600080600080600085600354600042670de0b6b3a76400009450945094509450945091939590929450565b60035481565b60008060008060006001600354600042670de0b6b3a7640000945094509450945094509091929394565b60008135905061028581610525565b92915050565b60008135905061029a8161053c565b92915050565b6000602082840312156102b257600080fd5b60006102c084828501610276565b91505092915050565b6000602082840312156102db57600080fd5b60006102e98482850161028b565b91505092915050565b6102fb81610449565b82525050565b600061030c8261042d565b6103168185610438565b9350610326818560208601610480565b61032f81610514565b840191505092915050565b61034381610453565b82525050565b6103528161046a565b82525050565b6103618161045d565b82525050565b600060208201905061037c60008301846102f2565b92915050565b6000602082019050818103600083015261039c8184610301565b905092915050565b60006020820190506103b9600083018461033a565b92915050565b600060a0820190506103d46000830188610349565b6103e160208301876102f2565b6103ee604083018661033a565b6103fb606083018561033a565b6104086080830184610349565b9695505050505050565b60006020820190506104276000830184610358565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b8381101561049e578082015181840152602081019050610483565b838111156104ad576000848401525b50505050565b600060028204905060018216806104cb57607f821691505b602082108114156104df576104de6104e5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61052e81610449565b811461053957600080fd5b50565b6105458161046a565b811461055057600080fd5b5056fea2646970667358221220941313f4aea10cc2e6606c41300997bc75122a7d06e08db3492d29753f00164964736f6c63430008040033";

export class TestAggregator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestAggregator> {
    return super.deploy(overrides || {}) as Promise<TestAggregator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestAggregator {
    return super.attach(address) as TestAggregator;
  }
  connect(signer: Signer): TestAggregator__factory {
    return super.connect(signer) as TestAggregator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAggregatorInterface {
    return new utils.Interface(_abi) as TestAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAggregator {
    return new Contract(address, _abi, signerOrProvider) as TestAggregator;
  }
}
