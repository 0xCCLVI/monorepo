/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAggregator,
  TestAggregatorInterface,
} from "../TestAggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x38b08d8f",
        type: "bytes32",
      },
    ],
    name: "c_0x38b08d8f",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mockAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "updateMockAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260126000806101000a81548160ff021916908360ff1602179055506040518060400160405280601981526020017f436861696e6c696e6b20546573742041676772656761746f72000000000000008152506001908051906020019061006a92919061008e565b506001600255670de0b6b3a764000060035534801561008857600080fd5b50610192565b82805461009a90610131565b90600052602060002090601f0160209004810192826100bc5760008555610103565b82601f106100d557805160ff1916838001178555610103565b82800160010185558215610103579182015b828111156101025782518255916020019190600101906100e7565b5b5090506101109190610114565b5090565b5b8082111561012d576000816000905550600101610115565b5090565b6000600282049050600182168061014957607f821691505b6020821081141561015d5761015c610163565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61079e806101a16000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637284e4161161005b5780637284e416146101015780639a6fc8f51461011f578063f0f4632714610153578063feaf968c1461017157610088565b8063313ce5671461008d57806354fd4d50146100ab578063575ac1e6146100c95780635c5fc3a0146100e5575b600080fd5b610095610193565b6040516100a29190610606565b60405180910390f35b6100b36101a4565b6040516100c09190610598565b60405180910390f35b6100e360048036038101906100de9190610494565b6101aa565b005b6100ff60048036038101906100fa919061046b565b610238565b005b61010961023b565b6040516101169190610576565b60405180910390f35b610139600480360381019061013491906104bd565b6102c9565b60405161014a9594939291906105b3565b60405180910390f35b61015b610378565b604051610168919061055b565b60405180910390f35b61017961037e565b60405161018a9594939291906105b3565b60405180910390f35b60008054906101000a900460ff1681565b60025481565b6101d67f9ccd937b4d0e59e252139c96a5005a59903a55e71cc5a655622a141d3d302de760001b610238565b6102027fe74c962803a965289e57dd0ce1ef88442cdc02fbda59e0dc5c905518506ef08460001b610238565b61022e7f4b070098dd7656166bfc485e71e3fede0b4f57f62a7d945b30e92f43b057346860001b610238565b8060038190555050565b50565b60018054610248906106b1565b80601f0160208091040260200160405190810160405280929190818152602001828054610274906106b1565b80156102c15780601f10610296576101008083540402835291602001916102c1565b820191906000526020600020905b8154815290600101906020018083116102a457829003601f168201915b505050505081565b60008060008060006102fd7f1871fb63d85920410359cd02ae0bf8b8f69b612c095de68656ef5cb2cc4d184e60001b610238565b6103297f701db12edceed9bd83c18975689be024b2f9dd377c0c375cd8337acdfb00cee960001b610238565b6103557f3885371c7d86c3c34090fa15bb4585e0ca9577b5adf01db7bdb4e771d7ae861560001b610238565b85600354600042670de0b6b3a76400009450945094509450945091939590929450565b60035481565b60008060008060006103b27f540c4823c933335fdca806ff00e69781716d3e615afc151ff95c21f9fbe51c4260001b610238565b6103de7f5bb21d98f754df636c1349f240449e7ca64add6d399049071f362e3bb6262c1860001b610238565b61040a7f339011f5d6b0687005a26c7595f0b72980c62d32199ae951ebc8ef26d6c163ea60001b610238565b6001600354600042670de0b6b3a7640000945094509450945094509091929394565b60008135905061043b81610723565b92915050565b6000813590506104508161073a565b92915050565b60008135905061046581610751565b92915050565b60006020828403121561047d57600080fd5b600061048b8482850161042c565b91505092915050565b6000602082840312156104a657600080fd5b60006104b484828501610441565b91505092915050565b6000602082840312156104cf57600080fd5b60006104dd84828501610456565b91505092915050565b6104ef81610647565b82525050565b600061050082610621565b61050a818561062c565b935061051a81856020860161067e565b61052381610712565b840191505092915050565b61053781610651565b82525050565b61054681610668565b82525050565b6105558161065b565b82525050565b600060208201905061057060008301846104e6565b92915050565b6000602082019050818103600083015261059081846104f5565b905092915050565b60006020820190506105ad600083018461052e565b92915050565b600060a0820190506105c8600083018861053d565b6105d560208301876104e6565b6105e2604083018661052e565b6105ef606083018561052e565b6105fc608083018461053d565b9695505050505050565b600060208201905061061b600083018461054c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b60005b8381101561069c578082015181840152602081019050610681565b838111156106ab576000848401525b50505050565b600060028204905060018216806106c957607f821691505b602082108114156106dd576106dc6106e3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61072c8161063d565b811461073757600080fd5b50565b61074381610647565b811461074e57600080fd5b50565b61075a81610668565b811461076557600080fd5b5056fea2646970667358221220ef44c0514107fd5e56dac8cc3bbf42b34a3e726524b6f16832080df51771bfae64736f6c63430008040033";

export class TestAggregator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestAggregator> {
    return super.deploy(overrides || {}) as Promise<TestAggregator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestAggregator {
    return super.attach(address) as TestAggregator;
  }
  connect(signer: Signer): TestAggregator__factory {
    return super.connect(signer) as TestAggregator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAggregatorInterface {
    return new utils.Interface(_abi) as TestAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAggregator {
    return new Contract(address, _abi, signerOrProvider) as TestAggregator;
  }
}
