/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestFulfillHelper,
  TestFulfillHelperInterface,
} from "../TestFulfillHelper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "fallbackAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct TestFulfillHelper.TestData",
        name: "testData",
        type: "tuple",
      },
    ],
    name: "getCallData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610560806100206000396000f3fe6080604052600436106100295760003560e01c806351a83f901461002e57806379cd407514610064575b600080fd5b34801561003a57600080fd5b5061004e6100493660046103d8565b610079565b60405161005b919061049f565b60405180910390f35b6100776100723660046102f8565b6100a2565b005b60608160405160200161008c91906104f2565b6040516020818303038152906040529050919050565b6001600160a01b038616610109578234146101045760405162461bcd60e51b815260206004820152601860248201527f61646446756e64733a2056414c55455f4d49534d41544348000000000000000060448201526064015b60405180910390fd5b610157565b34156101575760405162461bcd60e51b815260206004820152601f60248201527f61646446756e64733a204554485f574954485f4552435f5452414e534645520060448201526064016100fb565b6000610165828401846103ef565b9050600084116101b75760405162461bcd60e51b815260206004820152601760248201527f657865637574653a20414d4f554e545f49535f5a45524f00000000000000000060448201526064016100fb565b6101c687826000015186610211565b7f4963a38b0733a63b71201074e675d5fd5214121a89f2124e42d0e1e42777e0968888868887876040516101ff96959493929190610446565b60405180910390a15050505050505050565b6001600160a01b038316156102305761022b83838361023a565b505050565b61022b82826102c2565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561028457600080fd5b505af1158015610298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bc91906103b1565b50505050565b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561022b573d6000803e3d6000fd5b600080600080600080600060c0888a031215610312578283fd5b873561031d81610512565b9650602088013561032d81610512565b9550604088013561033d81610512565b9450606088013593506080880135925060a088013567ffffffffffffffff80821115610367578384fd5b818a0191508a601f83011261037a578384fd5b813581811115610388578485fd5b8b6020828501011115610399578485fd5b60208301945080935050505092959891949750929550565b6000602082840312156103c2578081fd5b815180151581146103d1578182fd5b9392505050565b6000602082840312156103e9578081fd5b50919050565b600060208284031215610400578081fd5b6040516020810181811067ffffffffffffffff8211171561042f57634e487b7160e01b83526041600452602483fd5b604052823561043d81610512565b81529392505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b6000602080835283518082850152825b818110156104cb578581018301518582016040015282016104af565b818111156104dc5783604083870101525b50601f01601f1916929092016040019392505050565b60208101823561050181610512565b6001600160a01b0316909152919050565b6001600160a01b038116811461052757600080fd5b5056fea264697066735822122041c8e157b7a2cde03ccac5c209aab6be3a0982b7e6e18ec3e2891af48f222acf64736f6c63430008040033";

export class TestFulfillHelper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestFulfillHelper> {
    return super.deploy(overrides || {}) as Promise<TestFulfillHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestFulfillHelper {
    return super.attach(address) as TestFulfillHelper;
  }
  connect(signer: Signer): TestFulfillHelper__factory {
    return super.connect(signer) as TestFulfillHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFulfillHelperInterface {
    return new utils.Interface(_abi) as TestFulfillHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestFulfillHelper {
    return new Contract(address, _abi, signerOrProvider) as TestFulfillHelper;
  }
}
