/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestFulfillHelper,
  TestFulfillHelperInterface,
} from "../TestFulfillHelper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
    ],
    name: "FundsAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "addFunds",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct TestFulfillHelper.TestData",
        name: "testData",
        type: "tuple",
      },
    ],
    name: "getCallData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506108b3806100206000396000f3fe60806040526004361061003f5760003560e01c806351a83f9014610044578063921d6a081461007a578063adb519801461009c578063bab81c43146100df575b600080fd5b34801561005057600080fd5b5061006461005f3660046106e6565b6100f2565b60405161007191906107ad565b60405180910390f35b34801561008657600080fd5b5061009a61009536600461061a565b61011b565b005b3480156100a857600080fd5b506100d16100b736600461059b565b600060208181529281526040808220909352908152205481565b604051908152602001610071565b61009a6100ed3660046105d3565b610285565b6060816040516020016101059190610800565b6040516020818303038152906040529050919050565b6000610129828401846106fd565b9050600084116101805760405162461bcd60e51b815260206004820152601760248201527f657865637574653a20414d4f554e545f49535f5a45524f00000000000000000060448201526064015b60405180910390fd5b6001600160a01b03808816600090815260208181526040808320938916835292905220548411156101f35760405162461bcd60e51b815260206004820152601f60248201527f657865637574653a20557365725f42616c616e63655f496e73756666696365006044820152606401610177565b6001600160a01b0380881660009081526020818152604080832093891683529290529081208054869290610228908490610838565b9091555050805161023b90869086610423565b7f4963a38b0733a63b71201074e675d5fd5214121a89f2124e42d0e1e42777e09687868689878760405161027496959493929190610754565b60405180910390a150505050505050565b600081116102d55760405162461bcd60e51b815260206004820152601860248201527f61646446756e64733a20414d4f554e545f49535f5a45524f00000000000000006044820152606401610177565b6001600160a01b038216610337578034146103325760405162461bcd60e51b815260206004820152601860248201527f61646446756e64733a2056414c55455f4d49534d4154434800000000000000006044820152606401610177565b610391565b34156103855760405162461bcd60e51b815260206004820152601f60248201527f61646446756e64733a204554485f574954485f4552435f5452414e53464552006044820152606401610177565b6103918233308461044c565b6001600160a01b03808516600090815260208181526040808320938616835292905290812080548392906103c6908490610820565b9091555050604080516001600160a01b03808716825284166020820152908101829052606081018490527f36f05b07377637e48f9034ab4943796faadc3cfab2f6734716bbacec0ba7b5c19060800160405180910390a150505050565b6001600160a01b038316156104425761043d8383836104dd565b505050565b61043d8282610565565b6040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528516906323b872dd90606401602060405180830381600087803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d691906106bf565b5050505050565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561052757600080fd5b505af115801561053b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055f91906106bf565b50505050565b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561043d573d6000803e3d6000fd5b600080604083850312156105ad578182fd5b82356105b881610865565b915060208301356105c881610865565b809150509250929050565b600080600080608085870312156105e8578182fd5b84356105f381610865565b935060208501359250604085013561060a81610865565b9396929550929360600135925050565b60008060008060008060a08789031215610632578182fd5b863561063d81610865565b955060208701359450604087013561065481610865565b935060608701359250608087013567ffffffffffffffff80821115610677578384fd5b818901915089601f83011261068a578384fd5b813581811115610698578485fd5b8a60208285010111156106a9578485fd5b6020830194508093505050509295509295509295565b6000602082840312156106d0578081fd5b815180151581146106df578182fd5b9392505050565b6000602082840312156106f7578081fd5b50919050565b60006020828403121561070e578081fd5b6040516020810181811067ffffffffffffffff8211171561073d57634e487b7160e01b83526041600452602483fd5b604052823561074b81610865565b81529392505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b6000602080835283518082850152825b818110156107d9578581018301518582016040015282016107bd565b818111156107ea5783604083870101525b50601f01601f1916929092016040019392505050565b60208101823561080f81610865565b6001600160a01b0316909152919050565b600082198211156108335761083361084f565b500190565b60008282101561084a5761084a61084f565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461087a57600080fd5b5056fea2646970667358221220b3ec0e693244dcaec6c1d5cdc63ecf9321eff76302c1b6dfa4b10de8e4fc3b0264736f6c63430008040033";

export class TestFulfillHelper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestFulfillHelper> {
    return super.deploy(overrides || {}) as Promise<TestFulfillHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestFulfillHelper {
    return super.attach(address) as TestFulfillHelper;
  }
  connect(signer: Signer): TestFulfillHelper__factory {
    return super.connect(signer) as TestFulfillHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFulfillHelperInterface {
    return new utils.Interface(_abi) as TestFulfillHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestFulfillHelper {
    return new Contract(address, _abi, signerOrProvider) as TestFulfillHelper;
  }
}
