/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestFulfillHelper,
  TestFulfillHelperInterface,
} from "../TestFulfillHelper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
    ],
    name: "FundsAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "addFunds",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "transactionId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "assetId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct TestFulfillHelper.TestData",
        name: "testData",
        type: "tuple",
      },
    ],
    name: "getCallData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a45806100206000396000f3fe60806040526004361061003f5760003560e01c806351a83f9014610044578063921d6a081461007a578063adb519801461009c578063bab81c43146100df575b600080fd5b34801561005057600080fd5b5061006461005f36600461084c565b6100f2565b604051610071919061092f565b60405180910390f35b34801561008657600080fd5b5061009a610095366004610780565b61011b565b005b3480156100a857600080fd5b506100d16100b7366004610701565b600060208181529281526040808220909352908152205481565b604051908152602001610071565b61009a6100ed366004610739565b6102d1565b6060816040516020016101059190610962565b6040516020818303038152906040529050919050565b600061012982840184610863565b9050600084116101805760405162461bcd60e51b815260206004820152601760248201527f657865637574653a20414d4f554e545f49535f5a45524f00000000000000000060448201526064015b60405180910390fd5b6001600160a01b03808816600090815260208181526040808320938916835292905220548411156101f35760405162461bcd60e51b815260206004820152601f60248201527f657865637574653a20557365725f42616c616e63655f496e73756666696365006044820152606401610177565b6001600160a01b038088166000908152602081815260408083209389168352929052908120805486929061022890849061099a565b9091555050805161023b908690866104bb565b6102875760405162461bcd60e51b815260206004820152601860248201527f657865637574653a205452414e534645525f4641494c454400000000000000006044820152606401610177565b7f4963a38b0733a63b71201074e675d5fd5214121a89f2124e42d0e1e42777e0968786868987876040516102c0969594939291906108d6565b60405180910390a150505050505050565b600081116103215760405162461bcd60e51b815260206004820152601860248201527f61646446756e64733a20414d4f554e545f49535f5a45524f00000000000000006044820152606401610177565b6001600160a01b0382166103835780341461037e5760405162461bcd60e51b815260206004820152601860248201527f61646446756e64733a2056414c55455f4d49534d4154434800000000000000006044820152606401610177565b610429565b34156103d15760405162461bcd60e51b815260206004820152601f60248201527f61646446756e64733a204554485f574954485f4552435f5452414e53464552006044820152606401610177565b6103dd823330846104ee565b6104295760405162461bcd60e51b815260206004820152601f60248201527f61646446756e64733a2045524332305f5452414e534645525f4641494c4544006044820152606401610177565b6001600160a01b038085166000908152602081815260408083209386168352929052908120805483929061045e908490610982565b9091555050604080516001600160a01b03808716825284166020820152908101829052606081018490527f36f05b07377637e48f9034ab4943796faadc3cfab2f6734716bbacec0ba7b5c19060800160405180910390a150505050565b60006001600160a01b038416156104dc576104d7848484610553565b6104e6565b6104e68383610560565b949350505050565b6040516001600160a01b038085166024830152831660448201526064810182905260009061054a90869060840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b1790526105cf565b95945050505050565b60006104e684848461069c565b6000806000846001600160a01b03168460405160006040518083038185875af1925050503d80600081146105b0576040519150601f19603f3d011682016040523d82523d6000602084013e6105b5565b606091505b50915091506105c482826106f0565b506001949350505050565b6000823b6106135760405162461bcd60e51b81526020600482015260116024820152704c696245524332303a204e4f5f434f444560781b6044820152606401610177565b600080846001600160a01b03168460405161062e91906108ba565b6000604051808303816000865af19150503d806000811461066b576040519150601f19603f3d011682016040523d82523d6000602084013e610670565b606091505b509150915061067f82826106f0565b8051158061054a57508080602001905181019061054a9190610825565b6040516001600160a01b0383166024820152604481018290526000906104e690859060640160408051601f198184030181529190526020810180516001600160e01b031663a9059cbb60e01b1790526105cf565b816106fd57805160208201fd5b5050565b60008060408385031215610713578182fd5b823561071e816109f7565b9150602083013561072e816109f7565b809150509250929050565b6000806000806080858703121561074e578182fd5b8435610759816109f7565b9350602085013592506040850135610770816109f7565b9396929550929360600135925050565b60008060008060008060a08789031215610798578182fd5b86356107a3816109f7565b95506020870135945060408701356107ba816109f7565b935060608701359250608087013567ffffffffffffffff808211156107dd578384fd5b818901915089601f8301126107f0578384fd5b8135818111156107fe578485fd5b8a602082850101111561080f578485fd5b6020830194508093505050509295509295509295565b600060208284031215610836578081fd5b81518015158114610845578182fd5b9392505050565b60006020828403121561085d578081fd5b50919050565b600060208284031215610874578081fd5b6040516020810181811067ffffffffffffffff821117156108a357634e487b7160e01b83526041600452602483fd5b60405282356108b1816109f7565b81529392505050565b600082516108cc8184602087016109b1565b9190910192915050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b602081526000825180602084015261094e8160408501602087016109b1565b601f01601f19169190910160400192915050565b602081018235610971816109f7565b6001600160a01b0316909152919050565b60008219821115610995576109956109e1565b500190565b6000828210156109ac576109ac6109e1565b500390565b60005b838110156109cc5781810151838201526020016109b4565b838111156109db576000848401525b50505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610a0c57600080fd5b5056fea26469706673582212202ad8b07fe2e817b65d73f5776bfc2df36c672d0fd883a277a4030cd3bdc907c764736f6c63430008040033";

export class TestFulfillHelper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestFulfillHelper> {
    return super.deploy(overrides || {}) as Promise<TestFulfillHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestFulfillHelper {
    return super.attach(address) as TestFulfillHelper;
  }
  connect(signer: Signer): TestFulfillHelper__factory {
    return super.connect(signer) as TestFulfillHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFulfillHelperInterface {
    return new utils.Interface(_abi) as TestFulfillHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestFulfillHelper {
    return new Contract(address, _abi, signerOrProvider) as TestFulfillHelper;
  }
}
