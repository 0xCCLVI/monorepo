/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall, MulticallInterface } from "../Multicall";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0x6951f120",
        type: "bytes32",
      },
    ],
    name: "c_0x6951f120",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b1a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063252dba421461003b57806387cd2a3f1461006c575b600080fd5b610055600480360381019061005091906106b0565b610088565b604051610063929190610833565b60405180910390f35b610086600480360381019061008191906106f1565b610507565b005b600060606100b87fa2c0bdb17c98bc470ff4a5134635397124ab50b942cbc7497882755e6f1a385460001b610507565b6100e47fdddb200750a3ae0596e2d730b8a4af43292ed7892f4174ebc9c4e030654b170460001b610507565b6101107fed1654e558c149914e5bd93547cdcc649d778f6aad47e8d612cb20637148965060001b610507565b43915061013f7f15ecf400441dfdb5b19b0fde53224bddb2316b4c7bdb74c754121e8f12440a6b60001b610507565b61016b7ff3e4cf9abf8d13ca5238a6660091e79aca361f4591b931cfc00179067e33ee2760001b610507565b825167ffffffffffffffff8111156101ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156101df57816020015b60608152602001906001900390816101ca5790505b50905061020e7fb745f9b60f53c619b2dd239baa312d57722cf5e34b523629dec9cbf7b77c181460001b610507565b61023a7f0da3d516aa3cdeb23fbb5511aefee645ea5ddec67ee7d5c0f4490b7c47c6ba1660001b610507565b60005b8351811015610501576102727f68f6f89f59c544f44663bca315dee0de4a5e3e41f44aef4b4297acf9286efcf960001b610507565b61029e7f850ba7d7e754e472aa93648cc03b6b09ce2650057d3ccccce3032b27f7322d3260001b610507565b6000808583815181106102da577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16868481518110610335577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015160405161034e919061081c565b6000604051808303816000865af19150503d806000811461038b576040519150601f19603f3d011682016040523d82523d6000602084013e610390565b606091505b50915091506103c17f2c81631bc769000dd89c1b7dd15c2e66ffa19307a0d4939c8f084e89a7cd5d8260001b610507565b6103ed7f3ab0a4efc843d08cf7170f1a1fb5966f4dbb90f3d3f51c347ee254bc06d49f4260001b610507565b6104197f5877f2f2fc3dc1439c6bc769aba5e2e35bd1f5ffa18e9b8cb1a84fd63bb648fc60001b610507565b8161042357600080fd5b61044f7faefe7ec0b0399f9634e755d6011bcda7a2c11cac5a428c616cd2413f4f60eaac60001b610507565b61047b7f145a07c1c3277d8f2fd21d3f17183353f79d9ff53a63d1f03e130f76e41cf88560001b610507565b6104a77f5e962dd3731fcbc79a6727c0dfd863d0cb6613fb55f89a55b0b3734cc4bf0fc760001b610507565b808484815181106104e1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250505080806104f9906109fe565b91505061023d565b50915091565b50565b600061051d61051884610888565b610863565b9050808382526020820190508285602086028201111561053c57600080fd5b60005b8581101561058657813567ffffffffffffffff81111561055e57600080fd5b80860161056b898261064c565b8552602085019450602084019350505060018101905061053f565b5050509392505050565b60006105a361059e846108b4565b610863565b9050828152602081018484840111156105bb57600080fd5b6105c684828561098b565b509392505050565b6000813590506105dd81610ab6565b92915050565b600082601f8301126105f457600080fd5b813561060484826020860161050a565b91505092915050565b60008135905061061c81610acd565b92915050565b600082601f83011261063357600080fd5b8135610643848260208601610590565b91505092915050565b60006040828403121561065e57600080fd5b6106686040610863565b90506000610678848285016105ce565b600083015250602082013567ffffffffffffffff81111561069857600080fd5b6106a484828501610622565b60208301525092915050565b6000602082840312156106c257600080fd5b600082013567ffffffffffffffff8111156106dc57600080fd5b6106e8848285016105e3565b91505092915050565b60006020828403121561070357600080fd5b60006107118482850161060d565b91505092915050565b600061072683836107a3565b905092915050565b6000610739826108f5565b6107438185610918565b935083602082028501610755856108e5565b8060005b858110156107915784840389528151610772858261071a565b945061077d8361090b565b925060208a01995050600181019050610759565b50829750879550505050505092915050565b60006107ae82610900565b6107b88185610929565b93506107c881856020860161099a565b6107d181610aa5565b840191505092915050565b60006107e782610900565b6107f1818561093a565b935061080181856020860161099a565b80840191505092915050565b61081681610981565b82525050565b600061082882846107dc565b915081905092915050565b6000604082019050610848600083018561080d565b818103602083015261085a818461072e565b90509392505050565b600061086d61087e565b905061087982826109cd565b919050565b6000604051905090565b600067ffffffffffffffff8211156108a3576108a2610a76565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156108cf576108ce610a76565b5b6108d882610aa5565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061095082610961565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156109b857808201518184015260208101905061099d565b838111156109c7576000848401525b50505050565b6109d682610aa5565b810181811067ffffffffffffffff821117156109f5576109f4610a76565b5b80604052505050565b6000610a0982610981565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a3c57610a3b610a47565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610abf81610945565b8114610aca57600080fd5b50565b610ad681610957565b8114610ae157600080fd5b5056fea2646970667358221220a7feb36113d445bd549cbc1c370466f694a2dbe0fd8a693c63039274c9d5efe464736f6c63430008040033";

export class Multicall__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall> {
    return super.deploy(overrides || {}) as Promise<Multicall>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Multicall {
    return super.attach(address) as Multicall;
  }
  connect(signer: Signer): Multicall__factory {
    return super.connect(signer) as Multicall__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new utils.Interface(_abi) as MulticallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall {
    return new Contract(address, _abi, signerOrProvider) as Multicall;
  }
}
