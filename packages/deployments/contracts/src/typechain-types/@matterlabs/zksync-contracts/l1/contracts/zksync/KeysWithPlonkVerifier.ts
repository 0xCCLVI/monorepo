/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace PairingsBn254 {
  export type FrStruct = { value: PromiseOrValue<BigNumberish> };

  export type FrStructOutput = [BigNumber] & { value: BigNumber };

  export type G1PointStruct = {
    X: PromiseOrValue<BigNumberish>;
    Y: PromiseOrValue<BigNumberish>;
  };

  export type G1PointStructOutput = [BigNumber, BigNumber] & {
    X: BigNumber;
    Y: BigNumber;
  };

  export type G2PointStruct = {
    X: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    Y: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type G2PointStructOutput = [
    [BigNumber, BigNumber],
    [BigNumber, BigNumber]
  ] & { X: [BigNumber, BigNumber]; Y: [BigNumber, BigNumber] };
}

export declare namespace Plonk4VerifierWithAccessToDNext {
  export type VerificationKeyStruct = {
    domain_size: PromiseOrValue<BigNumberish>;
    num_inputs: PromiseOrValue<BigNumberish>;
    omega: PairingsBn254.FrStruct;
    gate_setup_commitments: PairingsBn254.G1PointStruct[];
    gate_selector_commitments: [
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct
    ];
    copy_permutation_commitments: [
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct,
      PairingsBn254.G1PointStruct
    ];
    copy_permutation_non_residues: [
      PairingsBn254.FrStruct,
      PairingsBn254.FrStruct,
      PairingsBn254.FrStruct
    ];
    g2_x: PairingsBn254.G2PointStruct;
  };

  export type VerificationKeyStructOutput = [
    BigNumber,
    BigNumber,
    PairingsBn254.FrStructOutput,
    PairingsBn254.G1PointStructOutput[],
    [PairingsBn254.G1PointStructOutput, PairingsBn254.G1PointStructOutput],
    [
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput
    ],
    [
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput
    ],
    PairingsBn254.G2PointStructOutput
  ] & {
    domain_size: BigNumber;
    num_inputs: BigNumber;
    omega: PairingsBn254.FrStructOutput;
    gate_setup_commitments: PairingsBn254.G1PointStructOutput[];
    gate_selector_commitments: [
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput
    ];
    copy_permutation_commitments: [
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput,
      PairingsBn254.G1PointStructOutput
    ];
    copy_permutation_non_residues: [
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput,
      PairingsBn254.FrStructOutput
    ];
    g2_x: PairingsBn254.G2PointStructOutput;
  };
}

export interface KeysWithPlonkVerifierInterface extends utils.Interface {
  functions: {
    "verify_serialized_proof(uint256[],uint256[],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))": FunctionFragment;
    "verify_serialized_proof_with_recursion(uint256[],uint256[],uint256,uint8,uint8[],uint256[],uint256[16],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "verify_serialized_proof"
      | "verify_serialized_proof_with_recursion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verify_serialized_proof",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      Plonk4VerifierWithAccessToDNext.VerificationKeyStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify_serialized_proof_with_recursion",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      Plonk4VerifierWithAccessToDNext.VerificationKeyStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "verify_serialized_proof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verify_serialized_proof_with_recursion",
    data: BytesLike
  ): Result;

  events: {};
}

export interface KeysWithPlonkVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeysWithPlonkVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    verify_serialized_proof(
      public_inputs: PromiseOrValue<BigNumberish>[],
      serialized_proof: PromiseOrValue<BigNumberish>[],
      vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verify_serialized_proof_with_recursion(
      public_inputs: PromiseOrValue<BigNumberish>[],
      serialized_proof: PromiseOrValue<BigNumberish>[],
      recursive_vks_root: PromiseOrValue<BigNumberish>,
      max_valid_index: PromiseOrValue<BigNumberish>,
      recursive_vks_indexes: PromiseOrValue<BigNumberish>[],
      individual_vks_inputs: PromiseOrValue<BigNumberish>[],
      subproofs_limbs: PromiseOrValue<BigNumberish>[],
      vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  verify_serialized_proof(
    public_inputs: PromiseOrValue<BigNumberish>[],
    serialized_proof: PromiseOrValue<BigNumberish>[],
    vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify_serialized_proof_with_recursion(
    public_inputs: PromiseOrValue<BigNumberish>[],
    serialized_proof: PromiseOrValue<BigNumberish>[],
    recursive_vks_root: PromiseOrValue<BigNumberish>,
    max_valid_index: PromiseOrValue<BigNumberish>,
    recursive_vks_indexes: PromiseOrValue<BigNumberish>[],
    individual_vks_inputs: PromiseOrValue<BigNumberish>[],
    subproofs_limbs: PromiseOrValue<BigNumberish>[],
    vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    verify_serialized_proof(
      public_inputs: PromiseOrValue<BigNumberish>[],
      serialized_proof: PromiseOrValue<BigNumberish>[],
      vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify_serialized_proof_with_recursion(
      public_inputs: PromiseOrValue<BigNumberish>[],
      serialized_proof: PromiseOrValue<BigNumberish>[],
      recursive_vks_root: PromiseOrValue<BigNumberish>,
      max_valid_index: PromiseOrValue<BigNumberish>,
      recursive_vks_indexes: PromiseOrValue<BigNumberish>[],
      individual_vks_inputs: PromiseOrValue<BigNumberish>[],
      subproofs_limbs: PromiseOrValue<BigNumberish>[],
      vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    verify_serialized_proof(
      public_inputs: PromiseOrValue<BigNumberish>[],
      serialized_proof: PromiseOrValue<BigNumberish>[],
      vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify_serialized_proof_with_recursion(
      public_inputs: PromiseOrValue<BigNumberish>[],
      serialized_proof: PromiseOrValue<BigNumberish>[],
      recursive_vks_root: PromiseOrValue<BigNumberish>,
      max_valid_index: PromiseOrValue<BigNumberish>,
      recursive_vks_indexes: PromiseOrValue<BigNumberish>[],
      individual_vks_inputs: PromiseOrValue<BigNumberish>[],
      subproofs_limbs: PromiseOrValue<BigNumberish>[],
      vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    verify_serialized_proof(
      public_inputs: PromiseOrValue<BigNumberish>[],
      serialized_proof: PromiseOrValue<BigNumberish>[],
      vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify_serialized_proof_with_recursion(
      public_inputs: PromiseOrValue<BigNumberish>[],
      serialized_proof: PromiseOrValue<BigNumberish>[],
      recursive_vks_root: PromiseOrValue<BigNumberish>,
      max_valid_index: PromiseOrValue<BigNumberish>,
      recursive_vks_indexes: PromiseOrValue<BigNumberish>[],
      individual_vks_inputs: PromiseOrValue<BigNumberish>[],
      subproofs_limbs: PromiseOrValue<BigNumberish>[],
      vk: Plonk4VerifierWithAccessToDNext.VerificationKeyStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
