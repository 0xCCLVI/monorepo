/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  LibArbitrumL2,
  LibArbitrumL2Interface,
} from "../../../../../@openzeppelin/contracts/crosschain/arbitrum/LibArbitrumL2";

const _abi = [
  {
    inputs: [],
    name: "ARBSYS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x0002000000000002000100000001035500000060011002700000000f0010019d0000008001000039000000400300003900000000001304350000000102200190000000230000c13d0000000002000031000000040320008c0000002e0000413d0000000103000367000000000303043b0000001103300197000000120330009c0000002e0000c13d000000040220008a0000001303000041000000000420004c000000000400001900000000040340190000001302200197000000000520004c000000000300a019000000130220009c00000000020400190000000002036019000000000220004c0000002e0000c13d00000064020000390000000000210435000000200200003900000000030000190036002f0000040f0000000001000416000000000110004c0000002e0000c13d00000020020000390000010001000039000000000021043900000120020000390000000000020439000000400200003900000010030000410036002f0000040f003600340000040f0000004001100210000000600220021000000000011200190000000001310019000000370001042e000000000100001900000038000104300000003600000432000000370001042e000000380001043000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000200000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000bf0a12cf0000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

type LibArbitrumL2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibArbitrumL2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibArbitrumL2__factory extends ContractFactory {
  constructor(...args: LibArbitrumL2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibArbitrumL2> {
    return super.deploy(overrides || {}) as Promise<LibArbitrumL2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibArbitrumL2 {
    return super.attach(address) as LibArbitrumL2;
  }
  override connect(signer: Signer): LibArbitrumL2__factory {
    return super.connect(signer) as LibArbitrumL2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibArbitrumL2Interface {
    return new utils.Interface(_abi) as LibArbitrumL2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibArbitrumL2 {
    return new Contract(address, _abi, signerOrProvider) as LibArbitrumL2;
  }
}
