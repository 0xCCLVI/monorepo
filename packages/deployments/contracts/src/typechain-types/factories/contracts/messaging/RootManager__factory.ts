/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RootManager,
  RootManagerInterface,
} from "../../../contracts/messaging/RootManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delayBlocks",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_merkle",
        type: "address",
      },
      {
        internalType: "address",
        name: "_watcherManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_noOwnershipChange",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_noProposal",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "connector",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32[]",
        name: "domains",
        type: "uint32[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "connectors",
        type: "address[]",
      },
    ],
    name: "ConnectorAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "connector",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32[]",
        name: "domains",
        type: "uint32[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "connectors",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "ConnectorRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "previous",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "updated",
        type: "uint256",
      },
    ],
    name: "DelayBlocksUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposedOwner",
        type: "address",
      },
    ],
    name: "OwnershipProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "aggregateRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32[]",
        name: "domains",
        type: "uint32[]",
      },
    ],
    name: "RootPropagated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "receivedRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "queueIndex",
        type: "uint256",
      },
    ],
    name: "RootReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "aggregateRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "aggregatedMessageRoots",
        type: "bytes32[]",
      },
    ],
    name: "RootsAggregated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "watcherManager",
        type: "address",
      },
    ],
    name: "WatcherManagerChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "DEQUEUE_MAX",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MERKLE",
    outputs: [
      {
        internalType: "contract MerkleTreeManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptProposedOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_connector",
        type: "address",
      },
    ],
    name: "addConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_inbound",
        type: "bytes32",
      },
    ],
    name: "aggregate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "connectors",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "connectorsHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delayBlocks",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "domains",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "domainsHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "getConnectorForDomain",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "getDomainIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPendingInboundRootsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "isDomainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingInboundRoots",
    outputs: [
      {
        internalType: "uint128",
        name: "first",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "last",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "_domains",
        type: "uint32[]",
      },
      {
        internalType: "address[]",
        name: "_connectors",
        type: "address[]",
      },
    ],
    name: "propagate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newlyProposed",
        type: "address",
      },
    ],
    name: "proposeNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "removeConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounced",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delayBlocks",
        type: "uint256",
      },
    ],
    name: "setDelayBlocks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_watcherManager",
        type: "address",
      },
    ],
    name: "setWatcherManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "_domains",
        type: "uint32[]",
      },
      {
        internalType: "address[]",
        name: "_connectors",
        type: "address[]",
      },
    ],
    name: "validateDomains",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620022bd380380620022bd83398101604081905262000034916200015d565b600380546001600160a81b0319166101006001600160a01b038416021790556200005e33620000db565b6001600160a01b038216620000a85760405162461bcd60e51b815260206004820152600c60248201526b217a65726f206d65726b6c6560a01b604482015260640160405180910390fd5b6001600160a01b0382166080526009839055620000d2600a6200013a602090811b62000f6517901c565b5050506200019e565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60019055565b80516001600160a01b03811681146200015857600080fd5b919050565b6000806000606084860312156200017357600080fd5b83519250620001856020850162000140565b9150620001956040850162000140565b90509250925092565b6080516120fc620001c1600039600081816103a80152610a8a01526120fc6000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638456cb591161010f578063b1f8100d116100a2578063d232c22011610071578063d232c22014610432578063d2a3cc7114610444578063db0f016914610457578063e6f1208d1461046a57600080fd5b8063b1f8100d146103f3578063b904670f14610406578063c5b350df14610419578063d1851c921461042157600080fd5b8063957908d1116100de578063957908d114610386578063a01892a5146103a3578063aa0d60a3146103ca578063ad9c0c2e146103ea57600080fd5b80638456cb59146103525780638da5cb5b1461035a5780638e7d93fa1461036b578063909907cb1461037e57600080fd5b8063498c2c2e11610187578063715018a611610156578063715018a6146102f05780637bc24d99146102f85780637d434e91146103015780637d5343081461031457600080fd5b8063498c2c2e146102ab5780635c975abb146102b457806366cf8fab146102bf5780636a42b8f8146102e757600080fd5b80633c4baaf8116101c35780633c4baaf8146102675780633cf52ffb146102885780633f4ba83a1461029057806344833ca31461029857600080fd5b806313ede1a1146101ea5780631eeaabea1461021a57806324ec5d051461022f575b600080fd5b6101fd6101f8366004611982565b61047d565b6040516001600160a01b0390911681526020015b60405180910390f35b61022d610228366004611982565b6104a7565b005b61025761023d3660046119b4565b63ffffffff16600090815260086020526040902054151590565b6040519015158152602001610211565b61027a6102753660046119b4565b610559565b604051908152602001610211565b60025461027a565b61022d6105bd565b61022d6102a6366004611a1b565b6105fa565b61027a60075481565b60035460ff16610257565b6102d26102cd366004611982565b61076d565b60405163ffffffff9091168152602001610211565b62093a8061027a565b61022d6107a7565b61027a60055481565b6101fd61030f3660046119b4565b610864565b600a54610332906001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610211565b61022d61089c565b6000546001600160a01b03166101fd565b61022d610379366004611a87565b610953565b61027a610a0e565b61038e610a1f565b60408051928352602083019190915201610211565b6101fd7f000000000000000000000000000000000000000000000000000000000000000081565b6103d2606481565b6040516001600160801b039091168152602001610211565b61027a60095481565b61022d610401366004611ac8565b610b5f565b61022d610414366004611ae3565b610c07565b61022d610c7f565b6001546001600160a01b03166101fd565b6000546001600160a01b031615610257565b61022d610452366004611ac8565b610cda565b61022d610465366004611a1b565b610da7565b61022d6104783660046119b4565b610e78565b6006818154811061048d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146104d2576040516311a8a1bb60e31b815260040160405180910390fd5b60095481036105175760405162461bcd60e51b815260206004820152600c60248201526b2164656c6179426c6f636b7360a01b60448201526064015b60405180910390fd5b6009546040805183815260208101929092527fef322fd61cb3d8514326f0b28140a92a29cd10996ad80d0671e43d2483464c1d910160405180910390a1600955565b63ffffffff81166000908152600860205260408120548082036105ab5760405162461bcd60e51b815260206004820152600a602482015269085cdd5c1c1bdc9d195960b21b604482015260640161050e565b6105b6600182611b2c565b9392505050565b6000546001600160a01b031633146105e8576040516311a8a1bb60e31b815260040160405180910390fd5b6105f0610f6b565b6105f8610fb4565b565b610602611006565b828181146106445760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206c656e6774687360881b604482015260640161050e565b61065085858585610da7565b60008061065b610a1f565b9150915060005b838163ffffffff1610156107265785858263ffffffff1681811061068857610688611b43565b905060200201602081019061069d9190611ac8565b6001600160a01b03166382646a58846040516020016106be91815260200190565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016106e99190611b59565b600060405180830381600087803b15801561070357600080fd5b505af1158015610717573d6000803e3d6000fd5b50505050806001019050610662565b507f579770d5d8d3f9bcf578ba7bf3cbe05f38a626e4a16967aa3c2fd9aacd01954d8282898960405161075c9493929190611bf2565b60405180910390a150505050505050565b6004818154811061077d57600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6000546001600160a01b031633146107d2576040516311a8a1bb60e31b815260040160405180910390fd5b6002546000036107f557604051630e4b303f60e21b815260040160405180910390fd5b62093a80600254426108079190611b2c565b11610825576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b03161561084f576040516323295ef960e01b815260040160405180910390fd5b6001546105f8906001600160a01b031661104c565b6000600661087183610559565b8154811061088157610881611b43565b6000918252602090912001546001600160a01b031692915050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa1580156108e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090c9190611c1c565b6109435760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b604482015260640161050e565b61094b611006565b6105f86110ab565b61095b611006565b813361096682610864565b6001600160a01b0316146109a95760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b604482015260640161050e565b60006109b6600a846110e8565b6040805163ffffffff87168152602081018690526001600160801b0383168183015290519192507f1daad24ee1bf0bcc72ab681d29df86ec2794361b223da31f148b9f826cd135a8919081900360600190a150505050565b6000610a1a600a61115a565b905090565b600080610a2a611006565b600954600090610a3e90600a906064611184565b90508051600003610a855760405162461bcd60e51b81526020600482015260116024820152706e6f20766572696669656420726f6f747360781b604482015260640161050e565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166334a55ee6846040518263ffffffff1660e01b8152600401610ad49190611c6e565b60408051808303816000875af1158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190611c81565b915091507f41b13c36968d02a1fd71e0f5db55ba2fb043c215a4d1e17633293ff273a77cd4828285604051610b4d93929190611ca5565b60405180910390a19093509150509091565b6000546001600160a01b03163314610b8a576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610baf57506001600160a01b03811615155b15610bcd576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610bfb57604051634a2fb73f60e11b815260040160405180910390fd5b610c048161146d565b50565b6000546001600160a01b03163314610c32576040516311a8a1bb60e31b815260040160405180910390fd5b610c3c82826114bb565b7f95ef69787290b89c35a092c89db1b283b43724d01263e683cfb560c758cdbe70828260046006604051610c739493929190611e93565b60405180910390a15050565b6001546001600160a01b03163314610caa576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610cbc9190611b2c565b1161084f5760405163d39c12bb60e01b815260040160405180910390fd5b6000546001600160a01b03163314610d05576040516311a8a1bb60e31b815260040160405180910390fd5b6003546001600160a01b03610100909104811690821603610d685760405162461bcd60e51b815260206004820152601760248201527f616c72656164792077617463686572206d616e61676572000000000000000000604482015260640161050e565b6040516001600160a01b03821681527fc16d059e43d7f8e29ccb4e001a2f249d3c59e274925d6a6bc3912943441d9f6c9060200160405180910390a150565b6005548484604051602001610dbd929190611ee0565b6040516020818303038152906040528051906020012014610e0b5760405162461bcd60e51b815260206004820152600860248201526721646f6d61696e7360c01b604482015260640161050e565b6007548282604051602001610e21929190611ef4565b6040516020818303038152906040528051906020012014610e725760405162461bcd60e51b815260206004820152600b60248201526a21636f6e6e6563746f727360a81b604482015260640161050e565b50505050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee89190611c1c565b610f1f5760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b604482015260640161050e565b6000610f2a82611606565b90507f6a1097f391a37dc63e0860e64ec34442971eeed2fda4d1a90141fa9ce25eb7eb82826004600633604051610c73959493929190611f40565b60019055565b60035460ff166105f85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161050e565b610fbc610f6b565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60035460ff16156105f85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161050e565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6110b3611006565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610fe93390565b81546000904390849060109061110d90600160801b90046001600160801b0316611f96565b82546001600160801b038083166101009490940a84810291021990911617909255600090815260018601602090815260408083209690965560029096019095529290932092909255919050565b80546000906001600160801b03600160801b82048116911661117c8282611822565b949350505050565b82546060906001600160801b0380821691600160801b900416818110156111db5760405162461bcd60e51b815260206004820152600b60248201526a717565756520656d70747960a81b604482015260640161050e565b816001600160801b03166000036112245760405162461bcd60e51b815260206004820152600d60248201526c1c5d595d5948085a5b9a5d09d9609a1b604482015260640161050e565b6000846001600160801b03161161126f5760405162461bcd60e51b815260206004820152600f60248201526e042c2c6c6cae0e8c2c4d8ca40dac2f608b1b604482015260640161050e565b6000600161127d8685611fbc565b6112879190611fe7565b9050806001600160801b0316826001600160801b031611156112a7578091505b5060006112b48643611b2c565b905060005b826001600160801b0316846001600160801b03161161130b576001600160801b03831660009081526002890160205260409020548281116112fe57600191505061130b565b50600019909201916112b9565b8061132b57505060408051600081526020810190915292506105b6915050565b600084611339856001611fbc565b6113439190611fe7565b6001600160801b031667ffffffffffffffff8111156113645761136461200f565b60405190808252806020026020018201604052801561138d578160200160208202803683370190505b50905060005b846001600160801b0316866001600160801b031611611438576001600160801b038616600090815260018b01602090815260408083205480845260038e019092529091205460ff166113ff57808383815181106113f2576113f2611b43565b6020026020010181815250505b506001600160801b03861660009081526001808c016020908152604080842084905560028e019091528220919091559586019501611393565b5088546fffffffffffffffffffffffffffffffff19166001600160801b03959095169490941788555091925050509392505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b63ffffffff8216600090815260086020526040902054156115075760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b604482015260640161050e565b6001600160a01b03811661154a5760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b604482015260640161050e565b600480546001818101835560088083047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805463ffffffff808916600790961687026101000a8681029102199091161790556006805492830190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b0386166001600160a01b0319909116179055915460009182526020929092526040902081905561160161184a565b505050565b60008061161283610559565b905060006006828154811061162957611629611b43565b6000918252602090912001546001600160a01b03169050806116815760405162461bcd60e51b8152602060048201526011602482015270636f6e6e6563746f72202165786973747360781b604482015260640161050e565b60045460009061169390600190611b2c565b90508083101561178a57600481815481106116b0576116b0611b43565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16600484815481106116e9576116e9611b43565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055506006818154811061172f5761172f611b43565b600091825260209091200154600680546001600160a01b03909216918590811061175b5761175b611b43565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600480548061179b5761179b612025565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a0219169055905560068054806117da576117da612025565b60008281526020808220830160001990810180546001600160a01b031916905590920190925563ffffffff8716825260089052604081205561181a61184a565b509392505050565b600081611830846001611fbc565b61183a9190611fe7565b6001600160801b03169392505050565b600060048054806020026020016040519081016040528092919081815260200182805480156118c457602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116118875790505b505050505090506000600680548060200260200160405190810160405280929190818152602001828054801561192357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611905575b505050505090508160405160200161193b919061203b565b60408051601f1981840301815290829052805160209182012060055561196391839101612085565b60408051601f1981840301815291905280516020909101206007555050565b60006020828403121561199457600080fd5b5035919050565b803563ffffffff811681146119af57600080fd5b919050565b6000602082840312156119c657600080fd5b6105b68261199b565b60008083601f8401126119e157600080fd5b50813567ffffffffffffffff8111156119f957600080fd5b6020830191508360208260051b8501011115611a1457600080fd5b9250929050565b60008060008060408587031215611a3157600080fd5b843567ffffffffffffffff80821115611a4957600080fd5b611a55888389016119cf565b90965094506020870135915080821115611a6e57600080fd5b50611a7b878288016119cf565b95989497509550505050565b60008060408385031215611a9a57600080fd5b611aa38361199b565b946020939093013593505050565b80356001600160a01b03811681146119af57600080fd5b600060208284031215611ada57600080fd5b6105b682611ab1565b60008060408385031215611af657600080fd5b611aff8361199b565b9150611b0d60208401611ab1565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600082821015611b3e57611b3e611b16565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208083528351808285015260005b81811015611b8657858101830151858201604001528201611b6a565b81811115611b98576000604083870101525b50601f01601f1916929092016040019392505050565b8183526000602080850194508260005b85811015611be75763ffffffff611bd48361199b565b1687529582019590820190600101611bbe565b509495945050505050565b848152836020820152606060408201526000611c12606083018486611bae565b9695505050505050565b600060208284031215611c2e57600080fd5b815180151581146105b657600080fd5b600081518084526020808501945080840160005b83811015611be757815187529582019590820190600101611c52565b6020815260006105b66020830184611c3e565b60008060408385031215611c9457600080fd5b505080516020909101519092909150565b838152826020820152606060408201526000611cc46060830184611c3e565b95945050505050565b805480835260008281526020808220940193909190825b82600782011015611d5c57815463ffffffff8082168852602082811c821690890152604082811c821690890152606082811c821690890152608082811c82169089015260a082811c82169089015260c082811c9091169088015260e090811c9087015261010090950194600190910190600801611ce4565b90549082811015611d7a5763ffffffff821686526020909501946001015b82811015611d9a57602082901c63ffffffff168652602095909501946001015b82811015611db95763ffffffff604083901c1686526020909501946001015b82811015611dd85763ffffffff606083901c1686526020909501946001015b82811015611df75763ffffffff608083901c1686526020909501946001015b82811015611e165763ffffffff60a083901c1686526020909501946001015b82811015611e355763ffffffff60c083901c1686526020909501946001015b82811015611e4b5760e082901c86526020860195505b5093949350505050565b6000815480845260208085019450836000528060002060005b83811015611be75781546001600160a01b031687529582019560019182019101611e6e565b63ffffffff851681526001600160a01b0384166020820152608060408201819052600090611ec390830185611ccd565b8281036060840152611ed58185611e55565b979650505050505050565b60208152600061117c602083018486611bae565b60208082528181018390526000908460408401835b86811015611f35576001600160a01b03611f2284611ab1565b1682529183019190830190600101611f09565b509695505050505050565b63ffffffff86168152600060018060a01b03808716602084015260a06040840152611f6e60a0840187611ccd565b8381036060850152611f808187611e55565b9250508084166080840152509695505050505050565b60006001600160801b03808316818103611fb257611fb2611b16565b6001019392505050565b60006001600160801b03808316818516808303821115611fde57611fde611b16565b01949350505050565b60006001600160801b038381169083168181101561200757612007611b16565b039392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561207957835163ffffffff1683529284019291840191600101612057565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156120795783516001600160a01b0316835292840192918401916001016120a156fea26469706673582212205e842518fdd854137da152ebf72ce01e4903bfe2426e154ea31e01980e837c8a64736f6c634300080f0033";

type RootManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RootManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RootManager__factory extends ContractFactory {
  constructor(...args: RootManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delayBlocks: PromiseOrValue<BigNumberish>,
    _merkle: PromiseOrValue<string>,
    _watcherManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RootManager> {
    return super.deploy(
      _delayBlocks,
      _merkle,
      _watcherManager,
      overrides || {}
    ) as Promise<RootManager>;
  }
  override getDeployTransaction(
    _delayBlocks: PromiseOrValue<BigNumberish>,
    _merkle: PromiseOrValue<string>,
    _watcherManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _delayBlocks,
      _merkle,
      _watcherManager,
      overrides || {}
    );
  }
  override attach(address: string): RootManager {
    return super.attach(address) as RootManager;
  }
  override connect(signer: Signer): RootManager__factory {
    return super.connect(signer) as RootManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RootManagerInterface {
    return new utils.Interface(_abi) as RootManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RootManager {
    return new Contract(address, _abi, signerOrProvider) as RootManager;
  }
}
