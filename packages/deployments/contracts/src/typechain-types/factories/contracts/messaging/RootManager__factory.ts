/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RootManager,
  RootManagerInterface,
} from "../../../contracts/messaging/RootManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delayBlocks",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_merkle",
        type: "address",
      },
      {
        internalType: "address",
        name: "_watcherManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_noOwnershipChange",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_noProposal",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "connector",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32[]",
        name: "domains",
        type: "uint32[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "connectors",
        type: "address[]",
      },
    ],
    name: "ConnectorAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "connector",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32[]",
        name: "domains",
        type: "uint32[]",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "connectors",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "ConnectorRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "previous",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "updated",
        type: "uint256",
      },
    ],
    name: "DelayBlocksUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposedOwner",
        type: "address",
      },
    ],
    name: "OwnershipProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "aggregateRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32[]",
        name: "domains",
        type: "uint32[]",
      },
    ],
    name: "RootPropagated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "receivedRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "queueIndex",
        type: "uint256",
      },
    ],
    name: "RootReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "aggregateRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "aggregatedMessageRoots",
        type: "bytes32[]",
      },
    ],
    name: "RootsAggregated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "watcherManager",
        type: "address",
      },
    ],
    name: "WatcherManagerChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "DEQUEUE_MAX",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MERKLE",
    outputs: [
      {
        internalType: "contract MerkleTreeManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptProposedOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_connector",
        type: "address",
      },
    ],
    name: "addConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_inbound",
        type: "bytes32",
      },
    ],
    name: "aggregate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "connectors",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "connectorsHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delayBlocks",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "domains",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "domainsHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "getConnectorForDomain",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "getDomainIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPendingInboundRootsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "isDomainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingInboundRoots",
    outputs: [
      {
        internalType: "uint128",
        name: "first",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "last",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "_domains",
        type: "uint32[]",
      },
      {
        internalType: "address[]",
        name: "_connectors",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_fees",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "_encodedData",
        type: "bytes[]",
      },
    ],
    name: "propagate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newlyProposed",
        type: "address",
      },
    ],
    name: "proposeNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "removeConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounced",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delayBlocks",
        type: "uint256",
      },
    ],
    name: "setDelayBlocks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_watcherManager",
        type: "address",
      },
    ],
    name: "setWatcherManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "_domains",
        type: "uint32[]",
      },
      {
        internalType: "address[]",
        name: "_connectors",
        type: "address[]",
      },
    ],
    name: "validateDomains",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620026983803806200269883398101604081905262000034916200015d565b600380546001600160a81b0319166101006001600160a01b038416021790556200005e33620000db565b6001600160a01b038216620000a85760405162461bcd60e51b815260206004820152600c60248201526b217a65726f206d65726b6c6560a01b604482015260640160405180910390fd5b6001600160a01b0382166080526009839055620000d2600a6200013a602090811b6200116717901c565b5050506200019e565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60019055565b80516001600160a01b03811681146200015857600080fd5b919050565b6000806000606084860312156200017357600080fd5b83519250620001856020850162000140565b9150620001956040850162000140565b90509250925092565b6080516124d7620001c16000396000818161049f0152610a9001526124d76000f3fe6080604052600436106101d85760003560e01c80638da5cb5b11610102578063b1f8100d11610095578063d232c22011610064578063d232c22014610577578063d2a3cc7114610596578063db0f0169146105b6578063e6f1208d146105d657600080fd5b8063b1f8100d14610504578063b904670f14610524578063c5b350df14610544578063d1851c921461055957600080fd5b80639e4d21b9116100d15780639e4d21b91461047a578063a01892a51461048d578063aa0d60a3146104c1578063ad9c0c2e146104ee57600080fd5b80638da5cb5b146103fd5780638e7d93fa1461041b578063909907cb1461043b578063957908d11461045057600080fd5b80635c975abb1161017a5780637bc24d99116101495780637bc24d99146103675780637d434e911461037d5780637d5343081461039d5780638456cb59146103e857600080fd5b80635c975abb146102ef57806366cf8fab146103075780636a42b8f81461033c578063715018a61461035257600080fd5b80633c4baaf8116101b65780633c4baaf8146102815780633cf52ffb146102af5780633f4ba83a146102c4578063498c2c2e146102d957600080fd5b806313ede1a1146101dd5780631eeaabea1461021a57806324ec5d051461023c575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611b69565b6105f6565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022657600080fd5b5061023a610235366004611b69565b610620565b005b34801561024857600080fd5b50610271610257366004611b9b565b63ffffffff16600090815260086020526040902054151590565b6040519015158152602001610211565b34801561028d57600080fd5b506102a161029c366004611b9b565b6106d2565b604051908152602001610211565b3480156102bb57600080fd5b506002546102a1565b3480156102d057600080fd5b5061023a610736565b3480156102e557600080fd5b506102a160075481565b3480156102fb57600080fd5b5060035460ff16610271565b34801561031357600080fd5b50610327610322366004611b69565b610773565b60405163ffffffff9091168152602001610211565b34801561034857600080fd5b5062093a806102a1565b34801561035e57600080fd5b5061023a6107ad565b34801561037357600080fd5b506102a160055481565b34801561038957600080fd5b506101fd610398366004611b9b565b61086a565b3480156103a957600080fd5b50600a546103c8906001600160801b0380821691600160801b90041682565b604080516001600160801b03938416815292909116602083015201610211565b3480156103f457600080fd5b5061023a6108a2565b34801561040957600080fd5b506000546001600160a01b03166101fd565b34801561042757600080fd5b5061023a610436366004611bb6565b610959565b34801561044757600080fd5b506102a1610a14565b34801561045c57600080fd5b50610465610a25565b60408051928352602083019190915201610211565b61023a610488366004611c73565b610b65565b34801561049957600080fd5b506101fd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104cd57600080fd5b506104d6606481565b6040516001600160801b039091168152602001610211565b3480156104fa57600080fd5b506102a160095481565b34801561051057600080fd5b5061023a61051f366004611e30565b610d61565b34801561053057600080fd5b5061023a61053f366004611e4b565b610e09565b34801561055057600080fd5b5061023a610e81565b34801561056557600080fd5b506001546001600160a01b03166101fd565b34801561058357600080fd5b506000546001600160a01b031615610271565b3480156105a257600080fd5b5061023a6105b1366004611e30565b610edc565b3480156105c257600080fd5b5061023a6105d1366004611e7e565b610fa9565b3480156105e257600080fd5b5061023a6105f1366004611b9b565b61107a565b6006818154811061060657600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461064b576040516311a8a1bb60e31b815260040160405180910390fd5b60095481036106905760405162461bcd60e51b815260206004820152600c60248201526b2164656c6179426c6f636b7360a01b60448201526064015b60405180910390fd5b6009546040805183815260208101929092527fef322fd61cb3d8514326f0b28140a92a29cd10996ad80d0671e43d2483464c1d910160405180910390a1600955565b63ffffffff81166000908152600860205260408120548082036107245760405162461bcd60e51b815260206004820152600a602482015269085cdd5c1c1bdc9d195960b21b6044820152606401610687565b61072f600182611f00565b9392505050565b6000546001600160a01b03163314610761576040516311a8a1bb60e31b815260040160405180910390fd5b61076961116d565b6107716111b6565b565b6004818154811061078357600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6000546001600160a01b031633146107d8576040516311a8a1bb60e31b815260040160405180910390fd5b6002546000036107fb57604051630e4b303f60e21b815260040160405180910390fd5b62093a806002544261080d9190611f00565b1161082b576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b031615610855576040516323295ef960e01b815260040160405180910390fd5b600154610771906001600160a01b0316611208565b60006006610877836106d2565b8154811061088757610887611f17565b6000918252602090912001546001600160a01b031692915050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa1580156108ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109129190611f2d565b6109495760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b6044820152606401610687565b610951611267565b6107716112ad565b610961611267565b813361096c8261086a565b6001600160a01b0316146109af5760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b6044820152606401610687565b60006109bc600a846112ea565b6040805163ffffffff87168152602081018690526001600160801b0383168183015290519192507f1daad24ee1bf0bcc72ab681d29df86ec2794361b223da31f148b9f826cd135a8919081900360600190a150505050565b6000610a20600a61135c565b905090565b600080610a30611267565b600954600090610a4490600a906064611386565b90508051600003610a8b5760405162461bcd60e51b81526020600482015260116024820152706e6f20766572696669656420726f6f747360781b6044820152606401610687565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166334a55ee6846040518263ffffffff1660e01b8152600401610ada9190611f8a565b60408051808303816000875af1158015610af8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1c9190611f9d565b915091507f41b13c36968d02a1fd71e0f5db55ba2fb043c215a4d1e17633293ff273a77cd4828285604051610b5393929190611fc1565b60405180910390a19093509150509091565b610b6d611267565b858481148015610b7c57508281145b8015610b885750808251145b610bc65760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206c656e6774687360881b6044820152606401610687565b610bd288888888610fa9565b600080610bdd610a25565b90925090503460005b848163ffffffff161015610d165787878263ffffffff16818110610c0c57610c0c611f17565b9050602002013582610c1e9190611f00565b915089898263ffffffff16818110610c3857610c38611f17565b9050602002016020810190610c4d9190611e30565b6001600160a01b03166348e6fa2389898463ffffffff16818110610c7357610c73611f17565b9050602002013586604051602001610c8d91815260200190565b604051602081830303815290604052898563ffffffff1681518110610cb457610cb4611f17565b60200260200101516040518463ffffffff1660e01b8152600401610cd9929190612036565b6000604051808303818588803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b5050505050806001019050610be6565b507f579770d5d8d3f9bcf578ba7bf3cbe05f38a626e4a16967aa3c2fd9aacd01954d83838d8d604051610d4c9493929190612094565b60405180910390a15050505050505050505050565b6000546001600160a01b03163314610d8c576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610db157506001600160a01b03811615155b15610dcf576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610dfd57604051634a2fb73f60e11b815260040160405180910390fd5b610e0681611654565b50565b6000546001600160a01b03163314610e34576040516311a8a1bb60e31b815260040160405180910390fd5b610e3e82826116a2565b7f95ef69787290b89c35a092c89db1b283b43724d01263e683cfb560c758cdbe70828260046006604051610e759493929190612284565b60405180910390a15050565b6001546001600160a01b03163314610eac576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610ebe9190611f00565b116108555760405163d39c12bb60e01b815260040160405180910390fd5b6000546001600160a01b03163314610f07576040516311a8a1bb60e31b815260040160405180910390fd5b6003546001600160a01b03610100909104811690821603610f6a5760405162461bcd60e51b815260206004820152601760248201527f616c72656164792077617463686572206d616e616765720000000000000000006044820152606401610687565b6040516001600160a01b03821681527fc16d059e43d7f8e29ccb4e001a2f249d3c59e274925d6a6bc3912943441d9f6c9060200160405180910390a150565b6005548484604051602001610fbf9291906122d1565b604051602081830303815290604052805190602001201461100d5760405162461bcd60e51b815260206004820152600860248201526721646f6d61696e7360c01b6044820152606401610687565b60075482826040516020016110239291906122e5565b60405160208183030381529060405280519060200120146110745760405162461bcd60e51b815260206004820152600b60248201526a21636f6e6e6563746f727360a81b6044820152606401610687565b50505050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190611f2d565b6111215760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b6044820152606401610687565b600061112c826117ed565b90507f6a1097f391a37dc63e0860e64ec34442971eeed2fda4d1a90141fa9ce25eb7eb82826004600633604051610e75959493929190612331565b60019055565b60035460ff166107715760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610687565b6111be61116d565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60035460ff16156107715760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610687565b6112b5611267565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586111eb3390565b81546000904390849060109061130f90600160801b90046001600160801b0316612387565b82546001600160801b038083166101009490940a84810291021990911617909255600090815260018601602090815260408083209690965560029096019095529290932092909255919050565b80546000906001600160801b03600160801b82048116911661137e8282611a09565b949350505050565b82546060906001600160801b0380821691600160801b900416818110156113dd5760405162461bcd60e51b815260206004820152600b60248201526a717565756520656d70747960a81b6044820152606401610687565b816001600160801b03166000036114265760405162461bcd60e51b815260206004820152600d60248201526c1c5d595d5948085a5b9a5d09d9609a1b6044820152606401610687565b6000846001600160801b0316116114715760405162461bcd60e51b815260206004820152600f60248201526e042c2c6c6cae0e8c2c4d8ca40dac2f608b1b6044820152606401610687565b6000600161147f86856123ad565b61148991906123d8565b9050806001600160801b0316826001600160801b031611156114a9578091505b5060006114b68643611f00565b905060005b826001600160801b0316846001600160801b03161161150d576001600160801b038316600090815260028901602052604090205482811161150057600191505061150d565b50600019909201916114bb565b8061152d575050604080516000815260208101909152925061072f915050565b60008461153b8560016123ad565b61154591906123d8565b6001600160801b031667ffffffffffffffff81111561156657611566611c2c565b60405190808252806020026020018201604052801561158f578160200160208202803683370190505b50905060005b846001600160801b0316866001600160801b03161161161f576001600160801b038616600090815260018b01602052604090205482518390839081106115dd576115dd611f17565b6020908102919091018101919091526001600160801b03871660009081526001808d018352604080832083905560028e01909352918120559586019501611595565b5088546fffffffffffffffffffffffffffffffff19166001600160801b03959095169490941788555091925050509392505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b63ffffffff8216600090815260086020526040902054156116ee5760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b6044820152606401610687565b6001600160a01b0381166117315760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b6044820152606401610687565b600480546001818101835560088083047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805463ffffffff808916600790961687026101000a8681029102199091161790556006805492830190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b0386166001600160a01b031990911617905591546000918252602092909252604090208190556117e8611a31565b505050565b6000806117f9836106d2565b905060006006828154811061181057611810611f17565b6000918252602090912001546001600160a01b03169050806118685760405162461bcd60e51b8152602060048201526011602482015270636f6e6e6563746f72202165786973747360781b6044820152606401610687565b60045460009061187a90600190611f00565b905080831015611971576004818154811061189757611897611f17565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16600484815481106118d0576118d0611f17565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055506006818154811061191657611916611f17565b600091825260209091200154600680546001600160a01b03909216918590811061194257611942611f17565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600480548061198257611982612400565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a0219169055905560068054806119c1576119c1612400565b60008281526020808220830160001990810180546001600160a01b031916905590920190925563ffffffff87168252600890526040812055611a01611a31565b509392505050565b600081611a178460016123ad565b611a2191906123d8565b6001600160801b03169392505050565b60006004805480602002602001604051908101604052809291908181526020018280548015611aab57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611a6e5790505b5050505050905060006006805480602002602001604051908101604052809291908181526020018280548015611b0a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611aec575b5050505050905081604051602001611b229190612416565b60408051601f19818403018152908290528051602091820120600555611b4a91839101612460565b60408051601f1981840301815291905280516020909101206007555050565b600060208284031215611b7b57600080fd5b5035919050565b803563ffffffff81168114611b9657600080fd5b919050565b600060208284031215611bad57600080fd5b61072f82611b82565b60008060408385031215611bc957600080fd5b611bd283611b82565b946020939093013593505050565b60008083601f840112611bf257600080fd5b50813567ffffffffffffffff811115611c0a57600080fd5b6020830191508360208260051b8501011115611c2557600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611c6b57611c6b611c2c565b604052919050565b60008060008060008060006080888a031215611c8e57600080fd5b67ffffffffffffffff8089351115611ca557600080fd5b611cb28a8a358b01611be0565b90985096506020890135811015611cc857600080fd5b611cd88a60208b01358b01611be0565b90965094506040890135811015611cee57600080fd5b611cfe8a60408b01358b01611be0565b90945092506060890135811015611d1457600080fd5b606089013589018a601f820112611d2a57600080fd5b8181351115611d3b57611d3b611c2c565b611d4b6020823560051b01611c42565b81358082526020808301929160051b8401018d1015611d6957600080fd5b602083015b6020843560051b850101811015611e05578481351115611d8d57600080fd5b8d603f823586010112611d9f57600080fd5b602081358501013585811115611db757611db7611c2c565b611dca601f8201601f1916602001611c42565b8181528f6040838535890101011115611de257600080fd5b816040843588010160208301376000602092820183015284529283019201611d6e565b508094505050505092959891949750929550565b80356001600160a01b0381168114611b9657600080fd5b600060208284031215611e4257600080fd5b61072f82611e19565b60008060408385031215611e5e57600080fd5b611e6783611b82565b9150611e7560208401611e19565b90509250929050565b60008060008060408587031215611e9457600080fd5b843567ffffffffffffffff80821115611eac57600080fd5b611eb888838901611be0565b90965094506020870135915080821115611ed157600080fd5b50611ede87828801611be0565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b600082821015611f1257611f12611eea565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611f3f57600080fd5b8151801515811461072f57600080fd5b600081518084526020808501945080840160005b83811015611f7f57815187529582019590820190600101611f63565b509495945050505050565b60208152600061072f6020830184611f4f565b60008060408385031215611fb057600080fd5b505080516020909101519092909150565b838152826020820152606060408201526000611fe06060830184611f4f565b95945050505050565b6000815180845260005b8181101561200f57602081850181015186830182015201611ff3565b81811115612021576000602083870101525b50601f01601f19169290920160200192915050565b6040815260006120496040830185611fe9565b8281036020840152611fe08185611fe9565b8183526000602080850194508260005b85811015611f7f5763ffffffff61208183611b82565b168752958201959082019060010161206b565b8481528360208201526060604082015260006120b460608301848661205b565b9695505050505050565b805480835260008281526020808220940193909190825b8260078201101561214d57815463ffffffff8082168852602082811c821690890152604082811c821690890152606082811c821690890152608082811c82169089015260a082811c82169089015260c082811c9091169088015260e090811c90870152610100909501946001909101906008016120d5565b9054908281101561216b5763ffffffff821686526020909501946001015b8281101561218b57602082901c63ffffffff168652602095909501946001015b828110156121aa5763ffffffff604083901c1686526020909501946001015b828110156121c95763ffffffff606083901c1686526020909501946001015b828110156121e85763ffffffff608083901c1686526020909501946001015b828110156122075763ffffffff60a083901c1686526020909501946001015b828110156122265763ffffffff60c083901c1686526020909501946001015b8281101561223c5760e082901c86526020860195505b5093949350505050565b6000815480845260208085019450836000528060002060005b83811015611f7f5781546001600160a01b03168752958201956001918201910161225f565b63ffffffff851681526001600160a01b03841660208201526080604082018190526000906122b4908301856120be565b82810360608401526122c68185612246565b979650505050505050565b60208152600061137e60208301848661205b565b60208082528181018390526000908460408401835b86811015612326576001600160a01b0361231384611e19565b16825291830191908301906001016122fa565b509695505050505050565b63ffffffff86168152600060018060a01b03808716602084015260a0604084015261235f60a08401876120be565b83810360608501526123718187612246565b9250508084166080840152509695505050505050565b60006001600160801b038083168181036123a3576123a3611eea565b6001019392505050565b60006001600160801b038083168185168083038211156123cf576123cf611eea565b01949350505050565b60006001600160801b03838116908316818110156123f8576123f8611eea565b039392505050565b634e487b7160e01b600052603160045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561245457835163ffffffff1683529284019291840191600101612432565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156124545783516001600160a01b03168352928401929184019160010161247c56fea264697066735822122030cf4a784863e576d25538c10eb0fc75ed727bec750e6b36b1dda526a732af8b64736f6c634300080f0033";

type RootManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RootManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RootManager__factory extends ContractFactory {
  constructor(...args: RootManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delayBlocks: PromiseOrValue<BigNumberish>,
    _merkle: PromiseOrValue<string>,
    _watcherManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RootManager> {
    return super.deploy(
      _delayBlocks,
      _merkle,
      _watcherManager,
      overrides || {}
    ) as Promise<RootManager>;
  }
  override getDeployTransaction(
    _delayBlocks: PromiseOrValue<BigNumberish>,
    _merkle: PromiseOrValue<string>,
    _watcherManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _delayBlocks,
      _merkle,
      _watcherManager,
      overrides || {}
    );
  }
  override attach(address: string): RootManager {
    return super.attach(address) as RootManager;
  }
  override connect(signer: Signer): RootManager__factory {
    return super.connect(signer) as RootManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RootManagerInterface {
    return new utils.Interface(_abi) as RootManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RootManager {
    return new Contract(address, _abi, signerOrProvider) as RootManager;
  }
}
