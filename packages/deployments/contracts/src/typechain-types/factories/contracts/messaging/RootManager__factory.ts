/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  RootManager,
  RootManagerInterface,
} from "../../../contracts/messaging/RootManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delayBlocks",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_merkle",
        type: "address",
      },
      {
        internalType: "address",
        name: "_watcherManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_noOwnershipChange",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_noProposal",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "connector",
        type: "address",
      },
    ],
    name: "ConnectorAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "connector",
        type: "address",
      },
    ],
    name: "ConnectorRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposedOwner",
        type: "address",
      },
    ],
    name: "OwnershipProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "domain",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "receivedRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "RootAggregated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "aggregate",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32[]",
        name: "domains",
        type: "uint32[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "RootPropagated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "watcherManager",
        type: "address",
      },
    ],
    name: "WatcherManagerChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "MERKLE",
    outputs: [
      {
        internalType: "contract MerkleTreeManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptProposedOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "_connector",
        type: "address",
      },
    ],
    name: "addConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_inbound",
        type: "bytes32",
      },
    ],
    name: "aggregate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "connectors",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "connectorsHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delayBlocks",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "domains",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "domainsHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "getConnectorForDomain",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "getDomainIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPendingInboundRootsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "isDomainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingInboundRoots",
    outputs: [
      {
        internalType: "uint128",
        name: "first",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "last",
        type: "uint128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "_domains",
        type: "uint32[]",
      },
      {
        internalType: "address[]",
        name: "_connectors",
        type: "address[]",
      },
    ],
    name: "propagate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newlyProposed",
        type: "address",
      },
    ],
    name: "proposeNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_domain",
        type: "uint32",
      },
    ],
    name: "removeConnector",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounced",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delayBlocks",
        type: "uint256",
      },
    ],
    name: "setDelayBlocks",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_watcherManager",
        type: "address",
      },
    ],
    name: "setWatcherManager",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "_domains",
        type: "uint32[]",
      },
      {
        internalType: "address[]",
        name: "_connectors",
        type: "address[]",
      },
    ],
    name: "validateDomains",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001df138038062001df183398101604081905262000034916200015d565b600380546001600160a81b0319166101006001600160a01b038416021790556200005e33620000db565b6001600160a01b038216620000a85760405162461bcd60e51b815260206004820152600c60248201526b217a65726f206d65726b6c6560a01b604482015260640160405180910390fd5b6001600160a01b0382166080526009839055620000d2600a6200013a602090811b62000e9017901c565b5050506200019e565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60019055565b80516001600160a01b03811681146200015857600080fd5b919050565b6000806000606084860312156200017357600080fd5b83519250620001856020850162000140565b9150620001956040850162000140565b90509250925092565b608051611c30620001c16000396000818161037501526106240152611c306000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637d53430811610104578063b1f8100d116100a2578063d232c22011610071578063d232c220146103df578063d2a3cc71146103f1578063db0f016914610404578063e6f1208d1461041757600080fd5b8063b1f8100d146103a0578063b904670f146103b3578063c5b350df146103c6578063d1851c92146103ce57600080fd5b80638e7d93fa116100de5780638e7d93fa14610355578063909907cb14610368578063a01892a514610370578063ad9c0c2e1461039757600080fd5b80637d534308146102fe5780638456cb591461033c5780638da5cb5b1461034457600080fd5b8063498c2c2e116101715780636a42b8f81161014b5780636a42b8f8146102d1578063715018a6146102da5780637bc24d99146102e25780637d434e91146102eb57600080fd5b8063498c2c2e146102955780635c975abb1461029e57806366cf8fab146102a957600080fd5b80633c4baaf8116101ad5780633c4baaf8146102515780633cf52ffb146102725780633f4ba83a1461027a57806344833ca31461028257600080fd5b806313ede1a1146101d45780631eeaabea1461020457806324ec5d0514610219575b600080fd5b6101e76101e2366004611751565b61042a565b6040516001600160a01b0390911681526020015b60405180910390f35b610217610212366004611751565b610454565b005b610241610227366004611783565b63ffffffff16600090815260086020526040902054151590565b60405190151581526020016101fb565b61026461025f366004611783565b6104c9565b6040519081526020016101fb565b600254610264565b61021761052d565b6102176102903660046117ea565b61056a565b61026460075481565b60035460ff16610241565b6102bc6102b7366004611751565b6107c3565b60405163ffffffff90911681526020016101fb565b62093a80610264565b6102176107fd565b61026460055481565b6101e76102f9366004611783565b6108ba565b600a5461031c906001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152016101fb565b6102176108f2565b6000546001600160a01b03166101e7565b610217610363366004611856565b6109a9565b610264610a64565b6101e77f000000000000000000000000000000000000000000000000000000000000000081565b61026460095481565b6102176103ae366004611897565b610a75565b6102176103c13660046118b2565b610b1d565b610217610b9e565b6001546001600160a01b03166101e7565b6000546001600160a01b031615610241565b6102176103ff366004611897565b610bf9565b6102176104123660046117ea565b610cc6565b610217610425366004611783565b610d97565b6006818154811061043a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b0316331461047f576040516311a8a1bb60e31b815260040160405180910390fd5b60095481036104c45760405162461bcd60e51b815260206004820152600c60248201526b2164656c6179426c6f636b7360a01b60448201526064015b60405180910390fd5b600955565b63ffffffff811660009081526008602052604081205480820361051b5760405162461bcd60e51b815260206004820152600a602482015269085cdd5c1c1bdc9d195960b21b60448201526064016104bb565b6105266001826118fb565b9392505050565b6000546001600160a01b03163314610558576040516311a8a1bb60e31b815260040160405180910390fd5b610560610e96565b610568610edf565b565b610572610f31565b828181146105b45760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206c656e6774687360881b60448201526064016104bb565b6105c085858585610cc6565b60006105d8600954600a610f7790919063ffffffff16565b9050805160000361061f5760405162461bcd60e51b81526020600482015260116024820152706e6f20766572696669656420726f6f747360781b60448201526064016104bb565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166334a55ee6846040518263ffffffff1660e01b815260040161066e9190611912565b60408051808303816000875af115801561068c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b09190611956565b9150915060005b848163ffffffff16101561077b5786868263ffffffff168181106106dd576106dd61197a565b90506020020160208101906106f29190611897565b6001600160a01b03166382646a588460405160200161071391815260200190565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161073e9190611990565b600060405180830381600087803b15801561075857600080fd5b505af115801561076c573d6000803e3d6000fd5b505050508060010190506106b7565b507f7c96724e9606dbd948afccd2ff6bd0072004e54b8066c07088dca03d84ba5281828989846040516107b19493929190611a29565b60405180910390a15050505050505050565b600481815481106107d357600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6000546001600160a01b03163314610828576040516311a8a1bb60e31b815260040160405180910390fd5b60025460000361084b57604051630e4b303f60e21b815260040160405180910390fd5b62093a806002544261085d91906118fb565b1161087b576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b0316156108a5576040516323295ef960e01b815260040160405180910390fd5b600154610568906001600160a01b0316611171565b600060066108c7836104c9565b815481106108d7576108d761197a565b6000918252602090912001546001600160a01b031692915050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa15801561093e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109629190611a54565b6109995760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b60448201526064016104bb565b6109a1610f31565b6105686111d0565b6109b1610f31565b81336109bc826108ba565b6001600160a01b0316146109ff5760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b60448201526064016104bb565b6000610a0c600a8461120d565b6040805163ffffffff87168152602081018690526001600160801b0383168183015290519192507ff5832b5d15f2d906d01b871e48b0d1f27d8f282a7e0771c428b55bfeb409fa05919081900360600190a150505050565b6000610a70600a61127f565b905090565b6000546001600160a01b03163314610aa0576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610ac557506001600160a01b03811615155b15610ae3576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610b1157604051634a2fb73f60e11b815260040160405180910390fd5b610b1a816112a9565b50565b6000546001600160a01b03163314610b48576040516311a8a1bb60e31b815260040160405180910390fd5b610b5282826112f7565b6040805163ffffffff841681526001600160a01b03831660208201527fffe1880f946ecead1a35ac14f99c782cacaa440f95493896794dabacf8f95c5491015b60405180910390a15050565b6001546001600160a01b03163314610bc9576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610bdb91906118fb565b116108a55760405163d39c12bb60e01b815260040160405180910390fd5b6000546001600160a01b03163314610c24576040516311a8a1bb60e31b815260040160405180910390fd5b6003546001600160a01b03610100909104811690821603610c875760405162461bcd60e51b815260206004820152601760248201527f616c72656164792077617463686572206d616e6167657200000000000000000060448201526064016104bb565b6040516001600160a01b03821681527fc16d059e43d7f8e29ccb4e001a2f249d3c59e274925d6a6bc3912943441d9f6c9060200160405180910390a150565b6005548484604051602001610cdc929190611a76565b6040516020818303038152906040528051906020012014610d2a5760405162461bcd60e51b815260206004820152600860248201526721646f6d61696e7360c01b60448201526064016104bb565b6007548282604051602001610d40929190611a8a565b6040516020818303038152906040528051906020012014610d915760405162461bcd60e51b815260206004820152600b60248201526a21636f6e6e6563746f727360a81b60448201526064016104bb565b50505050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190611a54565b610e3e5760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b60448201526064016104bb565b6000610e4982611442565b6040805163ffffffff851681526001600160a01b03831660208201529192507fb576e68aeacfc9a4973bc2ac5c7ea7e6662b78809d33443fed101e04ceb7c9d49101610b92565b60019055565b60035460ff166105685760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104bb565b610ee7610e96565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60035460ff16156105685760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104bb565b81546060906001600160801b0380821691600160801b90041681811015610fce5760405162461bcd60e51b815260206004820152600b60248201526a717565756520656d70747960a81b60448201526064016104bb565b60005b826001600160801b0316826001600160801b03161061102c576001600160801b03821660009081526002870160205260409020548561101082436118fb565b1061101f57600191505061102c565b5060001990910190610fd1565b8061104b575050604080516000815260208101909152915061116b9050565b600083611059846001611aec565b6110639190611b17565b6001600160801b031667ffffffffffffffff81111561108457611084611ad6565b6040519080825280602002602001820160405280156110ad578160200160208202803683370190505b50905060005b836001600160801b0316856001600160801b03161161113d576001600160801b038516600090815260018901602052604090205482518390839081106110fb576110fb61197a565b6020908102919091018101919091526001600160801b03861660009081526001808b018352604080832083905560028c019093529181205594850194016110b3565b5086546fffffffffffffffffffffffffffffffff19166001600160801b039490941693909317865550909150505b92915050565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6111d8610f31565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f143390565b81546000904390849060109061123290600160801b90046001600160801b0316611b3f565b82546001600160801b038083166101009490940a84810291021990911617909255600090815260018601602090815260408083209690965560029096019095529290932092909255919050565b80546000906001600160801b03600160801b8204811691166112a182826115f1565b949350505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b63ffffffff8216600090815260086020526040902054156113435760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016104bb565b6001600160a01b0381166113865760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b60448201526064016104bb565b600480546001818101835560088083047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805463ffffffff808916600790961687026101000a8681029102199091161790556006805492830190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b0386166001600160a01b0319909116179055915460009182526020929092526040902081905561143d611619565b505050565b60008061144e836104c9565b90506000600682815481106114655761146561197a565b6000918252602090912001546001600160a01b03169050806114bd5760405162461bcd60e51b8152602060048201526011602482015270636f6e6e6563746f72202165786973747360781b60448201526064016104bb565b6004546000906114cf906001906118fb565b90508083101561155957600481815481106114ec576114ec61197a565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff16600484815481106115255761152561197a565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b600480548061156a5761156a611b65565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a0219169055905560068054806115a9576115a9611b65565b60008281526020808220830160001990810180546001600160a01b031916905590920190925563ffffffff871682526008905260408120556115e9611619565b509392505050565b6000816115ff846001611aec565b6116099190611b17565b6001600160801b03169392505050565b6000600480548060200260200160405190810160405280929190818152602001828054801561169357602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116116565790505b50505050509050600060068054806020026020016040519081016040528092919081815260200182805480156116f257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116116d4575b505050505090508160405160200161170a9190611b7b565b60408051601f1981840301815290829052805160209182012060055561173291839101611bb9565b60408051601f1981840301815291905280516020909101206007555050565b60006020828403121561176357600080fd5b5035919050565b803563ffffffff8116811461177e57600080fd5b919050565b60006020828403121561179557600080fd5b6105268261176a565b60008083601f8401126117b057600080fd5b50813567ffffffffffffffff8111156117c857600080fd5b6020830191508360208260051b85010111156117e357600080fd5b9250929050565b6000806000806040858703121561180057600080fd5b843567ffffffffffffffff8082111561181857600080fd5b6118248883890161179e565b9096509450602087013591508082111561183d57600080fd5b5061184a8782880161179e565b95989497509550505050565b6000806040838503121561186957600080fd5b6118728361176a565b946020939093013593505050565b80356001600160a01b038116811461177e57600080fd5b6000602082840312156118a957600080fd5b61052682611880565b600080604083850312156118c557600080fd5b6118ce8361176a565b91506118dc60208401611880565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008282101561190d5761190d6118e5565b500390565b6020808252825182820181905260009190848201906040850190845b8181101561194a5783518352928401929184019160010161192e565b50909695505050505050565b6000806040838503121561196957600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b600060208083528351808285015260005b818110156119bd578581018301518582016040015282016119a1565b818111156119cf576000604083870101525b50601f01601f1916929092016040019392505050565b8183526000602080850194508260005b85811015611a1e5763ffffffff611a0b8361176a565b16875295820195908201906001016119f5565b509495945050505050565b848152606060208201526000611a436060830185876119e5565b905082604083015295945050505050565b600060208284031215611a6657600080fd5b8151801515811461052657600080fd5b6020815260006112a16020830184866119e5565b60208082528181018390526000908460408401835b86811015611acb576001600160a01b03611ab884611880565b1682529183019190830190600101611a9f565b509695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160801b03808316818516808303821115611b0e57611b0e6118e5565b01949350505050565b60006001600160801b0383811690831681811015611b3757611b376118e5565b039392505050565b60006001600160801b03808316818103611b5b57611b5b6118e5565b6001019392505050565b634e487b7160e01b600052603160045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561194a57835163ffffffff1683529284019291840191600101611b97565b6020808252825182820181905260009190848201906040850190845b8181101561194a5783516001600160a01b031683529284019291840191600101611bd556fea26469706673582212206cc617dd010cb0ee4c22e46f06d9950a81a00533629f78617185017c27aa074364736f6c634300080f0033";

type RootManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RootManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RootManager__factory extends ContractFactory {
  constructor(...args: RootManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _delayBlocks: PromiseOrValue<BigNumberish>,
    _merkle: PromiseOrValue<string>,
    _watcherManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RootManager> {
    return super.deploy(
      _delayBlocks,
      _merkle,
      _watcherManager,
      overrides || {}
    ) as Promise<RootManager>;
  }
  override getDeployTransaction(
    _delayBlocks: PromiseOrValue<BigNumberish>,
    _merkle: PromiseOrValue<string>,
    _watcherManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _delayBlocks,
      _merkle,
      _watcherManager,
      overrides || {}
    );
  }
  override attach(address: string): RootManager {
    return super.attach(address) as RootManager;
  }
  override connect(signer: Signer): RootManager__factory {
    return super.connect(signer) as RootManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RootManagerInterface {
    return new utils.Interface(_abi) as RootManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RootManager {
    return new Contract(address, _abi, signerOrProvider) as RootManager;
  }
}
