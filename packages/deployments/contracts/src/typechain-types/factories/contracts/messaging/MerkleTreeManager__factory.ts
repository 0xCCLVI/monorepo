/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MerkleTreeManager,
  MerkleTreeManagerInterface,
} from "../../../contracts/messaging/MerkleTreeManager";

const _abi = [
  {
    inputs: [],
    name: "MerkleLib__insert_treeIsFull",
    type: "error",
  },
  {
    inputs: [],
    name: "MerkleTreeManager__setArborist_alreadyArborist",
    type: "error",
  },
  {
    inputs: [],
    name: "MerkleTreeManager__setArborist_zeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_noOwnershipChange",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_noProposal",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previous",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updated",
        type: "address",
      },
    ],
    name: "ArboristUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "LeafInserted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "LeavesInserted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposedOwner",
        type: "address",
      },
    ],
    name: "OwnershipProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptProposedOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "arborist",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "branch",
    outputs: [
      {
        internalType: "bytes32[32]",
        name: "",
        type: "bytes32[32]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_arborist",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "insert",
    outputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "insert",
    outputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "leaves",
    outputs: [
      {
        internalType: "enum MerkleTreeManager.LeafStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_leaf",
        type: "bytes32",
      },
    ],
    name: "markAsProcessed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_leaf",
        type: "bytes32",
      },
    ],
    name: "markAsProven",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newlyProposed",
        type: "address",
      },
    ],
    name: "proposeNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounced",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rootAndCount",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newArborist",
        type: "address",
      },
    ],
    name: "setArborist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506124e2806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638da5cb5b116100b8578063c5b350df1161007c578063c5b350df1461028f578063c9b0a6de14610297578063d1851c921461029f578063d232c220146102b0578063ebf0c717146102d9578063fd54b228146102e157600080fd5b80638da5cb5b1461022c57806398fae8e914610243578063b1f8100d14610256578063b61f103014610269578063c4d66de81461027c57600080fd5b806334a55ee6116100ff57806334a55ee6146101eb5780633cf52ffb146101fe5780634b72d0d4146102065780636a42b8f81461021b578063715018a61461022457600080fd5b806306661abd1461013c578063151bcd2c146101535780631b373a98146101835780632d287e431461019857806331d0913c146101c0575b600080fd5b6052545b6040519081526020015b60405180910390f35b610176610161366004612110565b60546020526000908152604090205460ff1681565b60405161014a919061213f565b610196610191366004612167565b6102eb565b005b6101ab6101a6366004612110565b6103d9565b6040805192835260208301919091520161014a565b6053546101d3906001600160a01b031681565b6040516001600160a01b03909116815260200161014a565b6101ab6101f93660046121ad565b6104d2565b600254610140565b61020e6105fd565b60405161014a919061226b565b62093a80610140565b610196610639565b6000546201000090046001600160a01b03166101d3565b610196610251366004612110565b61066c565b610196610264366004612167565b610712565b610196610277366004612110565b6107bf565b61019661028a366004612167565b610865565b610196610980565b6101ab6109f0565b6001546001600160a01b03166101d3565b6102c96000546201000090046001600160a01b03161590565b604051901515815260200161014a565b610140610a09565b6052546101409081565b6000546201000090046001600160a01b0316331461031c576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b03811661034357604051630c11a52d60e11b815260040160405180910390fd5b6053546001600160a01b0390811690821681036103735760405163606e957b60e11b815260040160405180910390fd5b604080516001600160a01b038084168252841660208201527ff2fa31e21376edb31995720340ba00a41a12a7c8744a9bde552660121f4b7771910160405180910390a150605380546001600160a01b0319166001600160a01b0392909216919091179055565b60535460009081906001600160a01b031633146104115760405162461bcd60e51b8152600401610408906122a1565b60405180910390fd5b60408051610440810180835261045f92869291603291839190820190839060209082845b81548152602001906001019080831161043557505050918352505060209182015491015290610a1a565b8051603290610471908290602061207e565b50602091820151910155506052546104896032610b26565b60408051828152602081018490529081018590529092507fd50e83984b64a106ac2ee6314d689ec4d2a656d5ece6d94c585796944b52240c9060600160405180910390a1915091565b60535460009081906001600160a01b031633146105015760405162461bcd60e51b8152600401610408906122a1565b6040805161044081018083526000926032918391820190839060209082845b815481526020019060010190808311610520575050509183525050602091820154910152845190915060005b8181101561058a57610580868281518110610569576105696122c4565b602002602001015184610a1a90919063ffffffff16565b925060010161054c565b508151829060329061059f908290602061207e565b506020918201519082015582015192506105b96032610b26565b93507f3ef8438c07c6b4b67e70eace906a07e9b294c2f0066803f58e705567e1aa4f1b8484876040516105ee939291906122da565b60405180910390a15050915091565b6106056120bc565b604080516104008101918290529060329060209082845b81548152602001906001019080831161061c575050505050905090565b6000546201000090046001600160a01b0316331461066a576040516311a8a1bb60e31b815260040160405180910390fd5b565b6053546001600160a01b031633146106965760405162461bcd60e51b8152600401610408906122a1565b60008181526054602052604081205460ff1660028111156106b9576106b9612129565b146106ef5760405162461bcd60e51b815260206004820152600660248201526521656d70747960d01b6044820152606401610408565b600081815260546020526040902080546001919060ff191682805b021790555050565b6000546201000090046001600160a01b03163314610743576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610761575060025415155b1561077f576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b038083166201000090920416036107b357604051634a2fb73f60e11b815260040160405180910390fd5b6107bc81611edc565b50565b6053546001600160a01b031633146107e95760405162461bcd60e51b8152600401610408906122a1565b600160008281526054602052604090205460ff16600281111561080e5761080e612129565b146108455760405162461bcd60e51b815260206004820152600760248201526610b83937bb32b760c91b6044820152606401610408565b600081815260546020526040902080546002919060ff191660018361070a565b600054610100900460ff16158080156108855750600054600160ff909116105b8061089f5750303b15801561089f575060005460ff166001145b6109025760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610408565b6000805460ff191660011790558015610925576000805461ff0019166101001790555b61092e82611f2a565b610936611f5a565b801561097c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001546001600160a01b031633146109ab576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426109bd9190612345565b116109db576040516324e0285f60e21b815260040160405180910390fd5b60015461066a906001600160a01b0316611f89565b6000806109fd6032610b26565b60525490939092509050565b6000610a156032610b26565b905090565b610a226120db565b6000836020018051610a3390612358565b9081905290506001610a4760206002612455565b610a519190612345565b811115610a7157604051638eab04bb60e01b815260040160405180910390fd5b60005b6020811015610b065781600116600103610aad57845184908260208110610a9d57610a9d6122c4565b602002015250839150610b209050565b84518160208110610ac057610ac06122c4565b602002015184604051602001610ae0929190918252602082015260400190565b60408051601f1981840301815291905280516020909101209350600191821c9101610a74565b50604051638eab04bb60e01b815260040160405180910390fd5b92915050565b6020810154600090808203610b5d57507f27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d75792915050565b6000836001831615610b7f578054600052600060205260406000209350611432565b6002831615610bc45760018101546000527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb56020526040600020935060019150611432565b6004831615610c095760028101546000527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d306020526040600020935060029150611432565b6008831615610c4e5760038101546000527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba856020526040600020935060039150611432565b6010831615610c935760048101546000527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a193446020526040600020935060049150611432565b6020831615610cd85760058101546000527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d6020526040600020935060059150611432565b6040831615610d1d5760068101546000527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a19686020526040600020935060069150611432565b6080831615610d625760078101546000527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f836020526040600020935060079150611432565b610100831615610da85760088101546000527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6020526040600020935060089150611432565b610200831615610dee5760098101546000527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06020526040600020935060099150611432565b610400831615610e3457600a8101546000527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a560205260406000209350600a9150611432565b610800831615610e7a57600b8101546000527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf89260205260406000209350600b9150611432565b611000831615610ec057600c8101546000527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c60205260406000209350600c9150611432565b612000831615610f0657600d8101546000527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb60205260406000209350600d9150611432565b614000831615610f4c57600e8101546000527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc60205260406000209350600e9150611432565b618000831615610f9257600f8101546000527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d260205260406000209350600f9150611432565b62010000831615610fd95760108101546000527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6020526040600020935060109150611432565b620200008316156110205760118101546000527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6020526040600020935060119150611432565b620400008316156110675760128101546000527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06020526040600020935060129150611432565b620800008316156110ae5760138101546000527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06020526040600020935060139150611432565b621000008316156110f55760148101546000527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26020526040600020935060149150611432565b6220000083161561113c5760158101546000527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96020526040600020935060159150611432565b624000008316156111835760168101546000527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776020526040600020935060169150611432565b628000008316156111ca5760178101546000527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526020526040600020935060179150611432565b63010000008316156112125760188101546000527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6020526040600020935060189150611432565b630200000083161561125a5760198101546000527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6020526040600020935060199150611432565b63040000008316156112a257601a8101546000527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d060205260406000209350601a9150611432565b63080000008316156112ea57601b8101546000527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e60205260406000209350601b9150611432565b631000000083161561133257601c8101546000527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e60205260406000209350601c9150611432565b632000000083161561137a57601d8101546000527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea32260205260406000209350601d9150611432565b63400000008316156113c257601e8101546000527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d73560205260406000209350601e9150611432565b638000000083161561140a57601f8101546000527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a960205260406000209350601f9150611432565b7f27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d7579350602091505b601e8211611ed45760018210156114905760028316801561145e57600182015460005284602052611487565b846000527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb56020525b50604060002093505b60028210156114e6576004831680156114b4576002820154600052846020526114dd565b846000527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d306020525b50604060002093505b600382101561153c5760088316801561150a57600382015460005284602052611533565b846000527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba856020525b50604060002093505b60048210156115925760108316801561156057600482015460005284602052611589565b846000527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a193446020525b50604060002093505b60058210156115e8576020831680156115b6576005820154600052846020526115df565b846000527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d6020525b50604060002093505b600682101561163e5760408316801561160c57600682015460005284602052611635565b846000527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a19686020525b50604060002093505b6007821015611694576080831680156116625760078201546000528460205261168b565b846000527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f836020525b50604060002093505b60088210156116eb57610100831680156116b9576008820154600052846020526116e2565b846000527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6020525b50604060002093505b6009821015611742576102008316801561171057600982015460005284602052611739565b846000527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06020525b50604060002093505b600a821015611799576104008316801561176757600a82015460005284602052611790565b846000527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56020525b50604060002093505b600b8210156117f057610800831680156117be57600b820154600052846020526117e7565b846000527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926020525b50604060002093505b600c821015611847576110008316801561181557600c8201546000528460205261183e565b846000527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6020525b50604060002093505b600d82101561189e576120008316801561186c57600d82015460005284602052611895565b846000527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6020525b50604060002093505b600e8210156118f557614000831680156118c357600e820154600052846020526118ec565b846000527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6020525b50604060002093505b600f82101561194c576180008316801561191a57600f82015460005284602052611943565b846000527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26020525b50604060002093505b60108210156119a45762010000831680156119725760108201546000528460205261199b565b846000527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6020525b50604060002093505b60118210156119fc5762020000831680156119ca576011820154600052846020526119f3565b846000527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6020525b50604060002093505b6012821015611a54576204000083168015611a2257601282015460005284602052611a4b565b846000527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06020525b50604060002093505b6013821015611aac576208000083168015611a7a57601382015460005284602052611aa3565b846000527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06020525b50604060002093505b6014821015611b04576210000083168015611ad257601482015460005284602052611afb565b846000527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26020525b50604060002093505b6015821015611b5c576220000083168015611b2a57601582015460005284602052611b53565b846000527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96020525b50604060002093505b6016821015611bb4576240000083168015611b8257601682015460005284602052611bab565b846000527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776020525b50604060002093505b6017821015611c0c576280000083168015611bda57601782015460005284602052611c03565b846000527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526020525b50604060002093505b6018821015611c6557630100000083168015611c3357601882015460005284602052611c5c565b846000527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6020525b50604060002093505b6019821015611cbe57630200000083168015611c8c57601982015460005284602052611cb5565b846000527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6020525b50604060002093505b601a821015611d1757630400000083168015611ce557601a82015460005284602052611d0e565b846000527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06020525b50604060002093505b601b821015611d7057630800000083168015611d3e57601b82015460005284602052611d67565b846000527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6020525b50604060002093505b601c821015611dc957631000000083168015611d9757601c82015460005284602052611dc0565b846000527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6020525b50604060002093505b601d821015611e2257632000000083168015611df057601d82015460005284602052611e19565b846000527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226020525b50604060002093505b601e821015611e7b57634000000083168015611e4957601e82015460005284602052611e72565b846000527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356020525b50604060002093505b601f821015611ed457638000000083168015611ea257601f82015460005284602052611ecb565b846000527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96020525b50604060002093505b505050919050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b600054610100900460ff16611f515760405162461bcd60e51b815260040161040890612461565b6107bc81612005565b600054610100900460ff16611f815760405162461bcd60e51b815260040161040890612461565b61066a61204e565b600080546040516001600160a01b03808516936201000090930416917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03909216620100000262010000600160b01b0319909216919091178155600255600180546001600160a01b0319169055565b600054610100900460ff1661202c5760405162461bcd60e51b815260040161040890612461565b605380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff166120755760405162461bcd60e51b815260040161040890612461565b61066a33611f89565b82602081019282156120ac579160200282015b828111156120ac578251825591602001919060010190612091565b506120b89291506120fb565b5090565b6040518061040001604052806020906020820280368337509192915050565b60405180604001604052806120ee6120bc565b8152602001600081525090565b5b808211156120b857600081556001016120fc565b60006020828403121561212257600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061216157634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561217957600080fd5b81356001600160a01b038116811461219057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156121c057600080fd5b823567ffffffffffffffff808211156121d857600080fd5b818501915085601f8301126121ec57600080fd5b8135818111156121fe576121fe612197565b8060051b604051601f19603f8301168101818110858211171561222357612223612197565b60405291825284820192508381018501918883111561224157600080fd5b938501935b8285101561225f57843584529385019392850192612246565b98975050505050505050565b6104008101818360005b60208082106122845750612298565b825184529283019290910190600101612275565b50505092915050565b60208082526009908201526808585c989bdc9a5cdd60ba1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b8181101561232157845183529383019391830191600101612305565b509098975050505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b2057610b2061232f565b60006001820161236a5761236a61232f565b5060010190565b600181815b808511156123ac5781600019048211156123925761239261232f565b8085161561239f57918102915b93841c9390800290612376565b509250929050565b6000826123c357506001610b20565b816123d057506000610b20565b81600181146123e657600281146123f05761240c565b6001915050610b20565b60ff8411156124015761240161232f565b50506001821b610b20565b5060208310610133831016604e8410600b841016171561242f575081810a610b20565b6124398383612371565b806000190482111561244d5761244d61232f565b029392505050565b600061219083836123b4565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220d8fd23bc66342cfb7ffcc83eb59442a22f37304b0ba1f7863f21e45216e18abe64736f6c63430008110033";

type MerkleTreeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTreeManager__factory extends ContractFactory {
  constructor(...args: MerkleTreeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleTreeManager> {
    return super.deploy(overrides || {}) as Promise<MerkleTreeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleTreeManager {
    return super.attach(address) as MerkleTreeManager;
  }
  override connect(signer: Signer): MerkleTreeManager__factory {
    return super.connect(signer) as MerkleTreeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeManagerInterface {
    return new utils.Interface(_abi) as MerkleTreeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeManager {
    return new Contract(address, _abi, signerOrProvider) as MerkleTreeManager;
  }
}
