/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Conductor,
  ConductorInterface,
} from "../../../contracts/messaging/Conductor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "Conductor_dequeue__notQueued",
    type: "error",
  },
  {
    inputs: [],
    name: "Conductor_execute__callFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "Conductor_execute__cannotBypass",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "Conductor_execute__notElapsed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "Conductor_queue__alreadyQueued",
    type: "error",
  },
  {
    inputs: [],
    name: "Conductor_renounceOwnership__prohibited",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_noOwnershipChange",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_noProposal",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "BypassAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "BypassDequeued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "transactions",
        type: "bytes[]",
      },
    ],
    name: "Dequeued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "transactions",
        type: "bytes[]",
      },
    ],
    name: "Executed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposedOwner",
        type: "address",
      },
    ],
    name: "OwnershipProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "elapse",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "transactions",
        type: "bytes[]",
      },
    ],
    name: "Queued",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptProposedOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "bypassDelay",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "_transactions",
        type: "bytes[]",
      },
    ],
    name: "dequeue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
      {
        internalType: "uint8",
        name: "_operation",
        type: "uint8",
      },
    ],
    name: "dequeueBypass",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "_transactions",
        type: "bytes[]",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
      {
        internalType: "uint8",
        name: "_operation",
        type: "uint8",
      },
    ],
    name: "executeBypass",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "_transactions",
        type: "bytes[]",
      },
    ],
    name: "executeWithBypass",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newlyProposed",
        type: "address",
      },
    ],
    name: "proposeNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "_transactions",
        type: "bytes[]",
      },
    ],
    name: "queue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_target",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_selector",
        type: "bytes4",
      },
      {
        internalType: "uint8",
        name: "_operation",
        type: "uint8",
      },
    ],
    name: "queueBypass",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounced",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161118338038061118383398101604081905261002f916100a3565b6100388161003e565b506100d3565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b6000602082840312156100b557600080fd5b81516001600160a01b03811681146100cc57600080fd5b9392505050565b6110a1806100e26000396000f3fe6080604052600436106101025760003560e01c8063900f2c5811610095578063c5b350df11610064578063c5b350df146102a8578063d1851c92146102bd578063d232c220146102db578063d2a8deb1146102fa578063d56934021461031a57600080fd5b8063900f2c5814610208578063a72b2f2c14610228578063b1f8100d14610268578063be8654fd1461028857600080fd5b806365727ac3116100d157806365727ac3146101985780636a42b8f8146101ab578063715018a6146101c15780638da5cb5b146101d657600080fd5b80630c1a86dc1461010e57806332ed5b12146101305780633cf52ffb14610170578063444714151461018557600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e610129366004610be7565b61033a565b005b34801561013c57600080fd5b5061015d61014b366004610c45565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561017c57600080fd5b5060025461015d565b61012e610193366004610cf6565b6103f7565b61012e6101a6366004610cf6565b6104dd565b3480156101b757600080fd5b5062093a8061015d565b3480156101cd57600080fd5b5061012e61053e565b3480156101e257600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610167565b34801561021457600080fd5b5061012e610223366004610be7565b610582565b34801561023457600080fd5b50610258610243366004610c45565b60036020526000908152604090205460ff1681565b6040519015158152602001610167565b34801561027457600080fd5b5061012e610283366004610dfd565b610622565b34801561029457600080fd5b5061012e6102a3366004610cf6565b6106c3565b3480156102b457600080fd5b5061012e610793565b3480156102c957600080fd5b506001546001600160a01b03166101f0565b3480156102e757600080fd5b506000546001600160a01b031615610258565b34801561030657600080fd5b5061012e610315366004610cf6565b610805565b34801561032657600080fd5b5061012e610335366004610be7565b6108f0565b6000546001600160a01b03163314610365576040516311a8a1bb60e31b815260040160405180910390fd5b600160036000858560405160200161037e929190610e21565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055507fa75fa8869136355c1644cd379205fe104c3bbd766efe30fb99226c681954940683836040516103ea929190610e4d565b60405180910390a1505050565b6000546001600160a01b03163314610422576040516311a8a1bb60e31b815260040160405180910390fd5b6000816040516020016104359190610f01565b60408051601f198184030181529181528151602092830120600081815260049093529120549091504210156104855760405163134e106d60e01b8152600481018290526024015b60405180910390fd5b60008181526004602052604081208190556104a1908390610958565b807fa3c855af46d3753c60d07470731a76b0177c574365188c28b9fe82d578327026836040516104d19190610f01565b60405180910390a25050565b6000546001600160a01b03163314610508576040516311a8a1bb60e31b815260040160405180910390fd5b60008160405160200161051b9190610f01565b6040516020818303038152906040528051906020012090506104a1826001610958565b6000546001600160a01b03163314610569576040516311a8a1bb60e31b815260040160405180910390fd5b6040516379b3203b60e01b815260040160405180910390fd5b6000546001600160a01b031633146105ad576040516311a8a1bb60e31b815260040160405180910390fd5b6003600084846040516020016105c4929190610e21565b60408051601f1981840301815291815281516020928301208352908201929092528101600020805460ff19169055517f6b608c1e73cec5d3cfde3e60cf99de29ee4af5d681496a8097ee3d233fddaec0906103ea9085908590610e4d565b6000546001600160a01b0316331461064d576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b03828116911614801561066b575060025415155b15610689576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b038083169116036106b757604051634a2fb73f60e11b815260040160405180910390fd5b6106c081610a94565b50565b6000546001600160a01b031633146106ee576040516311a8a1bb60e31b815260040160405180910390fd5b6000816040516020016107019190610f01565b604051602081830303815290604052805190602001209050600460008281526020019081526020016000205460000361075057604051631e177be160e11b81526004810182905260240161047c565b600081815260046020526040808220919091555181907f1f2a1aaca9b49ed86efaa4d12996a62b1950035aa9c13386c734c26674b497f5906104d1908590610f01565b6001546001600160a01b031633146107be576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426107d09190610f2a565b116107ee576040516324e0285f60e21b815260040160405180910390fd5b600154610803906001600160a01b0316610ae2565b565b6000546001600160a01b03163314610830576040516311a8a1bb60e31b815260040160405180910390fd5b6000816040516020016108439190610f01565b60408051601f198184030181529181528151602092830120600081815260049093529120549091501561088c5760405163960a9baf60e01b81526004810182905260240161047c565b600061089b62093a8042610f43565b600083815260046020526040908190208290555190915082907fbeddd847ed3ecb7cbd3045051980123242b51e82144880ff83404a4de045329f906108e39084908790610f56565b60405180910390a2505050565b3330146103655760405162461bcd60e51b815260206004820152603060248201527f436f6e647563746f723a206f6e6c79207468697320636f6e747261637420636160448201526f6e20717565756520627970617373657360801b606482015260840161047c565b61271060005b8351811015610a8e57600084828151811061097b5761097b610f77565b60200260200101518060200190518101906109969190610f8d565b905060006109a982604001516020015190565b905060008260000151826040516020016109c4929190610e21565b6040516020818303038152906040528051906020012090508515610a2f5760008181526003602052604090205460ff16610a2f57825160405163f3ef73e960e01b81526001600160e01b0319841660048201526001600160a01b03909116602482015260440161047c565b6000610a568460000151875a610a459190610f2a565b866020015160008860400151610b47565b50905080610a7757604051634e96876760e01b815260040160405180910390fd5b505050508080610a8690611052565b91505061095e565b50505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b6000606060008060008661ffff1667ffffffffffffffff811115610b6d57610b6d610c5e565b6040519080825280601f01601f191660200182016040528015610b97576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115610bb8578692505b828152826000602083013e90999098509650505050505050565b6001600160a01b03811681146106c057600080fd5b600080600060608486031215610bfc57600080fd5b8335610c0781610bd2565b925060208401356001600160e01b031981168114610c2457600080fd5b9150604084013560ff81168114610c3a57600080fd5b809150509250925092565b600060208284031215610c5757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610c9757610c97610c5e565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610cc657610cc6610c5e565b604052919050565b600067ffffffffffffffff821115610ce857610ce8610c5e565b50601f01601f191660200190565b60006020808385031215610d0957600080fd5b823567ffffffffffffffff80821115610d2157600080fd5b818501915085601f830112610d3557600080fd5b813581811115610d4757610d47610c5e565b8060051b610d56858201610c9d565b9182528381018501918581019089841115610d7057600080fd5b86860192505b83831015610df057823585811115610d8e5760008081fd5b8601603f81018b13610da05760008081fd5b878101356040610db7610db283610cce565b610c9d565b8281528d82848601011115610dcc5760008081fd5b828285018c83013760009281018b0192909252508352509186019190860190610d76565b9998505050505050505050565b600060208284031215610e0f57600080fd5b8135610e1a81610bd2565b9392505050565b60609290921b6bffffffffffffffffffffffff191682526001600160e01b031916601482015260180190565b6001600160a01b039290921682526001600160e01b031916602082015260400190565b60005b83811015610e8b578181015183820152602001610e73565b50506000910152565b600081518084526020808501808196508360051b8101915082860160005b85811015610ef457828403895281518051808652610ed581888801898501610e70565b99860199601f01601f1916949094018501935090840190600101610eb2565b5091979650505050505050565b602081526000610e1a6020830184610e94565b634e487b7160e01b600052601160045260246000fd5b81810381811115610f3d57610f3d610f14565b92915050565b80820180821115610f3d57610f3d610f14565b828152604060208201526000610f6f6040830184610e94565b949350505050565b634e487b7160e01b600052603260045260246000fd5b60006020808385031215610fa057600080fd5b825167ffffffffffffffff80821115610fb857600080fd5b9084019060608287031215610fcc57600080fd5b610fd4610c74565b8251610fdf81610bd2565b81528284015184820152604083015182811115610ffb57600080fd5b80840193505086601f84011261101057600080fd5b82519150611020610db283610cce565b828152878584860101111561103457600080fd5b61104383868301878701610e70565b60408201529695505050505050565b60006001820161106457611064610f14565b506001019056fea26469706673582212208bc6bd526512fb587a723d522fc364e7e682860c4d3d82561b798b9423f029b664736f6c63430008110033";

type ConductorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConductorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Conductor__factory extends ContractFactory {
  constructor(...args: ConductorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Conductor> {
    return super.deploy(_owner, overrides || {}) as Promise<Conductor>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override attach(address: string): Conductor {
    return super.attach(address) as Conductor;
  }
  override connect(signer: Signer): Conductor__factory {
    return super.connect(signer) as Conductor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConductorInterface {
    return new utils.Interface(_abi) as ConductorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Conductor {
    return new Contract(address, _abi, signerOrProvider) as Conductor;
  }
}
