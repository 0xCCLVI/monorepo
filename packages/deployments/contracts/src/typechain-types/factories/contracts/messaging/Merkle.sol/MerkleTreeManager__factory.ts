/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MerkleTreeManager,
  MerkleTreeManagerInterface,
} from "../../../../contracts/messaging/Merkle.sol/MerkleTreeManager";

const _abi = [
  {
    inputs: [],
    name: "MerkleTreeManager__setArborist_zeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "arborist",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "branch",
    outputs: [
      {
        internalType: "bytes32[32]",
        name: "",
        type: "bytes32[32]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "insert",
    outputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newArborist",
        type: "address",
      },
    ],
    name: "setArborist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ce9806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806331d0913c1161005b57806331d0913c146100d65780634b72d0d414610101578063ebf0c71714610116578063fd54b2281461011e57600080fd5b806306661abd146100825780631b373a98146100995780632d287e43146100ae575b600080fd5b6021545b6040519081526020015b60405180910390f35b6100ac6100a7366004610a98565b610128565b005b6100c16100bc366004610ac8565b6101b9565b60408051928352602083019190915201610090565b6022546100e9906001600160a01b031681565b6040516001600160a01b039091168152602001610090565b61010961028a565b6040516100909190610ae1565b6100866102c6565b6021546100869081565b6022546001600160a01b031633146101705760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064015b60405180910390fd5b6001600160a01b03811661019757604051630c11a52d60e11b815260040160405180910390fd5b602280546001600160a01b0319166001600160a01b0392909216919091179055565b60225460009081906001600160a01b031633146102015760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401610167565b6040805161044081018083526000926001918391820190839060209082845b8154815260200190600101908083116102205750505091835250506020918201549101529050610250818561031e565b905061025b8161045a565b602080830151835192955093508291600191610278918391610a06565b50602091820151910155509092909150565b610292610a44565b604080516104008101918290529060019060209082845b8154815260200190600101908083116102a9575050505050905090565b604080516104408101808352600092839291600191839190820190839060209082845b8154815260200190600101908083116102e957505050918352505060209182015491015290506103188161045a565b91505090565b610326610a63565b600161033460206002610c11565b61033e9190610c1d565b8360200151106103835760405162461bcd60e51b815260206004820152601060248201526f1b595c9adb19481d1c995948199d5b1b60821b6044820152606401610167565b6001836020018181516103969190610c34565b905250602083015160005b602081101561044657816001166001036103da578451849082602081106103ca576103ca610c4c565b6020020152508391506104549050565b845181602081106103ed576103ed610c4c565b60200201518460405160200161040d929190918252602082015260400190565b6040516020818303038152906040528051906020012093506002826104329190610c62565b91508061043e81610c84565b9150506103a1565b5061044f610c9d565b839150505b92915050565b60006104548261046861046d565b61092e565b610475610a44565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820151600090815b60208110156109fe578451600183831c1690600090836020811061095e5761095e610c4c565b602002015190508160010361099e5760408051602081018390529081018690526060016040516020818303038152906040528051906020012094506109e9565b848684602081106109b1576109b1610c4c565b60200201516040516020016109d0929190918252602082015260400190565b6040516020818303038152906040528051906020012094505b505080806109f690610c84565b915050610938565b505092915050565b8260208101928215610a34579160200282015b82811115610a34578251825591602001919060010190610a19565b50610a40929150610a83565b5090565b6040518061040001604052806020906020820280368337509192915050565b6040518060400160405280610a76610a44565b8152602001600081525090565b5b80821115610a405760008155600101610a84565b600060208284031215610aaa57600080fd5b81356001600160a01b0381168114610ac157600080fd5b9392505050565b600060208284031215610ada57600080fd5b5035919050565b6104008101818360005b6020808210610afa5750610b0e565b825184529283019290910190600101610aeb565b50505092915050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610b68578160001904821115610b4e57610b4e610b17565b80851615610b5b57918102915b93841c9390800290610b32565b509250929050565b600082610b7f57506001610454565b81610b8c57506000610454565b8160018114610ba25760028114610bac57610bc8565b6001915050610454565b60ff841115610bbd57610bbd610b17565b50506001821b610454565b5060208310610133831016604e8410600b8410161715610beb575081810a610454565b610bf58383610b2d565b8060001904821115610c0957610c09610b17565b029392505050565b6000610ac18383610b70565b600082821015610c2f57610c2f610b17565b500390565b60008219821115610c4757610c47610b17565b500190565b634e487b7160e01b600052603260045260246000fd5b600082610c7f57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201610c9657610c96610b17565b5060010190565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220ea283f93b90f199e01ad9a36ed531e202d66be3cf73e73e303dd6a194f63381664736f6c634300080f0033";

type MerkleTreeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTreeManager__factory extends ContractFactory {
  constructor(...args: MerkleTreeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleTreeManager> {
    return super.deploy(overrides || {}) as Promise<MerkleTreeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleTreeManager {
    return super.attach(address) as MerkleTreeManager;
  }
  override connect(signer: Signer): MerkleTreeManager__factory {
    return super.connect(signer) as MerkleTreeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeManagerInterface {
    return new utils.Interface(_abi) as MerkleTreeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeManager {
    return new Contract(address, _abi, signerOrProvider) as MerkleTreeManager;
  }
}
