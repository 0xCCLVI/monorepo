/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MerkleTreeManager,
  MerkleTreeManagerInterface,
} from "../../../../contracts/messaging/Merkle.sol/MerkleTreeManager";

const _abi = [
  {
    inputs: [],
    name: "MerkleLib__insert_treeIsFull",
    type: "error",
  },
  {
    inputs: [],
    name: "MerkleTreeManager__setArborist_alreadyArborist",
    type: "error",
  },
  {
    inputs: [],
    name: "MerkleTreeManager__setArborist_zeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__proposeNewOwner_noOwnershipChange",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_delayNotElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_invalidProposal",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposedOwnable__renounceOwnership_noProposal",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposedOwner",
        type: "address",
      },
    ],
    name: "OwnershipProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptProposedOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "arborists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "branch",
    outputs: [
      {
        internalType: "bytes32[32]",
        name: "",
        type: "bytes32[32]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "delay",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_arborist",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "insert",
    outputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "leaves",
        type: "bytes32[]",
      },
    ],
    name: "insert",
    outputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newlyProposed",
        type: "address",
      },
    ],
    name: "proposeNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposedTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounced",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newArborist",
        type: "address",
      },
    ],
    name: "setArborist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tree",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506112e0806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063754b3b3b116100a2578063c5b350df11610071578063c5b350df14610229578063d1851c9214610231578063d232c22014610242578063ebf0c7171461025b578063fd54b2281461026357600080fd5b8063754b3b3b146101a55780638da5cb5b146101d8578063b1f8100d14610203578063c4d66de81461021657600080fd5b80633cf52ffb116100de5780633cf52ffb146101775780634b72d0d41461017f5780636a42b8f814610194578063715018a61461019d57600080fd5b806306661abd146101105780631b373a98146101275780632d287e431461013c57806334a55ee614610164575b600080fd5b6054545b6040519081526020015b60405180910390f35b61013a610135366004610f9f565b61026d565b005b61014f61014a366004610fcf565b610323565b6040805192835260208301919091520161011e565b61014f610172366004610ffe565b610393565b600254610114565b61018761043a565b60405161011e91906110bc565b62093a80610114565b61013a610476565b6101c86101b3366004610f9f565b60556020526000908152604090205460ff1681565b604051901515815260200161011e565b6000546201000090046001600160a01b03165b6040516001600160a01b03909116815260200161011e565b61013a610211366004610f9f565b61053b565b61013a610224366004610f9f565b6105ef565b61013a61070a565b6001546001600160a01b03166101eb565b6101c86000546201000090046001600160a01b03161590565b610114610765565b6054546101149081565b6000546201000090046001600160a01b0316331461029e576040516311a8a1bb60e31b815260040160405180910390fd5b6001600160a01b0381166102c557604051630c11a52d60e11b815260040160405180910390fd5b6001600160a01b03811660009081526055602052604090205460ff16156102ff5760405163606e957b60e11b815260040160405180910390fd5b6001600160a01b03166000908152605560205260409020805460ff19166001179055565b33600090815260556020526040812054819060ff166103755760405162461bcd60e51b815260206004820152600960248201526808585c989bdc9a5cdd60ba1b60448201526064015b60405180910390fd5b610380603484610776565b905061038c6034610875565b9150915091565b33600090815260556020526040812054819060ff166103e05760405162461bcd60e51b815260206004820152600960248201526808585c989bdc9a5cdd60ba1b604482015260640161036c565b60005b835181101561042257610419848281518110610401576104016110f2565b6020026020010151603461077690919063ffffffff16565b506001016103e3565b5061042d6034610875565b6054549094909350915050565b610442610f80565b604080516104008101918290529060349060209082845b815481526020019060010190808311610459575050505050905090565b6000546201000090046001600160a01b031633146104a7576040516311a8a1bb60e31b815260040160405180910390fd5b6002546000036104ca57604051630e4b303f60e21b815260040160405180910390fd5b62093a80600254426104dc919061111e565b116104fa576040516386d4b3f160e01b815260040160405180910390fd5b6001546001600160a01b031615610524576040516323295ef960e01b815260040160405180910390fd5b600154610539906001600160a01b0316610888565b565b6000546201000090046001600160a01b0316331461056c576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b03828116911614801561059157506001600160a01b03811615155b156105af576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b038083166201000090920416036105e357604051634a2fb73f60e11b815260040160405180910390fd5b6105ec816108f8565b50565b600054610100900460ff161580801561060f5750600054600160ff909116105b806106295750303b158015610629575060005460ff166001145b61068c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161036c565b6000805460ff1916600117905580156106af576000805461ff0019166101001790555b6106b882610946565b6106c0610976565b8015610706576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6001546001600160a01b03163314610735576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610747919061111e565b116105245760405163d39c12bb60e01b815260040160405180910390fd5b60006107716034610875565b905090565b6000808360200154600161078a9190611135565b9050600161079a60206002611231565b6107a4919061111e565b81106107c357604051638eab04bb60e01b815260040160405180910390fd5b6020840181905560005b602081101561085557816001166001036107fe57838582602081106107f4576107f46110f2565b015550905061086f565b848160208110610810576108106110f2565b0154604080516020810192909252810185905260600160405160208183030381529060405280519060200120935060028261084b919061123d565b91506001016107cd565b50604051638eab04bb60e01b815260040160405180910390fd5b92915050565b600061086f826108836109a5565b610e66565b600080546001600160a01b038381166201000081810262010000600160b01b031985161785556002859055600180546001600160a01b031916905560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b600054610100900460ff1661096d5760405162461bcd60e51b815260040161036c9061125f565b6105ec81610f29565b600054610100900460ff1661099d5760405162461bcd60e51b815260040161036c9061125f565b610539610f50565b6109ad610f80565b600081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb560208201527fb4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d3060408201527f21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba8560608201527fe58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a1934460808201527f0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d60a08201527f887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a196860c08201527fffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f8360e08201527f9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af6101008201527fcefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e06101208201527ff9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a56101408201527ff8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf8926101608201527f3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c6101808201527fc1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb6101a08201527f5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc6101c08201527fda7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d26101e08201527f2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f6102008201527fe1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a6102208201527f5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a06102408201527fb46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa06102608201527fc65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e26102808201527ff4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd96102a08201527f5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e3776102c08201527f4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee6526102e08201527fcdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef6103008201527f0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d6103208201527fb8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d06103408201527f838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e6103608201527f662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e6103808201527f388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea3226103a08201527f93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d7356103c08201527f8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a96103e082015290565b6020820154600090815b6020811015610f2157600182821c811690819003610ecd57858260208110610e9a57610e9a6110f2565b01546040805160208101929092528101859052606001604051602081830303815290604052805190602001209350610f18565b83858360208110610ee057610ee06110f2565b6020020151604051602001610eff929190918252602082015260400190565b6040516020818303038152906040528051906020012093505b50600101610e70565b505092915050565b600054610100900460ff166102ff5760405162461bcd60e51b815260040161036c9061125f565b600054610100900460ff16610f775760405162461bcd60e51b815260040161036c9061125f565b61053933610888565b6040518061040001604052806020906020820280368337509192915050565b600060208284031215610fb157600080fd5b81356001600160a01b0381168114610fc857600080fd5b9392505050565b600060208284031215610fe157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561101157600080fd5b823567ffffffffffffffff8082111561102957600080fd5b818501915085601f83011261103d57600080fd5b81358181111561104f5761104f610fe8565b8060051b604051601f19603f8301168101818110858211171561107457611074610fe8565b60405291825284820192508381018501918883111561109257600080fd5b938501935b828510156110b057843584529385019392850192611097565b98975050505050505050565b6104008101818360005b60208082106110d557506110e9565b8251845292830192909101906001016110c6565b50505092915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561113057611130611108565b500390565b6000821982111561114857611148611108565b500190565b600181815b8085111561118857816000190482111561116e5761116e611108565b8085161561117b57918102915b93841c9390800290611152565b509250929050565b60008261119f5750600161086f565b816111ac5750600061086f565b81600181146111c257600281146111cc576111e8565b600191505061086f565b60ff8411156111dd576111dd611108565b50506001821b61086f565b5060208310610133831016604e8410600b841016171561120b575081810a61086f565b611215838361114d565b806000190482111561122957611229611108565b029392505050565b6000610fc88383611190565b60008261125a57634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212207f1e530adffda1b8237eb37ddbfffd049fccc80aff854488f8edfc31aad9ae3d64736f6c634300080f0033";

type MerkleTreeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTreeManager__factory extends ContractFactory {
  constructor(...args: MerkleTreeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MerkleTreeManager> {
    return super.deploy(overrides || {}) as Promise<MerkleTreeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MerkleTreeManager {
    return super.attach(address) as MerkleTreeManager;
  }
  override connect(signer: Signer): MerkleTreeManager__factory {
    return super.connect(signer) as MerkleTreeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeManagerInterface {
    return new utils.Interface(_abi) as MerkleTreeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTreeManager {
    return new Contract(address, _abi, signerOrProvider) as MerkleTreeManager;
  }
}
