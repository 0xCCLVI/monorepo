/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  NomadFacet,
  NomadFacetInterface,
} from "../../../../../contracts/core/connext/facets/NomadFacet";

const _abi = [
  {
    inputs: [],
    name: "BaseConnextFacet__nonReentrant_reentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyBridgeRouter_notBridgeRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyOwner_notOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__onlyProposed_notProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "BaseConnextFacet__whenNotPaused_paused",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_alreadyReconciled",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_noPortalRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__reconcile_notConnext",
    type: "error",
  },
  {
    inputs: [],
    name: "NomadFacet__setBridgeRouter_invalidBridge",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldBridgeRouter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newBridgeRouter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "BridgeRouterUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "routers",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Reconciled",
    type: "event",
  },
  {
    inputs: [],
    name: "bridgeRouter",
    outputs: [
      {
        internalType: "contract IBridgeRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_origin",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "_sender",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_localToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_extraData",
        type: "bytes",
      },
    ],
    name: "onReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridgeRouter",
        type: "address",
      },
    ],
    name: "setBridgeRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610758806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063048494fe1461004657806341af5b521461005b5780636df420071461007a575b600080fd5b6100596100543660046104d0565b61008d565b005b601054604080516001600160a01b039092168252519081900360200190f35b6100596100883660046105d0565b61039b565b6010546001600160a01b031633146100b8576040516376b55ce560e11b815260040160405180910390fd5b8515806100da575063ffffffff87166000908152601160205260409020548614155b156100f85760405163293e406f60e01b815260040160405180910390fd5b6000610103826105f2565b60008181526009602052604090205490915060ff161561013657604051630b7907a560e11b815260040160405180910390fd5b6000818152600960209081526040808320805460ff19166001179055600a8252808320805482518185028101850190935280835291929091908301828280156101a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161018a575b505050600085815260246020908152604080832054602390925282205494955090936101d7935090915061062f565b825190915081158015906101ec575080600114155b1561020a57604051636c32bf4760e11b815260040160405180910390fd5b801561035057600061021c828861065d565b905060005b61022c600184610671565b8110156102b457816000600b01600087848151811061024d5761024d610688565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546102a7919061062f565b9091555050600101610221565b5060006102c1838961069e565b6102cb908361062f565b905080600b6000876102de600188610671565b815181106102ee576102ee610688565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254610348919061062f565b909155505050505b837f65aed8d9be32292379e4349568db3564ca2d746067162a68c96b4205cc951f4f8489893360405161038694939291906106b2565b60405180910390a25050505050505050505050565b336103cd7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6001600160a01b0316146103f4576040516314e74a2560e21b815260040160405180910390fd5b6010546001600160a01b03908116908216810361042457604051632441878f60e11b815260040160405180910390fd5b601080546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915233908201527f9beaae476d204e448e87faaeb2d2f4cea9049c7f62c3669c9e1ed81cd7d4cdb19060600160405180910390a15050565b803563ffffffff8116811461049e57600080fd5b919050565b80356001600160a01b038116811461049e57600080fd5b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a0312156104eb57600080fd5b6104f48861048a565b9650602088013595506105096040890161048a565b94506060880135935061051e608089016104a3565b925060a0880135915060c088013567ffffffffffffffff8082111561054257600080fd5b818a0191508a601f83011261055657600080fd5b813581811115610568576105686104ba565b604051601f8201601f19908116603f01168101908382118183101715610590576105906104ba565b816040528281528d60208487010111156105a957600080fd5b82602086016020830137600060208483010152809550505050505092959891949750929550565b6000602082840312156105e257600080fd5b6105eb826104a3565b9392505050565b80516020808301519190811015610613576000198160200360031b1b821691505b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561064257610642610619565b500190565b634e487b7160e01b600052601260045260246000fd5b60008261066c5761066c610647565b500490565b60008282101561068357610683610619565b500390565b634e487b7160e01b600052603260045260246000fd5b6000826106ad576106ad610647565b500690565b6080808252855190820181905260009060209060a0840190828901845b828110156106f45781516001600160a01b0316845292840192908401906001016106cf565b5050506001600160a01b0396871691840191909152604083019490945250921660609092019190915291905056fea26469706673582212209fdeb455298792df2b5457d132f81751887d24b7eaa0b822e360e0df1377a3dc64736f6c634300080f0033";

type NomadFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NomadFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NomadFacet__factory extends ContractFactory {
  constructor(...args: NomadFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NomadFacet> {
    return super.deploy(overrides || {}) as Promise<NomadFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NomadFacet {
    return super.attach(address) as NomadFacet;
  }
  override connect(signer: Signer): NomadFacet__factory {
    return super.connect(signer) as NomadFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NomadFacetInterface {
    return new utils.Interface(_abi) as NomadFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NomadFacet {
    return new Contract(address, _abi, signerOrProvider) as NomadFacet;
  }
}
