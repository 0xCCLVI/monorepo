/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ConnextPoolLiquidity,
  ConnextPoolLiquidityInterface,
} from "../../../../contracts/core/xreceivers/ConnextPoolLiquidity";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_connext",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "transferId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "lp",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "deposited",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "CrossLiquidityAdded",
    type: "event",
  },
  {
    inputs: [],
    name: "connext",
    outputs: [
      {
        internalType: "contract IConnext",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_transferId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "_callData",
        type: "bytes",
      },
    ],
    name: "xReceive",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c17380380610c1783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610b84806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063de4b05481461003b578063fd614f411461006b575b600080fd5b60005461004e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61007e610079366004610882565b61008b565b60405161006291906109d6565b6000546060906001600160a01b031633146100d85760405162461bcd60e51b81526020600482015260086024820152670858dbdb9b995e1d60c21b60448201526064015b60405180910390fd5b6000828060200190518101906100ee91906109f0565b90506001600160a01b0381166101335760405162461bcd60e51b815260206004820152600a602482015269085c9958da5c1a595b9d60b21b60448201526064016100cf565b60408051600280825260608201835260009283929190602083019080368337019050509050888160008151811061016c5761016c610a0d565b60200260200101818152505060008160018151811061018d5761018d610a0d565b6020908102919091010152600080546040516345a4058960e11b8152600481018590526001600160a01b0390911690638b480b1290602401602060405180830381865afa1580156101e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020691906109f0565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102749190610a23565b600054909150610291906001600160a01b038c811691168d610475565b600054604051633b65172960e11b81526001600160a01b0390911690638d365457908690869084906376ca2e52906102d29085908590600190600401610a77565b602060405180830381865afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103139190610a23565b61031e426001610ab8565b6040518563ffffffff1660e01b815260040161033d9493929190610ad1565b6020604051808303816000875af115801561035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103809190610a23565b506040516370a0823160e01b815230600482015260009082906001600160a01b038516906370a0823190602401602060405180830381865afa1580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610a23565b6103f89190610afd565b905061040e6001600160a01b03841687836105c2565b604080518e81526001600160a01b038581166020830152818301849052606082018f90528816608082015290517fb565b062ea74fb34044cf37ff4ee3e049ad9a362ec0a99a391ee6fd362b8f7b99181900360a00190a15050505050509695505050505050565b8015806104ef5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190610a23565b155b61055a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016100cf565b6040516001600160a01b0383166024820152604481018290526105bd90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526105f2565b505050565b6040516001600160a01b0383166024820152604481018290526105bd90849063a9059cbb60e01b90606401610586565b6000610647826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106c49092919063ffffffff16565b8051909150156105bd57808060200190518101906106659190610b10565b6105bd5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100cf565b60606106d384846000856106db565b949350505050565b60608247101561073c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100cf565b600080866001600160a01b031685876040516107589190610b32565b60006040518083038185875af1925050503d8060008114610795576040519150601f19603f3d011682016040523d82523d6000602084013e61079a565b606091505b50915091506107ab878383876107b6565b979650505050505050565b6060831561082557825160000361081e576001600160a01b0385163b61081e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100cf565b50816106d3565b6106d3838381511561083a5781518083602001fd5b8060405162461bcd60e51b81526004016100cf91906109d6565b6001600160a01b038116811461086957600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561089b57600080fd5b863595506020870135945060408701356108b481610854565b935060608701356108c481610854565b9250608087013563ffffffff811681146108dd57600080fd5b915060a087013567ffffffffffffffff808211156108fa57600080fd5b818901915089601f83011261090e57600080fd5b8135818111156109205761092061086c565b604051601f8201601f19908116603f011681019083821181831017156109485761094861086c565b816040528281528c602084870101111561096157600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b60005b838110156109a1578181015183820152602001610989565b50506000910152565b600081518084526109c2816020860160208601610986565b601f01601f19169290920160200192915050565b6020815260006109e960208301846109aa565b9392505050565b600060208284031215610a0257600080fd5b81516109e981610854565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a3557600080fd5b5051919050565b600081518084526020808501945080840160005b83811015610a6c57815187529582019590820190600101610a50565b509495945050505050565b838152606060208201526000610a906060830185610a3c565b90508215156040830152949350505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610acb57610acb610aa2565b92915050565b848152608060208201526000610aea6080830186610a3c565b6040830194909452506060015292915050565b81810381811115610acb57610acb610aa2565b600060208284031215610b2257600080fd5b815180151581146109e957600080fd5b60008251610b44818460208701610986565b919091019291505056fea26469706673582212201b950bdd35b29c4bc03a9b5fffff16e56353b8a0bac45533c6ac9b99cd71271f64736f6c63430008110033";

type ConnextPoolLiquidityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnextPoolLiquidityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnextPoolLiquidity__factory extends ContractFactory {
  constructor(...args: ConnextPoolLiquidityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _connext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ConnextPoolLiquidity> {
    return super.deploy(
      _connext,
      overrides || {}
    ) as Promise<ConnextPoolLiquidity>;
  }
  override getDeployTransaction(
    _connext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_connext, overrides || {});
  }
  override attach(address: string): ConnextPoolLiquidity {
    return super.attach(address) as ConnextPoolLiquidity;
  }
  override connect(signer: Signer): ConnextPoolLiquidity__factory {
    return super.connect(signer) as ConnextPoolLiquidity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnextPoolLiquidityInterface {
    return new utils.Interface(_abi) as ConnextPoolLiquidityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnextPoolLiquidity {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConnextPoolLiquidity;
  }
}
