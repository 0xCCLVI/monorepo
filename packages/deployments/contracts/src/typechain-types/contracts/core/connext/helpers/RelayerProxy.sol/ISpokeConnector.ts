/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace ISpokeConnector {
  export type ProofStruct = {
    message: PromiseOrValue<BytesLike>;
    path: PromiseOrValue<BytesLike>[];
    index: PromiseOrValue<BigNumberish>;
  };

  export type ProofStructOutput = [string, string[], BigNumber] & {
    message: string;
    path: string[];
    index: BigNumber;
  };
}

export interface ISpokeConnectorInterface extends utils.Interface {
  functions: {
    "allowlistedProposers(address)": FunctionFragment;
    "proposeAggregateRoot(bytes32,uint256)": FunctionFragment;
    "proveAndProcess((bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256)": FunctionFragment;
    "send(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowlistedProposers"
      | "proposeAggregateRoot"
      | "proveAndProcess"
      | "send"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowlistedProposers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAggregateRoot",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proveAndProcess",
    values: [
      ISpokeConnector.ProofStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowlistedProposers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAggregateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveAndProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;

  events: {};
}

export interface ISpokeConnector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISpokeConnectorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowlistedProposers(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowlistedProposers(
    _proposer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposeAggregateRoot(
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _rootTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proveAndProcess(
    _proofs: ISpokeConnector.ProofStruct[],
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _aggregatePath: PromiseOrValue<BytesLike>[],
    _aggregateIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    _encodedData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowlistedProposers(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allowlistedProposers(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowlistedProposers(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proveAndProcess(
      _proofs: ISpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
