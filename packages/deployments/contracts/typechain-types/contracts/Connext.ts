/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace IConnext {
  export type CallParamsStruct = {
    to: string;
    callData: BytesLike;
    originDomain: BigNumberish;
    destinationDomain: BigNumberish;
  };

  export type CallParamsStructOutput = [string, string, number, number] & {
    to: string;
    callData: string;
    originDomain: number;
    destinationDomain: number;
  };

  export type ExecutedTransferStruct = { router: string; amount: BigNumberish };

  export type ExecutedTransferStructOutput = [string, BigNumber] & {
    router: string;
    amount: BigNumber;
  };

  export type ExecuteArgsStruct = {
    params: IConnext.CallParamsStruct;
    local: string;
    router: string;
    feePercentage: BigNumberish;
    amount: BigNumberish;
    nonce: BigNumberish;
    relayerSignature: BytesLike;
    originSender: string;
  };

  export type ExecuteArgsStructOutput = [
    IConnext.CallParamsStructOutput,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    params: IConnext.CallParamsStructOutput;
    local: string;
    router: string;
    feePercentage: number;
    amount: BigNumber;
    nonce: BigNumber;
    relayerSignature: string;
    originSender: string;
  };

  export type XCallArgsStruct = {
    params: IConnext.CallParamsStruct;
    transactingAssetId: string;
    amount: BigNumberish;
  };

  export type XCallArgsStructOutput = [
    IConnext.CallParamsStructOutput,
    string,
    BigNumber
  ] & {
    params: IConnext.CallParamsStructOutput;
    transactingAssetId: string;
    amount: BigNumber;
  };
}

export declare namespace BridgeMessage {
  export type TokenIdStruct = { domain: BigNumberish; id: BytesLike };

  export type TokenIdStructOutput = [number, string] & {
    domain: number;
    id: string;
  };
}

export interface ConnextInterface extends utils.Interface {
  functions: {
    "acceptProposedOwner()": FunctionFragment;
    "acceptProposedRouterOwner(address)": FunctionFragment;
    "addLiquidity(uint256,address)": FunctionFragment;
    "addLiquidityFor(uint256,address,address)": FunctionFragment;
    "addRelayerFees(address)": FunctionFragment;
    "addStableSwapPool((uint32,bytes32),address)": FunctionFragment;
    "adoptedToCanonical(address)": FunctionFragment;
    "adoptedToLocalPools(bytes32)": FunctionFragment;
    "approvedAssets(bytes32)": FunctionFragment;
    "approvedRouters(address)": FunctionFragment;
    "assetOwnershipTimestamp()": FunctionFragment;
    "bridgeRouter()": FunctionFragment;
    "canonicalToAdopted(bytes32)": FunctionFragment;
    "delay()": FunctionFragment;
    "domain()": FunctionFragment;
    "execute(((address,bytes,uint32,uint32),address,address,uint32,uint256,uint256,bytes,address))": FunctionFragment;
    "executor()": FunctionFragment;
    "initialize(uint256,address,address,address)": FunctionFragment;
    "isAssetOwnershipRenounced()": FunctionFragment;
    "isRouterOwnershipRenounced()": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeAssetOwnershipRenunciation()": FunctionFragment;
    "proposeNewOwner(address)": FunctionFragment;
    "proposeRouterOwner(address,address)": FunctionFragment;
    "proposeRouterOwnershipRenunciation()": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedRouterOwners(address)": FunctionFragment;
    "proposedRouterTimestamp(address)": FunctionFragment;
    "proposedTimestamp()": FunctionFragment;
    "reconcile(bytes32,address,address,uint256)": FunctionFragment;
    "reconciledTransfers(bytes32)": FunctionFragment;
    "removeAssetId(bytes32,address)": FunctionFragment;
    "removeLiquidity(uint256,address,address)": FunctionFragment;
    "removeRelayerFees(uint256,address)": FunctionFragment;
    "removeRouter(address)": FunctionFragment;
    "renounceAssetOwnership()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRouterOwnership()": FunctionFragment;
    "renounced()": FunctionFragment;
    "routedTransfers(bytes32)": FunctionFragment;
    "routedTransfersGas(bytes32)": FunctionFragment;
    "routerBalances(address,address)": FunctionFragment;
    "routerOwners(address)": FunctionFragment;
    "routerOwnershipTimestamp()": FunctionFragment;
    "routerRecipients(address)": FunctionFragment;
    "routerRelayerFees(address)": FunctionFragment;
    "setRouterRecipient(address,address)": FunctionFragment;
    "setupAsset((uint32,bytes32),address,address)": FunctionFragment;
    "setupRouter(address,address,address)": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
    "wrapper()": FunctionFragment;
    "xcall(((address,bytes,uint32,uint32),address,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptProposedOwner"
      | "acceptProposedRouterOwner"
      | "addLiquidity"
      | "addLiquidityFor"
      | "addRelayerFees"
      | "addStableSwapPool"
      | "adoptedToCanonical"
      | "adoptedToLocalPools"
      | "approvedAssets"
      | "approvedRouters"
      | "assetOwnershipTimestamp"
      | "bridgeRouter"
      | "canonicalToAdopted"
      | "delay"
      | "domain"
      | "execute"
      | "executor"
      | "initialize"
      | "isAssetOwnershipRenounced"
      | "isRouterOwnershipRenounced"
      | "nonce"
      | "owner"
      | "proposeAssetOwnershipRenunciation"
      | "proposeNewOwner"
      | "proposeRouterOwner"
      | "proposeRouterOwnershipRenunciation"
      | "proposed"
      | "proposedRouterOwners"
      | "proposedRouterTimestamp"
      | "proposedTimestamp"
      | "reconcile"
      | "reconciledTransfers"
      | "removeAssetId"
      | "removeLiquidity"
      | "removeRelayerFees"
      | "removeRouter"
      | "renounceAssetOwnership"
      | "renounceOwnership"
      | "renounceRouterOwnership"
      | "renounced"
      | "routedTransfers"
      | "routedTransfersGas"
      | "routerBalances"
      | "routerOwners"
      | "routerOwnershipTimestamp"
      | "routerRecipients"
      | "routerRelayerFees"
      | "setRouterRecipient"
      | "setupAsset"
      | "setupRouter"
      | "tokenRegistry"
      | "wrapper"
      | "xcall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptProposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityFor",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayerFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStableSwapPool",
    values: [BridgeMessage.TokenIdStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adoptedToCanonical",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adoptedToLocalPools",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedAssets",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRouters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetOwnershipTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canonicalToAdopted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(functionFragment: "domain", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [IConnext.ExecuteArgsStruct]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetOwnershipRenounced",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRouterOwnershipRenounced",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeAssetOwnershipRenunciation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwnershipRenunciation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedRouterOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedRouterTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reconcile",
    values: [BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reconciledTransfers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayerFees",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAssetOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRouterOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renounced", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "routedTransfers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routedTransfersGas",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "routerBalances",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerOwnershipTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerRecipients",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerRelayerFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAsset",
    values: [BridgeMessage.TokenIdStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupRouter",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wrapper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xcall",
    values: [IConnext.XCallArgsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRelayerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStableSwapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adoptedToCanonical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adoptedToLocalPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetOwnershipTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonicalToAdopted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetOwnershipRenounced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRouterOwnershipRenounced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeAssetOwnershipRenunciation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwnershipRenunciation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedRouterOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedRouterTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reconcile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reconciledTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAssetOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRouterOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renounced", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routedTransfersGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerOwnershipTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerRelayerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xcall", data: BytesLike): Result;

  events: {
    "AssetAdded(bytes32,uint32,address,address,address)": EventFragment;
    "AssetOwnershipRenounced(bool)": EventFragment;
    "AssetOwnershipRenunciationProposed(uint256)": EventFragment;
    "AssetRemoved(bytes32,address)": EventFragment;
    "Executed(bytes32,address,address,tuple,address,address,uint256,uint256,address)": EventFragment;
    "LiquidityAdded(address,address,bytes32,uint256,address)": EventFragment;
    "LiquidityRemoved(address,address,address,uint256,address)": EventFragment;
    "OwnershipProposed(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Reconciled(bytes32,address,address,address,uint256,tuple,address)": EventFragment;
    "RouterAdded(address,address)": EventFragment;
    "RouterOwnerAccepted(address,address,address)": EventFragment;
    "RouterOwnerProposed(address,address,address)": EventFragment;
    "RouterOwnershipRenounced(bool)": EventFragment;
    "RouterOwnershipRenunciationProposed(uint256)": EventFragment;
    "RouterRecipientSet(address,address,address)": EventFragment;
    "RouterRemoved(address,address)": EventFragment;
    "StableSwapAdded(bytes32,uint32,address,address)": EventFragment;
    "XCalled(bytes32,address,tuple,address,address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetOwnershipRenounced"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetOwnershipRenunciationProposed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reconciled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnerAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnerProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnershipRenounced"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RouterOwnershipRenunciationProposed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableSwapAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XCalled"): EventFragment;
}

export interface AssetAddedEventObject {
  canonicalId: string;
  domain: number;
  adoptedAsset: string;
  supportedAsset: string;
  caller: string;
}
export type AssetAddedEvent = TypedEvent<
  [string, number, string, string, string],
  AssetAddedEventObject
>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export interface AssetOwnershipRenouncedEventObject {
  renounced: boolean;
}
export type AssetOwnershipRenouncedEvent = TypedEvent<
  [boolean],
  AssetOwnershipRenouncedEventObject
>;

export type AssetOwnershipRenouncedEventFilter =
  TypedEventFilter<AssetOwnershipRenouncedEvent>;

export interface AssetOwnershipRenunciationProposedEventObject {
  timestamp: BigNumber;
}
export type AssetOwnershipRenunciationProposedEvent = TypedEvent<
  [BigNumber],
  AssetOwnershipRenunciationProposedEventObject
>;

export type AssetOwnershipRenunciationProposedEventFilter =
  TypedEventFilter<AssetOwnershipRenunciationProposedEvent>;

export interface AssetRemovedEventObject {
  canonicalId: string;
  caller: string;
}
export type AssetRemovedEvent = TypedEvent<
  [string, string],
  AssetRemovedEventObject
>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export interface ExecutedEventObject {
  transferId: string;
  to: string;
  router: string;
  params: IConnext.CallParamsStructOutput;
  localAsset: string;
  transactingAsset: string;
  localAmount: BigNumber;
  transactingAmount: BigNumber;
  caller: string;
}
export type ExecutedEvent = TypedEvent<
  [
    string,
    string,
    string,
    IConnext.CallParamsStructOutput,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface LiquidityAddedEventObject {
  router: string;
  local: string;
  canonicalId: string;
  amount: BigNumber;
  caller: string;
}
export type LiquidityAddedEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LiquidityRemovedEventObject {
  router: string;
  to: string;
  local: string;
  amount: BigNumber;
  caller: string;
}
export type LiquidityRemovedEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  LiquidityRemovedEventObject
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export interface OwnershipProposedEventObject {
  proposedOwner: string;
}
export type OwnershipProposedEvent = TypedEvent<
  [string],
  OwnershipProposedEventObject
>;

export type OwnershipProposedEventFilter =
  TypedEventFilter<OwnershipProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReconciledEventObject {
  transferId: string;
  to: string;
  router: string;
  localAsset: string;
  localAmount: BigNumber;
  executed: IConnext.ExecutedTransferStructOutput;
  caller: string;
}
export type ReconciledEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    IConnext.ExecutedTransferStructOutput,
    string
  ],
  ReconciledEventObject
>;

export type ReconciledEventFilter = TypedEventFilter<ReconciledEvent>;

export interface RouterAddedEventObject {
  router: string;
  caller: string;
}
export type RouterAddedEvent = TypedEvent<
  [string, string],
  RouterAddedEventObject
>;

export type RouterAddedEventFilter = TypedEventFilter<RouterAddedEvent>;

export interface RouterOwnerAcceptedEventObject {
  router: string;
  prevOwner: string;
  newOwner: string;
}
export type RouterOwnerAcceptedEvent = TypedEvent<
  [string, string, string],
  RouterOwnerAcceptedEventObject
>;

export type RouterOwnerAcceptedEventFilter =
  TypedEventFilter<RouterOwnerAcceptedEvent>;

export interface RouterOwnerProposedEventObject {
  router: string;
  prevProposed: string;
  newProposed: string;
}
export type RouterOwnerProposedEvent = TypedEvent<
  [string, string, string],
  RouterOwnerProposedEventObject
>;

export type RouterOwnerProposedEventFilter =
  TypedEventFilter<RouterOwnerProposedEvent>;

export interface RouterOwnershipRenouncedEventObject {
  renounced: boolean;
}
export type RouterOwnershipRenouncedEvent = TypedEvent<
  [boolean],
  RouterOwnershipRenouncedEventObject
>;

export type RouterOwnershipRenouncedEventFilter =
  TypedEventFilter<RouterOwnershipRenouncedEvent>;

export interface RouterOwnershipRenunciationProposedEventObject {
  timestamp: BigNumber;
}
export type RouterOwnershipRenunciationProposedEvent = TypedEvent<
  [BigNumber],
  RouterOwnershipRenunciationProposedEventObject
>;

export type RouterOwnershipRenunciationProposedEventFilter =
  TypedEventFilter<RouterOwnershipRenunciationProposedEvent>;

export interface RouterRecipientSetEventObject {
  router: string;
  prevRecipient: string;
  newRecipient: string;
}
export type RouterRecipientSetEvent = TypedEvent<
  [string, string, string],
  RouterRecipientSetEventObject
>;

export type RouterRecipientSetEventFilter =
  TypedEventFilter<RouterRecipientSetEvent>;

export interface RouterRemovedEventObject {
  router: string;
  caller: string;
}
export type RouterRemovedEvent = TypedEvent<
  [string, string],
  RouterRemovedEventObject
>;

export type RouterRemovedEventFilter = TypedEventFilter<RouterRemovedEvent>;

export interface StableSwapAddedEventObject {
  canonicalId: string;
  domain: number;
  swapPool: string;
  caller: string;
}
export type StableSwapAddedEvent = TypedEvent<
  [string, number, string, string],
  StableSwapAddedEventObject
>;

export type StableSwapAddedEventFilter = TypedEventFilter<StableSwapAddedEvent>;

export interface XCalledEventObject {
  transferId: string;
  to: string;
  params: IConnext.CallParamsStructOutput;
  transactingAsset: string;
  localAsset: string;
  transactingAmount: BigNumber;
  localAmount: BigNumber;
  nonce: BigNumber;
  caller: string;
}
export type XCalledEvent = TypedEvent<
  [
    string,
    string,
    IConnext.CallParamsStructOutput,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  XCalledEventObject
>;

export type XCalledEventFilter = TypedEventFilter<XCalledEvent>;

export interface Connext extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnextInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      amount: BigNumberish,
      local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityFor(
      amount: BigNumberish,
      local: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRelayerFees(
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStableSwapPool(
      canonical: BridgeMessage.TokenIdStruct,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adoptedToCanonical(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, string] & { domain: number; id: string }>;

    adoptedToLocalPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    approvedAssets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approvedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    assetOwnershipTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeRouter(overrides?: CallOverrides): Promise<[string]>;

    canonicalToAdopted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    domain(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      _args: IConnext.ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _domain: BigNumberish,
      _bridgeRouter: string,
      _tokenRegistry: string,
      _wrappedNative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAssetOwnershipRenounced(overrides?: CallOverrides): Promise<[boolean]>;

    isRouterOwnershipRenounced(overrides?: CallOverrides): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposeAssetOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeRouterOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedRouterOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposedRouterTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    reconcile(
      _transferId: BytesLike,
      _local: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reconciledTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeAssetId(
      canonicalId: BytesLike,
      adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      local: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRelayerFees(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceAssetOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRouterOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounced(overrides?: CallOverrides): Promise<[boolean]>;

    routedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { router: string; amount: BigNumber }>;

    routedTransfersGas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gasUsed: BigNumber; gasPrice: BigNumber }
    >;

    routerBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    routerOwners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    routerOwnershipTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    routerRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    routerRelayerFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupAsset(
      canonical: BridgeMessage.TokenIdStruct,
      adoptedAssetId: string,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupRouter(
      router: string,
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<[string]>;

    wrapper(overrides?: CallOverrides): Promise<[string]>;

    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptProposedOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  acceptProposedRouterOwner(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    amount: BigNumberish,
    local: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityFor(
    amount: BigNumberish,
    local: string,
    router: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRelayerFees(
    router: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStableSwapPool(
    canonical: BridgeMessage.TokenIdStruct,
    stableSwapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adoptedToCanonical(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[number, string] & { domain: number; id: string }>;

  adoptedToLocalPools(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  approvedAssets(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  approvedRouters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  assetOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeRouter(overrides?: CallOverrides): Promise<string>;

  canonicalToAdopted(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  domain(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    _args: IConnext.ExecuteArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _domain: BigNumberish,
    _bridgeRouter: string,
    _tokenRegistry: string,
    _wrappedNative: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAssetOwnershipRenounced(overrides?: CallOverrides): Promise<boolean>;

  isRouterOwnershipRenounced(overrides?: CallOverrides): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposeAssetOwnershipRenunciation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeNewOwner(
    newlyProposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeRouterOwner(
    router: string,
    proposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeRouterOwnershipRenunciation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedRouterOwners(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  proposedRouterTimestamp(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  reconcile(
    _transferId: BytesLike,
    _local: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reconciledTransfers(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  removeAssetId(
    canonicalId: BytesLike,
    adoptedAssetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    local: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRelayerFees(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceAssetOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRouterOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounced(overrides?: CallOverrides): Promise<boolean>;

  routedTransfers(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { router: string; amount: BigNumber }>;

  routedTransfersGas(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { gasUsed: BigNumber; gasPrice: BigNumber }
  >;

  routerBalances(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  routerOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

  routerOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  routerRecipients(arg0: string, overrides?: CallOverrides): Promise<string>;

  routerRelayerFees(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRouterRecipient(
    router: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupAsset(
    canonical: BridgeMessage.TokenIdStruct,
    adoptedAssetId: string,
    stableSwapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupRouter(
    router: string,
    owner: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenRegistry(overrides?: CallOverrides): Promise<string>;

  wrapper(overrides?: CallOverrides): Promise<string>;

  xcall(
    _args: IConnext.XCallArgsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProposedOwner(overrides?: CallOverrides): Promise<void>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      amount: BigNumberish,
      local: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityFor(
      amount: BigNumberish,
      local: string,
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRelayerFees(router: string, overrides?: CallOverrides): Promise<void>;

    addStableSwapPool(
      canonical: BridgeMessage.TokenIdStruct,
      stableSwapPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adoptedToCanonical(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number, string] & { domain: number; id: string }>;

    adoptedToLocalPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    approvedAssets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approvedRouters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    assetOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeRouter(overrides?: CallOverrides): Promise<string>;

    canonicalToAdopted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _args: IConnext.ExecuteArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    executor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _domain: BigNumberish,
      _bridgeRouter: string,
      _tokenRegistry: string,
      _wrappedNative: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAssetOwnershipRenounced(overrides?: CallOverrides): Promise<boolean>;

    isRouterOwnershipRenounced(overrides?: CallOverrides): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeAssetOwnershipRenunciation(overrides?: CallOverrides): Promise<void>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeRouterOwnershipRenunciation(
      overrides?: CallOverrides
    ): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedRouterOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    proposedRouterTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    reconcile(
      _transferId: BytesLike,
      _local: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reconciledTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    removeAssetId(
      canonicalId: BytesLike,
      adoptedAssetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      amount: BigNumberish,
      local: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayerFees(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRouter(router: string, overrides?: CallOverrides): Promise<void>;

    renounceAssetOwnership(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRouterOwnership(overrides?: CallOverrides): Promise<void>;

    renounced(overrides?: CallOverrides): Promise<boolean>;

    routedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { router: string; amount: BigNumber }>;

    routedTransfersGas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gasUsed: BigNumber; gasPrice: BigNumber }
    >;

    routerBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

    routerOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerRecipients(arg0: string, overrides?: CallOverrides): Promise<string>;

    routerRelayerFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupAsset(
      canonical: BridgeMessage.TokenIdStruct,
      adoptedAssetId: string,
      stableSwapPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupRouter(
      router: string,
      owner: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    wrapper(overrides?: CallOverrides): Promise<string>;

    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AssetAdded(bytes32,uint32,address,address,address)"(
      canonicalId?: null,
      domain?: null,
      adoptedAsset?: null,
      supportedAsset?: null,
      caller?: null
    ): AssetAddedEventFilter;
    AssetAdded(
      canonicalId?: null,
      domain?: null,
      adoptedAsset?: null,
      supportedAsset?: null,
      caller?: null
    ): AssetAddedEventFilter;

    "AssetOwnershipRenounced(bool)"(
      renounced?: null
    ): AssetOwnershipRenouncedEventFilter;
    AssetOwnershipRenounced(
      renounced?: null
    ): AssetOwnershipRenouncedEventFilter;

    "AssetOwnershipRenunciationProposed(uint256)"(
      timestamp?: null
    ): AssetOwnershipRenunciationProposedEventFilter;
    AssetOwnershipRenunciationProposed(
      timestamp?: null
    ): AssetOwnershipRenunciationProposedEventFilter;

    "AssetRemoved(bytes32,address)"(
      canonicalId?: null,
      caller?: null
    ): AssetRemovedEventFilter;
    AssetRemoved(canonicalId?: null, caller?: null): AssetRemovedEventFilter;

    "Executed(bytes32,address,address,tuple,address,address,uint256,uint256,address)"(
      transferId?: BytesLike | null,
      to?: string | null,
      router?: string | null,
      params?: null,
      localAsset?: null,
      transactingAsset?: null,
      localAmount?: null,
      transactingAmount?: null,
      caller?: null
    ): ExecutedEventFilter;
    Executed(
      transferId?: BytesLike | null,
      to?: string | null,
      router?: string | null,
      params?: null,
      localAsset?: null,
      transactingAsset?: null,
      localAmount?: null,
      transactingAmount?: null,
      caller?: null
    ): ExecutedEventFilter;

    "LiquidityAdded(address,address,bytes32,uint256,address)"(
      router?: string | null,
      local?: null,
      canonicalId?: null,
      amount?: null,
      caller?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      router?: string | null,
      local?: null,
      canonicalId?: null,
      amount?: null,
      caller?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,address,address,uint256,address)"(
      router?: string | null,
      to?: null,
      local?: null,
      amount?: null,
      caller?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      router?: string | null,
      to?: null,
      local?: null,
      amount?: null,
      caller?: null
    ): LiquidityRemovedEventFilter;

    "OwnershipProposed(address)"(
      proposedOwner?: string | null
    ): OwnershipProposedEventFilter;
    OwnershipProposed(
      proposedOwner?: string | null
    ): OwnershipProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Reconciled(bytes32,address,address,address,uint256,tuple,address)"(
      transferId?: BytesLike | null,
      to?: string | null,
      router?: string | null,
      localAsset?: null,
      localAmount?: null,
      executed?: null,
      caller?: null
    ): ReconciledEventFilter;
    Reconciled(
      transferId?: BytesLike | null,
      to?: string | null,
      router?: string | null,
      localAsset?: null,
      localAmount?: null,
      executed?: null,
      caller?: null
    ): ReconciledEventFilter;

    "RouterAdded(address,address)"(
      router?: string | null,
      caller?: null
    ): RouterAddedEventFilter;
    RouterAdded(router?: string | null, caller?: null): RouterAddedEventFilter;

    "RouterOwnerAccepted(address,address,address)"(
      router?: string | null,
      prevOwner?: string | null,
      newOwner?: string | null
    ): RouterOwnerAcceptedEventFilter;
    RouterOwnerAccepted(
      router?: string | null,
      prevOwner?: string | null,
      newOwner?: string | null
    ): RouterOwnerAcceptedEventFilter;

    "RouterOwnerProposed(address,address,address)"(
      router?: string | null,
      prevProposed?: string | null,
      newProposed?: string | null
    ): RouterOwnerProposedEventFilter;
    RouterOwnerProposed(
      router?: string | null,
      prevProposed?: string | null,
      newProposed?: string | null
    ): RouterOwnerProposedEventFilter;

    "RouterOwnershipRenounced(bool)"(
      renounced?: null
    ): RouterOwnershipRenouncedEventFilter;
    RouterOwnershipRenounced(
      renounced?: null
    ): RouterOwnershipRenouncedEventFilter;

    "RouterOwnershipRenunciationProposed(uint256)"(
      timestamp?: null
    ): RouterOwnershipRenunciationProposedEventFilter;
    RouterOwnershipRenunciationProposed(
      timestamp?: null
    ): RouterOwnershipRenunciationProposedEventFilter;

    "RouterRecipientSet(address,address,address)"(
      router?: string | null,
      prevRecipient?: string | null,
      newRecipient?: string | null
    ): RouterRecipientSetEventFilter;
    RouterRecipientSet(
      router?: string | null,
      prevRecipient?: string | null,
      newRecipient?: string | null
    ): RouterRecipientSetEventFilter;

    "RouterRemoved(address,address)"(
      router?: string | null,
      caller?: null
    ): RouterRemovedEventFilter;
    RouterRemoved(
      router?: string | null,
      caller?: null
    ): RouterRemovedEventFilter;

    "StableSwapAdded(bytes32,uint32,address,address)"(
      canonicalId?: null,
      domain?: null,
      swapPool?: null,
      caller?: null
    ): StableSwapAddedEventFilter;
    StableSwapAdded(
      canonicalId?: null,
      domain?: null,
      swapPool?: null,
      caller?: null
    ): StableSwapAddedEventFilter;

    "XCalled(bytes32,address,tuple,address,address,uint256,uint256,uint256,address)"(
      transferId?: BytesLike | null,
      to?: string | null,
      params?: null,
      transactingAsset?: null,
      localAsset?: null,
      transactingAmount?: null,
      localAmount?: null,
      nonce?: null,
      caller?: null
    ): XCalledEventFilter;
    XCalled(
      transferId?: BytesLike | null,
      to?: string | null,
      params?: null,
      transactingAsset?: null,
      localAsset?: null,
      transactingAmount?: null,
      localAmount?: null,
      nonce?: null,
      caller?: null
    ): XCalledEventFilter;
  };

  estimateGas: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      amount: BigNumberish,
      local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityFor(
      amount: BigNumberish,
      local: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRelayerFees(
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStableSwapPool(
      canonical: BridgeMessage.TokenIdStruct,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adoptedToCanonical(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adoptedToLocalPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedAssets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeRouter(overrides?: CallOverrides): Promise<BigNumber>;

    canonicalToAdopted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    domain(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      _args: IConnext.ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _domain: BigNumberish,
      _bridgeRouter: string,
      _tokenRegistry: string,
      _wrappedNative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAssetOwnershipRenounced(overrides?: CallOverrides): Promise<BigNumber>;

    isRouterOwnershipRenounced(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAssetOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeRouterOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedRouterOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedRouterTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    reconcile(
      _transferId: BytesLike,
      _local: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reconciledTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAssetId(
      canonicalId: BytesLike,
      adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      local: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRelayerFees(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceAssetOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRouterOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounced(overrides?: CallOverrides): Promise<BigNumber>;

    routedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routedTransfersGas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerOwners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    routerOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    routerRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerRelayerFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupAsset(
      canonical: BridgeMessage.TokenIdStruct,
      adoptedAssetId: string,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupRouter(
      router: string,
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    wrapper(overrides?: CallOverrides): Promise<BigNumber>;

    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      amount: BigNumberish,
      local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityFor(
      amount: BigNumberish,
      local: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRelayerFees(
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStableSwapPool(
      canonical: BridgeMessage.TokenIdStruct,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adoptedToCanonical(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adoptedToLocalPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedAssets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetOwnershipTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canonicalToAdopted(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      _args: IConnext.ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _domain: BigNumberish,
      _bridgeRouter: string,
      _tokenRegistry: string,
      _wrappedNative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAssetOwnershipRenounced(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRouterOwnershipRenounced(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeAssetOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeRouterOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedRouterOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedRouterTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reconcile(
      _transferId: BytesLike,
      _local: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reconciledTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAssetId(
      canonicalId: BytesLike,
      adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      local: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayerFees(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceAssetOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRouterOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routedTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routedTransfersGas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerBalances(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerOwnershipTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerRelayerFees(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupAsset(
      canonical: BridgeMessage.TokenIdStruct,
      adoptedAssetId: string,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupRouter(
      router: string,
      owner: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
