/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface ETHHelperInterface extends utils.Interface {
  functions: {
    "bridge()": FunctionFragment;
    "send(uint32,bool)": FunctionFragment;
    "sendTo(uint32,bytes32,bool)": FunctionFragment;
    "sendToEVMLike(uint32,address,bool)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridge"
      | "send"
      | "sendTo"
      | "sendToEVMLike"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendTo",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToEVMLike",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendToEVMLike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "Send(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Send"): EventFragment;
}

export interface SendEventObject {
  from: string;
}
export type SendEvent = TypedEvent<[string], SendEventObject>;

export type SendEventFilter = TypedEventFilter<SendEvent>;

export interface ETHHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ETHHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridge(overrides?: CallOverrides): Promise<[string]>;

    send(
      _domain: BigNumberish,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendTo(
      _domain: BigNumberish,
      _to: BytesLike,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendToEVMLike(
      _domain: BigNumberish,
      _to: string,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  bridge(overrides?: CallOverrides): Promise<string>;

  send(
    _domain: BigNumberish,
    _enableFast: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendTo(
    _domain: BigNumberish,
    _to: BytesLike,
    _enableFast: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendToEVMLike(
    _domain: BigNumberish,
    _to: string,
    _enableFast: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bridge(overrides?: CallOverrides): Promise<string>;

    send(
      _domain: BigNumberish,
      _enableFast: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sendTo(
      _domain: BigNumberish,
      _to: BytesLike,
      _enableFast: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sendToEVMLike(
      _domain: BigNumberish,
      _to: string,
      _enableFast: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Send(address)"(from?: string | null): SendEventFilter;
    Send(from?: string | null): SendEventFilter;
  };

  estimateGas: {
    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    send(
      _domain: BigNumberish,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendTo(
      _domain: BigNumberish,
      _to: BytesLike,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendToEVMLike(
      _domain: BigNumberish,
      _to: string,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    send(
      _domain: BigNumberish,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendTo(
      _domain: BigNumberish,
      _to: BytesLike,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendToEVMLike(
      _domain: BigNumberish,
      _to: string,
      _enableFast: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
