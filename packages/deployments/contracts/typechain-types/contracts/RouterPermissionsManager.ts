/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface RouterPermissionsManagerInterface extends utils.Interface {
  functions: {
    "acceptProposedRouterOwner(address)": FunctionFragment;
    "approvedRouters(address)": FunctionFragment;
    "proposeRouterOwner(address,address)": FunctionFragment;
    "proposedRouterOwners(address)": FunctionFragment;
    "proposedRouterTimestamp(address)": FunctionFragment;
    "routerOwners(address)": FunctionFragment;
    "routerRecipients(address)": FunctionFragment;
    "setRouterRecipient(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptProposedRouterOwner"
      | "approvedRouters"
      | "proposeRouterOwner"
      | "proposedRouterOwners"
      | "proposedRouterTimestamp"
      | "routerOwners"
      | "routerRecipients"
      | "setRouterRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptProposedRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRouters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedRouterOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedRouterTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerRecipients",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterRecipient",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedRouterOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedRouterTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterRecipient",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RouterPermissionsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterPermissionsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedRouters(
      _approved: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposedRouterOwners(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposedRouterTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    routerOwners(_router: string, overrides?: CallOverrides): Promise<[string]>;

    routerRecipients(
      _router: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptProposedRouterOwner(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedRouters(
    _approved: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposeRouterOwner(
    router: string,
    proposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposedRouterOwners(
    _router: string,
    overrides?: CallOverrides
  ): Promise<string>;

  proposedRouterTimestamp(
    _router: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  routerOwners(_router: string, overrides?: CallOverrides): Promise<string>;

  routerRecipients(_router: string, overrides?: CallOverrides): Promise<string>;

  setRouterRecipient(
    router: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProposedRouterOwner(
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedRouters(
      _approved: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedRouterOwners(
      _router: string,
      overrides?: CallOverrides
    ): Promise<string>;

    proposedRouterTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerOwners(_router: string, overrides?: CallOverrides): Promise<string>;

    routerRecipients(
      _router: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedRouters(
      _approved: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposedRouterOwners(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedRouterTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerOwners(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerRecipients(
      _router: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedRouters(
      _approved: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposedRouterOwners(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedRouterTimestamp(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerOwners(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerRecipients(
      _router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
