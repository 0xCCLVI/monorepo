/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface RouterPermissionsManagerInterface extends utils.Interface {
  functions: {
    "acceptProposedRouterOwner(address)": FunctionFragment;
    "approvedRouters(address)": FunctionFragment;
    "proposeRouterOwner(address,address)": FunctionFragment;
    "proposedRouterOwners(address)": FunctionFragment;
    "proposedRouterTimestamp(address)": FunctionFragment;
    "routerOwners(address)": FunctionFragment;
    "routerRecipients(address)": FunctionFragment;
    "setRouterRecipient(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptProposedRouterOwner"
      | "approvedRouters"
      | "proposeRouterOwner"
      | "proposedRouterOwners"
      | "proposedRouterTimestamp"
      | "routerOwners"
      | "routerRecipients"
      | "setRouterRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptProposedRouterOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedRouters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedRouterOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedRouterTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "routerRecipients",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterRecipient",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProposedRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedRouterOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedRouterTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterRecipient",
    data: BytesLike
  ): Result;

  events: {
    "RouterAdded(address,address)": EventFragment;
    "RouterOwnerAccepted(address,address,address)": EventFragment;
    "RouterOwnerProposed(address,address,address)": EventFragment;
    "RouterRecipientSet(address,address,address)": EventFragment;
    "RouterRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RouterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnerAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnerProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRemoved"): EventFragment;
}

export interface RouterAddedEventObject {
  router: string;
  caller: string;
}
export type RouterAddedEvent = TypedEvent<
  [string, string],
  RouterAddedEventObject
>;

export type RouterAddedEventFilter = TypedEventFilter<RouterAddedEvent>;

export interface RouterOwnerAcceptedEventObject {
  router: string;
  prevOwner: string;
  newOwner: string;
}
export type RouterOwnerAcceptedEvent = TypedEvent<
  [string, string, string],
  RouterOwnerAcceptedEventObject
>;

export type RouterOwnerAcceptedEventFilter =
  TypedEventFilter<RouterOwnerAcceptedEvent>;

export interface RouterOwnerProposedEventObject {
  router: string;
  prevProposed: string;
  newProposed: string;
}
export type RouterOwnerProposedEvent = TypedEvent<
  [string, string, string],
  RouterOwnerProposedEventObject
>;

export type RouterOwnerProposedEventFilter =
  TypedEventFilter<RouterOwnerProposedEvent>;

export interface RouterRecipientSetEventObject {
  router: string;
  prevRecipient: string;
  newRecipient: string;
}
export type RouterRecipientSetEvent = TypedEvent<
  [string, string, string],
  RouterRecipientSetEventObject
>;

export type RouterRecipientSetEventFilter =
  TypedEventFilter<RouterRecipientSetEvent>;

export interface RouterRemovedEventObject {
  router: string;
  caller: string;
}
export type RouterRemovedEvent = TypedEvent<
  [string, string],
  RouterRemovedEventObject
>;

export type RouterRemovedEventFilter = TypedEventFilter<RouterRemovedEvent>;

export interface RouterPermissionsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterPermissionsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposedRouterOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposedRouterTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    routerOwners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    routerRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptProposedRouterOwner(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedRouters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  proposeRouterOwner(
    router: string,
    proposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposedRouterOwners(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  proposedRouterTimestamp(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  routerOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

  routerRecipients(arg0: string, overrides?: CallOverrides): Promise<string>;

  setRouterRecipient(
    router: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProposedRouterOwner(
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedRouters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedRouterOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    proposedRouterTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

    routerRecipients(arg0: string, overrides?: CallOverrides): Promise<string>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RouterAdded(address,address)"(
      router?: string | null,
      caller?: null
    ): RouterAddedEventFilter;
    RouterAdded(router?: string | null, caller?: null): RouterAddedEventFilter;

    "RouterOwnerAccepted(address,address,address)"(
      router?: string | null,
      prevOwner?: string | null,
      newOwner?: string | null
    ): RouterOwnerAcceptedEventFilter;
    RouterOwnerAccepted(
      router?: string | null,
      prevOwner?: string | null,
      newOwner?: string | null
    ): RouterOwnerAcceptedEventFilter;

    "RouterOwnerProposed(address,address,address)"(
      router?: string | null,
      prevProposed?: string | null,
      newProposed?: string | null
    ): RouterOwnerProposedEventFilter;
    RouterOwnerProposed(
      router?: string | null,
      prevProposed?: string | null,
      newProposed?: string | null
    ): RouterOwnerProposedEventFilter;

    "RouterRecipientSet(address,address,address)"(
      router?: string | null,
      prevRecipient?: string | null,
      newRecipient?: string | null
    ): RouterRecipientSetEventFilter;
    RouterRecipientSet(
      router?: string | null,
      prevRecipient?: string | null,
      newRecipient?: string | null
    ): RouterRecipientSetEventFilter;

    "RouterRemoved(address,address)"(
      router?: string | null,
      caller?: null
    ): RouterRemovedEventFilter;
    RouterRemoved(
      router?: string | null,
      caller?: null
    ): RouterRemovedEventFilter;
  };

  estimateGas: {
    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposedRouterOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedRouterTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerOwners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    routerRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProposedRouterOwner(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedRouters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeRouterOwner(
      router: string,
      proposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposedRouterOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedRouterTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerRecipients(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRouterRecipient(
      router: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
