/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface RouterPermissionsManagerLogicInterface
  extends utils.Interface {
  functions: {};

  events: {
    "RouterAdded(address,address)": EventFragment;
    "RouterOwnerAccepted(address,address,address)": EventFragment;
    "RouterOwnerProposed(address,address,address)": EventFragment;
    "RouterRecipientSet(address,address,address)": EventFragment;
    "RouterRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RouterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnerAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnerProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRemoved"): EventFragment;
}

export interface RouterAddedEventObject {
  router: string;
  caller: string;
}
export type RouterAddedEvent = TypedEvent<
  [string, string],
  RouterAddedEventObject
>;

export type RouterAddedEventFilter = TypedEventFilter<RouterAddedEvent>;

export interface RouterOwnerAcceptedEventObject {
  router: string;
  prevOwner: string;
  newOwner: string;
}
export type RouterOwnerAcceptedEvent = TypedEvent<
  [string, string, string],
  RouterOwnerAcceptedEventObject
>;

export type RouterOwnerAcceptedEventFilter =
  TypedEventFilter<RouterOwnerAcceptedEvent>;

export interface RouterOwnerProposedEventObject {
  router: string;
  prevProposed: string;
  newProposed: string;
}
export type RouterOwnerProposedEvent = TypedEvent<
  [string, string, string],
  RouterOwnerProposedEventObject
>;

export type RouterOwnerProposedEventFilter =
  TypedEventFilter<RouterOwnerProposedEvent>;

export interface RouterRecipientSetEventObject {
  router: string;
  prevRecipient: string;
  newRecipient: string;
}
export type RouterRecipientSetEvent = TypedEvent<
  [string, string, string],
  RouterRecipientSetEventObject
>;

export type RouterRecipientSetEventFilter =
  TypedEventFilter<RouterRecipientSetEvent>;

export interface RouterRemovedEventObject {
  router: string;
  caller: string;
}
export type RouterRemovedEvent = TypedEvent<
  [string, string],
  RouterRemovedEventObject
>;

export type RouterRemovedEventFilter = TypedEventFilter<RouterRemovedEvent>;

export interface RouterPermissionsManagerLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterPermissionsManagerLogicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "RouterAdded(address,address)"(
      router?: string | null,
      caller?: null
    ): RouterAddedEventFilter;
    RouterAdded(router?: string | null, caller?: null): RouterAddedEventFilter;

    "RouterOwnerAccepted(address,address,address)"(
      router?: string | null,
      prevOwner?: string | null,
      newOwner?: string | null
    ): RouterOwnerAcceptedEventFilter;
    RouterOwnerAccepted(
      router?: string | null,
      prevOwner?: string | null,
      newOwner?: string | null
    ): RouterOwnerAcceptedEventFilter;

    "RouterOwnerProposed(address,address,address)"(
      router?: string | null,
      prevProposed?: string | null,
      newProposed?: string | null
    ): RouterOwnerProposedEventFilter;
    RouterOwnerProposed(
      router?: string | null,
      prevProposed?: string | null,
      newProposed?: string | null
    ): RouterOwnerProposedEventFilter;

    "RouterRecipientSet(address,address,address)"(
      router?: string | null,
      prevRecipient?: string | null,
      newRecipient?: string | null
    ): RouterRecipientSetEventFilter;
    RouterRecipientSet(
      router?: string | null,
      prevRecipient?: string | null,
      newRecipient?: string | null
    ): RouterRecipientSetEventFilter;

    "RouterRemoved(address,address)"(
      router?: string | null,
      caller?: null
    ): RouterRemovedEventFilter;
    RouterRemoved(
      router?: string | null,
      caller?: null
    ): RouterRemovedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
