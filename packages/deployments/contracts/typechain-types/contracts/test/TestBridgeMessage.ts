/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface TestBridgeMessageInterface extends utils.Interface {
  functions: {
    "formatDetailsHash(string,string,uint8)": FunctionFragment;
    "formatMessage(bytes,bytes,uint8,uint8)": FunctionFragment;
    "formatTokenId(uint32,bytes32)": FunctionFragment;
    "formatTransfer(bytes32,uint256,bytes32,bool,bytes32)": FunctionFragment;
    "isFastTransfer(bytes)": FunctionFragment;
    "isTransfer(bytes)": FunctionFragment;
    "isValidAction(bytes,uint8)": FunctionFragment;
    "isValidMessageLength(bytes)": FunctionFragment;
    "messageType(bytes)": FunctionFragment;
    "mustBeMessage(bytes)": FunctionFragment;
    "splitMessage(bytes)": FunctionFragment;
    "splitTokenId(bytes)": FunctionFragment;
    "splitTransfer(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "formatDetailsHash"
      | "formatMessage"
      | "formatTokenId"
      | "formatTransfer"
      | "isFastTransfer"
      | "isTransfer"
      | "isValidAction"
      | "isValidMessageLength"
      | "messageType"
      | "mustBeMessage"
      | "splitMessage"
      | "splitTokenId"
      | "splitTransfer"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "formatDetailsHash",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "formatMessage",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "formatTokenId",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "formatTransfer",
    values: [BytesLike, BigNumberish, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFastTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransfer",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidAction",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidMessageLength",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messageType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mustBeMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "splitMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "splitTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "splitTransfer",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "formatDetailsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFastTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTransfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidMessageLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mustBeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitTransfer",
    data: BytesLike
  ): Result;

  events: {};
}

export interface TestBridgeMessage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestBridgeMessageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    formatDetailsHash(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    formatMessage(
      _tokenId: BytesLike,
      _action: BytesLike,
      _idType: BigNumberish,
      _actionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    formatTokenId(
      _domain: BigNumberish,
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    formatTransfer(
      _to: BytesLike,
      _amnt: BigNumberish,
      _detailsHash: BytesLike,
      _enableFast: boolean,
      _externalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isFastTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidAction(
      _action: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidMessageLength(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    messageType(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    mustBeMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    splitMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    splitTokenId(
      _tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string]>;

    splitTransfer(
      _transfer: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string, BigNumber, string]>;
  };

  formatDetailsHash(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  formatMessage(
    _tokenId: BytesLike,
    _action: BytesLike,
    _idType: BigNumberish,
    _actionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  formatTokenId(
    _domain: BigNumberish,
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  formatTransfer(
    _to: BytesLike,
    _amnt: BigNumberish,
    _detailsHash: BytesLike,
    _enableFast: boolean,
    _externalHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isFastTransfer(
    _action: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTransfer(_action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isValidAction(
    _action: BytesLike,
    _t: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidMessageLength(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  messageType(_message: BytesLike, overrides?: CallOverrides): Promise<number>;

  mustBeMessage(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  splitMessage(
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  splitTokenId(
    _tokenId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string, string]>;

  splitTransfer(
    _transfer: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, string, string, BigNumber, string]>;

  callStatic: {
    formatDetailsHash(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    formatMessage(
      _tokenId: BytesLike,
      _action: BytesLike,
      _idType: BigNumberish,
      _actionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    formatTokenId(
      _domain: BigNumberish,
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    formatTransfer(
      _to: BytesLike,
      _amnt: BigNumberish,
      _detailsHash: BytesLike,
      _enableFast: boolean,
      _externalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isFastTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTransfer(_action: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isValidAction(
      _action: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidMessageLength(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    messageType(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    mustBeMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    splitMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    splitTokenId(
      _tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string]>;

    splitTransfer(
      _transfer: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, string, string, BigNumber, string]>;
  };

  filters: {};

  estimateGas: {
    formatDetailsHash(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formatMessage(
      _tokenId: BytesLike,
      _action: BytesLike,
      _idType: BigNumberish,
      _actionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formatTokenId(
      _domain: BigNumberish,
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formatTransfer(
      _to: BytesLike,
      _amnt: BigNumberish,
      _detailsHash: BytesLike,
      _enableFast: boolean,
      _externalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFastTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidAction(
      _action: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidMessageLength(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    messageType(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mustBeMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitTokenId(
      _tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitTransfer(
      _transfer: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    formatDetailsHash(
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    formatMessage(
      _tokenId: BytesLike,
      _action: BytesLike,
      _idType: BigNumberish,
      _actionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    formatTokenId(
      _domain: BigNumberish,
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    formatTransfer(
      _to: BytesLike,
      _amnt: BigNumberish,
      _detailsHash: BytesLike,
      _enableFast: boolean,
      _externalHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFastTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTransfer(
      _action: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidAction(
      _action: BytesLike,
      _t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidMessageLength(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageType(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mustBeMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitMessage(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitTokenId(
      _tokenId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitTransfer(
      _transfer: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
