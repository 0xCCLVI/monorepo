/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface LibCrossDomainPropertyTestInterface extends utils.Interface {
  functions: {
    "IS_TEST()": FunctionFragment;
    "NATIVE_ASSET()": FunctionFragment;
    "failed()": FunctionFragment;
    "getProperty()": FunctionFragment;
    "getPropertyBytes()": FunctionFragment;
    "setUp()": FunctionFragment;
    "stdstore()": FunctionFragment;
    "testDomain()": FunctionFragment;
    "testFailDomainIncorrectType()": FunctionFragment;
    "testFailMustBeProperty()": FunctionFragment;
    "testFailSenderIncorrectType()": FunctionFragment;
    "testFormatDomainAndSender()": FunctionFragment;
    "testFormatDomainAndSenderBytes()": FunctionFragment;
    "testIsDomainAndSender()": FunctionFragment;
    "testIsType()": FunctionFragment;
    "testMustBeProperty()": FunctionFragment;
    "testParseDomainAndSenderBytes()": FunctionFragment;
    "testPropertyType()": FunctionFragment;
    "testSender()": FunctionFragment;
    "testTryAsProperty()": FunctionFragment;
    "testTryAsPropertyInvalidLength()": FunctionFragment;
    "testValidPropertyLength()": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_TEST"
      | "NATIVE_ASSET"
      | "failed"
      | "getProperty"
      | "getPropertyBytes"
      | "setUp"
      | "stdstore"
      | "testDomain"
      | "testFailDomainIncorrectType"
      | "testFailMustBeProperty"
      | "testFailSenderIncorrectType"
      | "testFormatDomainAndSender"
      | "testFormatDomainAndSenderBytes"
      | "testIsDomainAndSender"
      | "testIsType"
      | "testMustBeProperty"
      | "testParseDomainAndSenderBytes"
      | "testPropertyType"
      | "testSender"
      | "testTryAsProperty"
      | "testTryAsPropertyInvalidLength"
      | "testValidPropertyLength"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_TEST", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "NATIVE_ASSET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "failed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getProperty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyBytes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(functionFragment: "stdstore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailDomainIncorrectType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailMustBeProperty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFailSenderIncorrectType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFormatDomainAndSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFormatDomainAndSenderBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testIsDomainAndSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testIsType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testMustBeProperty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testParseDomainAndSenderBytes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testPropertyType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTryAsProperty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testTryAsPropertyInvalidLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testValidPropertyLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_TEST", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_ASSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stdstore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testFailDomainIncorrectType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailMustBeProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFailSenderIncorrectType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFormatDomainAndSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFormatDomainAndSenderBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsDomainAndSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testIsType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testMustBeProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testParseDomainAndSenderBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testPropertyType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testSender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testTryAsProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testTryAsPropertyInvalidLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testValidPropertyLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {
    "log(string)": EventFragment;
    "log_address(address)": EventFragment;
    "log_bytes(bytes)": EventFragment;
    "log_bytes32(bytes32)": EventFragment;
    "log_int(int256)": EventFragment;
    "log_named_address(string,address)": EventFragment;
    "log_named_bytes(string,bytes)": EventFragment;
    "log_named_bytes32(string,bytes32)": EventFragment;
    "log_named_decimal_int(string,int256,uint256)": EventFragment;
    "log_named_decimal_uint(string,uint256,uint256)": EventFragment;
    "log_named_int(string,int256)": EventFragment;
    "log_named_string(string,string)": EventFragment;
    "log_named_uint(string,uint256)": EventFragment;
    "log_string(string)": EventFragment;
    "log_uint(uint256)": EventFragment;
    "logs(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "log"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_bytes32"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_decimal_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_int"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_named_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_string"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "log_uint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "logs"): EventFragment;
}

export interface logEventObject {
  arg0: string;
}
export type logEvent = TypedEvent<[string], logEventObject>;

export type logEventFilter = TypedEventFilter<logEvent>;

export interface log_addressEventObject {
  arg0: string;
}
export type log_addressEvent = TypedEvent<[string], log_addressEventObject>;

export type log_addressEventFilter = TypedEventFilter<log_addressEvent>;

export interface log_bytesEventObject {
  arg0: string;
}
export type log_bytesEvent = TypedEvent<[string], log_bytesEventObject>;

export type log_bytesEventFilter = TypedEventFilter<log_bytesEvent>;

export interface log_bytes32EventObject {
  arg0: string;
}
export type log_bytes32Event = TypedEvent<[string], log_bytes32EventObject>;

export type log_bytes32EventFilter = TypedEventFilter<log_bytes32Event>;

export interface log_intEventObject {
  arg0: BigNumber;
}
export type log_intEvent = TypedEvent<[BigNumber], log_intEventObject>;

export type log_intEventFilter = TypedEventFilter<log_intEvent>;

export interface log_named_addressEventObject {
  key: string;
  val: string;
}
export type log_named_addressEvent = TypedEvent<
  [string, string],
  log_named_addressEventObject
>;

export type log_named_addressEventFilter =
  TypedEventFilter<log_named_addressEvent>;

export interface log_named_bytesEventObject {
  key: string;
  val: string;
}
export type log_named_bytesEvent = TypedEvent<
  [string, string],
  log_named_bytesEventObject
>;

export type log_named_bytesEventFilter = TypedEventFilter<log_named_bytesEvent>;

export interface log_named_bytes32EventObject {
  key: string;
  val: string;
}
export type log_named_bytes32Event = TypedEvent<
  [string, string],
  log_named_bytes32EventObject
>;

export type log_named_bytes32EventFilter =
  TypedEventFilter<log_named_bytes32Event>;

export interface log_named_decimal_intEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_intEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_intEventObject
>;

export type log_named_decimal_intEventFilter =
  TypedEventFilter<log_named_decimal_intEvent>;

export interface log_named_decimal_uintEventObject {
  key: string;
  val: BigNumber;
  decimals: BigNumber;
}
export type log_named_decimal_uintEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  log_named_decimal_uintEventObject
>;

export type log_named_decimal_uintEventFilter =
  TypedEventFilter<log_named_decimal_uintEvent>;

export interface log_named_intEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_intEvent = TypedEvent<
  [string, BigNumber],
  log_named_intEventObject
>;

export type log_named_intEventFilter = TypedEventFilter<log_named_intEvent>;

export interface log_named_stringEventObject {
  key: string;
  val: string;
}
export type log_named_stringEvent = TypedEvent<
  [string, string],
  log_named_stringEventObject
>;

export type log_named_stringEventFilter =
  TypedEventFilter<log_named_stringEvent>;

export interface log_named_uintEventObject {
  key: string;
  val: BigNumber;
}
export type log_named_uintEvent = TypedEvent<
  [string, BigNumber],
  log_named_uintEventObject
>;

export type log_named_uintEventFilter = TypedEventFilter<log_named_uintEvent>;

export interface log_stringEventObject {
  arg0: string;
}
export type log_stringEvent = TypedEvent<[string], log_stringEventObject>;

export type log_stringEventFilter = TypedEventFilter<log_stringEvent>;

export interface log_uintEventObject {
  arg0: BigNumber;
}
export type log_uintEvent = TypedEvent<[BigNumber], log_uintEventObject>;

export type log_uintEventFilter = TypedEventFilter<log_uintEvent>;

export interface logsEventObject {
  arg0: string;
}
export type logsEvent = TypedEvent<[string], logsEventObject>;

export type logsEventFilter = TypedEventFilter<logsEvent>;

export interface LibCrossDomainPropertyTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibCrossDomainPropertyTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_TEST(overrides?: CallOverrides): Promise<[boolean]>;

    NATIVE_ASSET(overrides?: CallOverrides): Promise<[string]>;

    failed(overrides?: CallOverrides): Promise<[boolean]>;

    getProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPropertyBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stdstore(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        _sig: string;
        _depth: BigNumber;
        _target: string;
        _set: string;
      }
    >;

    testDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailDomainIncorrectType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailMustBeProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFailSenderIncorrectType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFormatDomainAndSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFormatDomainAndSenderBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testIsDomainAndSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testIsType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testMustBeProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testParseDomainAndSenderBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testPropertyType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testTryAsProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testTryAsPropertyInvalidLength(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testValidPropertyLength(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_TEST(overrides?: CallOverrides): Promise<boolean>;

  NATIVE_ASSET(overrides?: CallOverrides): Promise<string>;

  failed(overrides?: CallOverrides): Promise<boolean>;

  getProperty(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPropertyBytes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stdstore(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      _sig: string;
      _depth: BigNumber;
      _target: string;
      _set: string;
    }
  >;

  testDomain(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailDomainIncorrectType(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailMustBeProperty(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFailSenderIncorrectType(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFormatDomainAndSender(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFormatDomainAndSenderBytes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testIsDomainAndSender(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testIsType(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testMustBeProperty(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testParseDomainAndSenderBytes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testPropertyType(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testSender(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testTryAsProperty(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testTryAsPropertyInvalidLength(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testValidPropertyLength(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_TEST(overrides?: CallOverrides): Promise<boolean>;

    NATIVE_ASSET(overrides?: CallOverrides): Promise<string>;

    failed(overrides?: CallOverrides): Promise<boolean>;

    getProperty(overrides?: CallOverrides): Promise<string>;

    getPropertyBytes(overrides?: CallOverrides): Promise<string>;

    setUp(overrides?: CallOverrides): Promise<void>;

    stdstore(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        _sig: string;
        _depth: BigNumber;
        _target: string;
        _set: string;
      }
    >;

    testDomain(overrides?: CallOverrides): Promise<void>;

    testFailDomainIncorrectType(overrides?: CallOverrides): Promise<void>;

    testFailMustBeProperty(overrides?: CallOverrides): Promise<void>;

    testFailSenderIncorrectType(overrides?: CallOverrides): Promise<void>;

    testFormatDomainAndSender(overrides?: CallOverrides): Promise<void>;

    testFormatDomainAndSenderBytes(overrides?: CallOverrides): Promise<void>;

    testIsDomainAndSender(overrides?: CallOverrides): Promise<void>;

    testIsType(overrides?: CallOverrides): Promise<void>;

    testMustBeProperty(overrides?: CallOverrides): Promise<void>;

    testParseDomainAndSenderBytes(overrides?: CallOverrides): Promise<void>;

    testPropertyType(overrides?: CallOverrides): Promise<void>;

    testSender(overrides?: CallOverrides): Promise<void>;

    testTryAsProperty(overrides?: CallOverrides): Promise<void>;

    testTryAsPropertyInvalidLength(overrides?: CallOverrides): Promise<void>;

    testValidPropertyLength(overrides?: CallOverrides): Promise<void>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "log(string)"(arg0?: null): logEventFilter;
    log(arg0?: null): logEventFilter;

    "log_address(address)"(arg0?: null): log_addressEventFilter;
    log_address(arg0?: null): log_addressEventFilter;

    "log_bytes(bytes)"(arg0?: null): log_bytesEventFilter;
    log_bytes(arg0?: null): log_bytesEventFilter;

    "log_bytes32(bytes32)"(arg0?: null): log_bytes32EventFilter;
    log_bytes32(arg0?: null): log_bytes32EventFilter;

    "log_int(int256)"(arg0?: null): log_intEventFilter;
    log_int(arg0?: null): log_intEventFilter;

    "log_named_address(string,address)"(
      key?: null,
      val?: null
    ): log_named_addressEventFilter;
    log_named_address(key?: null, val?: null): log_named_addressEventFilter;

    "log_named_bytes(string,bytes)"(
      key?: null,
      val?: null
    ): log_named_bytesEventFilter;
    log_named_bytes(key?: null, val?: null): log_named_bytesEventFilter;

    "log_named_bytes32(string,bytes32)"(
      key?: null,
      val?: null
    ): log_named_bytes32EventFilter;
    log_named_bytes32(key?: null, val?: null): log_named_bytes32EventFilter;

    "log_named_decimal_int(string,int256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;
    log_named_decimal_int(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_intEventFilter;

    "log_named_decimal_uint(string,uint256,uint256)"(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;
    log_named_decimal_uint(
      key?: null,
      val?: null,
      decimals?: null
    ): log_named_decimal_uintEventFilter;

    "log_named_int(string,int256)"(
      key?: null,
      val?: null
    ): log_named_intEventFilter;
    log_named_int(key?: null, val?: null): log_named_intEventFilter;

    "log_named_string(string,string)"(
      key?: null,
      val?: null
    ): log_named_stringEventFilter;
    log_named_string(key?: null, val?: null): log_named_stringEventFilter;

    "log_named_uint(string,uint256)"(
      key?: null,
      val?: null
    ): log_named_uintEventFilter;
    log_named_uint(key?: null, val?: null): log_named_uintEventFilter;

    "log_string(string)"(arg0?: null): log_stringEventFilter;
    log_string(arg0?: null): log_stringEventFilter;

    "log_uint(uint256)"(arg0?: null): log_uintEventFilter;
    log_uint(arg0?: null): log_uintEventFilter;

    "logs(bytes)"(arg0?: null): logsEventFilter;
    logs(arg0?: null): logsEventFilter;
  };

  estimateGas: {
    IS_TEST(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_ASSET(overrides?: CallOverrides): Promise<BigNumber>;

    failed(overrides?: CallOverrides): Promise<BigNumber>;

    getProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPropertyBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stdstore(overrides?: CallOverrides): Promise<BigNumber>;

    testDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailDomainIncorrectType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailMustBeProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFailSenderIncorrectType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFormatDomainAndSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFormatDomainAndSenderBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testIsDomainAndSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testIsType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testMustBeProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testParseDomainAndSenderBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testPropertyType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testTryAsProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testTryAsPropertyInvalidLength(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testValidPropertyLength(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_TEST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NATIVE_ASSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    failed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPropertyBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stdstore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testDomain(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailDomainIncorrectType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailMustBeProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFailSenderIncorrectType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFormatDomainAndSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFormatDomainAndSenderBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testIsDomainAndSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testIsType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testMustBeProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testParseDomainAndSenderBytes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testPropertyType(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testSender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testTryAsProperty(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testTryAsPropertyInvalidLength(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testValidPropertyLength(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
