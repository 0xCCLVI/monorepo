/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CounterInterface extends utils.Interface {
  contractName: "Counter";
  functions: {
    "attack()": FunctionFragment;
    "count()": FunctionFragment;
    "executor()": FunctionFragment;
    "increment()": FunctionFragment;
    "incrementAndSend(address,address,uint256)": FunctionFragment;
    "setExecutor(address)": FunctionFragment;
    "setShouldRevert(bool)": FunctionFragment;
    "shouldRevert()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "attack", values?: undefined): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(functionFragment: "increment", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incrementAndSend",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setExecutor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setShouldRevert",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRevert",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementAndSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldRevert",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Counter extends BaseContract {
  contractName: "Counter";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CounterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attack(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    increment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    incrementAndSend(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setShouldRevert(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shouldRevert(overrides?: CallOverrides): Promise<[boolean]>;
  };

  attack(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  executor(overrides?: CallOverrides): Promise<string>;

  increment(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  incrementAndSend(
    assetId: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExecutor(
    _executor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setShouldRevert(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shouldRevert(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    attack(overrides?: CallOverrides): Promise<void>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<string>;

    increment(overrides?: CallOverrides): Promise<void>;

    incrementAndSend(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExecutor(_executor: string, overrides?: CallOverrides): Promise<void>;

    setShouldRevert(value: boolean, overrides?: CallOverrides): Promise<void>;

    shouldRevert(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    attack(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    increment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    incrementAndSend(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setShouldRevert(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shouldRevert(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    attack(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    incrementAndSend(
      assetId: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExecutor(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setShouldRevert(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shouldRevert(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
