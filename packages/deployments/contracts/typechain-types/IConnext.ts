/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IConnext {
  export type CallParamsStruct = {
    to: string;
    callData: BytesLike;
    originDomain: BigNumberish;
    destinationDomain: BigNumberish;
  };

  export type CallParamsStructOutput = [string, string, number, number] & {
    to: string;
    callData: string;
    originDomain: number;
    destinationDomain: number;
  };

  export type ExecuteArgsStruct = {
    amount: BigNumberish;
    index: BigNumberish;
    transferId: BytesLike;
    proof: BytesLike[];
    params: IConnext.CallParamsStruct;
    local: string;
    router: string;
    originSender: string;
    feePercentage: BigNumberish;
    relayerSignature: BytesLike;
  };

  export type ExecuteArgsStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string[],
    IConnext.CallParamsStructOutput,
    string,
    string,
    string,
    number,
    string
  ] & {
    amount: BigNumber;
    index: BigNumber;
    transferId: string;
    proof: string[];
    params: IConnext.CallParamsStructOutput;
    local: string;
    router: string;
    originSender: string;
    feePercentage: number;
    relayerSignature: string;
  };

  export type XCallArgsStruct = {
    params: IConnext.CallParamsStruct;
    transactingAssetId: string;
    amount: BigNumberish;
  };

  export type XCallArgsStructOutput = [
    IConnext.CallParamsStructOutput,
    string,
    BigNumber
  ] & {
    params: IConnext.CallParamsStructOutput;
    transactingAssetId: string;
    amount: BigNumber;
  };
}

export declare namespace BridgeMessage {
  export type TokenIdStruct = { domain: BigNumberish; id: BytesLike };

  export type TokenIdStructOutput = [number, string] & {
    domain: number;
    id: string;
  };
}

export interface IConnextInterface extends utils.Interface {
  contractName: "IConnext";
  functions: {
    "addLiquidity(uint256,address)": FunctionFragment;
    "addLiquidityFor(uint256,address,address)": FunctionFragment;
    "addRelayerFees(address)": FunctionFragment;
    "addRouter(address)": FunctionFragment;
    "addStableSwapPool((uint32,bytes32),address)": FunctionFragment;
    "dispatch(uint32)": FunctionFragment;
    "execute((uint256,uint256,bytes32,bytes32[32],(address,bytes,uint32,uint32),address,address,address,uint32,bytes))": FunctionFragment;
    "initialize(uint256,address,address,address)": FunctionFragment;
    "process(bytes32,uint256,address,address,uint256,bytes32[32],(address,bytes,uint32,uint32))": FunctionFragment;
    "reconcile(bytes32)": FunctionFragment;
    "removeAssetId(bytes32,address)": FunctionFragment;
    "removeLiquidity(uint256,address,address)": FunctionFragment;
    "removeRelayerFees(uint256,address)": FunctionFragment;
    "removeRouter(address)": FunctionFragment;
    "setupAsset((uint32,bytes32),address,address)": FunctionFragment;
    "xcall(((address,bytes,uint32,uint32),address,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityFor",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRelayerFees",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addStableSwapPool",
    values: [BridgeMessage.TokenIdStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [IConnext.ExecuteArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [
      BytesLike,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike[],
      IConnext.CallParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reconcile",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayerFees",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAsset",
    values: [BridgeMessage.TokenIdStruct, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "xcall",
    values: [IConnext.XCallArgsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRelayerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStableSwapPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dispatch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reconcile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xcall", data: BytesLike): Result;

  events: {
    "AssetAdded(bytes32,uint32,address,address,address)": EventFragment;
    "AssetRemoved(bytes32,address)": EventFragment;
    "Dispatched(uint32,bytes32,address[3],uint256[3],address)": EventFragment;
    "Executed(bytes32,address,address,tuple,address,address,uint256,uint256,address)": EventFragment;
    "LiquidityAdded(address,address,bytes32,uint256,address)": EventFragment;
    "LiquidityRemoved(address,address,address,uint256,address)": EventFragment;
    "Reconciled(bytes32,address)": EventFragment;
    "RouterAdded(address,address)": EventFragment;
    "RouterRemoved(address,address)": EventFragment;
    "StableSwapAdded(bytes32,uint32,address,address)": EventFragment;
    "XCalled(bytes32,uint256,address,tuple,address,address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reconciled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableSwapAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XCalled"): EventFragment;
}

export type AssetAddedEvent = TypedEvent<
  [string, number, string, string, string],
  {
    canonicalId: string;
    domain: number;
    adoptedAsset: string;
    supportedAsset: string;
    caller: string;
  }
>;

export type AssetAddedEventFilter = TypedEventFilter<AssetAddedEvent>;

export type AssetRemovedEvent = TypedEvent<
  [string, string],
  { canonicalId: string; caller: string }
>;

export type AssetRemovedEventFilter = TypedEventFilter<AssetRemovedEvent>;

export type DispatchedEvent = TypedEvent<
  [
    number,
    string,
    [string, string, string],
    [BigNumber, BigNumber, BigNumber],
    string
  ],
  {
    destination: number;
    root: string;
    tokens: [string, string, string];
    amounts: [BigNumber, BigNumber, BigNumber];
    caller: string;
  }
>;

export type DispatchedEventFilter = TypedEventFilter<DispatchedEvent>;

export type ExecutedEvent = TypedEvent<
  [
    string,
    string,
    string,
    IConnext.CallParamsStructOutput,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  {
    transferId: string;
    to: string;
    router: string;
    params: IConnext.CallParamsStructOutput;
    localAsset: string;
    transferringAsset: string;
    localAmount: BigNumber;
    transferringAmount: BigNumber;
    caller: string;
  }
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  {
    router: string;
    local: string;
    canonicalId: string;
    amount: BigNumber;
    caller: string;
  }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  {
    router: string;
    to: string;
    local: string;
    amount: BigNumber;
    caller: string;
  }
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export type ReconciledEvent = TypedEvent<
  [string, string],
  { root: string; caller: string }
>;

export type ReconciledEventFilter = TypedEventFilter<ReconciledEvent>;

export type RouterAddedEvent = TypedEvent<
  [string, string],
  { router: string; caller: string }
>;

export type RouterAddedEventFilter = TypedEventFilter<RouterAddedEvent>;

export type RouterRemovedEvent = TypedEvent<
  [string, string],
  { router: string; caller: string }
>;

export type RouterRemovedEventFilter = TypedEventFilter<RouterRemovedEvent>;

export type StableSwapAddedEvent = TypedEvent<
  [string, number, string, string],
  { canonicalId: string; domain: number; swapPool: string; caller: string }
>;

export type StableSwapAddedEventFilter = TypedEventFilter<StableSwapAddedEvent>;

export type XCalledEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    IConnext.CallParamsStructOutput,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  {
    transferId: string;
    idx: BigNumber;
    to: string;
    params: IConnext.CallParamsStructOutput;
    transferringAsset: string;
    localAsset: string;
    transferringAmount: BigNumber;
    localAmount: BigNumber;
    nonce: BigNumber;
    caller: string;
  }
>;

export type XCalledEventFilter = TypedEventFilter<XCalledEvent>;

export interface IConnext extends BaseContract {
  contractName: "IConnext";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IConnextInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      amount: BigNumberish,
      local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityFor(
      amount: BigNumberish,
      local: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRelayerFees(
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStableSwapPool(
      canonical: BridgeMessage.TokenIdStruct,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dispatch(
      _destination: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _args: IConnext.ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _domain: BigNumberish,
      _bridgeRouter: string,
      _tokenRegistry: string,
      _wrappedNative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    process(
      _transferId: BytesLike,
      _amount: BigNumberish,
      _local: string,
      _originSender: string,
      _index: BigNumberish,
      _proof: BytesLike[],
      _params: IConnext.CallParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reconcile(
      _incomingRoot: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAssetId(
      canonicalId: BytesLike,
      adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      local: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRelayerFees(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupAsset(
      canonical: BridgeMessage.TokenIdStruct,
      adoptedAssetId: string,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    amount: BigNumberish,
    local: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityFor(
    amount: BigNumberish,
    local: string,
    router: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRelayerFees(
    router: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStableSwapPool(
    canonical: BridgeMessage.TokenIdStruct,
    stableSwapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dispatch(
    _destination: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _args: IConnext.ExecuteArgsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _domain: BigNumberish,
    _bridgeRouter: string,
    _tokenRegistry: string,
    _wrappedNative: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  process(
    _transferId: BytesLike,
    _amount: BigNumberish,
    _local: string,
    _originSender: string,
    _index: BigNumberish,
    _proof: BytesLike[],
    _params: IConnext.CallParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reconcile(
    _incomingRoot: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAssetId(
    canonicalId: BytesLike,
    adoptedAssetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    local: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRelayerFees(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupAsset(
    canonical: BridgeMessage.TokenIdStruct,
    adoptedAssetId: string,
    stableSwapPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xcall(
    _args: IConnext.XCallArgsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      amount: BigNumberish,
      local: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityFor(
      amount: BigNumberish,
      local: string,
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRelayerFees(router: string, overrides?: CallOverrides): Promise<void>;

    addRouter(router: string, overrides?: CallOverrides): Promise<void>;

    addStableSwapPool(
      canonical: BridgeMessage.TokenIdStruct,
      stableSwapPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dispatch(
      _destination: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      _args: IConnext.ExecuteArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _domain: BigNumberish,
      _bridgeRouter: string,
      _tokenRegistry: string,
      _wrappedNative: string,
      overrides?: CallOverrides
    ): Promise<void>;

    process(
      _transferId: BytesLike,
      _amount: BigNumberish,
      _local: string,
      _originSender: string,
      _index: BigNumberish,
      _proof: BytesLike[],
      _params: IConnext.CallParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    reconcile(
      _incomingRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAssetId(
      canonicalId: BytesLike,
      adoptedAssetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      amount: BigNumberish,
      local: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayerFees(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRouter(router: string, overrides?: CallOverrides): Promise<void>;

    setupAsset(
      canonical: BridgeMessage.TokenIdStruct,
      adoptedAssetId: string,
      stableSwapPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AssetAdded(bytes32,uint32,address,address,address)"(
      canonicalId?: null,
      domain?: null,
      adoptedAsset?: null,
      supportedAsset?: null,
      caller?: null
    ): AssetAddedEventFilter;
    AssetAdded(
      canonicalId?: null,
      domain?: null,
      adoptedAsset?: null,
      supportedAsset?: null,
      caller?: null
    ): AssetAddedEventFilter;

    "AssetRemoved(bytes32,address)"(
      canonicalId?: null,
      caller?: null
    ): AssetRemovedEventFilter;
    AssetRemoved(canonicalId?: null, caller?: null): AssetRemovedEventFilter;

    "Dispatched(uint32,bytes32,address[3],uint256[3],address)"(
      destination?: null,
      root?: null,
      tokens?: null,
      amounts?: null,
      caller?: null
    ): DispatchedEventFilter;
    Dispatched(
      destination?: null,
      root?: null,
      tokens?: null,
      amounts?: null,
      caller?: null
    ): DispatchedEventFilter;

    "Executed(bytes32,address,address,tuple,address,address,uint256,uint256,address)"(
      transferId?: BytesLike | null,
      to?: string | null,
      router?: string | null,
      params?: null,
      localAsset?: null,
      transferringAsset?: null,
      localAmount?: null,
      transferringAmount?: null,
      caller?: null
    ): ExecutedEventFilter;
    Executed(
      transferId?: BytesLike | null,
      to?: string | null,
      router?: string | null,
      params?: null,
      localAsset?: null,
      transferringAsset?: null,
      localAmount?: null,
      transferringAmount?: null,
      caller?: null
    ): ExecutedEventFilter;

    "LiquidityAdded(address,address,bytes32,uint256,address)"(
      router?: null,
      local?: null,
      canonicalId?: null,
      amount?: null,
      caller?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      router?: null,
      local?: null,
      canonicalId?: null,
      amount?: null,
      caller?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,address,address,uint256,address)"(
      router?: string | null,
      to?: null,
      local?: null,
      amount?: null,
      caller?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      router?: string | null,
      to?: null,
      local?: null,
      amount?: null,
      caller?: null
    ): LiquidityRemovedEventFilter;

    "Reconciled(bytes32,address)"(
      root?: null,
      caller?: null
    ): ReconciledEventFilter;
    Reconciled(root?: null, caller?: null): ReconciledEventFilter;

    "RouterAdded(address,address)"(
      router?: null,
      caller?: null
    ): RouterAddedEventFilter;
    RouterAdded(router?: null, caller?: null): RouterAddedEventFilter;

    "RouterRemoved(address,address)"(
      router?: null,
      caller?: null
    ): RouterRemovedEventFilter;
    RouterRemoved(router?: null, caller?: null): RouterRemovedEventFilter;

    "StableSwapAdded(bytes32,uint32,address,address)"(
      canonicalId?: null,
      domain?: null,
      swapPool?: null,
      caller?: null
    ): StableSwapAddedEventFilter;
    StableSwapAdded(
      canonicalId?: null,
      domain?: null,
      swapPool?: null,
      caller?: null
    ): StableSwapAddedEventFilter;

    "XCalled(bytes32,uint256,address,tuple,address,address,uint256,uint256,uint256,address)"(
      transferId?: BytesLike | null,
      idx?: BigNumberish | null,
      to?: string | null,
      params?: null,
      transferringAsset?: null,
      localAsset?: null,
      transferringAmount?: null,
      localAmount?: null,
      nonce?: null,
      caller?: null
    ): XCalledEventFilter;
    XCalled(
      transferId?: BytesLike | null,
      idx?: BigNumberish | null,
      to?: string | null,
      params?: null,
      transferringAsset?: null,
      localAsset?: null,
      transferringAmount?: null,
      localAmount?: null,
      nonce?: null,
      caller?: null
    ): XCalledEventFilter;
  };

  estimateGas: {
    addLiquidity(
      amount: BigNumberish,
      local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityFor(
      amount: BigNumberish,
      local: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRelayerFees(
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStableSwapPool(
      canonical: BridgeMessage.TokenIdStruct,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dispatch(
      _destination: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _args: IConnext.ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _domain: BigNumberish,
      _bridgeRouter: string,
      _tokenRegistry: string,
      _wrappedNative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    process(
      _transferId: BytesLike,
      _amount: BigNumberish,
      _local: string,
      _originSender: string,
      _index: BigNumberish,
      _proof: BytesLike[],
      _params: IConnext.CallParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reconcile(
      _incomingRoot: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAssetId(
      canonicalId: BytesLike,
      adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      local: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRelayerFees(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupAsset(
      canonical: BridgeMessage.TokenIdStruct,
      adoptedAssetId: string,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      amount: BigNumberish,
      local: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityFor(
      amount: BigNumberish,
      local: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRelayerFees(
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStableSwapPool(
      canonical: BridgeMessage.TokenIdStruct,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dispatch(
      _destination: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _args: IConnext.ExecuteArgsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _domain: BigNumberish,
      _bridgeRouter: string,
      _tokenRegistry: string,
      _wrappedNative: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    process(
      _transferId: BytesLike,
      _amount: BigNumberish,
      _local: string,
      _originSender: string,
      _index: BigNumberish,
      _proof: BytesLike[],
      _params: IConnext.CallParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reconcile(
      _incomingRoot: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAssetId(
      canonicalId: BytesLike,
      adoptedAssetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      local: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayerFees(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupAsset(
      canonical: BridgeMessage.TokenIdStruct,
      adoptedAssetId: string,
      stableSwapPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xcall(
      _args: IConnext.XCallArgsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
