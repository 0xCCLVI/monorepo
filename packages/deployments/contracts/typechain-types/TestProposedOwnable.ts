/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestProposedOwnableInterface extends utils.Interface {
  contractName: "TestProposedOwnable";
  functions: {
    "acceptProposedOwner()": FunctionFragment;
    "assetOwnershipTimestamp()": FunctionFragment;
    "delay()": FunctionFragment;
    "getValue()": FunctionFragment;
    "initialize(uint256)": FunctionFragment;
    "isAssetOwnershipRenounced()": FunctionFragment;
    "isRouterOwnershipRenounced()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeAssetOwnershipRenunciation()": FunctionFragment;
    "proposeNewOwner(address)": FunctionFragment;
    "proposeRouterOwnershipRenunciation()": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedTimestamp()": FunctionFragment;
    "renounceAssetOwnership()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRouterOwnership()": FunctionFragment;
    "renounced()": FunctionFragment;
    "routerOwnershipTimestamp()": FunctionFragment;
    "setValue(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptProposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetOwnershipTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(functionFragment: "getValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetOwnershipRenounced",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRouterOwnershipRenounced",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeAssetOwnershipRenunciation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRouterOwnershipRenunciation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAssetOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRouterOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renounced", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "routerOwnershipTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptProposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetOwnershipTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetOwnershipRenounced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRouterOwnershipRenounced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeAssetOwnershipRenunciation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRouterOwnershipRenunciation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAssetOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRouterOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renounced", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routerOwnershipTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;

  events: {
    "AssetOwnershipRenounced(bool)": EventFragment;
    "AssetOwnershipRenunciationProposed(uint256)": EventFragment;
    "OwnershipProposed(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RouterOwnershipRenounced(bool)": EventFragment;
    "RouterOwnershipRenunciationProposed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetOwnershipRenounced"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetOwnershipRenunciationProposed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterOwnershipRenounced"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RouterOwnershipRenunciationProposed"
  ): EventFragment;
}

export type AssetOwnershipRenouncedEvent = TypedEvent<
  [boolean],
  { renounced: boolean }
>;

export type AssetOwnershipRenouncedEventFilter =
  TypedEventFilter<AssetOwnershipRenouncedEvent>;

export type AssetOwnershipRenunciationProposedEvent = TypedEvent<
  [BigNumber],
  { timestamp: BigNumber }
>;

export type AssetOwnershipRenunciationProposedEventFilter =
  TypedEventFilter<AssetOwnershipRenunciationProposedEvent>;

export type OwnershipProposedEvent = TypedEvent<
  [string],
  { proposedOwner: string }
>;

export type OwnershipProposedEventFilter =
  TypedEventFilter<OwnershipProposedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RouterOwnershipRenouncedEvent = TypedEvent<
  [boolean],
  { renounced: boolean }
>;

export type RouterOwnershipRenouncedEventFilter =
  TypedEventFilter<RouterOwnershipRenouncedEvent>;

export type RouterOwnershipRenunciationProposedEvent = TypedEvent<
  [BigNumber],
  { timestamp: BigNumber }
>;

export type RouterOwnershipRenunciationProposedEventFilter =
  TypedEventFilter<RouterOwnershipRenunciationProposedEvent>;

export interface TestProposedOwnable extends BaseContract {
  contractName: "TestProposedOwnable";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestProposedOwnableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assetOwnershipTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAssetOwnershipRenounced(overrides?: CallOverrides): Promise<[boolean]>;

    isRouterOwnershipRenounced(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposeAssetOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeRouterOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceAssetOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRouterOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounced(overrides?: CallOverrides): Promise<[boolean]>;

    routerOwnershipTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    setValue(
      _newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptProposedOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assetOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  getValue(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAssetOwnershipRenounced(overrides?: CallOverrides): Promise<boolean>;

  isRouterOwnershipRenounced(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposeAssetOwnershipRenunciation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeNewOwner(
    newlyProposed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeRouterOwnershipRenunciation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  renounceAssetOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRouterOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounced(overrides?: CallOverrides): Promise<boolean>;

  routerOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  setValue(
    _newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptProposedOwner(overrides?: CallOverrides): Promise<void>;

    assetOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isAssetOwnershipRenounced(overrides?: CallOverrides): Promise<boolean>;

    isRouterOwnershipRenounced(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeAssetOwnershipRenunciation(overrides?: CallOverrides): Promise<void>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeRouterOwnershipRenunciation(
      overrides?: CallOverrides
    ): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    renounceAssetOwnership(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRouterOwnership(overrides?: CallOverrides): Promise<void>;

    renounced(overrides?: CallOverrides): Promise<boolean>;

    routerOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    setValue(_newValue: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetOwnershipRenounced(bool)"(
      renounced?: null
    ): AssetOwnershipRenouncedEventFilter;
    AssetOwnershipRenounced(
      renounced?: null
    ): AssetOwnershipRenouncedEventFilter;

    "AssetOwnershipRenunciationProposed(uint256)"(
      timestamp?: null
    ): AssetOwnershipRenunciationProposedEventFilter;
    AssetOwnershipRenunciationProposed(
      timestamp?: null
    ): AssetOwnershipRenunciationProposedEventFilter;

    "OwnershipProposed(address)"(
      proposedOwner?: string | null
    ): OwnershipProposedEventFilter;
    OwnershipProposed(
      proposedOwner?: string | null
    ): OwnershipProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RouterOwnershipRenounced(bool)"(
      renounced?: null
    ): RouterOwnershipRenouncedEventFilter;
    RouterOwnershipRenounced(
      renounced?: null
    ): RouterOwnershipRenouncedEventFilter;

    "RouterOwnershipRenunciationProposed(uint256)"(
      timestamp?: null
    ): RouterOwnershipRenunciationProposedEventFilter;
    RouterOwnershipRenunciationProposed(
      timestamp?: null
    ): RouterOwnershipRenunciationProposedEventFilter;
  };

  estimateGas: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assetOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAssetOwnershipRenounced(overrides?: CallOverrides): Promise<BigNumber>;

    isRouterOwnershipRenounced(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAssetOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeRouterOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    renounceAssetOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRouterOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounced(overrides?: CallOverrides): Promise<BigNumber>;

    routerOwnershipTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    setValue(
      _newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptProposedOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assetOwnershipTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAssetOwnershipRenounced(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRouterOwnershipRenounced(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeAssetOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewOwner(
      newlyProposed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeRouterOwnershipRenunciation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceAssetOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRouterOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routerOwnershipTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setValue(
      _newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
