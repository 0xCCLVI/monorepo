/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BridgeMessage, BridgeMessageInterface } from "../BridgeMessage";

const _abi = [
  {
    inputs: [],
    name: "TOKENS_IN_BATCH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6087610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80636c7f721e146038575b600080fd5b603f600381565b60405190815260200160405180910390f3fea2646970667358221220928212af4e325043ebd941a86bc5c733e84ce02f4bde972a831787673227dbff64736f6c634300080b0033";

type BridgeMessageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeMessageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeMessage__factory extends ContractFactory {
  constructor(...args: BridgeMessageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "BridgeMessage";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BridgeMessage> {
    return super.deploy(overrides || {}) as Promise<BridgeMessage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BridgeMessage {
    return super.attach(address) as BridgeMessage;
  }
  connect(signer: Signer): BridgeMessage__factory {
    return super.connect(signer) as BridgeMessage__factory;
  }
  static readonly contractName: "BridgeMessage";
  public readonly contractName: "BridgeMessage";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeMessageInterface {
    return new utils.Interface(_abi) as BridgeMessageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeMessage {
    return new Contract(address, _abi, signerOrProvider) as BridgeMessage;
  }
}
