/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RouterPermissionsManagerLogic,
  RouterPermissionsManagerLogicInterface,
} from "../../../../contracts/lib/logic/RouterPermissionsManagerLogic";

const _abi = [
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__acceptProposedRouterOwner_notElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__onlyProposedRouterOwner_notProposedRouterOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__onlyProposedRouterOwner_notRouterOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__onlyRouterOwner_notRouterOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__proposeRouterOwner_badRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__proposeRouterOwner_notNewOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__removeRouter_notAdded",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__removeRouter_routerEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__setRouterRecipient_notNewRecipient",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__setupRouter_amountIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManagerLogic__setupRouter_routerEmpty",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "RouterAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "RouterOwnerAccepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "prevProposed",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newProposed",
        type: "address",
      },
    ],
    name: "RouterOwnerProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "prevRecipient",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newRecipient",
        type: "address",
      },
    ],
    name: "RouterRecipientSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "RouterRemoved",
    type: "event",
  },
];

const _bytecode =
  "0x6107f661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806339c483151461005b57806368c1fad81461007d5780638596e32b1461009d578063dc26fe0f146100bd575b600080fd5b81801561006757600080fd5b5061007b610076366004610702565b6100dd565b005b81801561008957600080fd5b5061007b61009836600461072c565b6102a3565b8180156100a957600080fd5b5061007b6100b836600461075f565b6103f3565b8180156100c957600080fd5b5061007b6100d836600461075f565b6104be565b6001600160a01b0382166101045760405163eef8139760e01b815260040160405180910390fd5b6001600160a01b03821660009081526020829052604090205460ff1661013d57604051635c69321160e11b815260040160405180910390fd5b6001600160a01b03821660008181526020838152604091829020805460ff1916905590513381527fbee3e974bb6a6f44f20096ede047c191eef60322e65e4ee4bd3392230a8716d5910160405180910390a26001600160a01b038083166000908152600283016020526040902054168015610216576040516000906001600160a01b0383811691908616907fd73892e8827a6025d74a01fca72a8e0d9e2c04080272e728f8861410c7d3c2d1908490a46001600160a01b0383166000908152600283016020526040902080546001600160a01b03191690555b6001600160a01b03808416600090815260018401602052604090205416801561029d576040516000906001600160a01b0383811691908716907f31f32ebf07b0ac7fe173f7b7f3f943020d9bdc6dbfbdcdae01bd45ea78d953d7908490a46001600160a01b0384166000908152600184016020526040902080546001600160a01b03191690555b50505050565b6001600160a01b03808416600090815260028301602090815260408083205460038601909252909120546102dc928692811691166105d6565b60006102eb8483600201610660565b6001600160a01b03851660009081526004840160205260409020549091508390610315904261079b565b1161033357604051630702f26f60e41b815260040160405180910390fd5b6001600160a01b0380851660009081526003840160209081526040808320546002870190925290912080546001600160a01b0319169190921690811790915580156103a1576001600160a01b0385166000908152600384016020526040902080546001600160a01b03191690555b6001600160a01b0380861660008181526004860160205260408082208290555184841693861692917fd73892e8827a6025d74a01fca72a8e0d9e2c04080272e728f8861410c7d3c2d191a45050505050565b6001600160a01b03808416600090815260028301602052604090205461041b91859116610693565b6001600160a01b038084166000908152600183016020526040902054811690831681141561045c5760405163e0cd59cd60e01b815260040160405180910390fd5b6001600160a01b03848116600081815260018501602052604080822080546001600160a01b03191688861690811790915590519093851692917f31f32ebf07b0ac7fe173f7b7f3f943020d9bdc6dbfbdcdae01bd45ea78d953d791a450505050565b6001600160a01b0380841660009081526002830160205260409020546104e691859116610693565b816001600160a01b03166104fd8483600201610660565b6001600160a01b031614156105255760405163dfb10e3160e01b815260040160405180910390fd5b6001600160a01b038084166000908152600383016020526040902054811690831681141561056657604051630c76d9b960e41b815260040160405180910390fd5b6001600160a01b038481166000818152600385016020908152604080832080546001600160a01b03191689871690811790915560048801909252808320429055519093851692917fee0158b57adc03901d8b16c48cd10c33ca1283ee96c6e0d30f817ceba74dc4a191a450505050565b6001600160a01b038116610637576001600160a01b0382161580156106035750336001600160a01b038416145b8061061657506001600160a01b03821633145b6106325760405162a74d6f60e71b815260040160405180910390fd5b505050565b336001600160a01b038216146106325760405163171d2e7560e01b815260040160405180910390fd5b6001600160a01b038083166000908152602083905260408120549091168015610689578061068b565b835b949350505050565b6001600160a01b0381161580156106b25750336001600160a01b038316145b806106c557506001600160a01b03811633145b6106e257604051636cd71d6f60e11b815260040160405180910390fd5b5050565b80356001600160a01b03811681146106fd57600080fd5b919050565b6000806040838503121561071557600080fd5b61071e836106e6565b946020939093013593505050565b60008060006060848603121561074157600080fd5b61074a846106e6565b95602085013595506040909401359392505050565b60008060006060848603121561077457600080fd5b61077d846106e6565b925061078b602085016106e6565b9150604084013590509250925092565b6000828210156107bb57634e487b7160e01b600052601160045260246000fd5b50039056fea26469706673582212202ee3e3ead711d37fefb8756a02b55ba5d605e4b82244ad73c236c0cb987a951164736f6c634300080b0033";

type RouterPermissionsManagerLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouterPermissionsManagerLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RouterPermissionsManagerLogic__factory extends ContractFactory {
  constructor(...args: RouterPermissionsManagerLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RouterPermissionsManagerLogic> {
    return super.deploy(
      overrides || {}
    ) as Promise<RouterPermissionsManagerLogic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RouterPermissionsManagerLogic {
    return super.attach(address) as RouterPermissionsManagerLogic;
  }
  override connect(signer: Signer): RouterPermissionsManagerLogic__factory {
    return super.connect(signer) as RouterPermissionsManagerLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterPermissionsManagerLogicInterface {
    return new utils.Interface(_abi) as RouterPermissionsManagerLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterPermissionsManagerLogic {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RouterPermissionsManagerLogic;
  }
}
