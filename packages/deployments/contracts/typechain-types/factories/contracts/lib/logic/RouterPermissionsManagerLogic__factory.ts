/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RouterPermissionsManagerLogic,
  RouterPermissionsManagerLogicInterface,
} from "../../../../contracts/lib/logic/RouterPermissionsManagerLogic";

const _abi = [
  {
    inputs: [],
    name: "RouterPermissionsManager__acceptProposedRouterOwner_notElapsed",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__onlyProposedRouterOwner_notProposedRouterOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__onlyProposedRouterOwner_notRouterOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__onlyRouterOwner_notRouterOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__proposeRouterOwner_badRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__proposeRouterOwner_notNewOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__removeRouter_notAdded",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__removeRouter_routerEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__setRouterRecipient_notNewRecipient",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__setupRouter_amountIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterPermissionsManager__setupRouter_routerEmpty",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "RouterAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "RouterOwnerAccepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "prevProposed",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newProposed",
        type: "address",
      },
    ],
    name: "RouterOwnerProposed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "prevRecipient",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newRecipient",
        type: "address",
      },
    ],
    name: "RouterRecipientSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "RouterRemoved",
    type: "event",
  },
];

const _bytecode =
  "0x61090761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100875760003560e01c806344a07e9b1161006557806344a07e9b146100ee5780634d46ca761461010e578063b0df0e271461012e578063f1d2ee9f1461016a57600080fd5b806320722d3e1461008c57806328344c1d146100ae5780632ece2cd0146100ce575b600080fd5b81801561009857600080fd5b506100ac6100a73660046106ed565b61018a565b005b8180156100ba57600080fd5b506100ac6100c9366004610720565b6101dd565b8180156100da57600080fd5b506100ac6100e936600461075c565b61027c565b8180156100fa57600080fd5b506100ac61010936600461079f565b610307565b81801561011a57600080fd5b506100ac6101293660046107f4565b6103e4565b81801561013a57600080fd5b5061014e61014936600461082d565b6105a4565b6040516001600160a01b03909116815260200160405180910390f35b81801561017657600080fd5b506100ac610185366004610857565b6105d7565b6001600160a01b0381161580156101a95750336001600160a01b038316145b806101bc57506001600160a01b03811633145b6101d957604051633e4a742f60e01b815260040160405180910390fd5b5050565b6001600160a01b03808416600090815260208390526040902054811690831681141561021c5760405163037d903d60e01b815260040160405180910390fd5b6001600160a01b0384811660008181526020859052604080822080546001600160a01b03191688861690811790915590519093851692917f31f32ebf07b0ac7fe173f7b7f3f943020d9bdc6dbfbdcdae01bd45ea78d953d791a450505050565b6001600160a01b0381166102de576001600160a01b0382161580156102a95750336001600160a01b038416145b806102bc57506001600160a01b03821633145b6102d957604051631c4f99cf60e01b815260040160405180910390fd5b505050565b336001600160a01b038216146102d9576040516318a1eec560e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b0316141561033a57604051634ed1e22f60e01b815260040160405180910390fd5b6001600160a01b03808616600090815260208490526040902054811690851681141561037957604051639e53a18f60e01b815260040160405180910390fd5b6001600160a01b0386811660008181526020868152604080832080546001600160a01b0319168b871690811790915591879052808320429055519093851692917fee0158b57adc03901d8b16c48cd10c33ca1283ee96c6e0d30f817ceba74dc4a191a4505050505050565b6001600160a01b03841661040b576040516341fc026f60e11b815260040160405180910390fd5b6001600160a01b03841660009081526020849052604090205460ff1661044457604051634f1d22c560e11b815260040160405180910390fd5b6001600160a01b03841660008181526020858152604091829020805460ff1916905590513381527fbee3e974bb6a6f44f20096ede047c191eef60322e65e4ee4bd3392230a8716d5910160405180910390a26001600160a01b03808516600090815260208490526040902054168015610519576040516000906001600160a01b0383811691908816907fd73892e8827a6025d74a01fca72a8e0d9e2c04080272e728f8861410c7d3c2d1908490a46001600160a01b038516600090815260208490526040902080546001600160a01b03191690555b6001600160a01b0380861660009081526020849052604090205416801561059c576040516000906001600160a01b0383811691908916907f31f32ebf07b0ac7fe173f7b7f3f943020d9bdc6dbfbdcdae01bd45ea78d953d7908490a46001600160a01b038616600090815260208490526040902080546001600160a01b03191690555b505050505050565b6001600160a01b0380831660009081526020839052604081205490911680156105cd57806105cf565b835b949350505050565b6001600160a01b03861660009081526020829052604090205484906105fc90426108ac565b1161061a57604051637d4d111f60e01b815260040160405180910390fd5b6001600160a01b03808716600090815260208481526040808320549187905290912080546001600160a01b03191691909216908117909155801561067f576001600160a01b038716600090815260208490526040902080546001600160a01b03191690555b6001600160a01b0380881660008181526020859052604080822082905551848416938a1692917fd73892e8827a6025d74a01fca72a8e0d9e2c04080272e728f8861410c7d3c2d191a450505050505050565b80356001600160a01b03811681146106e857600080fd5b919050565b6000806040838503121561070057600080fd5b610709836106d1565b9150610717602084016106d1565b90509250929050565b60008060006060848603121561073557600080fd5b61073e846106d1565b925061074c602085016106d1565b9150604084013590509250925092565b60008060006060848603121561077157600080fd5b61077a846106d1565b9250610788602085016106d1565b9150610796604085016106d1565b90509250925092565b600080600080600060a086880312156107b757600080fd5b6107c0866106d1565b94506107ce602087016106d1565b93506107dc604087016106d1565b94979396509394606081013594506080013592915050565b6000806000806080858703121561080a57600080fd5b610813856106d1565b966020860135965060408601359560600135945092505050565b6000806040838503121561084057600080fd5b610849836106d1565b946020939093013593505050565b60008060008060008060c0878903121561087057600080fd5b610879876106d1565b9550610887602088016106d1565b95989597505050506040840135936060810135936080820135935060a0909101359150565b6000828210156108cc57634e487b7160e01b600052601160045260246000fd5b50039056fea26469706673582212202e50200a108c2e6b69878ba81bd3bcd2da5f96fe1913d6645719c4a24dafec5e64736f6c634300080b0033";

type RouterPermissionsManagerLogicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RouterPermissionsManagerLogicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RouterPermissionsManagerLogic__factory extends ContractFactory {
  constructor(...args: RouterPermissionsManagerLogicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RouterPermissionsManagerLogic> {
    return super.deploy(
      overrides || {}
    ) as Promise<RouterPermissionsManagerLogic>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RouterPermissionsManagerLogic {
    return super.attach(address) as RouterPermissionsManagerLogic;
  }
  override connect(signer: Signer): RouterPermissionsManagerLogic__factory {
    return super.connect(signer) as RouterPermissionsManagerLogic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RouterPermissionsManagerLogicInterface {
    return new utils.Interface(_abi) as RouterPermissionsManagerLogicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RouterPermissionsManagerLogic {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RouterPermissionsManagerLogic;
  }
}
