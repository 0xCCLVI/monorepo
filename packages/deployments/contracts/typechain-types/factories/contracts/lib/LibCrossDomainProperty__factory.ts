/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LibCrossDomainProperty,
  LibCrossDomainPropertyInterface,
} from "../../../contracts/lib/LibCrossDomainProperty";

const _abi = [
  {
    inputs: [],
    name: "DEFAULT_VALUE",
    outputs: [
      {
        internalType: "bytes29",
        name: "",
        type: "bytes29",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6091610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80630715a24a146038575b600080fd5b604262ffffff1981565b60405162ffffff19909116815260200160405180910390f3fea26469706673582212200c2b88e9aac7eec662a969a01f9d59f55d1146216cb13b74b737ea6fecf1218a64736f6c634300080b0033";

type LibCrossDomainPropertyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibCrossDomainPropertyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibCrossDomainProperty__factory extends ContractFactory {
  constructor(...args: LibCrossDomainPropertyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibCrossDomainProperty> {
    return super.deploy(overrides || {}) as Promise<LibCrossDomainProperty>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibCrossDomainProperty {
    return super.attach(address) as LibCrossDomainProperty;
  }
  override connect(signer: Signer): LibCrossDomainProperty__factory {
    return super.connect(signer) as LibCrossDomainProperty__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibCrossDomainPropertyInterface {
    return new utils.Interface(_abi) as LibCrossDomainPropertyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibCrossDomainProperty {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LibCrossDomainProperty;
  }
}
