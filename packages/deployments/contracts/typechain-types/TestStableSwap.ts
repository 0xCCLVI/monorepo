/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestStableSwapInterface extends utils.Interface {
  contractName: "TestStableSwap";
  functions: {
    "MAX_INT()": FunctionFragment;
    "lpToken()": FunctionFragment;
    "n()": FunctionFragment;
    "setupPool(address,address,uint256,uint256)": FunctionFragment;
    "swap()": FunctionFragment;
    "swapExact(uint256,address,address)": FunctionFragment;
    "test_addLiquidity(uint256[],uint256)": FunctionFragment;
    "test_removeLiquidity(uint256,uint256[])": FunctionFragment;
    "test_removeLiquidityImbalance(uint256[],uint256)": FunctionFragment;
    "test_removeLiquidityOneToken(uint256,uint8,uint256)": FunctionFragment;
    "test_swap(uint8,uint8,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX_INT", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "n", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setupPool",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapExact",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "test_addLiquidity",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_removeLiquidity",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "test_removeLiquidityImbalance",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_removeLiquidityOneToken",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "test_swap",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_INT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "n", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setupPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapExact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "test_addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_removeLiquidityImbalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "test_removeLiquidityOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test_swap", data: BytesLike): Result;

  events: {
    "PoolCreated(address,address,uint256,uint256)": EventFragment;
    "Swapped(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
}

export type PoolCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { assetA: string; assetB: string; seedA: BigNumber; seedB: BigNumber }
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export type SwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    assetIn: string;
    assetOut: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
  }
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

export interface TestStableSwap extends BaseContract {
  contractName: "TestStableSwap";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestStableSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_INT(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    n(overrides?: CallOverrides): Promise<[number]>;

    setupPool(
      assetA: string,
      assetB: string,
      seedA: BigNumberish,
      seedB: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(overrides?: CallOverrides): Promise<[string]>;

    swapExact(
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    test_swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  n(overrides?: CallOverrides): Promise<number>;

  setupPool(
    assetA: string,
    assetB: string,
    seedA: BigNumberish,
    seedB: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(overrides?: CallOverrides): Promise<string>;

  swapExact(
    amountIn: BigNumberish,
    assetIn: string,
    assetOut: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_addLiquidity(
    amounts: BigNumberish[],
    minToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_removeLiquidity(
    amount: BigNumberish,
    minAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_removeLiquidityImbalance(
    amounts: BigNumberish[],
    maxBurnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_removeLiquidityOneToken(
    tokenAmount: BigNumberish,
    tokenIndex: BigNumberish,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  test_swap(
    tokenIndexFrom: BigNumberish,
    tokenIndexTo: BigNumberish,
    dx: BigNumberish,
    minDy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    n(overrides?: CallOverrides): Promise<number>;

    setupPool(
      assetA: string,
      assetB: string,
      seedA: BigNumberish,
      seedB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(overrides?: CallOverrides): Promise<string>;

    swapExact(
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    test_addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    test_removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    test_removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    test_removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    test_swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PoolCreated(address,address,uint256,uint256)"(
      assetA?: null,
      assetB?: null,
      seedA?: null,
      seedB?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      assetA?: null,
      assetB?: null,
      seedA?: null,
      seedB?: null
    ): PoolCreatedEventFilter;

    "Swapped(address,address,uint256,uint256)"(
      assetIn?: null,
      assetOut?: null,
      amountIn?: null,
      amountOut?: null
    ): SwappedEventFilter;
    Swapped(
      assetIn?: null,
      assetOut?: null,
      amountIn?: null,
      amountOut?: null
    ): SwappedEventFilter;
  };

  estimateGas: {
    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    n(overrides?: CallOverrides): Promise<BigNumber>;

    setupPool(
      assetA: string,
      assetB: string,
      seedA: BigNumberish,
      seedB: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(overrides?: CallOverrides): Promise<BigNumber>;

    swapExact(
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    test_swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    n(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setupPool(
      assetA: string,
      assetB: string,
      seedA: BigNumberish,
      seedB: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExact(
      amountIn: BigNumberish,
      assetIn: string,
      assetOut: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_addLiquidity(
      amounts: BigNumberish[],
      minToMint: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_removeLiquidity(
      amount: BigNumberish,
      minAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_removeLiquidityImbalance(
      amounts: BigNumberish[],
      maxBurnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_removeLiquidityOneToken(
      tokenAmount: BigNumberish,
      tokenIndex: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    test_swap(
      tokenIndexFrom: BigNumberish,
      tokenIndexTo: BigNumberish,
      dx: BigNumberish,
      minDy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
