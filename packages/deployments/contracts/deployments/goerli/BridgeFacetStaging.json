{
  "address": "0xD8Ee64CCb6F3047214714ab40F655216332a9C21",
  "abi": [
    {
      "inputs": [],
      "name": "AssetLogic__getTokenIndexFromStableSwapPool_notExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__handleOutgoingAsset_notNative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__transferAssetToContract_feeOnTransferNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__getAdoptedAsset_notWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__getApprovedCanonicalId_notWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__nonReentrant_reentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyBridgeRouter_notBridgeRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__whenNotPaused_paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__addRemote_invalidDomain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__addSequencer_alreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__bumpTransfer_valueIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_alreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_alreadyReconciled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_invalidRouterSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_invalidSequencerSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_maxRoutersExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_notApprovedForPortals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_notReconciled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_notSupportedRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_notSupportedSequencer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_unapprovedSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_wrongDomain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__forceUpdateSlippage_invalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__forceUpdateSlippage_notDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__mustHaveRemote_destinationNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__onlyDelegate_notDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__removeSequencer_notApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_canonicalAssetNotReceived",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_emptyTo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_invalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_nativeAssetNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_notSupportedAsset",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AavePortalMintUnbacked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "canonicalDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "receiveLocal",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "slippage",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "originSender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bridgedAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "normalizedIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "canonicalId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct CallParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "routers",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "routerSignatures",
              "type": "bytes[]"
            },
            {
              "internalType": "address",
              "name": "sequencer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sequencerSignature",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct ExecuteArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldExecutor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newExecutor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ExecutorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ExternalCalldataExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "remote",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RemoteAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "toId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "toHook",
          "type": "bool"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sequencer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SequencerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sequencer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SequencerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        }
      ],
      "name": "SlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "relayerFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransferRelayerFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "originDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "canonicalDomain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "receiveLocal",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bridgedAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "normalizedIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "canonicalId",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct CallParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "local",
          "type": "address"
        }
      ],
      "name": "XCalled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AAVE_REFERRAL_CODE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DUST_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        }
      ],
      "name": "addSequencer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        }
      ],
      "name": "approvedSequencers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "bumpTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "canonicalDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "receiveLocal",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "slippage",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "originSender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bridgedAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "normalizedIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "canonicalId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct CallParams",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "routers",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "routerSignatures",
              "type": "bytes[]"
            },
            {
              "internalType": "address",
              "name": "sequencer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sequencerSignature",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExecuteArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "originDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "canonicalDomain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "receiveLocal",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bridgedAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "normalizedIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "canonicalId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CallParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "forceUpdateSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "reconciledTransfers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "relayerFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "remote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        }
      ],
      "name": "removeSequencer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "routedTransfers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xAppConnectionManager",
          "type": "address"
        }
      ],
      "name": "setXAppConnectionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xAppConnectionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xcall",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xcallIntoLocal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ec8a40c8b343dbbbf11f0807e3f9ca10a95e4bac9cde015dd82c3913cf01a8e",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0xD8Ee64CCb6F3047214714ab40F655216332a9C21",
    "transactionIndex": 17,
    "gasUsed": "4714478",
    "logsBloom": "0x
    "blockHash": "0x87f1b71e62951a6971d6d3e90a9745986464934d50d53912f1e1c0b641d0a49f",
    "transactionHash": "0x3ec8a40c8b343dbbbf11f0807e3f9ca10a95e4bac9cde015dd82c3913cf01a8e",
    "logs": [],
    "blockNumber": 7704746,
    "cumulativeGasUsed": "19065896",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "0fab695824bb3e9042cee88f25740cca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AssetLogic__getTokenIndexFromStableSwapPool_notExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__handleOutgoingAsset_notNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__transferAssetToContract_feeOnTransferNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__getAdoptedAsset_notWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__getApprovedCanonicalId_notWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__nonReentrant_reentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyBridgeRouter_notBridgeRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__whenNotPaused_paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__addRemote_invalidDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__addSequencer_alreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__bumpTransfer_valueIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_alreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_alreadyReconciled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_invalidRouterSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_invalidSequencerSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_maxRoutersExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_notApprovedForPortals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_notReconciled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_notSupportedRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_notSupportedSequencer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_unapprovedSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_wrongDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__forceUpdateSlippage_invalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__forceUpdateSlippage_notDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__mustHaveRemote_destinationNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__onlyDelegate_notDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__removeSequencer_notApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_canonicalAssetNotReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_emptyTo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_invalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_nativeAssetNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_notSupportedAsset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AavePortalMintUnbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"internalType\":\"struct CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"routerSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sequencerSignature\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct ExecuteArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newExecutor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ExternalCalldataExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remote\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RemoteAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"toId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toHook\",\"type\":\"bool\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SequencerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SequencerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"SlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransferRelayerFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"}],\"name\":\"XCalled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE_REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DUST_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"}],\"name\":\"addSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"}],\"name\":\"approvedSequencers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"bumpTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"internalType\":\"struct CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"routerSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sequencerSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecuteArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"internalType\":\"struct CallParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"forceUpdateSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"reconciledTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"relayerFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"remote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"}],\"name\":\"removeSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"routedTransfers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xAppConnectionManager\",\"type\":\"address\"}],\"name\":\"setXAppConnectionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xAppConnectionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xcall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xcallIntoLocal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AavePortalMintUnbacked(bytes32,address,address,uint256)\":{\"params\":{\"amount\":\"- The amount of asset that was provided by Aave Portal\",\"asset\":\"- The asset that was provided by Aave Portal\",\"router\":\"- The authorized router that used Aave Portal liquidity\",\"transferId\":\"- The unique identifier of the crosschain transaction\"}},\"Executed(bytes32,address,address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)\":{\"details\":\"`execute` may be called when providing fast liquidity or when processing a reconciled (slow) transfer.\",\"params\":{\"amount\":\"- The amount of transferring asset the recipient address receives or the external call is executed with.\",\"args\":\"- The `ExecuteArgs` provided to the function.\",\"asset\":\"- The asset the recipient is given or the external call is executed with. Should be the adopted asset on that chain.\",\"caller\":\"- The account that called the function.\",\"local\":\"- The local asset that was either supplied by the router for a fast-liquidity transfer or minted by the bridge in a reconciled (slow) transfer. Could be the same as the adopted `asset` param.\",\"to\":\"- The recipient `CallParams.to` provided, created as indexed parameter.\",\"transferId\":\"- The unique identifier of the crosschain transfer.\"}},\"ExecutorUpdated(address,address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"newExecutor\":\"- The executor new value\",\"oldExecutor\":\"- The executor old value\"}},\"ExternalCalldataExecuted(bytes32,bool,bytes)\":{\"params\":{\"returnData\":\"- Return bytes from the IXReceiver\",\"success\":\"- Whether calldata succeeded\",\"transferId\":\"- The unique identifier of the crosschain transfer.\"}},\"RemoteAdded(uint32,address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"domain\":\"- The domain the remote instance is on\",\"remote\":\"- The address of the remote instance\"}},\"Send(address,address,uint32,bytes32,uint256,bool)\":{\"params\":{\"amount\":\"the amount of tokens sent\",\"from\":\"the address sending tokens\",\"toDomain\":\"the domain of the chain the tokens are being sent to\",\"toHook\":\"True if sent to a hook, on the remote chain, false        otherwise\",\"toId\":\"the bytes32 address of the recipient of the tokens\",\"token\":\"the address of the token contract\"}},\"SequencerAdded(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"sequencer\":\"- The sequencer address to be added or removed\"}},\"SequencerRemoved(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"sequencer\":\"- The sequencer address to be added or removed\"}},\"SlippageUpdated(bytes32,uint256)\":{\"params\":{\"slippage\":\"- The updated slippage boundary\",\"transferId\":\"- The unique identifier of the crosschain transaction\"}},\"TransferRelayerFeesUpdated(bytes32,uint256,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"relayerFee\":\"- The updated amount of relayer fee in native asset\",\"transferId\":\"- The unique identifier of the crosschain transaction\"}},\"XCalled(bytes32,uint256,bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address)\":{\"params\":{\"local\":\"- The address of the local asset (i.e. bridged token) used in the transfer.\",\"messageHash\":\"- The hash of the message bytes (containing all transfer info) that were bridged.\",\"nonce\":\"- The bridge nonce of the transfer on the origin domain.\",\"params\":\"- The `CallParams` provided to the function.\",\"transferId\":\"- The unique identifier of the crosschain transfer.\"}}},\"kind\":\"dev\",\"methods\":{\"addSequencer(address)\":{\"params\":{\"_sequencer\":\"- The sequencer address to add.\"}},\"bumpTransfer(bytes32)\":{\"params\":{\"_transferId\":\"- The unique identifier of the crosschain transaction\"}},\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote xApp Router\",\"_router\":\"The address of the remote xApp Router\"}},\"execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))\":{\"details\":\"Can be called before or after `handle` [reconcile] is called (regarding the same transfer), depending on whether the fast liquidity route (i.e. funds provided by routers) is being used for this transfer. As a result, executed calldata (including properties like `originSender`) may or may not be verified depending on whether the reconcile has been completed (i.e. the optimistic confirmation period has elapsed).\",\"params\":{\"_args\":\"- ExecuteArgs arguments.\"},\"returns\":{\"_0\":\"bytes32 - The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for reconciliation to occur.\"}},\"forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)\":{\"params\":{\"_params\":\"CallParams associated with the transfer\",\"_slippage\":\"The updated slippage\"}},\"removeSequencer(address)\":{\"params\":{\"_sequencer\":\"- The sequencer address to remove.\"}},\"setXAppConnectionManager(address)\":{\"params\":{\"_xAppConnectionManager\":\"The address of the xAppConnectionManager contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AavePortalMintUnbacked(bytes32,address,address,uint256)\":{\"notice\":\"Emitted when a router used Aave Portal liquidity for fast transfer\"},\"Executed(bytes32,address,address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)\":{\"notice\":\"Emitted when `execute` is called on the destination domain of a transfer.\"},\"ExecutorUpdated(address,address,address)\":{\"notice\":\"Emitted when the executor variable is updated\"},\"ExternalCalldataExecuted(bytes32,bool,bytes)\":{\"notice\":\"Emitted when a transfer has its external data executed\"},\"RemoteAdded(uint32,address,address)\":{\"notice\":\"Emitted when a new remote instance is added\"},\"Send(address,address,uint32,bytes32,uint256,bool)\":{\"notice\":\"emitted when tokens are sent from this domain to another domain\"},\"SequencerAdded(address,address)\":{\"notice\":\"Emitted when a sequencer is added or removed from whitelists\"},\"SequencerRemoved(address,address)\":{\"notice\":\"Emitted when a sequencer is added or removed from whitelists\"},\"SlippageUpdated(bytes32,uint256)\":{\"notice\":\"Emitted when `forceUpdateSlippage` is called by an user on the destination domain\"},\"TransferRelayerFeesUpdated(bytes32,uint256,address)\":{\"notice\":\"Emitted when `bumpTransfer` is called by an user on the origin domain\"},\"XCalled(bytes32,uint256,bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address)\":{\"notice\":\"Emitted when `xcall` is called on the origin domain of a transfer.\"}},\"kind\":\"user\",\"methods\":{\"addSequencer(address)\":{\"notice\":\"Used to add an approved sequencer to the whitelist.\"},\"bumpTransfer(bytes32)\":{\"notice\":\"Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same xApp on a remote chain\"},\"execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))\":{\"notice\":\"Called on a destination domain to disburse correct assets to end recipient and execute any included calldata.\"},\"forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)\":{\"notice\":\"Allows a user-specified account to update the slippage they are willing to take on destination transfers.\"},\"removeSequencer(address)\":{\"notice\":\"Used to remove an approved sequencer from the whitelist.\"},\"setXAppConnectionManager(address)\":{\"notice\":\"Modify the contract the xApp uses to validate Replica contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/connext/facets/BridgeFacet.sol\":\"BridgeFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/core/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {XAppConnectionClient} from \\\"./XAppConnectionClient.sol\\\";\\n// ============ External Imports ============\\nimport {IMessageRecipient} from \\\"../messaging/interfaces/IMessageRecipient.sol\\\";\\n\\nabstract contract Router is XAppConnectionClient, IMessageRecipient {\\n  // ============ Mutable Storage ============\\n\\n  mapping(uint32 => bytes32) public remotes;\\n\\n  // ============ Upgrade Gap ============\\n\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept messages from a remote Router contract\\n   * @param _origin The domain the message is coming from\\n   * @param _router The address the message is coming from\\n   */\\n  modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {\\n    require(_isRemoteRouter(_origin, _router), \\\"!remote router\\\");\\n    _;\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Register the address of a Router contract for the same xApp on a remote chain\\n   * @param _domain The domain of the remote xApp Router\\n   * @param _router The address of the remote xApp Router\\n   */\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external onlyOwner {\\n    remotes[_domain] = _router;\\n  }\\n\\n  // ============ Virtual functions ============\\n\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external virtual override;\\n\\n  // ============ Internal functions ============\\n  /**\\n   * @notice Return true if the given domain / router is the address of a remote xApp Router\\n   * @param _domain The domain of the potential remote xApp Router\\n   * @param _router The address of the potential remote xApp Router\\n   */\\n  function _isRemoteRouter(uint32 _domain, bytes32 _router) internal view returns (bool) {\\n    return remotes[_domain] == _router && _router != bytes32(0);\\n  }\\n\\n  /**\\n   * @notice Assert that the given domain has a xApp Router registered and return its address\\n   * @param _domain The domain of the chain for which to get the xApp Router\\n   * @return _remote The address of the remote xApp Router on _domain\\n   */\\n  function _mustHaveRemote(uint32 _domain) internal view returns (bytes32 _remote) {\\n    _remote = remotes[_domain];\\n    require(_remote != bytes32(0), \\\"!remote\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xf962fb33b875d0820e9f506d54d74f5fc35d6ef5413a64098bf88ee2a5f28f82\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Version\\n * @notice Version getter for contracts\\n **/\\ncontract Version {\\n  uint8 public constant VERSION = 0;\\n}\\n\",\"keccak256\":\"0xfa2c7c9b330dca2b84788846c2194f1209b764a5443b79b9effb854c4c4fe693\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/XAppConnectionClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ External Imports ============\\nimport {IOutbox} from \\\"../messaging/interfaces/IOutbox.sol\\\";\\nimport {IConnectorManager} from \\\"../messaging/interfaces/IConnectorManager.sol\\\";\\n\\nimport {ProposedOwnableUpgradeable} from \\\"../shared/ProposedOwnable.sol\\\";\\n\\nabstract contract XAppConnectionClient is ProposedOwnableUpgradeable {\\n  // ============ Mutable Storage ============\\n\\n  IConnectorManager public xAppConnectionManager;\\n\\n  // ============ Upgrade Gap ============\\n\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept messages from an Nomad Replica contract\\n   */\\n  modifier onlyReplica() {\\n    require(_isReplica(msg.sender), \\\"!replica\\\");\\n    _;\\n  }\\n\\n  // ======== Initializer =========\\n\\n  function __XAppConnectionClient_initialize(address _xAppConnectionManager) internal initializer {\\n    xAppConnectionManager = IConnectorManager(_xAppConnectionManager);\\n    __ProposedOwnable_init();\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Modify the contract the xApp uses to validate Replica contracts\\n   * @param _xAppConnectionManager The address of the xAppConnectionManager contract\\n   */\\n  function setXAppConnectionManager(address _xAppConnectionManager) external onlyOwner {\\n    xAppConnectionManager = IConnectorManager(_xAppConnectionManager);\\n  }\\n\\n  // ============ Internal functions ============\\n\\n  /**\\n   * @notice Get the local Home contract from the xAppConnectionManager\\n   * @return The local Home contract\\n   */\\n  function _home() internal view returns (IOutbox) {\\n    return xAppConnectionManager.home();\\n  }\\n\\n  /**\\n   * @notice Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function _isReplica(address _potentialReplica) internal view returns (bool) {\\n    return xAppConnectionManager.isReplica(_potentialReplica);\\n  }\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function _localDomain() internal view virtual returns (uint32) {\\n    return xAppConnectionManager.localDomain();\\n  }\\n}\\n\",\"keccak256\":\"0x5713e125e350fdd32f4d6639c9914a2fd255c14124a7cc44d854cafbae95f772\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/facets/BaseConnextFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {CallParams, AppStorage, TokenId, Role} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {AssetLogic} from \\\"../libraries/AssetLogic.sol\\\";\\n\\ncontract BaseConnextFacet {\\n  AppStorage internal s;\\n\\n  // ========== Properties ===========\\n  uint256 internal constant _NOT_ENTERED = 1;\\n  uint256 internal constant _ENTERED = 2;\\n  uint256 internal constant BPS_FEE_DENOMINATOR = 10_000;\\n\\n  // Contains hash of empty bytes\\n  bytes32 internal constant EMPTY_HASH = hex\\\"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\\\";\\n\\n  // ========== Custom Errors ===========\\n\\n  error BaseConnextFacet__onlyBridgeRouter_notBridgeRouter();\\n  error BaseConnextFacet__onlyOwner_notOwner();\\n  error BaseConnextFacet__onlyProposed_notProposedOwner();\\n  error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter();\\n  error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher();\\n  error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin();\\n  error BaseConnextFacet__whenNotPaused_paused();\\n  error BaseConnextFacet__nonReentrant_reentrantCall();\\n  error BaseConnextFacet__getAdoptedAsset_notWhitelisted();\\n  error BaseConnextFacet__getApprovedCanonicalId_notWhitelisted();\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    if (s._status == _ENTERED) revert BaseConnextFacet__nonReentrant_reentrantCall();\\n\\n    // Any calls to nonReentrant after this point will fail\\n    s._status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    s._status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (LibDiamond.contractOwner() != msg.sender) revert BaseConnextFacet__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (s._proposed != msg.sender) revert BaseConnextFacet__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner and router role.\\n   */\\n  modifier onlyOwnerOrRouter() {\\n    if (LibDiamond.contractOwner() != msg.sender && s.roles[msg.sender] != Role.Router)\\n      revert BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner and watcher role.\\n   */\\n  modifier onlyOwnerOrWatcher() {\\n    if (LibDiamond.contractOwner() != msg.sender && s.roles[msg.sender] != Role.Watcher)\\n      revert BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner and admin role.\\n   */\\n  modifier onlyOwnerOrAdmin() {\\n    if (LibDiamond.contractOwner() != msg.sender && s.roles[msg.sender] != Role.Admin)\\n      revert BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if all functionality is paused\\n   */\\n  modifier whenNotPaused() {\\n    if (s._paused) revert BaseConnextFacet__whenNotPaused_paused();\\n    _;\\n  }\\n\\n  // ============ Internal functions ============\\n  /**\\n   * @notice Indicates if the router whitelist has been removed\\n   */\\n  function _isRouterWhitelistRemoved() internal view returns (bool) {\\n    return LibDiamond.contractOwner() == address(0) || s._routerWhitelistRemoved;\\n  }\\n\\n  /**\\n   * @notice Indicates if the asset whitelist has been removed\\n   */\\n  function _isAssetWhitelistRemoved() internal view returns (bool) {\\n    return LibDiamond.contractOwner() == address(0) || s._assetWhitelistRemoved;\\n  }\\n\\n  /**\\n   * @notice Returns the adopted assets for given canonical information\\n   */\\n  function _getAdoptedAsset(bytes32 _key) internal view returns (address) {\\n    address adopted = s.canonicalToAdopted[_key];\\n    if (adopted == address(0)) {\\n      revert BaseConnextFacet__getAdoptedAsset_notWhitelisted();\\n    }\\n    return adopted;\\n  }\\n\\n  /**\\n   * @notice Returns the adopted assets for given canonical information\\n   */\\n  function _getRepresentationAsset(bytes32 _key) internal view returns (address) {\\n    address representation = s.canonicalToRepresentation[_key];\\n    // If this is address(0), then there is no mintable token for this asset on this\\n    // domain\\n    return representation;\\n  }\\n\\n  /**\\n   * @notice Calculates a transferId\\n   */\\n  function _calculateTransferId(CallParams memory _params) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(_params));\\n  }\\n\\n  /**\\n   * @notice Internal utility function that combines\\n   *         `_origin` and `_nonce`.\\n   * @dev Both origin and nonce should be less than 2^32 - 1\\n   * @param _origin Domain of chain where the transfer originated\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @return Returns (`_origin` << 32) & `_nonce`\\n   */\\n  function _originAndNonce(uint32 _origin, uint32 _nonce) internal pure returns (uint64) {\\n    return (uint64(_origin) << 32) | _nonce;\\n  }\\n\\n  function _getLocalAsset(\\n    bytes32 _key,\\n    bytes32 _id,\\n    uint32 _domain\\n  ) internal view returns (address) {\\n    return AssetLogic.getLocalAsset(_key, _id, _domain, s);\\n  }\\n\\n  function _getCanonicalTokenId(address _candidate) internal view returns (TokenId memory) {\\n    return AssetLogic.getCanonicalTokenId(_candidate, s);\\n  }\\n\\n  function _getLocalAndAdoptedToken(\\n    bytes32 _key,\\n    bytes32 _id,\\n    uint32 _domain\\n  ) internal view returns (address, address) {\\n    address _local = AssetLogic.getLocalAsset(_key, _id, _domain, s);\\n    address _adopted = _getAdoptedAsset(_key);\\n    return (_local, _adopted);\\n  }\\n\\n  function _isLocalOrigin(address _token) internal view returns (bool) {\\n    return AssetLogic.isLocalOrigin(_token, s);\\n  }\\n\\n  function _getApprovedCanonicalId(address _candidate) internal view returns (TokenId memory, bytes32) {\\n    TokenId memory _canonical = _getCanonicalTokenId(_candidate);\\n    bytes32 _key = AssetLogic.calculateCanonicalHash(_canonical.id, _canonical.domain);\\n    if (!_isAssetWhitelistRemoved() && !s.approvedAssets[_key]) {\\n      revert BaseConnextFacet__getApprovedCanonicalId_notWhitelisted();\\n    }\\n    return (_canonical, _key);\\n  }\\n}\\n\",\"keccak256\":\"0x3aaaea803ed51a68101341a49db540e256dcbf92c7cd801679202f6151f07633\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/facets/BridgeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ExcessivelySafeCall} from \\\"../../../shared/libraries/ExcessivelySafeCall.sol\\\";\\nimport {TypedMemView} from \\\"../../../shared/libraries/TypedMemView.sol\\\";\\nimport {TypeCasts} from \\\"../../../shared/libraries/TypeCasts.sol\\\";\\nimport {ProposedOwnable} from \\\"../../../shared/ProposedOwnable.sol\\\";\\n\\nimport {IOutbox} from \\\"../../../messaging/interfaces/IOutbox.sol\\\";\\nimport {IConnectorManager} from \\\"../../../messaging/interfaces/IConnectorManager.sol\\\";\\n\\nimport {BaseConnextFacet} from \\\"./BaseConnextFacet.sol\\\";\\n\\nimport {AssetLogic} from \\\"../libraries/AssetLogic.sol\\\";\\nimport {ExecuteArgs, CallParams, TokenId} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {BridgeMessage} from \\\"../libraries/BridgeMessage.sol\\\";\\n\\nimport {Router} from \\\"../../Router.sol\\\";\\n\\nimport {IWeth} from \\\"../interfaces/IWeth.sol\\\";\\nimport {IXReceiver} from \\\"../interfaces/IXReceiver.sol\\\";\\nimport {IAavePool} from \\\"../interfaces/IAavePool.sol\\\";\\nimport {IBridgeHook} from \\\"../interfaces/IBridgeHook.sol\\\";\\nimport {IBridgeToken} from \\\"../interfaces/IBridgeToken.sol\\\";\\n\\ncontract BridgeFacet is BaseConnextFacet {\\n  // ============ Libraries ============\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using BridgeMessage for bytes29;\\n  using SafeERC20 for IERC20;\\n\\n  // ========== Custom Errors ===========\\n\\n  error BridgeFacet__addRemote_invalidDomain();\\n  error BridgeFacet__onlyDelegate_notDelegate();\\n  error BridgeFacet__addSequencer_alreadyApproved();\\n  error BridgeFacet__removeSequencer_notApproved();\\n  error BridgeFacet__xcall_nativeAssetNotSupported();\\n  error BridgeFacet__xcall_emptyTo();\\n  error BridgeFacet__xcall_notSupportedAsset();\\n  error BridgeFacet__xcall_invalidSlippage();\\n  error BridgeFacet__xcall_canonicalAssetNotReceived();\\n  error BridgeFacet__execute_unapprovedSender();\\n  error BridgeFacet__execute_wrongDomain();\\n  error BridgeFacet__execute_notSupportedSequencer();\\n  error BridgeFacet__execute_invalidSequencerSignature();\\n  error BridgeFacet__execute_maxRoutersExceeded();\\n  error BridgeFacet__execute_notSupportedRouter();\\n  error BridgeFacet__execute_invalidRouterSignature();\\n  error BridgeFacet__execute_alreadyExecuted();\\n  error BridgeFacet__execute_notApprovedForPortals();\\n  error BridgeFacet__execute_alreadyReconciled();\\n  error BridgeFacet__execute_notReconciled();\\n  error BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn();\\n  error BridgeFacet__bumpTransfer_valueIsZero();\\n  error BridgeFacet__forceUpdateSlippage_invalidSlippage();\\n  error BridgeFacet__forceUpdateSlippage_notDestination();\\n  error BridgeFacet__mustHaveRemote_destinationNotSupported();\\n\\n  // ============ Properties ============\\n\\n  uint16 public constant AAVE_REFERRAL_CODE = 0;\\n  uint256 public constant DUST_AMOUNT = 0.06 ether;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when `xcall` is called on the origin domain of a transfer.\\n   * @param transferId - The unique identifier of the crosschain transfer.\\n   * @param nonce - The bridge nonce of the transfer on the origin domain.\\n   * @param messageHash - The hash of the message bytes (containing all transfer info) that were bridged.\\n   * @param params - The `CallParams` provided to the function.\\n   * @param local - The address of the local asset (i.e. bridged token) used in the transfer.\\n   */\\n  event XCalled(\\n    bytes32 indexed transferId,\\n    uint256 indexed nonce,\\n    bytes32 indexed messageHash,\\n    CallParams params,\\n    address local\\n  );\\n\\n  /**\\n   * @notice Emitted when a transfer has its external data executed\\n   * @param transferId - The unique identifier of the crosschain transfer.\\n   * @param success - Whether calldata succeeded\\n   * @param returnData - Return bytes from the IXReceiver\\n   */\\n  event ExternalCalldataExecuted(bytes32 indexed transferId, bool success, bytes returnData);\\n\\n  /**\\n   * @notice Emitted when `execute` is called on the destination domain of a transfer.\\n   * @dev `execute` may be called when providing fast liquidity or when processing a reconciled (slow) transfer.\\n   * @param transferId - The unique identifier of the crosschain transfer.\\n   * @param to - The recipient `CallParams.to` provided, created as indexed parameter.\\n   * @param asset - The asset the recipient is given or the external call is executed with. Should be the\\n   * adopted asset on that chain.\\n   * @param args - The `ExecuteArgs` provided to the function.\\n   * @param local - The local asset that was either supplied by the router for a fast-liquidity transfer or\\n   * minted by the bridge in a reconciled (slow) transfer. Could be the same as the adopted `asset` param.\\n   * @param amount - The amount of transferring asset the recipient address receives or the external call is\\n   * executed with.\\n   * @param caller - The account that called the function.\\n   */\\n  event Executed(\\n    bytes32 indexed transferId,\\n    address indexed to,\\n    address indexed asset,\\n    ExecuteArgs args,\\n    address local,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  /**\\n   * @notice Emitted when `bumpTransfer` is called by an user on the origin domain\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param relayerFee - The updated amount of relayer fee in native asset\\n   * @param caller - The account that called the function\\n   */\\n  event TransferRelayerFeesUpdated(bytes32 indexed transferId, uint256 relayerFee, address caller);\\n\\n  /**\\n   * @notice Emitted when `forceUpdateSlippage` is called by an user on the destination domain\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param slippage - The updated slippage boundary\\n   */\\n  event SlippageUpdated(bytes32 indexed transferId, uint256 slippage);\\n\\n  /**\\n   * @notice Emitted when a router used Aave Portal liquidity for fast transfer\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param router - The authorized router that used Aave Portal liquidity\\n   * @param asset - The asset that was provided by Aave Portal\\n   * @param amount - The amount of asset that was provided by Aave Portal\\n   */\\n  event AavePortalMintUnbacked(bytes32 indexed transferId, address indexed router, address asset, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when the executor variable is updated\\n   * @param oldExecutor - The executor old value\\n   * @param newExecutor - The executor new value\\n   * @param caller - The account that called the function\\n   */\\n  event ExecutorUpdated(address oldExecutor, address newExecutor, address caller);\\n\\n  /**\\n   * @notice Emitted when a new remote instance is added\\n   * @param domain - The domain the remote instance is on\\n   * @param remote - The address of the remote instance\\n   * @param caller - The account that called the function\\n   */\\n  event RemoteAdded(uint32 domain, address remote, address caller);\\n\\n  /**\\n   * @notice Emitted when a sequencer is added or removed from whitelists\\n   * @param sequencer - The sequencer address to be added or removed\\n   * @param caller - The account that called the function\\n   */\\n  event SequencerAdded(address sequencer, address caller);\\n\\n  /**\\n   * @notice Emitted when a sequencer is added or removed from whitelists\\n   * @param sequencer - The sequencer address to be added or removed\\n   * @param caller - The account that called the function\\n   */\\n  event SequencerRemoved(address sequencer, address caller);\\n\\n  /**\\n   * @notice emitted when tokens are sent from this domain to another domain\\n   * @param token the address of the token contract\\n   * @param from the address sending tokens\\n   * @param toDomain the domain of the chain the tokens are being sent to\\n   * @param toId the bytes32 address of the recipient of the tokens\\n   * @param amount the amount of tokens sent\\n   * @param toHook True if sent to a hook, on the remote chain, false\\n   *        otherwise\\n   */\\n  event Send(\\n    address indexed token,\\n    address indexed from,\\n    uint32 indexed toDomain,\\n    bytes32 toId,\\n    uint256 amount,\\n    bool toHook\\n  );\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept a transfer's designated delegate.\\n   * @param _params The CallParams of the transfer.\\n   */\\n  modifier onlyDelegate(CallParams calldata _params) {\\n    if (_params.delegate != msg.sender) revert BridgeFacet__onlyDelegate_notDelegate();\\n    _;\\n  }\\n\\n  // ============ Getters ============\\n\\n  function relayerFees(bytes32 _transferId) public view returns (uint256) {\\n    return s.relayerFees[_transferId];\\n  }\\n\\n  function routedTransfers(bytes32 _transferId) public view returns (address[] memory) {\\n    return s.routedTransfers[_transferId];\\n  }\\n\\n  function reconciledTransfers(bytes32 _transferId) public view returns (bool) {\\n    return s.reconciledTransfers[_transferId];\\n  }\\n\\n  function remote(uint32 _domain) public view returns (address) {\\n    return TypeCasts.bytes32ToAddress(s.remotes[_domain]);\\n  }\\n\\n  function domain() public view returns (uint32) {\\n    return s.domain;\\n  }\\n\\n  function nonce() public view returns (uint256) {\\n    return s.nonce;\\n  }\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool) {\\n    return s.approvedSequencers[_sequencer];\\n  }\\n\\n  function xAppConnectionManager() public view returns (address) {\\n    return address(s.xAppConnectionManager);\\n  }\\n\\n  // ============ Admin Functions ==============\\n\\n  /**\\n   * @notice Used to add an approved sequencer to the whitelist.\\n   * @param _sequencer - The sequencer address to add.\\n   */\\n  function addSequencer(address _sequencer) external onlyOwner {\\n    if (s.approvedSequencers[_sequencer]) revert BridgeFacet__addSequencer_alreadyApproved();\\n    s.approvedSequencers[_sequencer] = true;\\n\\n    emit SequencerAdded(_sequencer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to remove an approved sequencer from the whitelist.\\n   * @param _sequencer - The sequencer address to remove.\\n   */\\n  function removeSequencer(address _sequencer) external onlyOwner {\\n    if (!s.approvedSequencers[_sequencer]) revert BridgeFacet__removeSequencer_notApproved();\\n    delete s.approvedSequencers[_sequencer];\\n\\n    emit SequencerRemoved(_sequencer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Modify the contract the xApp uses to validate Replica contracts\\n   * @param _xAppConnectionManager The address of the xAppConnectionManager contract\\n   */\\n  function setXAppConnectionManager(address _xAppConnectionManager) external onlyOwner {\\n    s.xAppConnectionManager = IConnectorManager(_xAppConnectionManager);\\n  }\\n\\n  /**\\n   * @notice Register the address of a Router contract for the same xApp on a remote chain\\n   * @param _domain The domain of the remote xApp Router\\n   * @param _router The address of the remote xApp Router\\n   */\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external onlyOwner {\\n    // Make sure we aren't setting the current domain as the connextion.\\n    if (_domain == s.domain) {\\n      revert BridgeFacet__addRemote_invalidDomain();\\n    }\\n    s.remotes[_domain] = _router;\\n    emit RemoteAdded(_domain, TypeCasts.bytes32ToAddress(_router), msg.sender);\\n  }\\n\\n  // ============ Public Functions: Bridge ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32) {\\n    // NOTE: These CallParams fill in as much information as they can, but\\n    // some info is left blank and will be assigned in the internal _xcall\\n    // function (i.e. normalizedIn, bridgedAmt, canonical info, etc).\\n    CallParams memory params = CallParams({\\n      to: _to,\\n      callData: _callData,\\n      originDomain: s.domain,\\n      destinationDomain: _destination,\\n      delegate: _delegate,\\n      receiveLocal: false, // Always swap into adopted in xcall pass.\\n      slippage: _slippage,\\n      originSender: msg.sender,\\n      // The following values should be assigned in _xcall.\\n      nonce: 0,\\n      canonicalDomain: 0,\\n      bridgedAmt: 0,\\n      normalizedIn: 0,\\n      canonicalId: bytes32(0)\\n    });\\n    return _xcall(params, _asset, _amount);\\n  }\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32) {\\n    // NOTE: These CallParams fill in as much information as they can, but\\n    // some info is left blank and will be assigned in the internal _xcall\\n    // function (i.e. normalizedIn, bridgedAmt, canonical info, etc).\\n    CallParams memory params = CallParams({\\n      to: _to,\\n      callData: _callData,\\n      originDomain: s.domain,\\n      destinationDomain: _destination,\\n      delegate: _delegate,\\n      receiveLocal: true, // Don't swap into adopted.\\n      slippage: _slippage,\\n      originSender: msg.sender,\\n      // The following values should be assigned in _xcall.\\n      nonce: 0,\\n      canonicalDomain: 0,\\n      bridgedAmt: 0,\\n      normalizedIn: 0,\\n      canonicalId: bytes32(0)\\n    });\\n    return _xcall(params, _asset, _amount);\\n  }\\n\\n  /**\\n   * @notice Called on a destination domain to disburse correct assets to end recipient and execute any included\\n   * calldata.\\n   *\\n   * @dev Can be called before or after `handle` [reconcile] is called (regarding the same transfer), depending on\\n   * whether the fast liquidity route (i.e. funds provided by routers) is being used for this transfer. As a result,\\n   * executed calldata (including properties like `originSender`) may or may not be verified depending on whether the\\n   * reconcile has been completed (i.e. the optimistic confirmation period has elapsed).\\n   *\\n   * @param _args - ExecuteArgs arguments.\\n   * @return bytes32 - The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for\\n   * reconciliation to occur.\\n   */\\n  function execute(ExecuteArgs calldata _args) external nonReentrant whenNotPaused returns (bytes32) {\\n    (bytes32 transferId, bool reconciled) = _executeSanityChecks(_args);\\n\\n    // Set the relayer for this transfer to enable the relayer to submit a future claim of their owed relayer fee.\\n    s.transferRelayer[transferId] = msg.sender;\\n\\n    // Supply assets to target recipient. Use router liquidity when this is a fast transfer, or mint bridge tokens\\n    // when this is a slow transfer.\\n    // NOTE: Asset will be adopted unless specified to `receiveLocal` in params.\\n    (uint256 amountOut, address asset, address local) = _handleExecuteLiquidity(\\n      transferId,\\n      AssetLogic.calculateCanonicalHash(_args.params.canonicalId, _args.params.canonicalDomain),\\n      !reconciled,\\n      _args\\n    );\\n\\n    // Execute the transaction using the designated calldata.\\n    uint256 amount = _handleExecuteTransaction(_args, amountOut, asset, transferId, reconciled);\\n\\n    // Emit event.\\n    emit Executed(transferId, _args.params.to, asset, _args, local, amount, msg.sender);\\n\\n    return transferId;\\n  }\\n\\n  /**\\n   * @notice Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\\n   * @param _transferId - The unique identifier of the crosschain transaction\\n   */\\n  function bumpTransfer(bytes32 _transferId) external payable nonReentrant whenNotPaused {\\n    if (msg.value == 0) revert BridgeFacet__bumpTransfer_valueIsZero();\\n\\n    s.relayerFees[_transferId] += msg.value;\\n\\n    emit TransferRelayerFeesUpdated(_transferId, s.relayerFees[_transferId], msg.sender);\\n  }\\n\\n  /**\\n   * @notice Allows a user-specified account to update the slippage they are willing\\n   * to take on destination transfers.\\n   *\\n   * @param _params CallParams associated with the transfer\\n   * @param _slippage The updated slippage\\n   */\\n  function forceUpdateSlippage(CallParams calldata _params, uint256 _slippage) external onlyDelegate(_params) {\\n    // Sanity check slippage\\n    if (_slippage > BPS_FEE_DENOMINATOR) {\\n      revert BridgeFacet__forceUpdateSlippage_invalidSlippage();\\n    }\\n\\n    // Should only be called on destination domain\\n    if (_params.destinationDomain != s.domain) {\\n      revert BridgeFacet__forceUpdateSlippage_notDestination();\\n    }\\n\\n    // Get transferId\\n    bytes32 transferId = _calculateTransferId(_params);\\n\\n    // Store overrides\\n    s.slippage[transferId] = _slippage;\\n\\n    // Emit event\\n    emit SlippageUpdated(transferId, _slippage);\\n  }\\n\\n  // ============ Internal: Bridge ============\\n\\n  /**\\n   * @notice Initiates a cross-chain transfer of funds, calldata, and/or various named properties using the nomad\\n   * network.\\n   *\\n   * @dev For ERC20 transfers, this contract must have approval to transfer the input (transacting) assets. The adopted\\n   * assets will be swapped for their local nomad asset counterparts (i.e. bridgeable tokens) via the configured AMM if\\n   * necessary. In the event that the adopted assets *are* local nomad assets, no swap is needed. The local tokens will\\n   * then be sent via the bridge router. If the local assets are representational for an asset on another chain, we will\\n   * burn the tokens here. If the local assets are canonical (meaning that the adopted<>local asset pairing is native\\n   * to this chain), we will custody the tokens here.\\n   *\\n   * @param _params - The CallParams arguments.\\n   * @return bytes32 - The transfer ID of the newly created crosschain transfer.\\n   */\\n  function _xcall(\\n    CallParams memory _params,\\n    address _asset,\\n    uint256 _amount\\n  ) internal whenNotPaused returns (bytes32) {\\n    // Sanity checks.\\n    bytes32 remoteInstance;\\n    {\\n      // Not native asset.\\n      // NOTE: We support using address(0) as an intuitive default if you are sending a 0-value\\n      // transfer. In that edge case, address(0) will not be registered as a supported asset, but should\\n      // pass the `isLocalOrigin` check\\n      if (_asset == address(0) && _amount != 0) {\\n        revert BridgeFacet__xcall_nativeAssetNotSupported();\\n      }\\n\\n      // Destination domain is supported.\\n      // NOTE: This check implicitly also checks that `_params.destinationDomain != s.domain`, because the index\\n      // `s.domain` of `s.remotes` should always be `bytes32(0)`.\\n      remoteInstance = _mustHaveRemote(_params.destinationDomain);\\n\\n      // Recipient defined.\\n      if (_params.to == address(0)) {\\n        revert BridgeFacet__xcall_emptyTo();\\n      }\\n\\n      if (_params.slippage > BPS_FEE_DENOMINATOR) {\\n        revert BridgeFacet__xcall_invalidSlippage();\\n      }\\n    }\\n\\n    // NOTE: The local asset will stay address(0) if input asset is address(0) in the event of a\\n    // 0-value transfer. Otherwise, the local address will be retrieved below\\n    address local;\\n    bytes32 transferId;\\n    TokenId memory canonical;\\n    bool isCanonical;\\n    {\\n      // Check that the asset is supported -- can be either adopted or local.\\n      // NOTE: Above we check that you can only have `address(0)` as the input asset if this is a\\n      // 0-value transfer. Because 0-value transfers short-circuit all checks on mappings keyed on\\n      // hash(canonicalId, canonicalDomain), this is safe even when the address(0) asset is not\\n      // whitelisted.\\n      bytes32 key;\\n      if (_asset != address(0)) {\\n        // Retrieve the canonical token information.\\n        (canonical, key) = _getApprovedCanonicalId(_asset);\\n\\n        // Get the local address\\n        local = _getLocalAsset(key, canonical.id, canonical.domain);\\n\\n        // Set boolean flag\\n        isCanonical = _params.originDomain == canonical.domain && local == _asset;\\n\\n        // Update CallParams to reflect the canonical token information.\\n        _params.canonicalDomain = canonical.domain;\\n        _params.canonicalId = canonical.id;\\n      }\\n\\n      if (_amount > 0) {\\n        // Transfer funds of input asset to the contract from the user.\\n        AssetLogic.transferAssetToContract(_asset, _amount);\\n\\n        // Swap to the local asset from adopted if applicable.\\n        // TODO: drop the \\\"IfNeeded\\\", instead just check whether the asset is already local / needs swap here.\\n        _params.bridgedAmt = AssetLogic.swapToLocalAssetIfNeeded(key, _asset, local, _amount, _params.slippage);\\n      }\\n\\n      // Get the normalized amount in (amount sent in by user in 18 decimals).\\n      _params.normalizedIn = _asset == address(0)\\n        ? 0 // we know from assertions above this is the case IFF amount == 0\\n        : AssetLogic.normalizeDecimals(ERC20(_asset).decimals(), uint8(18), _amount);\\n\\n      // Calculate the transfer ID.\\n      transferId = _calculateTransferId(_params);\\n      _params.nonce = s.nonce++;\\n    }\\n\\n    // Store the relayer fee.\\n    // NOTE: This has to be done *after* transferring in + swapping assets because\\n    // the transfer id uses the amount that is bridged (i.e. amount in local asset).\\n    s.relayerFees[transferId] += msg.value;\\n\\n    // Send the crosschain message.\\n    bytes32 messageHash = _sendMessage(\\n      transferId,\\n      _params.destinationDomain,\\n      remoteInstance,\\n      canonical,\\n      local,\\n      _params.bridgedAmt,\\n      isCanonical\\n    );\\n\\n    // emit event\\n    emit XCalled(transferId, _params.nonce, messageHash, _params, local);\\n\\n    return transferId;\\n  }\\n\\n  /**\\n   * @notice Holds the logic to recover the signer from an encoded payload.\\n   * @dev Will hash and convert to an eth signed message.\\n   * @param _signed The hash that was signed\\n   * @param _sig The signature you are recovering the signer from\\n   */\\n  function _recoverSignature(bytes32 _signed, bytes calldata _sig) internal pure returns (address) {\\n    // Recover\\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(_signed), _sig);\\n  }\\n\\n  /**\\n   * @notice Performs some sanity checks for `execute`.\\n   * @dev Need this to prevent stack too deep.\\n   */\\n  function _executeSanityChecks(ExecuteArgs calldata _args) private view returns (bytes32, bool) {\\n    // If the sender is not approved relayer, revert\\n    if (!s.approvedRelayers[msg.sender] && msg.sender != _args.params.delegate) {\\n      revert BridgeFacet__execute_unapprovedSender();\\n    }\\n\\n    // If this is not the destination domain revert\\n    if (_args.params.destinationDomain != s.domain) {\\n      revert BridgeFacet__execute_wrongDomain();\\n    }\\n\\n    // Path length refers to the number of facilitating routers. A transfer is considered 'multipath'\\n    // if multiple routers provide liquidity (in even 'shares') for it.\\n    uint256 pathLength = _args.routers.length;\\n\\n    // Make sure number of routers is below the configured maximum.\\n    if (pathLength > s.maxRoutersPerTransfer) revert BridgeFacet__execute_maxRoutersExceeded();\\n\\n    // Derive transfer ID based on given arguments.\\n    bytes32 transferId = _calculateTransferId(_args.params);\\n\\n    // Retrieve the reconciled record.\\n    bool reconciled = s.reconciledTransfers[transferId];\\n\\n    // Hash the payload for which each router should have produced a signature.\\n    // Each router should have signed the `transferId` (which implicitly signs call params,\\n    // amount, and tokenId) as well as the `pathLength`, or the number of routers with which\\n    // they are splitting liquidity provision.\\n    bytes32 routerHash = keccak256(abi.encode(transferId, pathLength));\\n\\n    if (pathLength != 0) {\\n      // Check to make sure the transfer has not been reconciled (no need for routers if the transfer is\\n      // already reconciled; i.e. if there are routers provided, the transfer must *not* be reconciled).\\n      if (reconciled) revert BridgeFacet__execute_alreadyReconciled();\\n\\n      // NOTE: The sequencer address may be empty and no signature needs to be provided in the case of the\\n      // slow liquidity route (i.e. no routers involved). Additionally, the sequencer does not need to be the\\n      // msg.sender.\\n      // Check to make sure the sequencer address provided is approved\\n      if (!s.approvedSequencers[_args.sequencer]) {\\n        revert BridgeFacet__execute_notSupportedSequencer();\\n      }\\n      // Check to make sure the sequencer provided did sign the transfer ID and router path provided.\\n      if (\\n        _args.sequencer != _recoverSignature(keccak256(abi.encode(transferId, _args.routers)), _args.sequencerSignature)\\n      ) {\\n        revert BridgeFacet__execute_invalidSequencerSignature();\\n      }\\n\\n      for (uint256 i; i < pathLength; ) {\\n        // Make sure the router is approved, if applicable.\\n        // If router ownership is renounced (_RouterOwnershipRenounced() is true), then the router whitelist\\n        // no longer applies and we can skip this approval step.\\n        if (!_isRouterWhitelistRemoved() && !s.routerPermissionInfo.approvedRouters[_args.routers[i]]) {\\n          revert BridgeFacet__execute_notSupportedRouter();\\n        }\\n\\n        // Validate the signature. We'll recover the signer's address using the expected payload and basic ECDSA\\n        // signature scheme recovery. The address for each signature must match the router's address.\\n        if (_args.routers[i] != _recoverSignature(routerHash, _args.routerSignatures[i])) {\\n          revert BridgeFacet__execute_invalidRouterSignature();\\n        }\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n    } else {\\n      // If there are no routers for this transfer, this `execute` must be a slow liquidity route; in which\\n      // case, we must make sure the transfer's been reconciled.\\n      if (!reconciled) revert BridgeFacet__execute_notReconciled();\\n    }\\n\\n    // Require that this transfer has not already been executed. If it were executed, the `transferRelayer`\\n    // would have been set in the previous call (to enable the caller to claim relayer fees).\\n    if (s.transferRelayer[transferId] != address(0)) {\\n      revert BridgeFacet__execute_alreadyExecuted();\\n    }\\n\\n    return (transferId, reconciled);\\n  }\\n\\n  /**\\n   * @notice Calculates fast transfer amount.\\n   * @param _amount Transfer amount\\n   * @param _numerator Numerator\\n   * @param _denominator Denominator\\n   */\\n  function _muldiv(\\n    uint256 _amount,\\n    uint256 _numerator,\\n    uint256 _denominator\\n  ) private pure returns (uint256) {\\n    return (_amount * _numerator) / _denominator;\\n  }\\n\\n  /**\\n   * @notice Execute liquidity process used when calling `execute`.\\n   * @dev Will revert with underflow if any router in the path has insufficient liquidity to provide\\n   * for the transfer.\\n   * @dev Need this to prevent stack too deep.\\n   */\\n  function _handleExecuteLiquidity(\\n    bytes32 _transferId,\\n    bytes32 _key,\\n    bool _isFast,\\n    ExecuteArgs calldata _args\\n  )\\n    private\\n    returns (\\n      uint256,\\n      address,\\n      address\\n    )\\n  {\\n    // Save the addresses of all routers providing liquidity for this transfer.\\n    s.routedTransfers[_transferId] = _args.routers;\\n\\n    // Get the local asset contract address.\\n    address local = _getLocalAsset(_key, _args.params.canonicalId, _args.params.canonicalDomain);\\n\\n    // If this is a zero-value transfer, short-circuit remaining logic.\\n    if (_args.params.bridgedAmt == 0) {\\n      return (0, local, local);\\n    }\\n\\n    uint256 toSwap = _args.params.bridgedAmt;\\n    // If this is a fast liquidity path, we should handle deducting from applicable routers' liquidity.\\n    // If this is a slow liquidity path, the transfer must have been reconciled (if we've reached this point),\\n    // and the funds would have been custodied in this contract. The exact custodied amount is untracked in state\\n    // (since the amount is hashed in the transfer ID itself) - thus, no updates are required.\\n    if (_isFast) {\\n      uint256 pathLen = _args.routers.length;\\n\\n      // Calculate amount that routers will provide with the fast-liquidity fee deducted.\\n      toSwap = _muldiv(_args.params.bridgedAmt, s.LIQUIDITY_FEE_NUMERATOR, BPS_FEE_DENOMINATOR);\\n\\n      if (pathLen == 1) {\\n        // If router does not have enough liquidity, try to use Aave Portals.\\n        // NOTE: Only one router should be responsible for taking on this credit risk, and it should only deal\\n        // with transfers expecting adopted assets (to avoid introducing runtime slippage).\\n        if (\\n          !_args.params.receiveLocal && s.routerBalances[_args.routers[0]][local] < toSwap && s.aavePool != address(0)\\n        ) {\\n          if (!s.routerPermissionInfo.approvedForPortalRouters[_args.routers[0]])\\n            revert BridgeFacet__execute_notApprovedForPortals();\\n\\n          // Portals deliver the adopted asset directly; return after portal execution is completed.\\n          (uint256 portalDeliveredAmount, address adoptedAsset) = _executePortalTransfer(\\n            _transferId,\\n            _key,\\n            toSwap,\\n            _args.routers[0]\\n          );\\n          return (portalDeliveredAmount, adoptedAsset, local);\\n        } else {\\n          // Decrement the router's liquidity.\\n          s.routerBalances[_args.routers[0]][local] -= toSwap;\\n        }\\n      } else {\\n        // For each router, assert they are approved, and deduct liquidity.\\n        uint256 routerAmount = toSwap / pathLen;\\n        for (uint256 i; i < pathLen - 1; ) {\\n          // Decrement router's liquidity.\\n          // NOTE: If any router in the path has insufficient liquidity, this will revert with an underflow error.\\n          s.routerBalances[_args.routers[i]][local] -= routerAmount;\\n\\n          unchecked {\\n            ++i;\\n          }\\n        }\\n        // The last router in the multipath will sweep the remaining balance to account for remainder dust.\\n        uint256 toSweep = routerAmount + (toSwap % pathLen);\\n        s.routerBalances[_args.routers[pathLen - 1]][local] -= toSweep;\\n      }\\n    }\\n\\n    // If the local asset is specified, or the adopted asset was overridden (e.g. when user facing slippage\\n    // conditions outside of their boundaries), exit without swapping.\\n    if (_args.params.receiveLocal) {\\n      return (toSwap, local, local);\\n    }\\n\\n    // Swap out of representational asset into adopted asset if needed.\\n    uint256 slippageOverride = s.slippage[_transferId];\\n    (uint256 amount, address adopted) = AssetLogic.swapFromLocalAssetIfNeeded(\\n      _key,\\n      local,\\n      toSwap,\\n      slippageOverride != 0 ? slippageOverride : _args.params.slippage,\\n      _args.params.normalizedIn\\n    );\\n    return (amount, adopted, local);\\n  }\\n\\n  /**\\n   * @notice Process the transfer, and calldata if needed, when calling `execute`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _handleExecuteTransaction(\\n    ExecuteArgs calldata _args,\\n    uint256 _amountOut,\\n    address _asset, // adopted (or local if specified)\\n    bytes32 _transferId,\\n    bool _reconciled\\n  ) private returns (uint256) {\\n    // transfer funds to recipient\\n    AssetLogic.handleOutgoingAsset(_asset, _args.params.to, _amountOut);\\n\\n    // execute the calldata\\n    _executeCalldata(_transferId, _amountOut, _asset, _reconciled, _args.params);\\n\\n    return _amountOut;\\n  }\\n\\n  /**\\n   * @notice Executes external calldata.\\n   * \\n   * @dev Once a transfer is reconciled (i.e. data is authenticated), external calls will\\n   * fail gracefully. This means errors will be emitted in an event, but the function itself\\n   * will not revert.\\n\\n   * In the case where a transaction is *not* reconciled (i.e. data is unauthenticated), this\\n   * external call will fail loudly. This allows all functions that rely on authenticated data\\n   * (using a specific check on the origin sender), to be forced into the slow path for\\n   * execution to succeed.\\n   * \\n   */\\n  function _executeCalldata(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    bool _reconciled,\\n    CallParams calldata _params\\n  ) internal {\\n    // execute the calldata\\n    if (keccak256(_params.callData) == EMPTY_HASH) {\\n      // no call data, return amount out\\n      return;\\n    }\\n\\n    bool success;\\n    bytes memory returnData;\\n\\n    // See above devnote\\n    if (_reconciled) {\\n      // after this function executes:\\n      // - 2 events are emitted\\n      // - transfer id is returned\\n      // -> reserve 10K gas\\n\\n      // FIXME: should the values used here be settable constants?\\n\\n      // Use SafeCall here\\n      (success, returnData) = ExcessivelySafeCall.excessivelySafeCall(\\n        _params.to,\\n        gasleft() - 10_000,\\n        0, // native asset value (always 0)\\n        256, // only copy 256 bytes back as calldata\\n        abi.encodeWithSelector(\\n          IXReceiver.xReceive.selector,\\n          _transferId,\\n          _amount,\\n          _asset,\\n          _params.originSender, // use passed in value iff authenticated\\n          _params.originDomain,\\n          _params.callData\\n        )\\n      );\\n    } else {\\n      // use address(0) for origin sender on fast path\\n      returnData = IXReceiver(_params.to).xReceive(\\n        _transferId,\\n        _amount,\\n        _asset,\\n        address(0),\\n        _params.originDomain,\\n        _params.callData\\n      );\\n      success = true;\\n    }\\n\\n    emit ExternalCalldataExecuted(_transferId, success, returnData);\\n  }\\n\\n  /**\\n   * @notice Uses Aave Portals to provide fast liquidity\\n   */\\n  function _executePortalTransfer(\\n    bytes32 _transferId,\\n    bytes32 _key,\\n    uint256 _fastTransferAmount,\\n    address _router\\n  ) internal returns (uint256, address) {\\n    // Calculate local to adopted swap output if needed\\n    address adopted = _getAdoptedAsset(_key);\\n\\n    IAavePool(s.aavePool).mintUnbacked(adopted, _fastTransferAmount, address(this), AAVE_REFERRAL_CODE);\\n\\n    // Improvement: Instead of withdrawing to address(this), withdraw directly to the user or executor to save 1 transfer\\n    uint256 amountWithdrawn = IAavePool(s.aavePool).withdraw(adopted, _fastTransferAmount, address(this));\\n\\n    if (amountWithdrawn < _fastTransferAmount) revert BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn();\\n\\n    // Store principle debt\\n    s.portalDebt[_transferId] = _fastTransferAmount;\\n\\n    // Store fee debt\\n    s.portalFeeDebt[_transferId] = (s.aavePortalFeeNumerator * _fastTransferAmount) / BPS_FEE_DENOMINATOR;\\n\\n    emit AavePortalMintUnbacked(_transferId, _router, adopted, _fastTransferAmount);\\n\\n    return (_fastTransferAmount, adopted);\\n  }\\n\\n  // ============ Internal: Send ============\\n\\n  /**\\n   * @notice Format and send transfer message to a remote chain.\\n   *\\n   * @param _transferId Unique identifier for the transfer.\\n   * @param _destination The destination domain.\\n   * @param _connextion The connext instance on the destination domain.\\n   * @param _canonical The canonical token ID/domain info.\\n   * @param _local The local token address.\\n   * @param _amount The token amount.\\n   * @param _isCanonical Whether or not the local token is the canonical asset (i.e. this is the token's\\n   * \\\"home\\\" chain).\\n   */\\n  function _sendMessage(\\n    bytes32 _transferId,\\n    uint32 _destination,\\n    bytes32 _connextion,\\n    TokenId memory _canonical,\\n    address _local,\\n    uint256 _amount,\\n    bool _isCanonical\\n  ) private returns (bytes32) {\\n    IBridgeToken _token = IBridgeToken(_local);\\n\\n    // Get the formatted token ID\\n    bytes29 _tokenId = BridgeMessage.formatTokenId(_canonical.domain, _canonical.id);\\n\\n    // Remove tokens from circulation on this chain if applicable.\\n    if (_amount > 0) {\\n      if (!_isCanonical) {\\n        // If the token originates on a remote chain, burn the representational tokens on this chain.\\n        _token.burn(address(this), _amount);\\n      }\\n      // IFF the token IS the canonical token (i.e. originates on this chain), we lock the input tokens in escrow\\n      // in this contract, as an equal amount of representational assets will be minted on the destination chain.\\n      // NOTE: The tokens should be in the contract already at this point from xcall.\\n    }\\n\\n    // Format hook action.\\n    bytes29 _action = BridgeMessage.formatTransfer(_amount, _transferId);\\n    // Send message to destination chain bridge router.\\n    bytes32 _messageHash = IOutbox(s.xAppConnectionManager.home()).dispatch(\\n      _destination,\\n      _connextion,\\n      BridgeMessage.formatMessage(_tokenId, _action)\\n    );\\n\\n    // Emit Send event to record message details.\\n    emit Send(_local, msg.sender, _destination, _connextion, _amount, true);\\n    return _messageHash;\\n  }\\n\\n  /**\\n   * @notice Assert that the given domain has a xApp Router registered and return its address\\n   * @param _domain The domain of the chain for which to get the xApp Router\\n   * @return _remote The address of the remote xApp Router on _domain\\n   */\\n  function _mustHaveRemote(uint32 _domain) internal view returns (bytes32 _remote) {\\n    _remote = s.remotes[_domain];\\n    if (_remote == bytes32(0)) {\\n      revert BridgeFacet__mustHaveRemote_destinationNotSupported();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8268a7e01a76f46c28054374f6c868eef339072c966db1a80f69285dd6d61d7a\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/helpers/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\n */\\ncontract LPToken is ERC20Upgradeable, OwnableUpgradeable {\\n  // ============ Upgrade Gap ============\\n\\n  uint256[49] private __GAP; // gap for upgrade safety\\n\\n  // ============ Storage ============\\n\\n  /**\\n   * @notice Used to enforce proper token dilution\\n   * @dev If this is the first mint of the LP token, this amount of funds are burned.\\n   * See audit recommendations here:\\n   * - https://github.com/code-423n4/2022-03-prepo-findings/issues/27\\n   * - https://github.com/code-423n4/2022-04-jpegd-findings/issues/12\\n   * and uniswap v2 implementation here:\\n   * https://github.com/Uniswap/v2-core/blob/8b82b04a0b9e696c0e83f8b2f00e5d7be6888c79/contracts/UniswapV2Pair.sol#L15\\n   */\\n  uint256 public constant MINIMUM_LIQUIDITY = 10**3;\\n\\n  // ============ Initializer ============\\n\\n  /**\\n   * @notice Initializes this LPToken contract with the given name and symbol\\n   * @dev The caller of this function will become the owner. A Swap contract should call this\\n   * in its initializer function.\\n   * @param name name of this token\\n   * @param symbol symbol of this token\\n   */\\n  function initialize(string memory name, string memory symbol) external initializer returns (bool) {\\n    __Context_init_unchained();\\n    __ERC20_init_unchained(name, symbol);\\n    __Ownable_init_unchained();\\n    return true;\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Mints the given amount of LPToken to the recipient.\\n   * @dev only owner can call this mint function\\n   * @param recipient address of account to receive the tokens\\n   * @param amount amount of tokens to mint\\n   */\\n  function mint(address recipient, uint256 amount) external onlyOwner {\\n    require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n    if (totalSupply() == 0) {\\n      // NOTE: using the _mint function directly will error because it is going\\n      // to the 0 address. fix by using the address(1) here instead\\n      _mint(address(1), MINIMUM_LIQUIDITY);\\n    }\\n    _mint(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Burns the given amount of LPToken from provided account\\n   * @dev only owner can call this burn function\\n   * @param account address of account from which to burn token\\n   * @param amount amount of tokens to mint\\n   */\\n  function burnFrom(address account, uint256 amount) external onlyOwner {\\n    require(amount != 0, \\\"LPToken: cannot burn 0\\\");\\n    _burn(account, amount);\\n  }\\n\\n  // ============ Internal functions ============\\n\\n  /**\\n   * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n   * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\n   * This assumes the owner is set to a Swap contract's address.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override(ERC20Upgradeable) {\\n    super._beforeTokenTransfer(from, to, amount);\\n    require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x1d3f871488111c70a6f9b09ad3baeb21ebc635c82aa2c6d627d07e09720e4126\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IAavePool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\ninterface IAavePool {\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x2137d53884ab7dfea97b670a526356d90dccb981c55ef64dc493cadf702e4b60\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IBridgeHook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IBridgeHook\\n * @notice Contains the interface used by Connext contracts out of Nomad's\\n * BridgeRouter. The BridgeRouter will transfer funds to the destination address, then\\n * call the `onReceive` hook once the message has been processed.\\n *\\n * Taken from:\\n * https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-bridge/contracts/interfaces/IBridgeHook.sol\\n */\\ninterface IBridgeHook {\\n  /**\\n   * @notice Handles an incoming bridge transfer with some tokens and extra\\n   * data. Takes any necessary actions for the hook's purposes.\\n   *\\n   * This function is intended to allow arbitrary post-bridge actions with\\n   * tokens, at a user's discretion. E.g. recollateralize a CDP, exchange for\\n   * other tokens, emit an event, etc.\\n   *\\n   * @dev This hook is called AFTER tokens have been transferred to the hook\\n   * contract. If this hook errors, the bridge WILL NOT revert, and the hook\\n   * contract will own those tokens. Hook contracts MUST have a recovery plan\\n   * in place for these situations.\\n   *\\n   * @param _origin The domain of the chain from which the transfer originated\\n   * @param _sender The identifier of the caller which sent the tokens over the bridge\\n   * @param _tokenDomain The canonical deployment domain of the token\\n   * @param _tokenAddress The identifier for the token on its canonical domain\\n   * @param _localToken The local address of the token (its canonical\\n   *                    address if it is local to this domain, otherwise its\\n   *                    the address of its local representation).\\n   * @param _amount The amount of token received over the bridge\\n   * @param _extraData Extra user-specified data passed in to the origin chain\\n   */\\n  function onReceive(\\n    uint32 _origin,\\n    bytes32 _sender,\\n    uint32 _tokenDomain,\\n    bytes32 _tokenAddress,\\n    address _localToken,\\n    uint256 _amount,\\n    bytes memory _extraData\\n  ) external;\\n}\\n\",\"keccak256\":\"0x782d5cda8075fa2fba0377080e1a323a0eeb32dc99ede8dc20f5979d666156c4\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IBridgeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IBridgeRouter\\n * @notice Contains the interface used by Connext contracts into Nomad's\\n * BridgeRouter. The BridgeRouter is responsible for:\\n * - formatting and dispatching outbound nomad messages\\n * - custodying canonical and minting/burning local tokens\\n * - formatting and handling inbound nomad messages\\n */\\ninterface IBridgeRouter {\\n  /**\\n   * @notice Send tokens to a recipient on a remote chain\\n   * @param _token The token address\\n   * @param _amount The token amount\\n   * @param _destination The destination domain\\n   * @param _recipient The recipient address\\n   */\\n  function send(\\n    address _token,\\n    uint256 _amount,\\n    uint32 _destination,\\n    bytes32 _recipient,\\n    bool /* _enableFast deprecated field, left argument for backwards compatibility */\\n  ) external;\\n\\n  /**\\n   * @notice Send tokens to a hook on the remote chain\\n   * @param _token The token address\\n   * @param _amount The token amount\\n   * @param _destination The destination domain\\n   * @param _remoteHook The hook contract on the remote chain\\n   * @param _extraData Extra data that will be passed to the hook for\\n   *        execution\\n   */\\n  function sendToHook(\\n    address _token,\\n    uint256 _amount,\\n    uint32 _destination,\\n    bytes32 _remoteHook,\\n    bytes calldata _extraData\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf92e22a1ca80827f95f132d9599ae6597a6c8ff7c7f47fcdbc55a129b793eaea\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IBridgeToken {\\n  function initialize(\\n    uint8 _decimals,\\n    string memory _name,\\n    string memory _symbol\\n  ) external;\\n\\n  function name() external returns (string memory);\\n\\n  function balanceOf(address _account) external view returns (uint256);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function burn(address _from, uint256 _amnt) external;\\n\\n  function mint(address _to, uint256 _amnt) external;\\n\\n  function setDetails(string calldata _name, string calldata _symbol) external;\\n\\n  // inherited from ownable\\n  function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xc7b3ab962df0c10075dfa67bc2ea640c8a95371e17f34ce06c4241494f823178\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/interfaces/IConnextHandler.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {RelayerFeeRouter} from \\\"../../relayer-fee/RelayerFeeRouter.sol\\\";\\n\\nimport {ExecuteArgs, CallParams, TokenId} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {SwapUtils} from \\\"../libraries/SwapUtils.sol\\\";\\n\\nimport {IStableSwap} from \\\"./IStableSwap.sol\\\";\\nimport {IWeth} from \\\"./IWeth.sol\\\";\\nimport {IBridgeRouter} from \\\"./IBridgeRouter.sol\\\";\\n\\nimport {IDiamondCut} from \\\"./IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"./IDiamondLoupe.sol\\\";\\n\\ninterface IConnextHandler is IDiamondLoupe, IDiamondCut {\\n  // TokenFacet\\n  function canonicalToAdopted(bytes32 _key) external view returns (address);\\n\\n  function canonicalToAdopted(TokenId calldata _canonical) external view returns (address);\\n\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function canonicalToRepresentation(bytes32 _key) external view returns (address);\\n\\n  function canonicalToRepresentation(TokenId calldata _canonical) external view returns (address);\\n\\n  function representationToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function getLocalAndAdoptedToken(bytes32 _id, uint32 _domain) external view returns (address, address);\\n\\n  function approvedAssets(bytes32 _key) external view returns (bool);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n\\n  function adoptedToLocalPools(bytes32 _key) external view returns (IStableSwap);\\n\\n  function adoptedToLocalPools(TokenId calldata _canonical) external view returns (IStableSwap);\\n\\n  function getTokenId(address _candidate) external view returns (TokenId memory);\\n\\n  function setupAsset(\\n    TokenId calldata _canonical,\\n    uint8 _canonicalDecimals,\\n    string memory _representationName,\\n    string memory _representationSymbol,\\n    address _adoptedAssetId,\\n    address _stableSwapPool\\n  ) external returns (address);\\n\\n  function setupAssetWithDeployedRepresentation(\\n    TokenId calldata _canonical,\\n    address _representation,\\n    address _adoptedAssetId,\\n    address _stableSwapPool\\n  ) external returns (address);\\n\\n  function addStableSwapPool(TokenId calldata _canonical, address _stableSwapPool) external;\\n\\n  function removeAssetId(\\n    bytes32 _key,\\n    address _adoptedAssetId,\\n    address _representation\\n  ) external;\\n\\n  function removeAssetId(\\n    TokenId calldata _canonical,\\n    address _adoptedAssetId,\\n    address _representation\\n  ) external;\\n\\n  function updateDetails(\\n    TokenId calldata _canonical,\\n    string memory _name,\\n    string memory _symbol\\n  ) external;\\n\\n  // BaseConnextFacet\\n\\n  // BridgeFacet\\n  function relayerFees(bytes32 _transferId) external view returns (uint256);\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function reconciledTransfers(bytes32 _transferId) external view returns (bool);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  function addConnextion(uint32 _domain, address _connext) external;\\n\\n  function addSequencer(address _sequencer) external;\\n\\n  function removeSequencer(address _sequencer) external;\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(CallParams calldata _params, uint256 _slippage) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function setXAppConnectionManager(address _xAppConnectionManager) external;\\n\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external;\\n\\n  function enrollCustom(\\n    uint32 _domain,\\n    bytes32 _id,\\n    address _custom\\n  ) external;\\n\\n  // InboxFacet\\n\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external;\\n\\n  // ProposedOwnableFacet\\n\\n  function owner() external view returns (address);\\n\\n  function routerWhitelistRemoved() external view returns (bool);\\n\\n  function assetWhitelistRemoved() external view returns (bool);\\n\\n  function proposed() external view returns (address);\\n\\n  function proposedTimestamp() external view returns (uint256);\\n\\n  function routerWhitelistTimestamp() external view returns (uint256);\\n\\n  function assetWhitelistTimestamp() external view returns (uint256);\\n\\n  function delay() external view returns (uint256);\\n\\n  function proposeRouterWhitelistRemoval() external;\\n\\n  function removeRouterWhitelist() external;\\n\\n  function proposeAssetWhitelistRemoval() external;\\n\\n  function removeAssetWhitelist() external;\\n\\n  function renounced() external view returns (bool);\\n\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  function renounceOwnership() external;\\n\\n  function acceptProposedOwner() external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  // RelayerFacet\\n  function transferRelayer(bytes32 _transferId) external view returns (address);\\n\\n  function approvedRelayers(address _relayer) external view returns (bool);\\n\\n  function relayerFeeRouter() external view returns (RelayerFeeRouter);\\n\\n  function setRelayerFeeRouter(address _relayerFeeRouter) external;\\n\\n  function addRelayer(address _relayer) external;\\n\\n  function removeRelayer(address _relayer) external;\\n\\n  function initiateClaim(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds\\n  ) external;\\n\\n  function claim(address _recipient, bytes32[] calldata _transferIds) external;\\n\\n  // RoutersFacet\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function setupRouter(\\n    address router,\\n    address owner,\\n    address recipient\\n  ) external;\\n\\n  function removeRouter(address router) external;\\n\\n  function setMaxRoutersPerTransfer(uint256 _newMaxRouters) external;\\n\\n  function setLiquidityFeeNumerator(uint256 _numerator) external;\\n\\n  function approveRouterForPortal(address _router) external;\\n\\n  function unapproveRouterForPortal(address _router) external;\\n\\n  function setRouterRecipient(address router, address recipient) external;\\n\\n  function proposeRouterOwner(address router, address proposed) external;\\n\\n  function acceptProposedRouterOwner(address router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(\\n    uint256 _amount,\\n    address _local,\\n    address payable _to\\n  ) external;\\n\\n  // PortalFacet\\n  function getAavePortalDebt(bytes32 _transferId) external view returns (uint256);\\n\\n  function getAavePortalFeeDebt(bytes32 _transferId) external view returns (uint256);\\n\\n  function aavePool() external view returns (address);\\n\\n  function aavePortalFee() external view returns (uint256);\\n\\n  function setAavePool(address _aavePool) external;\\n\\n  function setAavePortalFee(uint256 _aavePortalFeeNumerator) external;\\n\\n  function repayAavePortal(\\n    CallParams calldata _params,\\n    uint256 _backingAmount,\\n    uint256 _feeAmount,\\n    uint256 _maxIn\\n  ) external;\\n\\n  function repayAavePortalFor(\\n    CallParams calldata _params,\\n    uint256 _backingAmount,\\n    uint256 _feeAmount\\n  ) external;\\n\\n  // StableSwapFacet\\n  function getSwapStorage(bytes32 canonicalId) external view returns (SwapUtils.Swap memory);\\n\\n  function getSwapLPToken(bytes32 canonicalId) external view returns (address);\\n\\n  function getSwapA(bytes32 canonicalId) external view returns (uint256);\\n\\n  function getSwapAPrecise(bytes32 canonicalId) external view returns (uint256);\\n\\n  function getSwapToken(bytes32 canonicalId, uint8 index) external view returns (IERC20);\\n\\n  function getSwapTokenIndex(bytes32 canonicalId, address tokenAddress) external view returns (uint8);\\n\\n  function getSwapTokenBalance(bytes32 canonicalId, uint8 index) external view returns (uint256);\\n\\n  function getSwapVirtualPrice(bytes32 canonicalId) external view returns (uint256);\\n\\n  function calculateSwap(\\n    bytes32 canonicalId,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateSwapTokenAmount(\\n    bytes32 canonicalId,\\n    uint256[] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256);\\n\\n  function calculateRemoveSwapLiquidity(bytes32 canonicalId, uint256 amount) external view returns (uint256[] memory);\\n\\n  function calculateRemoveSwapLiquidityOneToken(\\n    bytes32 canonicalId,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256);\\n\\n  function getSwapAdminBalance(bytes32 canonicalId, uint256 index) external view returns (uint256);\\n\\n  function swap(\\n    bytes32 canonicalId,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function swapExact(\\n    bytes32 canonicalId,\\n    uint256 amountIn,\\n    address assetIn,\\n    address assetOut,\\n    uint256 minAmountOut,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function swapExactOut(\\n    bytes32 canonicalId,\\n    uint256 amountOut,\\n    address assetIn,\\n    address assetOut,\\n    uint256 maxAmountIn,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function addSwapLiquidity(\\n    bytes32 canonicalId,\\n    uint256[] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeSwapLiquidity(\\n    bytes32 canonicalId,\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  function removeSwapLiquidityOneToken(\\n    bytes32 canonicalId,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeSwapLiquidityImbalance(\\n    bytes32 canonicalId,\\n    uint256[] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  // SwapAdminFacet\\n\\n  function initializeSwap(\\n    bytes32 _canonicalId,\\n    IERC20[] memory _pooledTokens,\\n    uint8[] memory decimals,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    uint256 _a,\\n    uint256 _fee,\\n    uint256 _adminFee,\\n    address lpTokenTargetAddress\\n  ) external;\\n\\n  function withdrawSwapAdminFees(bytes32 canonicalId) external;\\n\\n  function setSwapAdminFee(bytes32 canonicalId, uint256 newAdminFee) external;\\n\\n  function setSwapFee(bytes32 canonicalId, uint256 newSwapFee) external;\\n\\n  function rampA(\\n    bytes32 canonicalId,\\n    uint256 futureA,\\n    uint256 futureTime\\n  ) external;\\n\\n  function stopRampA(bytes32 canonicalId) external;\\n\\n  // VersionFacet\\n\\n  function VERSION() external returns (uint8);\\n}\\n\",\"keccak256\":\"0xdb6f130f100188d77d2a5dfdfb9e51e5a2c86901b58016eb787ba9b62e0d5703\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n  enum FacetCutAction {\\n    Add,\\n    Replace,\\n    Remove\\n  }\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Propose to add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function proposeDiamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCutProposed(FacetCut[] _diamondCut, address _init, bytes _calldata, uint256 deadline);\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  /// @notice Propose to add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function rescindDiamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCutRescinded(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xd75a7bfdb3aeac3acebf8cf999330a0fc7bec65e9a68711bbb58f4554ef087b2\",\"license\":\"MIT\"},\"contracts/core/connext/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n  /// These functions are expected to be called frequently\\n  /// by tools.\\n\\n  struct Facet {\\n    address facetAddress;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Gets all facet addresses and their four byte function selectors.\\n  /// @return facets_ Facet\\n  function facets() external view returns (Facet[] memory facets_);\\n\\n  /// @notice Gets all the function selectors supported by a specific facet.\\n  /// @param _facet The facet address.\\n  /// @return facetFunctionSelectors_\\n  function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n  /// @notice Get all the facet addresses used by a diamond.\\n  /// @return facetAddresses_\\n  function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n  /// @notice Gets the facet that supports the given selector.\\n  /// @dev If facet is not found return address(0).\\n  /// @param _functionSelector The function selector.\\n  /// @return facetAddress_ The facet address.\\n  function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xe6d71029d0a1846712477ccf17aa2124b82996c77b6e6486a208a68ea421f563\",\"license\":\"MIT\"},\"contracts/core/connext/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwap {\\n  /*** EVENTS ***/\\n\\n  // events replicated from SwapUtils to make the ABI easier for dumb\\n  // clients\\n  event TokenSwap(address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId);\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(uint256 newAdminFee);\\n  event NewSwapFee(uint256 newSwapFee);\\n  event NewWithdrawFee(uint256 newWithdrawFee);\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function swapExact(\\n    uint256 amountIn,\\n    address assetIn,\\n    address assetOut,\\n    uint256 minAmountOut,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function swapExactOut(\\n    uint256 amountOut,\\n    address assetIn,\\n    address assetOut,\\n    uint256 maxAmountIn,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function getA() external view returns (uint256);\\n\\n  function getToken(uint8 index) external view returns (IERC20);\\n\\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  // min return calculation functions\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateSwapOut(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy\\n  ) external view returns (uint256);\\n\\n  function calculateSwapFromAddress(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function calculateSwapOutFromAddress(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountOut\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n  function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n    external\\n    view\\n    returns (uint256 availableTokenAmount);\\n\\n  // state modifying functions\\n  function initialize(\\n    IERC20[] memory pooledTokens,\\n    uint8[] memory decimals,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    uint256 a,\\n    uint256 fee,\\n    uint256 adminFee,\\n    address lpTokenTargetAddress\\n  ) external;\\n\\n  function addLiquidity(\\n    uint256[] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xfbbb2cad0639658aa781212c69df10718250a6926d94a1a7508fc9927216abe8\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IWeth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IWeth {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x1adfce5227cd4c8303c59562e58372c371b15afb0f18587fee86b76ec0ef6e75\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/interfaces/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x75286f6ac1b1d5d7f4e508a478c0dad3a26d92675dabbf180d0b46d892618a1a\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/AmplificationUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\n\\n/**\\n * @title AmplificationUtils library\\n * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.\\n * This library assumes the struct is fully validated.\\n */\\nlibrary AmplificationUtils {\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  // Constant values used in ramping A calculations\\n  uint256 public constant A_PRECISION = 100;\\n  uint256 public constant MAX_A = 10**6;\\n  uint256 private constant MAX_A_CHANGE = 2;\\n  uint256 private constant MIN_RAMP_TIME = 14 days;\\n\\n  /**\\n   * @notice Return A, the amplification coefficient * n * (n - 1)\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter\\n   */\\n  function getA(SwapUtils.Swap storage self) internal view returns (uint256) {\\n    return _getAPrecise(self) / A_PRECISION;\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter in its raw precision form\\n   */\\n  function getAPrecise(SwapUtils.Swap storage self) internal view returns (uint256) {\\n    return _getAPrecise(self);\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter in its raw precision form\\n   */\\n  function _getAPrecise(SwapUtils.Swap storage self) internal view returns (uint256) {\\n    uint256 t1 = self.futureATime; // time when ramp is finished\\n    uint256 a1 = self.futureA; // final A value when ramp is finished\\n\\n    if (block.timestamp < t1) {\\n      uint256 t0 = self.initialATime; // time when ramp is started\\n      uint256 a0 = self.initialA; // initial A value when ramp is started\\n      if (a1 > a0) {\\n        // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\n        return a0 + ((a1 - a0) * (block.timestamp - t0)) / (t1 - t0);\\n      } else {\\n        // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\n        return a0 - ((a0 - a1) * (block.timestamp - t0)) / (t1 - t0);\\n      }\\n    } else {\\n      return a1;\\n    }\\n  }\\n\\n  /**\\n   * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\\n   * the limit range.\\n   * @param self Swap struct to update\\n   * @param futureA_ the new A to ramp towards\\n   * @param futureTime_ timestamp when the new A should be reached\\n   */\\n  function rampA(\\n    SwapUtils.Swap storage self,\\n    uint256 futureA_,\\n    uint256 futureTime_\\n  ) internal {\\n    require(block.timestamp >= self.initialATime + 1 days, \\\"Wait 1 day before starting ramp\\\");\\n    require(futureTime_ >= block.timestamp + MIN_RAMP_TIME, \\\"Insufficient ramp time\\\");\\n    require(futureA_ != 0 && futureA_ < MAX_A, \\\"futureA_ must be > 0 and < MAX_A\\\");\\n\\n    uint256 initialAPrecise = _getAPrecise(self);\\n    uint256 futureAPrecise = futureA_ * A_PRECISION;\\n\\n    if (futureAPrecise < initialAPrecise) {\\n      require(futureAPrecise * MAX_A_CHANGE >= initialAPrecise, \\\"futureA_ is too small\\\");\\n    } else {\\n      require(futureAPrecise <= initialAPrecise * MAX_A_CHANGE, \\\"futureA_ is too large\\\");\\n    }\\n\\n    self.initialA = initialAPrecise;\\n    self.futureA = futureAPrecise;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = futureTime_;\\n\\n    emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\\n  }\\n\\n  /**\\n   * @notice Stops ramping A immediately. Once this function is called, rampA()\\n   * cannot be called for another 24 hours\\n   * @param self Swap struct to update\\n   */\\n  function stopRampA(SwapUtils.Swap storage self) internal {\\n    require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\n\\n    uint256 currentA = _getAPrecise(self);\\n    self.initialA = currentA;\\n    self.futureA = currentA;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = block.timestamp;\\n\\n    emit StopRampA(currentA, block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x7dca96b10fa307f469c142aaea0855d3c9ba45f79066eaeae1467ce113fc8d28\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/AssetLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {SafeERC20, Address} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {TypeCasts} from \\\"../../../shared/libraries/TypeCasts.sol\\\";\\n\\nimport {IStableSwap} from \\\"../interfaces/IStableSwap.sol\\\";\\n\\nimport {IWeth} from \\\"../interfaces/IWeth.sol\\\";\\n\\nimport {LibConnextStorage, AppStorage, TokenId} from \\\"./LibConnextStorage.sol\\\";\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\n\\nlibrary AssetLogic {\\n  // ============ Libraries ============\\n  using SwapUtils for SwapUtils.Swap;\\n\\n  // ============ Errors ============\\n\\n  error AssetLogic__handleIncomingAsset_nativeAssetNotSupported();\\n  error AssetLogic__handleOutgoingAsset_notNative();\\n  error AssetLogic__transferAssetToContract_feeOnTransferNotSupported();\\n  error AssetLogic__swapToLocalAssetIfNeeded_swapPaused();\\n  error AssetLogic__swapFromLocalAssetIfNeeded_swapPaused();\\n  error AssetLogic__getTokenIndexFromStableSwapPool_notExist();\\n\\n  // ============ Internal ============\\n\\n  /**\\n   * @notice Check if the stabelswap pool exists or not\\n   * @param key the hash of the canonical id and domain\\n   */\\n  function stableSwapPoolExist(bytes32 key) internal view returns (bool) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n    return s.swapStorages[key].pooledTokens.length != 0;\\n  }\\n\\n  /**\\n   * @notice Return the index of the given token address. Reverts if no matching\\n   * token is found.\\n   * @param key the hash of the canonical id and domain\\n   * @param tokenAddress address of the token\\n   * @return the index of the given token address\\n   */\\n  function getTokenIndexFromStableSwapPool(bytes32 key, address tokenAddress) internal view returns (uint8) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n    uint8 index = s.tokenIndexes[key][tokenAddress];\\n    if (address(s.swapStorages[key].pooledTokens[index]) != tokenAddress)\\n      revert AssetLogic__getTokenIndexFromStableSwapPool_notExist();\\n    return index;\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev Only allows native asset to be used for fee\\n   * @param _assetId - The address to transfer\\n   * @param _assetAmount - The specified amount to transfer. May not be the\\n   * actual amount transferred (i.e. fee on transfer tokens)\\n   */\\n  function handleIncomingAsset(address _assetId, uint256 _assetAmount) internal {\\n    // If amount is 0 do nothing\\n    if (_assetAmount == 0) {\\n      return;\\n    }\\n\\n    if (_assetId == address(0)) {\\n      revert AssetLogic__handleIncomingAsset_nativeAssetNotSupported();\\n    }\\n\\n    // Transfer asset to contract\\n    transferAssetToContract(_assetId, _assetAmount);\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @param _assetId - The address to transfer\\n   * @param _to - The account that will receive the withdrawn funds\\n   * @param _amount - The amount to withdraw from contract\\n   */\\n  function handleOutgoingAsset(\\n    address _assetId,\\n    address _to,\\n    uint256 _amount\\n  ) internal {\\n    // If amount is 0 do nothing\\n    if (_amount == 0) {\\n      return;\\n    }\\n    // No native assets should ever be stored on this contract\\n    if (_assetId == address(0)) revert AssetLogic__handleOutgoingAsset_notNative();\\n\\n    // Transfer ERC20 asset\\n    SafeERC20.safeTransfer(IERC20(_assetId), _to, _amount);\\n  }\\n\\n  /**\\n   * @notice Transfer asset funds from msg.sender to the Connext contract.\\n   * @param _assetId - The address to transfer\\n   * @param _amount - The specified amount to transfer\\n   */\\n  function transferAssetToContract(address _assetId, uint256 _amount) internal {\\n    // Do nothing if the amount is 0\\n    if (_amount == 0) {\\n      return;\\n    }\\n    // Validate correct amounts are transferred\\n    uint256 starting = IERC20(_assetId).balanceOf(address(this));\\n\\n    SafeERC20.safeTransferFrom(IERC20(_assetId), msg.sender, address(this), _amount);\\n    // Ensure this was not a fee-on-transfer token\\n    if (IERC20(_assetId).balanceOf(address(this)) - starting != _amount) {\\n      revert AssetLogic__transferAssetToContract_feeOnTransferNotSupported();\\n    }\\n  }\\n\\n  /**\\n   * @notice This function calculates slippage as a %age of the amount in, and normalizes\\n   * That to the `_out` decimals.\\n   *\\n   * @dev This *ONLY* works for 1:1 assets\\n   *\\n   * @param _in The decimals of the asset in / amount in\\n   * @param _out The decimals of the target asset\\n   * @param _amountIn The starting amount for the swap\\n   * @param _slippage The slippage allowed for the swap, in BPS\\n   * @return The minimum amount out for the swap\\n   */\\n  function calculateSlippageBoundary(\\n    uint8 _in,\\n    uint8 _out,\\n    uint256 _amountIn,\\n    uint256 _slippage\\n  ) internal pure returns (uint256) {\\n    if (_amountIn == 0) {\\n      return 0;\\n    }\\n    // Get the min recieved (in same decimals as _amountIn)\\n    uint256 min = (_amountIn * (10_000 - _slippage)) / 10_000;\\n    return normalizeDecimals(_in, _out, min);\\n  }\\n\\n  /**\\n   * @notice This function translates the _amount in _in decimals\\n   * to _out decimals\\n   *\\n   * @param _in The decimals of the asset in / amount in\\n   * @param _out The decimals of the target asset\\n   * @param _amount The value to normalize to the `_out` decimals\\n   */\\n  function normalizeDecimals(\\n    uint8 _in,\\n    uint8 _out,\\n    uint256 _amount\\n  ) internal pure returns (uint256) {\\n    if (_in == _out) {\\n      return _amount;\\n    }\\n    // Convert this value to the same decimals as _out\\n    uint256 normalized;\\n    if (_in < _out) {\\n      normalized = _amount * (10**(_out - _in));\\n    } else {\\n      normalized = _amount / (10**(_in - _out));\\n    }\\n    return normalized;\\n  }\\n\\n  /**\\n   * @notice Swaps an adopted asset to the local (representation or canonical) nomad asset\\n   * @dev Will not swap if the asset passed in is the local asset\\n   * @param _key - The hash of canonical id and domain\\n   * @param _asset - The address of the adopted asset to swap into the local asset\\n   * @param _amount - The amount of the adopted asset to swap\\n   * @param _slippage - The minimum amount of slippage user will take on from _amount in BPS\\n   * @return The amount of local asset received from swap\\n4   */\\n  function swapToLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    address _local,\\n    uint256 _amount,\\n    uint256 _slippage\\n  ) internal returns (uint256) {\\n    // If there's no amount, no need to swap.\\n    if (_amount == 0) {\\n      return _amount;\\n    }\\n\\n    // Check the case where the adopted asset *is* the local asset. If so, no need to swap.\\n    if (_local == _asset) {\\n      return _amount;\\n    }\\n\\n    // Swap the asset to the proper local asset.\\n    (uint256 out, ) = _swapAsset(\\n      _key,\\n      _asset,\\n      _local,\\n      _amount,\\n      calculateSlippageBoundary(ERC20(_asset).decimals(), ERC20(_local).decimals(), _amount, _slippage)\\n    );\\n    return out;\\n  }\\n\\n  /**\\n   * @notice Swaps a local nomad asset for the adopted asset using the stored stable swap\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key the hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @param _slippage - The minimum amount of slippage user will take on from _amount in BPS\\n   * @param _normalizedIn - The amount sent in on xcall to take the slippage from, in 18 decimals\\n   * by convention\\n   * @return The amount of adopted asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapFromLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    uint256 _normalizedIn\\n  ) internal returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // If the adopted asset is the local asset, no need to swap\\n    address adopted = s.canonicalToAdopted[_key];\\n    if (adopted == _asset) {\\n      return (_amount, _asset);\\n    }\\n\\n    // If 0 valued, do nothing\\n    if (_amount == 0) {\\n      return (_amount, adopted);\\n    }\\n\\n    // NOTE: To get the slippage boundary here, you must take the slippage % off of the\\n    // normalized amount in (at 18 decimals by convention), then convert that amount\\n    // to the proper decimals of adopted.\\n\\n    // Swap the asset to the proper local asset\\n    return\\n      _swapAsset(\\n        _key,\\n        _asset,\\n        adopted,\\n        _amount,\\n        calculateSlippageBoundary(uint8(18), ERC20(adopted).decimals(), _normalizedIn, _slippage)\\n      );\\n  }\\n\\n  /**\\n   * @notice Swaps a local nomad asset for the adopted asset using the stored stable swap\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key the hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\n   * @param _amount - The exact amount to receive out of the swap\\n   * @param _maxIn - The most you will supply to the swap\\n   * @return The amount of local asset put into  swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapFromLocalAssetIfNeededForExactOut(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _maxIn\\n  )\\n    internal\\n    returns (\\n      bool,\\n      uint256,\\n      address\\n    )\\n  {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // If the adopted asset is the local asset, no need to swap\\n    address adopted = s.canonicalToAdopted[_key];\\n    if (adopted == _asset) {\\n      return (true, _amount, _asset);\\n    }\\n\\n    return _swapAssetOut(_key, _asset, adopted, _amount, _maxIn);\\n  }\\n\\n  /**\\n   * @notice Swaps assetIn to assetOut using the stored stable swap or internal swap pool\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key - The canonical token id\\n   * @param _assetIn - The address of the from asset\\n   * @param _assetOut - The address of the to asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @param _minOut - The minimum amount of `_assetOut` the user will accept\\n   * @return The amount of assetOut\\n   * @return The address of assetOut\\n   */\\n  function _swapAsset(\\n    bytes32 _key,\\n    address _assetIn,\\n    address _assetOut,\\n    uint256 _amount,\\n    uint256 _minOut\\n  ) internal returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    if (stableSwapPoolExist(_key)) {\\n      // if internal swap pool exists\\n      return (\\n        s.swapStorages[_key].swapInternal(\\n          getTokenIndexFromStableSwapPool(_key, _assetIn),\\n          getTokenIndexFromStableSwapPool(_key, _assetOut),\\n          _amount,\\n          _minOut\\n        ),\\n        _assetOut\\n      );\\n    } else {\\n      // Otherwise, swap via stable swap pool\\n      IStableSwap pool = s.adoptedToLocalPools[_key];\\n\\n      SafeERC20.safeApprove(IERC20(_assetIn), address(pool), 0);\\n      SafeERC20.safeIncreaseAllowance(IERC20(_assetIn), address(pool), _amount);\\n\\n      // NOTE: if pool is not registered here, then the following call will revert\\n      return (pool.swapExact(_amount, _assetIn, _assetOut, _minOut, block.timestamp + 3600), _assetOut);\\n    }\\n  }\\n\\n  /**\\n   * @notice Swaps assetIn to assetOut using the stored stable swap or internal swap pool\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key - The hash of the canonical id and domain\\n   * @param _assetIn - The address of the from asset\\n   * @param _assetOut - The address of the to asset\\n   * @param _amountOut - The amount of the _assetOut to swap\\n   * @param _maxIn - The most you will supply to the swap\\n   * @return Success value\\n   * @return The amount of assetIn\\n   * @return The address of assetOut\\n   */\\n  function _swapAssetOut(\\n    bytes32 _key,\\n    address _assetIn,\\n    address _assetOut,\\n    uint256 _amountOut,\\n    uint256 _maxIn\\n  )\\n    internal\\n    returns (\\n      bool,\\n      uint256,\\n      address\\n    )\\n  {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    bool success;\\n    uint256 amountIn;\\n\\n    // Swap the asset to the proper local asset\\n    if (stableSwapPoolExist(_key)) {\\n      // get internal swap pool\\n      SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n      // if internal swap pool exists\\n      uint8 tokenIndexIn = getTokenIndexFromStableSwapPool(_key, _assetIn);\\n      uint8 tokenIndexOut = getTokenIndexFromStableSwapPool(_key, _assetOut);\\n      // calculate slippage before performing swap\\n      // NOTE: this is less efficient then relying on the `swapInternalOut` revert, but makes it easier\\n      // to handle slippage failures (this can be called during reconcile, so must not fail)\\n      if (_maxIn >= ipool.calculateSwapInv(tokenIndexIn, tokenIndexOut, _amountOut)) {\\n        success = true;\\n        amountIn = ipool.swapInternalOut(tokenIndexIn, tokenIndexOut, _amountOut, _maxIn);\\n      }\\n      // slippage is too high to perform swap: success = false, amountIn = 0\\n    } else {\\n      // Otherwise, swap via stable swap pool\\n      IStableSwap pool = s.adoptedToLocalPools[_key];\\n      uint256 _amountIn = pool.calculateSwapOutFromAddress(_assetIn, _assetOut, _amountOut);\\n      if (_amountIn <= _maxIn) {\\n        // set the success\\n        success = true;\\n\\n        // perform the swap\\n        // Edge case with some tokens: Example USDT in ETH Mainnet, after the backUnbacked call there could be a remaining allowance if not the whole amount is pulled by aave.\\n        // Later, if we try to increase the allowance it will fail. USDT demands if allowance is not 0, it has to be set to 0 first.\\n        // Example: https://github.com/aave/aave-v3-periphery/blob/ca184e5278bcbc10d28c3dbbc604041d7cfac50b/contracts/adapters/paraswap/ParaSwapRepayAdapter.sol#L138-L140\\n        SafeERC20.safeApprove(IERC20(_assetIn), address(pool), 0);\\n        SafeERC20.safeIncreaseAllowance(IERC20(_assetIn), address(pool), _amountIn);\\n        amountIn = pool.swapExactOut(_amountOut, _assetIn, _assetOut, _maxIn, block.timestamp + 3600);\\n      }\\n      // slippage is too high to perform swap: success = false, amountIn = 0\\n    }\\n\\n    return (success, amountIn, _assetOut);\\n  }\\n\\n  /**\\n   * @notice Calculate amount of tokens you receive on a local nomad asset for the adopted asset\\n   * using the stored stable swap\\n   * @dev Will not use the stored stable swap if the asset passed in is the local asset\\n   * @param _key - The hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the local asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @return The amount of local asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function calculateSwapFromLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount\\n  ) internal view returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // If the adopted asset is the local asset, no need to swap\\n    address adopted = s.canonicalToAdopted[_key];\\n    if (adopted == _asset) {\\n      return (_amount, _asset);\\n    }\\n\\n    // Otherwise, calculate swap the asset to the proper local asset\\n    if (stableSwapPoolExist(_key)) {\\n      // if internal swap pool exists\\n      uint8 tokenIndexIn = getTokenIndexFromStableSwapPool(_key, _asset);\\n      uint8 tokenIndexOut = getTokenIndexFromStableSwapPool(_key, adopted);\\n      return (s.swapStorages[_key].calculateSwap(tokenIndexIn, tokenIndexOut, _amount), adopted);\\n    } else {\\n      IStableSwap pool = s.adoptedToLocalPools[_key];\\n\\n      return (pool.calculateSwapFromAddress(_asset, adopted, _amount), adopted);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate amount of tokens you receive of a local nomad asset for the adopted asset\\n   * using the stored stable swap\\n   * @dev Will not use the stored stable swap if the asset passed in is the local asset\\n   * @param _asset - The address of the asset to swap into the local asset\\n   * @param _amount - The amount of the asset to swap\\n   * @return The amount of local asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function calculateSwapToLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    address _local,\\n    uint256 _amount\\n  ) internal view returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // If the asset is the local asset, no swap needed\\n    if (_asset == _local) {\\n      return (_amount, _asset);\\n    }\\n\\n    // Otherwise, calculate swap the asset to the proper local asset\\n    if (stableSwapPoolExist(_key)) {\\n      // if internal swap pool exists\\n      uint8 tokenIndexIn = getTokenIndexFromStableSwapPool(_key, _asset);\\n      uint8 tokenIndexOut = getTokenIndexFromStableSwapPool(_key, _local);\\n      return (s.swapStorages[_key].calculateSwap(tokenIndexIn, tokenIndexOut, _amount), _local);\\n    } else {\\n      IStableSwap pool = s.adoptedToLocalPools[_key];\\n\\n      return (pool.calculateSwapFromAddress(_asset, _local, _amount), _local);\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets the canonical information for a given candidate.\\n   * @dev First checks the `address(0)` convention, then checks if the asset given is the\\n   * adopted asset, then calculates the local address\\n   */\\n  function getCanonicalTokenId(address _candidate, AppStorage storage s) internal view returns (TokenId memory) {\\n    TokenId memory _canonical;\\n    // if candidate is address(0), then the _canonical is empty\\n    if (_candidate == address(0)) {\\n      return _canonical;\\n    }\\n    // candidate could be adopted\\n    _canonical = s.adoptedToCanonical[_candidate];\\n    if (_canonical.domain != 0) {\\n      // candidate is adopted, return canonical\\n      return _canonical;\\n    }\\n    // candidate was not adopted, could be the local address.\\n    // if this domain is the canonical domain, then the local == canonical\\n    // otherwise, it will be the representation asset\\n    if (isLocalOrigin(_candidate, s)) {\\n      // the token originates on this domain, canonical information is the information\\n      // of the candidate\\n      _canonical.domain = s.domain;\\n      _canonical.id = TypeCasts.addressToBytes32(_candidate);\\n    } else {\\n      // on a remote domain, return the representation\\n      _canonical = s.representationToCanonical[_candidate];\\n    }\\n    return _canonical;\\n  }\\n\\n  /**\\n   * @notice Determine if token is of local origin\\n   * @return TRUE if token is locally originating\\n   */\\n  function isLocalOrigin(address _token, AppStorage storage s) internal view returns (bool) {\\n    // If the contract WAS deployed\\n    // it will be stored in this mapping.\\n    // If so, it IS NOT of local origin\\n    if (s.representationToCanonical[_token].domain != 0) {\\n      return false;\\n    }\\n    // If the contract WAS NOT deployed,\\n    // and the contract exists, then it IS of local origin\\n    // Return true if code exists at _addr\\n    uint256 _codeSize;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _codeSize := extcodesize(_token)\\n    }\\n    return _codeSize != 0;\\n  }\\n\\n  function getLocalAsset(\\n    bytes32 _key,\\n    bytes32 _id,\\n    uint32 _domain,\\n    AppStorage storage s\\n  ) internal view returns (address) {\\n    if (_domain == s.domain) {\\n      // Token is of local origin\\n      return TypeCasts.bytes32ToAddress(_id);\\n    } else {\\n      // Token is a representation of a token of remote origin\\n      return s.canonicalToRepresentation[_key];\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the hash of canonical id and domain\\n   * @dev This hash is used as the key for many asset-related mappings\\n   */\\n  function calculateCanonicalHash(bytes32 _id, uint32 _domain) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(_id, _domain));\\n  }\\n}\\n\",\"keccak256\":\"0x637868d0eadf7dfb7b1ea5171b2beda697b5e86efb5c6a984ccc6556742a67ad\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/BridgeMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"../../../shared/libraries/TypedMemView.sol\\\";\\n\\nlibrary BridgeMessage {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // WARNING: do NOT re-write the numbers / order\\n  // of message types in an upgrade;\\n  // will cause in-flight messages to be mis-interpreted\\n  // The Types enum it defines the types of `views` that we use in BridgeMessage. A view\\n  // points to a specific part of the memory and can slice bytes out of it. When we give a `type` to a view,\\n  // we define the structure of the data it points to, so that we can do easy runtime assertions without\\n  // having to fetch the whole data from memory and check for ourselves. In BridgeMessage.sol\\n  // the types of `data` we can have are defined in this enum and may belong to different taxonomies.\\n  // For example, a `Message` includes a `TokenId` and an Action (a `Transfer`).\\n  // The Message is a different TYPE of data than a TokenId or Transfer, as TokenId and Transfer live inside\\n  // the message. For that reason, we define them as different data types and we add them to the same enum\\n  // for ease of use.\\n  enum Types {\\n    Invalid, // 0\\n    TokenId, // 1\\n    Message, // 2\\n    Transfer // 3\\n  }\\n\\n  // ============ Structs ============\\n\\n  // Tokens are identified by a TokenId:\\n  // domain - 4 byte chain ID of the chain from which the token originates\\n  // id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\n  struct TokenId {\\n    uint32 domain;\\n    bytes32 id;\\n  }\\n\\n  // ============ Constants ============\\n\\n  uint256 private constant TOKEN_ID_LEN = 36; // 4 bytes domain + 32 bytes id\\n  uint256 private constant IDENTIFIER_LEN = 1;\\n  uint256 private constant TRANSFER_LEN = 65; // 1 byte identifier + 32 bytes amount + 32 bytes transfer id\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a message is of type `_t`\\n   * @param _view The message\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Checks that Action is valid type\\n   * @param _action The action\\n   * @return TRUE if action is valid\\n   */\\n  function isValidAction(bytes29 _action) internal pure returns (bool) {\\n    return isTransfer(_action);\\n  }\\n\\n  /**\\n   * @notice Checks that view is a valid message length\\n   * @param _view The bytes string\\n   * @return TRUE if message is valid\\n   */\\n  function isValidMessageLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    return _len == TOKEN_ID_LEN + TRANSFER_LEN;\\n  }\\n\\n  /**\\n   * @notice Formats an action message\\n   * @param _tokenId The token ID\\n   * @param _action The action\\n   * @return The formatted message\\n   */\\n  function formatMessage(bytes29 _tokenId, bytes29 _action)\\n    internal\\n    view\\n    typeAssert(_tokenId, Types.TokenId)\\n    returns (bytes memory)\\n  {\\n    require(isValidAction(_action), \\\"!action\\\");\\n    bytes29[] memory _views = new bytes29[](2);\\n    _views[0] = _tokenId;\\n    _views[1] = _action;\\n    return TypedMemView.join(_views);\\n  }\\n\\n  /**\\n   * @notice Returns the type of the message\\n   * @param _view The message\\n   * @return The type of the message\\n   */\\n  function messageType(bytes29 _view) internal pure returns (Types) {\\n    return Types(uint8(_view.typeOf()));\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of the specified type\\n   * @param _type the type to check for\\n   * @param _action The message\\n   * @return True if the message is of the specified type\\n   */\\n  function isType(bytes29 _action, Types _type) internal pure returns (bool) {\\n    return actionType(_action) == uint8(_type) && messageType(_action) == _type;\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of type Transfer\\n   * @param _action The message\\n   * @return True if the message is of type Transfer\\n   */\\n  function isTransfer(bytes29 _action) internal pure returns (bool) {\\n    return isType(_action, Types.Transfer);\\n  }\\n\\n  /**\\n   * @notice Formats Transfer\\n   * @param _amnt The transfer amount\\n   * @param _transferId The unique identifier of the transfer\\n   * @return\\n   */\\n  function formatTransfer(uint256 _amnt, bytes32 _transferId) internal pure returns (bytes29) {\\n    return abi.encodePacked(Types.Transfer, _amnt, _transferId).ref(uint40(Types.Transfer));\\n  }\\n\\n  /**\\n   * @notice Serializes a Token ID struct\\n   * @param _tokenId The token id struct\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(TokenId memory _tokenId) internal pure returns (bytes29) {\\n    return formatTokenId(_tokenId.domain, _tokenId.id);\\n  }\\n\\n  /**\\n   * @notice Creates a serialized Token ID from components\\n   * @param _domain The domain\\n   * @param _id The ID\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(uint32 _domain, bytes32 _id) internal pure returns (bytes29) {\\n    return abi.encodePacked(_domain, _id).ref(uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Retrieves the domain from a TokenID\\n   * @param _tokenId The message\\n   * @return The domain\\n   */\\n  function domain(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (uint32) {\\n    return uint32(_tokenId.indexUint(0, 4));\\n  }\\n\\n  /**\\n   * @notice Retrieves the ID from a TokenID\\n   * @param _tokenId The message\\n   * @return The ID\\n   */\\n  function id(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (bytes32) {\\n    // before = 4 bytes domain\\n    return _tokenId.index(4, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the EVM ID\\n   * @param _tokenId The message\\n   * @return The EVM ID\\n   */\\n  function evmId(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (address) {\\n    // before = 4 bytes domain + 12 bytes empty to trim for address\\n    return _tokenId.indexAddress(16);\\n  }\\n\\n  /**\\n   * @notice Retrieves the action identifier from message\\n   * @param _message The action\\n   * @return The message type\\n   */\\n  function msgType(bytes29 _message) internal pure returns (uint8) {\\n    return uint8(_message.indexUint(TOKEN_ID_LEN, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the identifier from action\\n   * @param _action The action\\n   * @return The action type\\n   */\\n  function actionType(bytes29 _action) internal pure returns (uint8) {\\n    return uint8(_action.indexUint(0, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the amount from a Transfer\\n   * @param _transferAction The message\\n   * @return The amount\\n   */\\n  function amnt(bytes29 _transferAction) internal pure returns (uint256) {\\n    // before = 1 byte identifier = 1 bytes\\n    return _transferAction.indexUint(1, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the transfer id from a Transfer\\n   * @param _transferAction The message\\n   * @return The id\\n   */\\n  function transferId(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier + 32 bytes amount = 33 bytes\\n    return _transferAction.index(33, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the token ID from a Message\\n   * @param _message The message\\n   * @return The ID\\n   */\\n  function tokenId(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Retrieves the action data from a Message\\n   * @param _message The message\\n   * @return The action\\n   */\\n  function action(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    uint256 _actionLen = _message.len() - TOKEN_ID_LEN;\\n    uint40 _type = uint40(msgType(_message));\\n    return _message.slice(TOKEN_ID_LEN, _actionLen, _type);\\n  }\\n\\n  /**\\n   * @notice Converts to a Message\\n   * @param _message The message\\n   * @return The newly typed message\\n   */\\n  function tryAsMessage(bytes29 _message) internal pure returns (bytes29) {\\n    if (isValidMessageLength(_message)) {\\n      return _message.castTo(uint40(Types.Message));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  /**\\n   * @notice Asserts that the message is of type Message\\n   * @param _view The message\\n   * @return The message\\n   */\\n  function mustBeMessage(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsMessage(_view).assertValid();\\n  }\\n}\\n\",\"keccak256\":\"0x6470e62b402efab6f9b0928521b7c2412468476208807064344f8dfa916ce695\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {RelayerFeeRouter} from \\\"../../relayer-fee/RelayerFeeRouter.sol\\\";\\n\\nimport {IWeth} from \\\"../interfaces/IWeth.sol\\\";\\n\\nimport {IBridgeRouter} from \\\"../interfaces/IBridgeRouter.sol\\\";\\nimport {IStableSwap} from \\\"../interfaces/IStableSwap.sol\\\";\\nimport {IConnectorManager} from \\\"../../../messaging/interfaces/IConnectorManager.sol\\\";\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\n\\n// ============= Enum =============\\n\\n/// @notice Enum representing address role\\n// Returns uint\\n// None     - 0\\n// Router   - 1\\n// Watcher  - 2\\n// Admin    - 3\\nenum Role {\\n  None,\\n  Router,\\n  Watcher,\\n  Admin\\n}\\n\\n// ============= Structs =============\\n\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\\n/**\\n * @notice These are the call parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called). Must match nomad domain schema\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called). Must match nomad domain schema\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local nomad asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct CallParams {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The CallParams. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  CallParams params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\\n\\n/**\\n * @notice Contains RouterFacet related state\\n * @param approvedRouters - Mapping of whitelisted router addresses\\n * @param routerRecipients - Mapping of router withdraw recipient addresses.\\n * If set, all liquidity is withdrawn only to this address. Must be set by routerOwner\\n * (if configured) or the router itself\\n * @param routerOwners - Mapping of router owners\\n * If set, can update the routerRecipient\\n * @param proposedRouterOwners - Mapping of proposed router owners\\n * Must wait timeout to set the\\n * @param proposedRouterTimestamp - Mapping of proposed router owners timestamps\\n * When accepting a proposed owner, must wait for delay to elapse\\n */\\nstruct RouterPermissionsManagerInfo {\\n  mapping(address => bool) approvedRouters;\\n  mapping(address => bool) approvedForPortalRouters;\\n  mapping(address => address) routerRecipients;\\n  mapping(address => address) routerOwners;\\n  mapping(address => address) proposedRouterOwners;\\n  mapping(address => uint256) proposedRouterTimestamp;\\n}\\n\\nstruct AppStorage {\\n  //\\n  // 0\\n  bool initialized;\\n  //\\n  // ConnextHandler\\n  //\\n  // 1\\n  uint256 LIQUIDITY_FEE_NUMERATOR;\\n  /**\\n   * @notice The local nomad relayer fee router.\\n   */\\n  // 2\\n  RelayerFeeRouter relayerFeeRouter;\\n  /**\\n   * @notice Nonce for the contract, used to keep unique transfer ids.\\n   * @dev Assigned at first interaction (xcall on origin domain).\\n   */\\n  // 3\\n  uint256 nonce;\\n  /**\\n   * @notice The domain this contract exists on.\\n   * @dev Must match the nomad domain, which is distinct from the \\\"chainId\\\".\\n   */\\n  // 4\\n  uint32 domain;\\n  /**\\n   * @notice UpgradeBeacon from which new token proxies will get their implementation\\n   */\\n  // 5\\n  address tokenBeacon;\\n  /**\\n   * @notice Mapping holding the AMMs for swapping in and out of local assets.\\n   * @dev Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon).\\n   * This mapping is keyed on the hash of the canonical id + domain for local asset.\\n   */\\n  // 6\\n  mapping(bytes32 => IStableSwap) adoptedToLocalPools;\\n  /**\\n   * @notice Mapping of whitelisted assets on same domain as contract.\\n   * @dev Mapping is keyed on the hash of the canonical id and domain taken from the\\n   * token registry.\\n   */\\n  // 7\\n  mapping(bytes32 => bool) approvedAssets;\\n  /**\\n   * @notice Mapping of adopted to canonical asset information.\\n   * @dev If the adopted asset is the native asset, the keyed address will\\n   * be the wrapped asset address.\\n   */\\n  // 8\\n  mapping(address => TokenId) adoptedToCanonical;\\n  /**\\n   * @notice Mapping of representation to canonical asset information.\\n   */\\n  // 9\\n  mapping(address => TokenId) representationToCanonical;\\n  /**\\n   * @notice Mapping of hash(canonicalId, canonicalDomain) to adopted asset on this domain.\\n   * @dev If the adopted asset is the native asset, the stored address will be the\\n   * wrapped asset address.\\n   */\\n  // 10\\n  mapping(bytes32 => address) canonicalToAdopted;\\n  /**\\n   * @notice Mapping of canonical to representation asset information.\\n   * @dev If the token is of local origin (meaning it was originanlly deployed on this chain),\\n   * this MUST map to address(0).\\n   */\\n  // 11\\n  mapping(bytes32 => address) canonicalToRepresentation;\\n  /**\\n   * @notice Mapping to determine if transfer is reconciled.\\n   */\\n  // 12\\n  mapping(bytes32 => bool) reconciledTransfers;\\n  /**\\n   * @notice Mapping holding router address that provided fast liquidity.\\n   */\\n  // 13\\n  mapping(bytes32 => address[]) routedTransfers;\\n  /**\\n   * @notice Mapping of router to available balance of an asset.\\n   * @dev Routers should always store liquidity that they can expect to receive via the bridge on\\n   * this domain (the nomad local asset).\\n   */\\n  // 14\\n  mapping(address => mapping(address => uint256)) routerBalances;\\n  /**\\n   * @notice Mapping of approved relayers\\n   * @dev Send relayer fee if msg.sender is approvedRelayer; otherwise revert.\\n   */\\n  // 15\\n  mapping(address => bool) approvedRelayers;\\n  /**\\n   * @notice Stores the relayer fee for a transfer. Updated on origin domain when a user calls xcall or bump.\\n   * @dev This will track all of the relayer fees assigned to a transfer by id, including any bumps made by the relayer.\\n   */\\n  // 16\\n  mapping(bytes32 => uint256) relayerFees;\\n  /**\\n   * @notice Stores the relayer of a transfer. Updated on the destination domain when a relayer calls execute\\n   * for transfer.\\n   * @dev When relayer claims, must check that the msg.sender has forwarded transfer.\\n   */\\n  // 17\\n  mapping(bytes32 => address) transferRelayer;\\n  /**\\n   * @notice The max amount of routers a payment can be routed through.\\n   */\\n  // 18\\n  uint256 maxRoutersPerTransfer;\\n  /**\\n   * @notice The address of the nomad bridge router for this chain.\\n   */\\n  // 19\\n  IBridgeRouter bridgeRouter;\\n  /**\\n   * @notice Stores a mapping of transfer id to slippage overrides.\\n   */\\n  // 20\\n  mapping(bytes32 => uint256) slippage;\\n  /**\\n   * @notice Stores a mapping of remote routers keyed on domains.\\n   * @dev Addresses are cast to bytes32.\\n   * This mapping is required because the ConnextHandler now contains the BridgeRouter and must implement\\n   * the remotes interface.\\n   */\\n  // 21\\n  mapping(uint32 => bytes32) remotes;\\n  //\\n  // ProposedOwnable\\n  //\\n  // 22\\n  address _proposed;\\n  // 23\\n  uint256 _proposedOwnershipTimestamp;\\n  // 24\\n  bool _routerWhitelistRemoved;\\n  // 25\\n  uint256 _routerWhitelistTimestamp;\\n  // 26\\n  bool _assetWhitelistRemoved;\\n  // 27\\n  uint256 _assetWhitelistTimestamp;\\n  /**\\n   * @notice Stores a mapping of address to Roles\\n   * @dev returns uint representing the enum Role value\\n   */\\n  // 28\\n  mapping(address => Role) roles;\\n  //\\n  // RouterFacet\\n  //\\n  // 29\\n  RouterPermissionsManagerInfo routerPermissionInfo;\\n  //\\n  // ReentrancyGuard\\n  //\\n  // 30\\n  uint256 _status;\\n  //\\n  // StableSwap\\n  //\\n  /**\\n   * @notice Mapping holding the AMM storages for swapping in and out of local assets\\n   * @dev Swaps for an adopted asset <> nomad local asset (i.e. POS USDC <> madUSDC on polygon)\\n   * Struct storing data responsible for automatic market maker functionalities. In order to\\n   * access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol.\\n   */\\n  // 31\\n  mapping(bytes32 => SwapUtils.Swap) swapStorages;\\n  /**\\n   * @notice Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.\\n   * @dev getTokenIndex function also relies on this mapping to retrieve token index.\\n   */\\n  // 32\\n  mapping(bytes32 => mapping(address => uint8)) tokenIndexes;\\n  /**\\n   * @notice Stores whether or not bribing, AMMs, have been paused.\\n   */\\n  // 33\\n  bool _paused;\\n  //\\n  // AavePortals\\n  //\\n  /**\\n   * @notice Address of Aave Pool contract.\\n   */\\n  // 34\\n  address aavePool;\\n  /**\\n   * @notice Fee percentage numerator for using Portal liquidity.\\n   * @dev Assumes the same basis points as the liquidity fee.\\n   */\\n  // 35\\n  uint256 aavePortalFeeNumerator;\\n  /**\\n   * @notice Mapping to store the transfer liquidity amount provided by Aave Portals.\\n   */\\n  // 36\\n  mapping(bytes32 => uint256) portalDebt;\\n  /**\\n   * @notice Mapping to store the transfer liquidity amount provided by Aave Portals.\\n   */\\n  // 37\\n  mapping(bytes32 => uint256) portalFeeDebt;\\n  /**\\n   * @notice Mapping of approved sequencers\\n   * @dev Sequencer address provided must belong to an approved sequencer in order to call `execute`\\n   * for the fast liquidity route.\\n   */\\n  // 38\\n  mapping(address => bool) approvedSequencers;\\n  /**\\n   * @notice Remote connection manager for xapp.\\n   */\\n  // 39\\n  IConnectorManager xAppConnectionManager;\\n  /**\\n   * @notice Ownership delay for transferring ownership.\\n   */\\n  // 40\\n  uint256 _ownershipDelay;\\n}\\n\\nlibrary LibConnextStorage {\\n  function connextStorage() internal pure returns (AppStorage storage ds) {\\n    assembly {\\n      ds.slot := 0\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8ac4830863819a825da2c7b4009b06cc5a47fe3b6e74cd308321e5901b50eebd\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n    // hash of proposed facets => acceptance time\\n    mapping(bytes32 => uint256) acceptanceTimes;\\n    // acceptance delay for upgrading facets\\n    uint256 acceptanceDelay;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    address previousOwner = ds.contractOwner;\\n    ds.contractOwner = _newOwner;\\n    emit OwnershipTransferred(previousOwner, _newOwner);\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function acceptanceTime(bytes32 _key) internal view returns (uint256) {\\n    return diamondStorage().acceptanceTimes[_key];\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: !contract owner\\\");\\n  }\\n\\n  event DiamondCutProposed(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata, uint256 deadline);\\n\\n  function proposeDiamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    uint256 acceptance = block.timestamp + ds.acceptanceDelay;\\n    ds.acceptanceTimes[keccak256(abi.encode(_diamondCut, _init, _calldata))] = acceptance;\\n    emit DiamondCutProposed(_diamondCut, _init, _calldata, acceptance);\\n  }\\n\\n  event DiamondCutRescinded(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  function rescindDiamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    // NOTE: you can always rescind a proposed facet cut as the owner, even if outside of the validity\\n    // period or befor the delay elpases\\n    diamondStorage().acceptanceTimes[keccak256(abi.encode(_diamondCut, _init, _calldata))] = 0;\\n    emit DiamondCutRescinded(_diamondCut, _init, _calldata);\\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  // Internal function version of diamondCut\\n  function diamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    if (ds.facetAddresses.length != 0) {\\n      uint256 time = ds.acceptanceTimes[keccak256(abi.encode(_diamondCut, _init, _calldata))];\\n      require(time != 0 && time <= block.timestamp, \\\"LibDiamond: delay not elapsed\\\");\\n    } // Otherwise, this is the first instance of deployment and it can be set automatically\\n    for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == IDiamondCut.FacetCutAction.Add) {\\n        addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n        replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n        removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else {\\n        revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n      }\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n      removeFunction(ds, oldFacetAddress, selector);\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n    }\\n  }\\n\\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    // if function does not exist then do nothing and return\\n    require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n    for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      removeFunction(ds, oldFacetAddress, selector);\\n    }\\n  }\\n\\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n    enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n    ds.facetAddresses.push(_facetAddress);\\n  }\\n\\n  function addFunction(\\n    DiamondStorage storage ds,\\n    bytes4 _selector,\\n    uint96 _selectorPosition,\\n    address _facetAddress\\n  ) internal {\\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n  }\\n\\n  function removeFunction(\\n    DiamondStorage storage ds,\\n    address _facetAddress,\\n    bytes4 _selector\\n  ) internal {\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n    // an immutable function is a function defined directly in a diamond\\n    require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n    // replace selector with last selector, then delete last selector\\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n    uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n    // if not the same then replace _selector with lastSelector\\n    if (selectorPosition != lastSelectorPosition) {\\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n    }\\n    // delete the last selector\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n    delete ds.selectorToFacetAndPosition[_selector];\\n\\n    // if no more selectors for facet address then delete the facet address\\n    if (lastSelectorPosition == 0) {\\n      // replace facet address with last facet address and delete last facet address\\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n      if (facetAddressPosition != lastFacetAddressPosition) {\\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n      }\\n      ds.facetAddresses.pop();\\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n    }\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n    } else {\\n      require(_calldata.length != 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n      if (_init != address(this)) {\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n      }\\n      (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n      if (!success) {\\n        if (error.length != 0) {\\n          // bubble up the error\\n          revert(string(error));\\n        } else {\\n          revert(\\\"LibDiamondCut: _init function reverted\\\");\\n        }\\n      }\\n    }\\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    uint256 contractSize;\\n    assembly {\\n      contractSize := extcodesize(_contract)\\n    }\\n    require(contractSize != 0, _errorMessage);\\n  }\\n}\\n\",\"keccak256\":\"0x7e9f19fcadc0f0d6cc1ceac5a6c817c022e0c0fa79030435044f9867db20360c\",\"license\":\"MIT\"},\"contracts/core/connext/libraries/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\n/**\\n * @title MathUtils library\\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\\n * differences between two uint256.\\n */\\nlibrary MathUtils {\\n  /**\\n   * @notice Compares a and b and returns true if the difference between a and b\\n   *         is less than 1 or equal to each other.\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return True if the difference between a and b is less than 1 or equal,\\n   *         otherwise return false\\n   */\\n  function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n    return (difference(a, b) <= 1);\\n  }\\n\\n  /**\\n   * @notice Calculates absolute difference between a and b\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return Difference between a and b\\n   */\\n  function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a > b) {\\n      return a - b;\\n    }\\n    return b - a;\\n  }\\n}\\n\",\"keccak256\":\"0xc0e55e78b6b5fec92fbf16f77f10103450f012394d995c8ace507f1abae29371\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {LPToken} from \\\"../helpers/LPToken.sol\\\";\\n\\nimport {AmplificationUtils} from \\\"./AmplificationUtils.sol\\\";\\nimport {MathUtils} from \\\"./MathUtils.sol\\\";\\n\\n/**\\n * @title SwapUtils library\\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\\n * Admin functions should be protected within contracts using this library.\\n */\\nlibrary SwapUtils {\\n  using SafeERC20 for IERC20;\\n  using MathUtils for uint256;\\n\\n  /*** EVENTS ***/\\n\\n  event TokenSwap(\\n    bytes32 indexed key,\\n    address indexed buyer,\\n    uint256 tokensSold,\\n    uint256 tokensBought,\\n    uint128 soldId,\\n    uint128 boughtId\\n  );\\n  event AddLiquidity(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(bytes32 indexed key, uint256 newAdminFee);\\n  event NewSwapFee(bytes32 indexed key, uint256 newSwapFee);\\n\\n  struct Swap {\\n    // variables around the ramp management of A,\\n    // the amplification coefficient * n * (n - 1)\\n    // see https://www.curve.fi/stableswap-paper.pdf for details\\n    bytes32 key;\\n    uint256 initialA;\\n    uint256 futureA;\\n    uint256 initialATime;\\n    uint256 futureATime;\\n    // fee calculation\\n    uint256 swapFee;\\n    uint256 adminFee;\\n    LPToken lpToken;\\n    // contract references for all tokens being pooled\\n    IERC20[] pooledTokens;\\n    // multipliers for each pooled token's precision to get to POOL_PRECISION_DECIMALS\\n    // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\\n    // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10\\n    uint256[] tokenPrecisionMultipliers;\\n    // the pool balance of each token, in the token's precision\\n    // the contract's actual token balance might differ\\n    uint256[] balances;\\n    // the admin fee balance of each token, in the token's precision\\n    uint256[] adminFees;\\n  }\\n\\n  // Struct storing variables used in calculations in the\\n  // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n  struct CalculateWithdrawOneTokenDYInfo {\\n    uint256 d0;\\n    uint256 d1;\\n    uint256 newY;\\n    uint256 feePerToken;\\n    uint256 preciseA;\\n  }\\n\\n  // Struct storing variables used in calculations in the\\n  // {add,remove}Liquidity functions to avoid stack too deep errors\\n  struct ManageLiquidityInfo {\\n    uint256 d0;\\n    uint256 d1;\\n    uint256 d2;\\n    uint256 preciseA;\\n    LPToken lpToken;\\n    uint256 totalSupply;\\n    uint256[] balances;\\n    uint256[] multipliers;\\n  }\\n\\n  // the precision all pools tokens will be converted to\\n  uint8 internal constant POOL_PRECISION_DECIMALS = 18;\\n\\n  // the denominator used to calculate admin and LP fees. For example, an\\n  // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n  uint256 internal constant FEE_DENOMINATOR = 1e10;\\n\\n  // Max swap fee is 1% or 100bps of each swap\\n  uint256 internal constant MAX_SWAP_FEE = 1e8;\\n\\n  // Max adminFee is 100% of the swapFee\\n  // adminFee does not add additional fee on top of swapFee\\n  // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\n  // users but only on the earnings of LPs\\n  uint256 internal constant MAX_ADMIN_FEE = 1e10;\\n\\n  // Constant value used as max loop limit\\n  uint256 internal constant MAX_LOOP_LIMIT = 256;\\n\\n  /*** VIEW & PURE FUNCTIONS ***/\\n\\n  function _getAPrecise(Swap storage self) private view returns (uint256) {\\n    return AmplificationUtils._getAPrecise(self);\\n  }\\n\\n  /**\\n   * @notice Calculate the dy, the amount of selected token that user receives and\\n   * the fee of withdrawing in one token\\n   * @param tokenAmount the amount to withdraw in the pool's precision\\n   * @param tokenIndex which token will be withdrawn\\n   * @param self Swap struct to read from\\n   * @return the amount of token user will receive\\n   */\\n  function calculateWithdrawOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) internal view returns (uint256) {\\n    (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\\n      self,\\n      tokenAmount,\\n      tokenIndex,\\n      self.lpToken.totalSupply()\\n    );\\n    return availableTokenAmount;\\n  }\\n\\n  function _calculateWithdrawOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 totalSupply\\n  ) private view returns (uint256, uint256) {\\n    uint256 dy;\\n    uint256 newY;\\n    uint256 currentY;\\n\\n    (dy, newY, currentY) = calculateWithdrawOneTokenDY(self, tokenIndex, tokenAmount, totalSupply);\\n\\n    // dy_0 (without fees)\\n    // dy, dy_0 - dy\\n\\n    uint256 dySwapFee = (currentY - newY) / self.tokenPrecisionMultipliers[tokenIndex] - dy;\\n\\n    return (dy, dySwapFee);\\n  }\\n\\n  /**\\n   * @notice Calculate the dy of withdrawing in one token\\n   * @param self Swap struct to read from\\n   * @param tokenIndex which token will be withdrawn\\n   * @param tokenAmount the amount to withdraw in the pools precision\\n   * @return the d and the new y after withdrawing one token\\n   */\\n  function calculateWithdrawOneTokenDY(\\n    Swap storage self,\\n    uint8 tokenIndex,\\n    uint256 tokenAmount,\\n    uint256 totalSupply\\n  )\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    // Get the current D, then solve the stableswap invariant\\n    // y_i for D - tokenAmount\\n    uint256[] memory xp = _xp(self);\\n\\n    require(tokenIndex < xp.length, \\\"index out of range\\\");\\n\\n    CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n    v.preciseA = _getAPrecise(self);\\n    v.d0 = getD(xp, v.preciseA);\\n    v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\n\\n    require(tokenAmount <= xp[tokenIndex], \\\"exceeds available\\\");\\n\\n    v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\\n\\n    uint256[] memory xpReduced = new uint256[](xp.length);\\n\\n    v.feePerToken = _feePerToken(self.swapFee, xp.length);\\n    // TODO: Set a length variable (at top) instead of reading xp.length on each loop.\\n    for (uint256 i; i < xp.length; ) {\\n      uint256 xpi = xp[i];\\n      // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\\n      // else dxExpected = xp[i] - (xp[i] * d1 / d0)\\n      // xpReduced[i] -= dxExpected * fee / FEE_DENOMINATOR\\n      xpReduced[i] =\\n        xpi -\\n        ((((i == tokenIndex) ? ((xpi * v.d1) / v.d0 - v.newY) : (xpi - (xpi * v.d1) / v.d0)) * v.feePerToken) /\\n          FEE_DENOMINATOR);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    uint256 dy = xpReduced[tokenIndex] - getYD(v.preciseA, tokenIndex, xpReduced, v.d1);\\n    dy = (dy - 1) / (self.tokenPrecisionMultipliers[tokenIndex]);\\n\\n    return (dy, v.newY, xp[tokenIndex]);\\n  }\\n\\n  /**\\n   * @notice Calculate the price of a token in the pool with given\\n   * precision-adjusted balances and a particular D.\\n   *\\n   * @dev This is accomplished via solving the invariant iteratively.\\n   * See the StableSwap paper and Curve.fi implementation for further details.\\n   *\\n   * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n   * x_1**2 + b*x_1 = c\\n   * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n   *\\n   * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\n   * @param tokenIndex Index of token we are calculating for.\\n   * @param xp a precision-adjusted set of pool balances. Array should be\\n   * the same cardinality as the pool.\\n   * @param d the stableswap invariant\\n   * @return the price of the token, in the same precision as in xp\\n   */\\n  function getYD(\\n    uint256 a,\\n    uint8 tokenIndex,\\n    uint256[] memory xp,\\n    uint256 d\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    require(tokenIndex < numTokens, \\\"Token not found\\\");\\n\\n    uint256 c = d;\\n    uint256 s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i; i < numTokens; ) {\\n      if (i != tokenIndex) {\\n        s += xp[i];\\n        c = (c * d) / (xp[i] * numTokens);\\n        // If we were to protect the division loss we would have to keep the denominator separate\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n        // c = c * D * D * D * ... overflow!\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    c = (c * d * AmplificationUtils.A_PRECISION) / (nA * numTokens);\\n\\n    uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\\n    uint256 yPrev;\\n    uint256 y = d;\\n    for (uint256 i; i < MAX_LOOP_LIMIT; ) {\\n      yPrev = y;\\n      y = ((y * y) + c) / ((y * 2) + b - d);\\n      if (y.within1(yPrev)) {\\n        return y;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n   * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\\n   * as the pool.\\n   * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n   * See the StableSwap paper for details\\n   * @return the invariant, at the precision of the pool\\n   */\\n  function getD(uint256[] memory xp, uint256 a) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    uint256 s;\\n    for (uint256 i; i < numTokens; ) {\\n      s += xp[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    if (s == 0) {\\n      return 0;\\n    }\\n\\n    uint256 prevD;\\n    uint256 d = s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i; i < MAX_LOOP_LIMIT; ) {\\n      uint256 dP = d;\\n      for (uint256 j; j < numTokens; ) {\\n        dP = (dP * d) / (xp[j] * numTokens);\\n        // If we were to protect the division loss we would have to keep the denominator separate\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n        // dP = dP * D * D * D * ... overflow!\\n\\n        unchecked {\\n          ++j;\\n        }\\n      }\\n      prevD = d;\\n      d =\\n        (((nA * s) / AmplificationUtils.A_PRECISION + dP * numTokens) * d) /\\n        ((((nA - AmplificationUtils.A_PRECISION) * d) / AmplificationUtils.A_PRECISION + (numTokens + 1) * dP));\\n      if (d.within1(prevD)) {\\n        return d;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n    // function which does not rely on D.\\n    revert(\\\"D does not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Given a set of balances and precision multipliers, return the\\n   * precision-adjusted balances.\\n   *\\n   * @param balances an array of token balances, in their native precisions.\\n   * These should generally correspond with pooled tokens.\\n   *\\n   * @param precisionMultipliers an array of multipliers, corresponding to\\n   * the amounts in the balances array. When multiplied together they\\n   * should yield amounts at the pool's precision.\\n   *\\n   * @return an array of amounts \\\"scaled\\\" to the pool's precision\\n   */\\n  function _xp(uint256[] memory balances, uint256[] memory precisionMultipliers)\\n    internal\\n    pure\\n    returns (uint256[] memory)\\n  {\\n    uint256 numTokens = balances.length;\\n    require(numTokens == precisionMultipliers.length, \\\"mismatch multipliers\\\");\\n    uint256[] memory xp = new uint256[](numTokens);\\n    for (uint256 i; i < numTokens; ) {\\n      xp[i] = balances[i] * precisionMultipliers[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return xp;\\n  }\\n\\n  /**\\n   * @notice Return the precision-adjusted balances of all tokens in the pool\\n   * @param self Swap struct to read from\\n   * @return the pool balances \\\"scaled\\\" to the pool's precision, allowing\\n   * them to be more easily compared.\\n   */\\n  function _xp(Swap storage self) internal view returns (uint256[] memory) {\\n    return _xp(self.balances, self.tokenPrecisionMultipliers);\\n  }\\n\\n  /**\\n   * @notice Get the virtual price, to help calculate profit\\n   * @param self Swap struct to read from\\n   * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\\n   */\\n  function getVirtualPrice(Swap storage self) internal view returns (uint256) {\\n    uint256 d = getD(_xp(self), _getAPrecise(self));\\n    LPToken lpToken = self.lpToken;\\n    uint256 supply = lpToken.totalSupply();\\n    if (supply != 0) {\\n      return (d * (10**uint256(POOL_PRECISION_DECIMALS))) / supply;\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Calculate the new balances of the tokens given the indexes of the token\\n   * that is swapped from (FROM) and the token that is swapped to (TO).\\n   * This function is used as a helper function to calculate how much TO token\\n   * the user should receive on swap.\\n   *\\n   * @param preciseA precise form of amplification coefficient\\n   * @param tokenIndexFrom index of FROM token\\n   * @param tokenIndexTo index of TO token\\n   * @param x the new total amount of FROM token\\n   * @param xp balances of the tokens in the pool\\n   * @return the amount of TO token that should remain in the pool\\n   */\\n  function getY(\\n    uint256 preciseA,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 x,\\n    uint256[] memory xp\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    require(tokenIndexFrom != tokenIndexTo, \\\"compare token to itself\\\");\\n    require(tokenIndexFrom < numTokens && tokenIndexTo < numTokens, \\\"token not found\\\");\\n\\n    uint256 d = getD(xp, preciseA);\\n    uint256 c = d;\\n    uint256 s;\\n    uint256 nA = numTokens * preciseA;\\n\\n    uint256 _x;\\n    for (uint256 i; i < numTokens; ) {\\n      if (i == tokenIndexFrom) {\\n        _x = x;\\n      } else if (i != tokenIndexTo) {\\n        _x = xp[i];\\n      } else {\\n        unchecked {\\n          ++i;\\n        }\\n        continue;\\n      }\\n      s += _x;\\n      c = (c * d) / (_x * numTokens);\\n      // If we were to protect the division loss we would have to keep the denominator separate\\n      // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n      // c = c * D * D * D * ... overflow!\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    c = (c * d * AmplificationUtils.A_PRECISION) / (nA * numTokens);\\n    uint256 b = s + ((d * AmplificationUtils.A_PRECISION) / nA);\\n    uint256 yPrev;\\n    uint256 y = d;\\n\\n    // iterative approximation\\n    for (uint256 i; i < MAX_LOOP_LIMIT; ) {\\n      yPrev = y;\\n      y = ((y * y) + c) / ((y * 2) + b - d);\\n      if (y.within1(yPrev)) {\\n        return y;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Externally calculates a swap between two tokens.\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get\\n   */\\n  function calculateSwap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) internal view returns (uint256 dy) {\\n    (dy, ) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, self.balances);\\n  }\\n\\n  /**\\n   * @notice Externally calculates a swap between two tokens.\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dy the number of tokens to buy.\\n   * @return dx the number of tokens the user have to transfer + fee\\n   */\\n  function calculateSwapInv(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy\\n  ) internal view returns (uint256 dx) {\\n    (dx, ) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, self.balances);\\n  }\\n\\n  /**\\n   * @notice Internally calculates a swap between two tokens.\\n   *\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n   * using the token contracts.\\n   *\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get in the token's precision. ex WBTC -> 8\\n   * @return dyFee the associated fee in multiplied precision (POOL_PRECISION_DECIMALS)\\n   */\\n  function _calculateSwap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256[] memory balances\\n  ) internal view returns (uint256 dy, uint256 dyFee) {\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n    uint256[] memory xp = _xp(balances, multipliers);\\n    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \\\"index out of range\\\");\\n    uint256 x = dx * multipliers[tokenIndexFrom] + xp[tokenIndexFrom];\\n    uint256 y = getY(_getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, xp);\\n    dy = xp[tokenIndexTo] - y - 1;\\n    dyFee = (dy * self.swapFee) / FEE_DENOMINATOR;\\n    dy = (dy - dyFee) / multipliers[tokenIndexTo];\\n  }\\n\\n  /**\\n   * @notice Internally calculates a swap between two tokens.\\n   *\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n   * using the token contracts.\\n   *\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dy the number of tokens to buy. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dx the number of tokens the user have to deposit in the token's precision. ex WBTC -> 8\\n   * @return dxFee the associated fee in multiplied precision (POOL_PRECISION_DECIMALS)\\n   */\\n  function _calculateSwapInv(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256[] memory balances\\n  ) internal view returns (uint256 dx, uint256 dxFee) {\\n    require(tokenIndexFrom != tokenIndexTo, \\\"compare token to itself\\\");\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n    uint256[] memory xp = _xp(balances, multipliers);\\n    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \\\"index out of range\\\");\\n\\n    uint256 a = _getAPrecise(self);\\n    uint256 d0 = getD(xp, a);\\n\\n    xp[tokenIndexTo] = xp[tokenIndexTo] - (dy * multipliers[tokenIndexTo]);\\n    uint256 x = getYD(a, tokenIndexFrom, xp, d0);\\n    dx = x - xp[tokenIndexFrom] + 1;\\n    dxFee = (dx * self.swapFee) / FEE_DENOMINATOR;\\n    dx = (dx + dxFee) / multipliers[tokenIndexFrom];\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate amount of each underlying\\n   * tokens that is returned upon burning given amount of\\n   * LP tokens\\n   *\\n   * @param amount the amount of LP tokens that would to be burned on\\n   * withdrawal\\n   * @return array of amounts of tokens user will receive\\n   */\\n  function calculateRemoveLiquidity(Swap storage self, uint256 amount) internal view returns (uint256[] memory) {\\n    return _calculateRemoveLiquidity(self.balances, amount, self.lpToken.totalSupply());\\n  }\\n\\n  function _calculateRemoveLiquidity(\\n    uint256[] memory balances,\\n    uint256 amount,\\n    uint256 totalSupply\\n  ) internal pure returns (uint256[] memory) {\\n    require(amount <= totalSupply, \\\"exceed total supply\\\");\\n\\n    uint256 numBalances = balances.length;\\n    uint256[] memory amounts = new uint256[](numBalances);\\n\\n    for (uint256 i; i < numBalances; ) {\\n      amounts[i] = (balances[i] * amount) / totalSupply;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate prices from deposits or\\n   * withdrawals, excluding fees but including slippage. This is\\n   * helpful as an input into the various \\\"min\\\" parameters on calls\\n   * to fight front-running\\n   *\\n   * @dev This shouldn't be used outside frontends for user estimates.\\n   *\\n   * @param self Swap struct to read from\\n   * @param amounts an array of token amounts to deposit or withdrawal,\\n   * corresponding to pooledTokens. The amount should be in each\\n   * pooled token's native precision. If a token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @param deposit whether this is a deposit or a withdrawal\\n   * @return if deposit was true, total amount of lp token that will be minted and if\\n   * deposit was false, total amount of lp token that will be burned\\n   */\\n  function calculateTokenAmount(\\n    Swap storage self,\\n    uint256[] calldata amounts,\\n    bool deposit\\n  ) internal view returns (uint256) {\\n    uint256 a = _getAPrecise(self);\\n    uint256[] memory balances = self.balances;\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n\\n    uint256 numBalances = balances.length;\\n    uint256 d0 = getD(_xp(balances, multipliers), a);\\n    for (uint256 i; i < numBalances; ) {\\n      if (deposit) {\\n        balances[i] = balances[i] + amounts[i];\\n      } else {\\n        balances[i] = balances[i] - amounts[i];\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    uint256 d1 = getD(_xp(balances, multipliers), a);\\n    uint256 totalSupply = self.lpToken.totalSupply();\\n\\n    if (deposit) {\\n      return ((d1 - d0) * totalSupply) / d0;\\n    } else {\\n      return ((d0 - d1) * totalSupply) / d0;\\n    }\\n  }\\n\\n  /**\\n   * @notice return accumulated amount of admin fees of the token with given index\\n   * @param self Swap struct to read from\\n   * @param index Index of the pooled token\\n   * @return admin balance in the token's precision\\n   */\\n  function getAdminBalance(Swap storage self, uint256 index) internal view returns (uint256) {\\n    require(index < self.pooledTokens.length, \\\"index out of range\\\");\\n    return self.adminFees[index];\\n  }\\n\\n  /**\\n   * @notice internal helper function to calculate fee per token multiplier used in\\n   * swap fee calculations\\n   * @param swapFee swap fee for the tokens\\n   * @param numTokens number of tokens pooled\\n   */\\n  function _feePerToken(uint256 swapFee, uint256 numTokens) internal pure returns (uint256) {\\n    return (swapFee * numTokens) / ((numTokens - 1) * 4);\\n  }\\n\\n  /*** STATE MODIFYING FUNCTIONS ***/\\n\\n  /**\\n   * @notice swap two tokens in the pool\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @return amount of token user received on swap\\n   */\\n  function swap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy\\n  ) internal returns (uint256) {\\n    {\\n      IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\\n      require(dx <= tokenFrom.balanceOf(msg.sender), \\\"swap more than you own\\\");\\n      // Transfer tokens first to see if a fee was charged on transfer\\n      uint256 beforeBalance = tokenFrom.balanceOf(address(this));\\n      tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\\n\\n      // Use the actual transferred amount for AMM math\\n      require(dx == tokenFrom.balanceOf(address(this)) - beforeBalance, \\\"no fee token support\\\");\\n    }\\n\\n    uint256 dy;\\n    uint256 dyFee;\\n    uint256[] memory balances = self.balances;\\n    (dy, dyFee) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, balances);\\n    require(dy >= minDy, \\\"dy < minDy\\\");\\n\\n    uint256 dyAdminFee = (dyFee * self.adminFee) / FEE_DENOMINATOR / self.tokenPrecisionMultipliers[tokenIndexTo];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n    if (dyAdminFee != 0) {\\n      self.adminFees[tokenIndexTo] = self.adminFees[tokenIndexTo] + dyAdminFee;\\n    }\\n\\n    self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice swap two tokens in the pool\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dy the amount of tokens the user wants to buy\\n   * @param maxDx the max amount the user would like to send.\\n   * @return amount of token user have to transfer on swap\\n   */\\n  function swapOut(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256 maxDx\\n  ) internal returns (uint256) {\\n    require(dy <= self.balances[tokenIndexTo], \\\">pool balance\\\");\\n\\n    uint256 dx;\\n    uint256 dxFee;\\n    uint256[] memory balances = self.balances;\\n    (dx, dxFee) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, balances);\\n    require(dx <= maxDx, \\\"dx > maxDx\\\");\\n\\n    uint256 dxAdminFee = (dxFee * self.adminFee) / FEE_DENOMINATOR / self.tokenPrecisionMultipliers[tokenIndexFrom];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx - dxAdminFee;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy;\\n    if (dxAdminFee != 0) {\\n      self.adminFees[tokenIndexFrom] = self.adminFees[tokenIndexFrom] + dxAdminFee;\\n    }\\n\\n    {\\n      IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\\n      require(dx <= tokenFrom.balanceOf(msg.sender), \\\"more than you own\\\");\\n      // Transfer tokens first to see if a fee was charged on transfer\\n      uint256 beforeBalance = tokenFrom.balanceOf(address(this));\\n      tokenFrom.safeTransferFrom(msg.sender, address(this), dx);\\n\\n      // Use the actual transferred amount for AMM math\\n      require(dx == tokenFrom.balanceOf(address(this)) - beforeBalance, \\\"not support fee token\\\");\\n    }\\n\\n    self.pooledTokens[tokenIndexTo].safeTransfer(msg.sender, dy);\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dx;\\n  }\\n\\n  /**\\n   * @notice swap two tokens in the pool internally\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @return amount of token user received on swap\\n   */\\n  function swapInternal(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy\\n  ) internal returns (uint256) {\\n    IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\\n    require(dx <= tokenFrom.balanceOf(msg.sender), \\\"more than you own\\\");\\n\\n    uint256 dy;\\n    uint256 dyFee;\\n    uint256[] memory balances = self.balances;\\n    (dy, dyFee) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, balances);\\n    require(dy >= minDy, \\\"dy < minDy\\\");\\n\\n    uint256 dyAdminFee = (dyFee * self.adminFee) / FEE_DENOMINATOR / self.tokenPrecisionMultipliers[tokenIndexTo];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n\\n    if (dyAdminFee != 0) {\\n      self.adminFees[tokenIndexTo] = self.adminFees[tokenIndexTo] + dyAdminFee;\\n    }\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Should get exact amount out of AMM for asset put in\\n   */\\n  function swapInternalOut(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256 maxDx\\n  ) internal returns (uint256) {\\n    require(dy <= self.balances[tokenIndexTo], \\\"more than pool balance\\\");\\n\\n    uint256 dx;\\n    uint256 dxFee;\\n    uint256[] memory balances = self.balances;\\n    (dx, dxFee) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, balances);\\n    require(dx <= maxDx, \\\"dx > maxDx\\\");\\n\\n    uint256 dxAdminFee = (dxFee * self.adminFee) / FEE_DENOMINATOR / self.tokenPrecisionMultipliers[tokenIndexFrom];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx - dxAdminFee;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy;\\n\\n    if (dxAdminFee != 0) {\\n      self.adminFees[tokenIndexFrom] = self.adminFees[tokenIndexFrom] + dxAdminFee;\\n    }\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dx;\\n  }\\n\\n  /**\\n   * @notice Add liquidity to the pool\\n   * @param self Swap struct to read from and write to\\n   * @param amounts the amounts of each token to add, in their native precision\\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\\n   * should mint, otherwise revert. Handy for front-running mitigation\\n   * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n   * @return amount of LP token user received\\n   */\\n  function addLiquidity(\\n    Swap storage self,\\n    uint256[] memory amounts,\\n    uint256 minToMint\\n  ) internal returns (uint256) {\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(amounts.length == numTokens, \\\"mismatch pooled tokens\\\");\\n\\n    // current state\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      0,\\n      0,\\n      0,\\n      _getAPrecise(self),\\n      self.lpToken,\\n      0,\\n      self.balances,\\n      self.tokenPrecisionMultipliers\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n    if (v.totalSupply != 0) {\\n      v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\\n    }\\n\\n    uint256[] memory newBalances = new uint256[](numTokens);\\n\\n    for (uint256 i; i < numTokens; ) {\\n      require(v.totalSupply != 0 || amounts[i] != 0, \\\"!supply all tokens\\\");\\n\\n      // Transfer tokens first to see if a fee was charged on transfer\\n      if (amounts[i] != 0) {\\n        IERC20 token = self.pooledTokens[i];\\n        uint256 beforeBalance = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), amounts[i]);\\n\\n        // Update the amounts[] with actual transfer amount\\n        amounts[i] = token.balanceOf(address(this)) - beforeBalance;\\n      }\\n\\n      newBalances[i] = v.balances[i] + amounts[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // invariant after change\\n    v.d1 = getD(_xp(newBalances, v.multipliers), v.preciseA);\\n    require(v.d1 > v.d0, \\\"D should increase\\\");\\n\\n    // updated to reflect fees and calculate the user's LP tokens\\n    v.d2 = v.d1;\\n    uint256[] memory fees = new uint256[](numTokens);\\n\\n    if (v.totalSupply != 0) {\\n      uint256 feePerToken = _feePerToken(self.swapFee, numTokens);\\n      for (uint256 i; i < numTokens; ) {\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n        fees[i] = (feePerToken * (idealBalance.difference(newBalances[i]))) / FEE_DENOMINATOR;\\n        uint256 adminFee = (fees[i] * self.adminFee) / FEE_DENOMINATOR;\\n        self.balances[i] = newBalances[i] - adminFee;\\n        self.adminFees[i] = self.adminFees[i] + adminFee;\\n        newBalances[i] = newBalances[i] - fees[i];\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n      v.d2 = getD(_xp(newBalances, v.multipliers), v.preciseA);\\n    } else {\\n      // the initial depositor doesn't pay fees\\n      self.balances = newBalances;\\n    }\\n\\n    uint256 toMint;\\n    if (v.totalSupply == 0) {\\n      toMint = v.d1;\\n    } else {\\n      toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\n    }\\n\\n    require(toMint >= minToMint, \\\"mint < min\\\");\\n\\n    // mint the user's LP tokens\\n    v.lpToken.mint(msg.sender, toMint);\\n\\n    emit AddLiquidity(self.key, msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\\n\\n    return toMint;\\n  }\\n\\n  /**\\n   * @notice Burn LP tokens to remove liquidity from the pool.\\n   * @dev Liquidity can always be removed, even when the pool is paused.\\n   * @param self Swap struct to read from and write to\\n   * @param amount the amount of LP tokens to burn\\n   * @param minAmounts the minimum amounts of each token in the pool\\n   * acceptable for this burn. Useful as a front-running mitigation\\n   * @return amounts of tokens the user received\\n   */\\n  function removeLiquidity(\\n    Swap storage self,\\n    uint256 amount,\\n    uint256[] calldata minAmounts\\n  ) internal returns (uint256[] memory) {\\n    LPToken lpToken = self.lpToken;\\n    require(amount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(minAmounts.length == numTokens, \\\"mismatch poolTokens\\\");\\n\\n    uint256[] memory balances = self.balances;\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    uint256[] memory amounts = _calculateRemoveLiquidity(balances, amount, totalSupply);\\n\\n    uint256 numAmounts = amounts.length;\\n    for (uint256 i; i < numAmounts; ) {\\n      require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\n      self.balances[i] = balances[i] - amounts[i];\\n      self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    lpToken.burnFrom(msg.sender, amount);\\n\\n    emit RemoveLiquidity(self.key, msg.sender, amounts, totalSupply - amount);\\n\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool all in one token.\\n   * @param self Swap struct to read from and write to\\n   * @param tokenAmount the amount of the lp tokens to burn\\n   * @param tokenIndex the index of the token you want to receive\\n   * @param minAmount the minimum amount to withdraw, otherwise revert\\n   * @return amount chosen token that user received\\n   */\\n  function removeLiquidityOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount\\n  ) internal returns (uint256) {\\n    LPToken lpToken = self.lpToken;\\n\\n    require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(tokenIndex < numTokens, \\\"not found\\\");\\n\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(self, tokenAmount, tokenIndex, totalSupply);\\n\\n    require(dy >= minAmount, \\\"dy < minAmount\\\");\\n\\n    uint256 adminFee = (dyFee * self.adminFee) / FEE_DENOMINATOR;\\n    self.balances[tokenIndex] = self.balances[tokenIndex] - (dy + adminFee);\\n    if (adminFee != 0) {\\n      self.adminFees[tokenIndex] = self.adminFees[tokenIndex] + adminFee;\\n    }\\n    lpToken.burnFrom(msg.sender, tokenAmount);\\n    self.pooledTokens[tokenIndex].safeTransfer(msg.sender, dy);\\n\\n    emit RemoveLiquidityOne(self.key, msg.sender, tokenAmount, totalSupply, tokenIndex, dy);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool, weighted differently than the\\n   * pool's current balances.\\n   *\\n   * @param self Swap struct to read from and write to\\n   * @param amounts how much of each token to withdraw\\n   * @param maxBurnAmount the max LP token provider is willing to pay to\\n   * remove liquidity. Useful as a front-running mitigation.\\n   * @return actual amount of LP tokens burned in the withdrawal\\n   */\\n  function removeLiquidityImbalance(\\n    Swap storage self,\\n    uint256[] memory amounts,\\n    uint256 maxBurnAmount\\n  ) internal returns (uint256) {\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      0,\\n      0,\\n      0,\\n      _getAPrecise(self),\\n      self.lpToken,\\n      0,\\n      self.balances,\\n      self.tokenPrecisionMultipliers\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n\\n    uint256 numTokens = self.pooledTokens.length;\\n    uint256 numAmounts = amounts.length;\\n    require(numAmounts == numTokens, \\\"mismatch pool tokens\\\");\\n\\n    require(maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0, \\\">LP.balanceOf\\\");\\n\\n    uint256 feePerToken = _feePerToken(self.swapFee, numTokens);\\n    uint256[] memory fees = new uint256[](numTokens);\\n    {\\n      uint256[] memory balances1 = new uint256[](numTokens);\\n      v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\\n      for (uint256 i; i < numTokens; ) {\\n        require(v.balances[i] >= amounts[i], \\\"withdraw more than available\\\");\\n\\n        unchecked {\\n          balances1[i] = v.balances[i] - amounts[i];\\n          ++i;\\n        }\\n      }\\n      v.d1 = getD(_xp(balances1, v.multipliers), v.preciseA);\\n\\n      for (uint256 i; i < numTokens; ) {\\n        {\\n          uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n          uint256 difference = idealBalance.difference(balances1[i]);\\n          fees[i] = (feePerToken * difference) / FEE_DENOMINATOR;\\n        }\\n        uint256 adminFee = (fees[i] * self.adminFee) / FEE_DENOMINATOR;\\n        self.balances[i] = balances1[i] - adminFee;\\n        self.adminFees[i] = self.adminFees[i] + adminFee;\\n        balances1[i] = balances1[i] - fees[i];\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n\\n      v.d2 = getD(_xp(balances1, v.multipliers), v.preciseA);\\n    }\\n    uint256 tokenAmount = ((v.d0 - v.d2) * v.totalSupply) / v.d0;\\n    require(tokenAmount != 0, \\\"!zero amount\\\");\\n    tokenAmount = tokenAmount + 1;\\n\\n    require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\n\\n    v.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n    for (uint256 i; i < numTokens; ) {\\n      self.pooledTokens[i].safeTransfer(msg.sender, amounts[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit RemoveLiquidityImbalance(self.key, msg.sender, amounts, fees, v.d1, v.totalSupply - tokenAmount);\\n\\n    return tokenAmount;\\n  }\\n\\n  /**\\n   * @notice withdraw all admin fees to a given address\\n   * @param self Swap struct to withdraw fees from\\n   * @param to Address to send the fees to\\n   */\\n  function withdrawAdminFees(Swap storage self, address to) internal {\\n    uint256 numTokens = self.pooledTokens.length;\\n    for (uint256 i; i < numTokens; ) {\\n      IERC20 token = self.pooledTokens[i];\\n      uint256 balance = self.adminFees[i];\\n      if (balance != 0) {\\n        self.adminFees[i] = 0;\\n        token.safeTransfer(to, balance);\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the admin fee\\n   * @dev adminFee cannot be higher than 100% of the swap fee\\n   * @param self Swap struct to update\\n   * @param newAdminFee new admin fee to be applied on future transactions\\n   */\\n  function setAdminFee(Swap storage self, uint256 newAdminFee) internal {\\n    require(newAdminFee <= MAX_ADMIN_FEE, \\\"too high\\\");\\n    self.adminFee = newAdminFee;\\n\\n    emit NewAdminFee(self.key, newAdminFee);\\n  }\\n\\n  /**\\n   * @notice update the swap fee\\n   * @dev fee cannot be higher than 1% of each swap\\n   * @param self Swap struct to update\\n   * @param newSwapFee new swap fee to be applied on future transactions\\n   */\\n  function setSwapFee(Swap storage self, uint256 newSwapFee) internal {\\n    require(newSwapFee <= MAX_SWAP_FEE, \\\"too high\\\");\\n    self.swapFee = newSwapFee;\\n\\n    emit NewSwapFee(self.key, newSwapFee);\\n  }\\n}\\n\",\"keccak256\":\"0xaf9b7153b23a85f778cbdab256b0079d23df8c5a50ee2758e794183fe40c67ed\",\"license\":\"UNLICENSED\"},\"contracts/core/relayer-fee/RelayerFeeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IConnextHandler} from \\\"../connext/interfaces/IConnextHandler.sol\\\";\\n\\nimport {TypedMemView} from \\\"../../shared/libraries/TypedMemView.sol\\\";\\n\\nimport {Router} from \\\"../Router.sol\\\";\\nimport {XAppConnectionClient} from \\\"../XAppConnectionClient.sol\\\";\\nimport {Version} from \\\"../Version.sol\\\";\\n\\nimport {RelayerFeeMessage} from \\\"./libraries/RelayerFeeMessage.sol\\\";\\n\\n/**\\n * @title RelayerFeeRouter\\n */\\ncontract RelayerFeeRouter is Version, Router {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using RelayerFeeMessage for bytes29;\\n\\n  // ========== Custom Errors ===========\\n\\n  error RelayerFeeRouter__onlyConnext_notConnext();\\n  error RelayerFeeRouter__send_claimEmpty();\\n  error RelayerFeeRouter__send_recipientEmpty();\\n\\n  // ============ Public Storage ============\\n\\n  IConnextHandler public connext;\\n\\n  // ============ Upgrade Gap ============\\n\\n  // gap for upgrade safety\\n  uint256[49] private __GAP;\\n\\n  // ======== Events =========\\n\\n  /**\\n   * @notice Emitted when a fees claim has been initialized in this domain\\n   * @param domain The domain where to claim the fees\\n   * @param recipient The address of the relayer\\n   * @param transferIds A group of transaction ids to claim for fee bumps\\n   * @param remote Remote RelayerFeeRouter address\\n   * @param message The message sent to the destination domain\\n   */\\n  event Send(uint32 domain, address recipient, bytes32[] transferIds, bytes32 remote, bytes message);\\n\\n  /**\\n   * @notice Emitted when the a fees claim message has arrived to this domain\\n   * @param originAndNonce Domain where the transfer originated and the unique identifier\\n   * for the message from origin to destination, combined in a single field ((origin << 32) & nonce)\\n   * @param origin Domain where the transfer originated\\n   * @param recipient The address of the relayer\\n   * @param transferIds A group of transaction ids to claim for fee bumps\\n   */\\n  event Receive(uint64 indexed originAndNonce, uint32 indexed origin, address indexed recipient, bytes32[] transferIds);\\n\\n  /**\\n   * @notice Emitted when a new Connext address is set\\n   * @param connext The new connext address\\n   */\\n  event SetConnext(address indexed connext);\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Restricts the caller to the local bridge router\\n   */\\n  modifier onlyConnext() {\\n    if (msg.sender != address(connext)) revert RelayerFeeRouter__onlyConnext_notConnext();\\n    _;\\n  }\\n\\n  // ======== Initializer ========\\n\\n  function initialize(address _xAppConnectionManager) public initializer {\\n    __XAppConnectionClient_initialize(_xAppConnectionManager);\\n  }\\n\\n  /**\\n   * @notice Sets the Connext.\\n   * @dev Connext and relayer fee router store references to each other\\n   * @param _connext The address of the Connext implementation\\n   */\\n  function setConnext(address _connext) external onlyOwner {\\n    connext = IConnextHandler(_connext);\\n    emit SetConnext(_connext);\\n  }\\n\\n  // ======== External: Send Claim =========\\n\\n  /**\\n   * @notice Sends a request to claim the fees in the originated domain\\n   * @param _domain The domain where to claim the fees\\n   * @param _recipient The address of the relayer\\n   * @param _transferIds A group of transfer ids to claim for fee bumps\\n   */\\n  function send(\\n    uint32 _domain,\\n    address _recipient,\\n    bytes32[] calldata _transferIds\\n  ) external onlyConnext {\\n    if (_transferIds.length == 0) revert RelayerFeeRouter__send_claimEmpty();\\n    if (_recipient == address(0)) revert RelayerFeeRouter__send_recipientEmpty();\\n\\n    // get remote RelayerFeeRouter address; revert if not found\\n    bytes32 remote = _mustHaveRemote(_domain);\\n\\n    bytes memory message = RelayerFeeMessage.formatClaimFees(_recipient, _transferIds);\\n\\n    xAppConnectionManager.home().dispatch(_domain, remote, message);\\n\\n    // emit Send event\\n    emit Send(_domain, _recipient, _transferIds, remote, message);\\n  }\\n\\n  // ======== External: Handle =========\\n\\n  /**\\n   * @notice Handles an incoming message\\n   * @param _origin The origin domain\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @param _sender The sender address\\n   * @param _message The message\\n   */\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external override onlyReplica onlyRemoteRouter(_origin, _sender) {\\n    // parse recipient and transferIds from message\\n    bytes29 _msg = _message.ref(0).mustBeClaimFees();\\n\\n    address recipient = _msg.recipient();\\n    bytes32[] memory transferIds = _msg.transferIds();\\n\\n    connext.claim(recipient, transferIds);\\n\\n    // emit Receive event\\n    emit Receive(_originAndNonce(_origin, _nonce), _origin, recipient, transferIds);\\n  }\\n\\n  /**\\n   * @dev explicit override for compiler inheritance\\n   * @dev explicit override for compiler inheritance\\n   * @return domain of chain on which the contract is deployed\\n   */\\n  function _localDomain() internal view override(XAppConnectionClient) returns (uint32) {\\n    return XAppConnectionClient._localDomain();\\n  }\\n\\n  /**\\n   * @notice Internal utility function that combines\\n   * `_origin` and `_nonce`.\\n   * @dev Both origin and nonce should be less than 2^32 - 1\\n   * @param _origin Domain of chain where the transfer originated\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @return uint64 (`_origin` << 32) | `_nonce`\\n   */\\n  function _originAndNonce(uint32 _origin, uint32 _nonce) internal pure returns (uint64) {\\n    return (uint64(_origin) << 32) | _nonce;\\n  }\\n}\\n\",\"keccak256\":\"0x0b726f3dece368acff8d097ad7e30028b6547cd4c2ab8b4a4e1d3b2aa7c6db41\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/relayer-fee/libraries/RelayerFeeMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"../../../shared/libraries/TypedMemView.sol\\\";\\n\\nlibrary RelayerFeeMessage {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // WARNING: do NOT re-write the numbers / order\\n  // of message types in an upgrade;\\n  // will cause in-flight messages to be mis-interpreted\\n  enum Types {\\n    Invalid, // 0\\n    ClaimFees // 1\\n  }\\n\\n  // ============ Constants ============\\n\\n  // before: 1 byte identifier + 20 bytes recipient + 32 bytes length + 32 bytes 1 transfer id = 85 bytes\\n  uint256 private constant MIN_CLAIM_LEN = 85;\\n  // before: 1 byte identifier + 20 bytes recipient = 21 bytes\\n  uint256 private constant LENGTH_ID_START = 21;\\n  uint8 private constant LENGTH_ID_LEN = 32;\\n  // before: 1 byte identifier\\n  uint256 private constant RECIPIENT_START = 1;\\n  // before: 1 byte identifier + 20 bytes recipient + 32 bytes length = 53 bytes\\n  uint256 private constant TRANSFER_IDS_START = 53;\\n  uint8 private constant TRANSFER_ID_LEN = 32;\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a message is of type `_t`\\n   * @param _view The message\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Formatters ============\\n\\n  /**\\n   * @notice Formats an claim fees message\\n   * @param _recipient The address of the relayer\\n   * @param _transferIds A group of transfers ids to claim for fee bumps\\n   * @return The formatted message\\n   */\\n  function formatClaimFees(address _recipient, bytes32[] calldata _transferIds) internal pure returns (bytes memory) {\\n    return abi.encodePacked(uint8(Types.ClaimFees), _recipient, _transferIds.length, _transferIds);\\n  }\\n\\n  // ============ Getters ============\\n\\n  /**\\n   * @notice Parse the recipient address of the fees\\n   * @param _view The message\\n   * @return The recipient address\\n   */\\n  function recipient(bytes29 _view) internal pure typeAssert(_view, Types.ClaimFees) returns (address) {\\n    // before = 1 byte identifier\\n    return _view.indexAddress(1);\\n  }\\n\\n  /**\\n   * @notice Parse The group of transfers ids to claim for fee bumps\\n   * @param _view The message\\n   * @return The group of transfers ids to claim for fee bumps\\n   */\\n  function transferIds(bytes29 _view) internal pure typeAssert(_view, Types.ClaimFees) returns (bytes32[] memory) {\\n    uint256 length = _view.indexUint(LENGTH_ID_START, LENGTH_ID_LEN);\\n\\n    bytes32[] memory ids = new bytes32[](length);\\n    for (uint256 i; i < length; ) {\\n      ids[i] = _view.index(TRANSFER_IDS_START + i * TRANSFER_ID_LEN, TRANSFER_ID_LEN);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return ids;\\n  }\\n\\n  /**\\n   * @notice Checks that view is a valid message length\\n   * @param _view The bytes string\\n   * @return TRUE if message is valid\\n   */\\n  function isValidClaimFeesLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    // at least 1 transfer id where the excess is multiplier of transfer id length\\n    return _len >= MIN_CLAIM_LEN && (_len - TRANSFER_IDS_START) % TRANSFER_ID_LEN == 0;\\n  }\\n\\n  /**\\n   * @notice Converts to a ClaimFees\\n   * @param _view The message\\n   * @return The newly typed message\\n   */\\n  function tryAsClaimFees(bytes29 _view) internal pure returns (bytes29) {\\n    if (isValidClaimFeesLength(_view)) {\\n      return _view.castTo(uint40(Types.ClaimFees));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  /**\\n   * @notice Asserts that the message is of type ClaimFees\\n   * @param _view The message\\n   * @return The message\\n   */\\n  function mustBeClaimFees(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsClaimFees(_view).assertValid();\\n  }\\n}\\n\",\"keccak256\":\"0xa546fbbdc41f78c5dab8e2a44a24848ffb7ee7c9d1b9c7247b6e7ee327985f35\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnectorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport {IOutbox} from \\\"./IOutbox.sol\\\";\\n\\n/**\\n * @notice Each router extends the `XAppConnectionClient` contract. This contract\\n * allows an admin to call `setXAppConnectionManager` to update the underlying\\n * pointers to the messaging inboxes (Replicas) and outboxes (Homes).\\n *\\n * @dev This interface only contains the functions needed for the `XAppConnectionClient`\\n * will interface with.\\n */\\ninterface IConnectorManager {\\n  /**\\n   * @notice Get the local inbox contract from the xAppConnectionManager\\n   * @return The local inbox contract\\n   * @dev The local inbox contract is a SpokeConnector with AMBs, and a\\n   * Home contract with nomad\\n   */\\n  function home() external view returns (IOutbox);\\n\\n  /**\\n   * @notice Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function isReplica(address _potentialReplica) external view returns (bool);\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function localDomain() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xa2c9a88a7b76a89615fe199d8a78878e5deb8dd13b036a86b575d31966beab1a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IMessageRecipient {\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7a889873cf54269ffefdb4e796b3d15b6ce6f4d87410e7da7fa2dcf76098ccc6\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @notice Interface for all contracts sending messages originating on their\\n * current domain.\\n *\\n * @dev These are the Home.sol interface methods used by the `Router`\\n * and exposed via `home()` on the `XAppConnectionClient`\\n */\\ninterface IOutbox {\\n  /**\\n   * @notice Emitted when a new message is added to an outbound message merkle root\\n   * @param leafIndex Index of message's leaf in merkle tree\\n   * @param destinationAndNonce Destination and destination-specific\\n   * nonce combined in single field ((destination << 32) & nonce)\\n   * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message\\n   * @param committedRoot the latest notarized root submitted in the last signed Update\\n   * @param message Raw bytes of message\\n   */\\n  event Dispatch(\\n    bytes32 indexed messageHash,\\n    uint256 indexed leafIndex,\\n    uint64 indexed destinationAndNonce,\\n    bytes32 committedRoot,\\n    bytes message\\n  );\\n\\n  /**\\n   * @notice Dispatch the message it to the destination domain & recipient\\n   * @dev Format the message, insert its hash into Merkle tree,\\n   * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipientAddress Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes content of message\\n   * @return bytes32 The leaf added to the tree\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xe6a213bd3c9e0c4dcf0e982cdef2a6a613a49b7bca3d6ad662c179e509de6c2b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_delayNotElapsed();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n  error ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__renounceOwnership_delayNotElapsed();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    _proposedOwnershipTimestamp = 0;\\n    _proposed = address(0);\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[49] private __GAP;\\n}\\n\",\"keccak256\":\"0xf4c67a5db702cb9775ad3a0ed49bbe137e5a55b4000c507dd6fef3397f3607e3\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0xfb763d8c311e5972fd6e7d7334ce10cc3f5dbe8a922308b3c160bfb722109f63\",\"license\":\"MIT\"},\"contracts/shared/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// Taken from: https://github.com/nomad-xyz/ExcessivelySafeCall\\n// NOTE: There is a difference between npm latest and github main versions\\n// where the latest github version allows you to specify an ether value.\\n// TODO: Update to npm version when these changes are reflected\\n\\nlibrary ExcessivelySafeCall {\\n  uint256 constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n  /// @notice Use when you _really_ really _really_ don't trust the called\\n  /// contract. This prevents the called contract from causing reversion of\\n  /// the caller in as many ways as we can.\\n  /// @dev The main difference between this and a solidity low-level call is\\n  /// that we limit the number of bytes that the callee can cause to be\\n  /// copied to caller memory. This prevents stupid things like malicious\\n  /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n  /// to memory.\\n  /// @param _target The address to call\\n  /// @param _gas The amount of gas to forward to the remote contract\\n  /// @param _value The value in wei to send to the remote contract\\n  /// @param _maxCopy The maximum number of bytes of returndata to copy\\n  /// to memory.\\n  /// @param _calldata The data to send to the remote contract\\n  /// @return success and returndata, as `.call()`. Returndata is capped to\\n  /// `_maxCopy` bytes.\\n  function excessivelySafeCall(\\n    address _target,\\n    uint256 _gas,\\n    uint256 _value,\\n    uint16 _maxCopy,\\n    bytes memory _calldata\\n  ) internal returns (bool, bytes memory) {\\n    // set up for assembly call\\n    uint256 _toCopy;\\n    bool _success;\\n    bytes memory _returnData = new bytes(_maxCopy);\\n    // dispatch message to recipient\\n    // by assembly calling \\\"handle\\\" function\\n    // we call via assembly to avoid memcopying a very large returndata\\n    // returned by a malicious contract\\n    assembly {\\n      _success := call(\\n        _gas, // gas\\n        _target, // recipient\\n        _value, // ether value\\n        add(_calldata, 0x20), // inloc\\n        mload(_calldata), // inlen\\n        0, // outloc\\n        0 // outlen\\n      )\\n      // limit our copy to 256 bytes\\n      _toCopy := returndatasize()\\n      if gt(_toCopy, _maxCopy) {\\n        _toCopy := _maxCopy\\n      }\\n      // Store the length of the copied bytes\\n      mstore(_returnData, _toCopy)\\n      // copy the bytes from returndata[0:_toCopy]\\n      returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n    }\\n    return (_success, _returnData);\\n  }\\n\\n  /// @notice Use when you _really_ really _really_ don't trust the called\\n  /// contract. This prevents the called contract from causing reversion of\\n  /// the caller in as many ways as we can.\\n  /// @dev The main difference between this and a solidity low-level call is\\n  /// that we limit the number of bytes that the callee can cause to be\\n  /// copied to caller memory. This prevents stupid things like malicious\\n  /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n  /// to memory.\\n  /// @param _target The address to call\\n  /// @param _gas The amount of gas to forward to the remote contract\\n  /// @param _maxCopy The maximum number of bytes of returndata to copy\\n  /// to memory.\\n  /// @param _calldata The data to send to the remote contract\\n  /// @return success and returndata, as `.call()`. Returndata is capped to\\n  /// `_maxCopy` bytes.\\n  function excessivelySafeStaticCall(\\n    address _target,\\n    uint256 _gas,\\n    uint16 _maxCopy,\\n    bytes memory _calldata\\n  ) internal view returns (bool, bytes memory) {\\n    // set up for assembly call\\n    uint256 _toCopy;\\n    bool _success;\\n    bytes memory _returnData = new bytes(_maxCopy);\\n    // dispatch message to recipient\\n    // by assembly calling \\\"handle\\\" function\\n    // we call via assembly to avoid memcopying a very large returndata\\n    // returned by a malicious contract\\n    assembly {\\n      _success := staticcall(\\n        _gas, // gas\\n        _target, // recipient\\n        add(_calldata, 0x20), // inloc\\n        mload(_calldata), // inlen\\n        0, // outloc\\n        0 // outlen\\n      )\\n      // limit our copy to 256 bytes\\n      _toCopy := returndatasize()\\n      if gt(_toCopy, _maxCopy) {\\n        _toCopy := _maxCopy\\n      }\\n      // Store the length of the copied bytes\\n      mstore(_returnData, _toCopy)\\n      // copy the bytes from returndata[0:_toCopy]\\n      returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n    }\\n    return (_success, _returnData);\\n  }\\n\\n  /**\\n   * @notice Swaps function selectors in encoded contract calls\\n   * @dev Allows reuse of encoded calldata for functions with identical\\n   * argument types but different names. It simply swaps out the first 4 bytes\\n   * for the new selector. This function modifies memory in place, and should\\n   * only be used with caution.\\n   * @param _newSelector The new 4-byte selector\\n   * @param _buf The encoded contract args\\n   */\\n  function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n    require(_buf.length >= 4);\\n    uint256 _mask = LOW_28_MASK;\\n    assembly {\\n      // load the first word of\\n      let _word := mload(add(_buf, 0x20))\\n      // mask out the top 4 bytes\\n      // /x\\n      _word := and(_word, _mask)\\n      _word := or(_newSelector, _word)\\n      mstore(add(_buf, 0x20), _word)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6c90b82dee8e5832b6080f801ca25d4486d67a3462624156cc215a4b8c6a3ec7\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\\n    _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n  }\\n\\n  // treat it as a null-terminated string of max 32 bytes\\n  function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\\n    uint8 _slen = 0;\\n    while (_slen < 32 && _buf[_slen] != 0) {\\n      _slen++;\\n    }\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _newStr := mload(0x40)\\n      mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n      mstore(_newStr, _slen)\\n      mstore(add(_newStr, 0x20), _buf)\\n    }\\n  }\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0x818736bf6004223f78f8949c534c74f144b741f5b1ece635670f0fd9b2217344\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint8 constant TWELVE_BYTES = 96;\\n\\n  /**\\n   * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n   * @param _b    The byte\\n   * @return      char - The encoded hex character\\n   */\\n  function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n    // This can probably be done more efficiently, but it's only in error\\n    // paths, so we don't really care :)\\n    uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n    if (_nibble == 0xf0) {\\n      return 0x30;\\n    } // 0\\n    if (_nibble == 0xf1) {\\n      return 0x31;\\n    } // 1\\n    if (_nibble == 0xf2) {\\n      return 0x32;\\n    } // 2\\n    if (_nibble == 0xf3) {\\n      return 0x33;\\n    } // 3\\n    if (_nibble == 0xf4) {\\n      return 0x34;\\n    } // 4\\n    if (_nibble == 0xf5) {\\n      return 0x35;\\n    } // 5\\n    if (_nibble == 0xf6) {\\n      return 0x36;\\n    } // 6\\n    if (_nibble == 0xf7) {\\n      return 0x37;\\n    } // 7\\n    if (_nibble == 0xf8) {\\n      return 0x38;\\n    } // 8\\n    if (_nibble == 0xf9) {\\n      return 0x39;\\n    } // 9\\n    if (_nibble == 0xfa) {\\n      return 0x61;\\n    } // a\\n    if (_nibble == 0xfb) {\\n      return 0x62;\\n    } // b\\n    if (_nibble == 0xfc) {\\n      return 0x63;\\n    } // c\\n    if (_nibble == 0xfd) {\\n      return 0x64;\\n    } // d\\n    if (_nibble == 0xfe) {\\n      return 0x65;\\n    } // e\\n    if (_nibble == 0xff) {\\n      return 0x66;\\n    } // f\\n  }\\n\\n  /**\\n   * @notice      Returns a uint16 containing the hex-encoded byte.\\n   * @param _b    The byte\\n   * @return      encoded - The hex-encoded byte\\n   */\\n  function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n    encoded |= nibbleHex(_b >> 4); // top 4 bits\\n    encoded <<= 8;\\n    encoded |= nibbleHex(_b); // lower 4 bits\\n  }\\n\\n  /**\\n   * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n   *              `second` contains the encoded lower 16 bytes.\\n   *\\n   * @param _b    The 32 bytes as uint256\\n   * @return      first - The top 16 bytes\\n   * @return      second - The bottom 16 bytes\\n   */\\n  function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n    for (uint8 i = 31; i > 15; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      first |= byteHex(_byte);\\n      if (i != 16) {\\n        first <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n\\n    // abusing underflow here =_=\\n    for (uint8 i = 15; i < 255; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      second |= byteHex(_byte);\\n      if (i != 0) {\\n        second <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a valid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is valid\\n   */\\n  function isValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return false;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := not(gt(_end, mload(0x40)))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    require(isValid(memView), \\\"Validity assertion failed\\\");\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n      (, uint256 e) = encodeHex(uint256(_expected));\\n      string memory err = string(\\n        abi.encodePacked(\\\"Type assertion failed. Got 0x\\\", uint80(g), \\\". Expected 0x\\\", uint80(e))\\n      );\\n      revert(err);\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(newView, shr(40, shl(40, memView)))\\n      newView := or(newView, shl(216, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      newView := shl(96, or(newView, _type)) // insert type\\n      newView := shl(96, or(newView, _loc)) // insert loc\\n      newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(216, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the 5-byte type flag is equal\\n   */\\n  function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Construct an error message for an indexing overrun.\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @param _index    The index\\n   * @param _slice    The slice where the overrun occurred\\n   * @return          err - The err\\n   */\\n  function indexErrOverrun(\\n    uint256 _loc,\\n    uint256 _len,\\n    uint256 _index,\\n    uint256 _slice\\n  ) internal pure returns (string memory err) {\\n    (, uint256 a) = encodeHex(_loc);\\n    (, uint256 b) = encodeHex(_len);\\n    (, uint256 c) = encodeHex(_index);\\n    (, uint256 d) = encodeHex(_slice);\\n    err = string(\\n      abi.encodePacked(\\n        \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n        uint48(a),\\n        \\\" with length 0x\\\",\\n        uint48(b),\\n        \\\". Attempted to index at offset 0x\\\",\\n        uint48(c),\\n        \\\" with length 0x\\\",\\n        uint48(d),\\n        \\\".\\\"\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n    }\\n    require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the sha2 digest of the underlying memory.\\n   * @dev             We explicitly deallocate memory afterwards.\\n   * @param memView   The view\\n   * @return          digest - The sha2 hash of the underlying memory\\n   */\\n  function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n   * @param memView   The pre-image\\n   * @return          digest - the Digest\\n   */\\n  function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n      pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n      digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n    }\\n  }\\n\\n  /**\\n   * @notice          Implements bitcoin's hash256 (double sha2)\\n   * @param memView   A view of the preimage\\n   * @return          digest - the Digest\\n   */\\n  function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n      pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n      digest := mload(ptr)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n    require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n    }\\n\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    for (uint256 i = 0; i < memViews.length; i++) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The sha256 digest\\n   */\\n  function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return sha2(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe3b9e398dff8870d5a597de93a9cb0aa139f27ed27c12bbe78c8ff60d85b0aaf\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615450806100206000396000f3fe6080604052600436106101145760003560e01c80636989ca7c116100a05780639b098908116100645780639b09890814610316578063affed0e014610343578063b49c53a714610358578063c26c9c0a14610378578063c2fb26a6146103a857600080fd5b80636989ca7c146102955780638a336231146102b55780638aac16ba146102d557806391f5de79146102e857806397f641ab146102fb57600080fd5b80632424401f116100e75780632424401f146101f45780633339df961461020957806341bdc8b514610227578063541267111461024757806363e3e7d21461026757600080fd5b806305a363de14610119578063121cca3114610146578063159e041f1461017e5780631a8bc0e1146101c7575b600080fd5b34801561012557600080fd5b5061012e600081565b60405161ffff90911681526020015b60405180910390f35b34801561015257600080fd5b50610166610161366004614517565b6103cd565b6040516001600160a01b03909116815260200161013d565b34801561018a57600080fd5b506101b7610199366004614552565b6001600160a01b031660009081526029602052604090205460ff1690565b604051901515815260200161013d565b3480156101d357600080fd5b506101e76101e236600461456f565b6103ea565b60405161013d9190614588565b61020761020236600461456f565b610456565b005b34801561021557600080fd5b50602a546001600160a01b0316610166565b34801561023357600080fd5b50610207610242366004614552565b61053c565b34801561025357600080fd5b506102076102623660046145d5565b61058e565b34801561027357600080fd5b5061028761028236600461461f565b610690565b60405190815260200161013d565b3480156102a157600080fd5b506102076102b0366004614552565b6107e3565b3480156102c157600080fd5b506102076102d0366004614552565b6108a9565b6102876102e3366004614659565b61096c565b6102876102f6366004614659565b610a33565b34801561030757600080fd5b5061028766d529ae9e86000081565b34801561032257600080fd5b5061028761033136600461456f565b6000908152600f602052604090205490565b34801561034f57600080fd5b50600354610287565b34801561036457600080fd5b50610207610373366004614726565b610aec565b34801561038457600080fd5b506101b761039336600461456f565b6000908152600b602052604090205460ff1690565b3480156103b457600080fd5b5060045460405163ffffffff909116815260200161013d565b63ffffffff81166000908152601460205260408120545b92915050565b6000818152600c602090815260409182902080548351818402810184019094528084526060939283018282801561044a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161042c575b50505050509050919050565b6022546001190161047a57604051637ce54e2d60e11b815260040160405180910390fd5b600260225560255460ff16156104a357604051633ee5b89360e01b815260040160405180910390fd5b346000036104c4576040516348e7dc3f60e01b815260040160405180910390fd5b6000818152600f6020526040812080543492906104e2908490614758565b90915550506000818152600f6020908152604091829020548251908152339181019190915282917feab1c093c8ba2224a2907cd9efb6ed51c233306ff5a66853b84e02a0bf95feab910160405180910390a2506001602255565b33610545610bab565b6001600160a01b03161461056c576040516314e74a2560e21b815260040160405180910390fd5b602a80546001600160a01b0319166001600160a01b0392909216919091179055565b81336105a060a0830160808401614552565b6001600160a01b0316146105c75760405163e3613aff60e01b815260040160405180910390fd5b6127108211156105ea57604051633345cd4360e11b815260040160405180910390fd5b60045463ffffffff166106036040850160208601614517565b63ffffffff161461062757604051632a8e462760e01b815260040160405180910390fd5b600061063a61063585614875565b610bd9565b600081815260136020526040908190208590555190915081907fb243c3cea6cd1bbfd64d5d0765f13734ca7b87fdf14e017391fe12a8891434ca906106829086815260200190565b60405180910390a250505050565b602254600090600119016106b757604051637ce54e2d60e11b815260040160405180910390fd5b600260225560255460ff16156106e057604051633ee5b89360e01b815260040160405180910390fd5b6000806106ec84610c09565b600082815260106020526040812080546001600160a01b031916331790559193509150808061074f856107476107228a8061496a565b61018001356107318b8061496a565b610742906060810190604001614517565b610fe9565b86158a61102b565b92509250925060006107648885858989611500565b90506001600160a01b03831661077a898061496a565b61078b906080810190606001614552565b6001600160a01b0316877f0b07a8b0b083f8976b3c832b720632f49cb8ba1e7a99e1b145f51a47d3391cb78b8686336040516107ca9493929190614ae7565b60405180910390a4505060016022555091949350505050565b336107ec610bab565b6001600160a01b031614610813576040516314e74a2560e21b815260040160405180910390fd5b6001600160a01b03811660009081526029602052604090205460ff1661084c57604051637840a40d60e01b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff19169055815192835233908301527f4860b0a180d4b5969c2757493a999f05d0b22318320f154a02170aa239e24b1391015b60405180910390a150565b336108b2610bab565b6001600160a01b0316146108d9576040516314e74a2560e21b815260040160405180910390fd5b6001600160a01b03811660009081526029602052604090205460ff16156109135760405163e2a4506360e01b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff19166001179055815192835233908301527f3860a100215fe93b6b95ed1ae0870e538f85a73b30d073f63fefc60e08b0c124910161089e565b604080516101a08101825260045463ffffffff90811682528a1660208083019190915260008284018190526001600160a01b03808c1660608501528916608084015260a083018190528351601f86018390048302810183019094528484529283929160c0830191908790879081908401838280828437600092018290525093855250505060208201889052336040830152606082018190526080820181905260a0820181905260c0909101529050610a25818988611549565b9a9950505050505050505050565b604080516101a08101825260045463ffffffff90811682528a1660208083019190915260008284018190526001600160a01b03808c16606085015289166080840152600160a08401528351601f86018390048302810183019094528484529283929160c0830191908790879081908401838280828437600092018290525093855250505060208201889052336040830152606082018190526080820181905260a0820181905260c0909101529050610a25818988611549565b33610af5610bab565b6001600160a01b031614610b1c576040516314e74a2560e21b815260040160405180910390fd5b60045463ffffffff90811690831603610b4857604051632892757b60e21b815260040160405180910390fd5b63ffffffff821660008181526014602090815260409182902084905581519283526001600160a01b038416908301523382820152517fb07f562723347d6ea7f9f37b3b31f96b65104c3339d1c89e1b6fa88e2410b85c9181900360600190a15050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b600081604051602001610bec9190614e69565b604051602081830303815290604052805190602001209050919050565b336000908152600e6020526040812054819060ff16158015610c575750610c30838061496a565b610c419060a0810190608001614552565b6001600160a01b0316336001600160a01b031614155b15610c7557604051637c32a2b360e01b815260040160405180910390fd5b60045463ffffffff16610c88848061496a565b610c99906040810190602001614517565b63ffffffff1614610cbd5760405163b6bb322560e01b815260040160405180910390fd5b6000610ccc6020850185614e7c565b6011549092508211159050610cf4576040516313c06ef360e01b815260040160405180910390fd5b6000610d0c610d03868061496a565b61063590614875565b6000818152600b6020908152604080832054905193945060ff1692610d3e918591879101918252602082015260400190565b60405160208183030381529060405280519060200120905083600014610f89578115610d7d5760405163373c9f6f60e01b815260040160405180910390fd5b60296000610d9160808a0160608b01614552565b6001600160a01b0316815260208101919091526040016000205460ff16610dcb57604051631fa09b5360e31b815260040160405180910390fd5b610e1883610ddc60208a018a614e7c565b604051602001610dee93929190614ec5565b60408051601f198184030181529190528051602090910120610e1360808a018a614edf565b611808565b6001600160a01b0316610e316080890160608a01614552565b6001600160a01b031614610e5857604051638579eca560e01b815260040160405180910390fd5b60005b84811015610f8357610e6b61185a565b158015610ec85750601c6000610e8460208b018b614e7c565b84818110610e9457610e94614f25565b9050602002016020810190610ea99190614552565b6001600160a01b0316815260208101919091526040016000205460ff16155b15610ee657604051630e1eb7f760e31b815260040160405180910390fd5b610f1982610ef760408b018b614e7c565b84818110610f0757610f07614f25565b9050602002810190610e139190614edf565b6001600160a01b0316610f2f60208a018a614e7c565b83818110610f3f57610f3f614f25565b9050602002016020810190610f549190614552565b6001600160a01b031614610f7b57604051633a1dd23360e21b815260040160405180910390fd5b600101610e5b565b50610fa7565b81610fa757604051636320d2cf60e11b815260040160405180910390fd5b6000838152601060205260409020546001600160a01b031615610fdd5760405163c2f8eb9360e01b815260040160405180910390fd5b50909590945092505050565b6000828260405160200161100d92919091825263ffffffff16602082015260400190565b60405160208183030381529060405280519060200120905092915050565b6000808061103c6020850185614e7c565b6000898152600c6020526040902061105592909161448b565b50600061108b87611066878061496a565b6101800135611075888061496a565b611086906060810190604001614517565b611881565b9050611097858061496a565b61012001356000036110b1576000935091508190506114f6565b60006110bd868061496a565b6101200135905086156114765760006110d96020880188614e7c565b91506110fd90506110ea888061496a565b6101200135600060010154612710611890565b91508060010361130757611111878061496a565b6111229060c081019060a001614f3b565b15801561118e575081600d600061113c60208b018b614e7c565b600081811061114d5761114d614f25565b90506020020160208101906111629190614552565b6001600160a01b0390811682526020808301939093526040918201600090812091881681529252902054105b80156111a9575060255461010090046001600160a01b031615155b1561127257601d60006111bf60208a018a614e7c565b60008181106111d0576111d0614f25565b90506020020160208101906111e59190614552565b6001600160a01b0316815260208101919091526040016000205460ff1661121f576040516310c4e50960e01b815260040160405180910390fd5b6000806112608c8c8661123560208e018e614e7c565b600081811061124657611246614f25565b905060200201602081019061125b9190614552565b6118a7565b90985096509394506114f69350505050565b81600d600061128460208b018b614e7c565b600081811061129557611295614f25565b90506020020160208101906112aa9190614552565b6001600160a01b03166001600160a01b031681526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060008282546112fc9190614f58565b909155506114749050565b60006113138284614f85565b905060005b611323600184614f58565b8110156113c05781600d600061133c60208d018d614e7c565b8581811061134c5761134c614f25565b90506020020160208101906113619190614552565b6001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060008282546113b39190614f58565b9091555050600101611318565b5060006113cd8385614f99565b6113d79083614758565b905080600d60006113eb60208d018d614e7c565b6113f6600189614f58565b81811061140557611405614f25565b905060200201602081019061141a9190614552565b6001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b03168152602001908152602001600020600082825461146c9190614f58565b909155505050505b505b611480868061496a565b6114919060c081019060a001614f3b565b156114a257935091508190506114f6565b60008981526013602052604081205490806114e98b86868685036114d3576114ca8d8061496a565b60e001356114d5565b865b6114df8e8061496a565b6101400135611a73565b9098509650939450505050505b9450945094915050565b600061152784611510888061496a565b611521906080810190606001614552565b87611b46565b61153d838686856115388b8061496a565b611b8a565b50835b95945050505050565b60255460009060ff161561157057604051633ee5b89360e01b815260040160405180910390fd5b60006001600160a01b03841615801561158857508215155b156115a65760405163ae715ad360e01b815260040160405180910390fd5b6115b38560200151611d81565b60608601519091506001600160a01b03166115e05760405162845fdd60e41b815260040160405180910390fd5b6127108560e0015111156116075760405163388d723160e11b815260040160405180910390fd5b604080518082019091526000808252602082018190529081906000806001600160a01b0389161561169e5761163b89611dba565b6020820151825192955090925061165491839190611881565b83518b5191965063ffffffff91821691161480156116835750886001600160a01b0316856001600160a01b0316145b835163ffffffff1660408c015260208401516101808c015291505b87156116c6576116ae8989611e3e565b6116bf818a878b8e60e00151611f57565b6101208b01525b6001600160a01b0389161561174757611742896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a9190614fad565b60128a61206b565b61174a565b60005b6101408b01526117598a610bd9565b60038054919550600061176b83614fd0565b909155506101608b0152506000838152600f602052604081208054349290611794908490614758565b9250508190555060006117b5848b602001518886898f6101200151886120d6565b9050808a6101600151857ff396bf2f190af41bfaba814075e8d206f741ff48b2effe0af036a5aef81559eb8d896040516117f0929190614fe9565b60405180910390a450919450505050505b9392505050565b6000611852611816856122c6565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061230192505050565b949350505050565b600080611865610bab565b6001600160a01b0316148061187c575060175460ff165b905090565b60006118528484846000612325565b60008161189d8486615013565b6118529190614f85565b60008060006118b586612363565b6025546040516369a933a560e01b81526001600160a01b0380841660048301526024820189905230604483015260006064830152929350610100909104909116906369a933a590608401600060405180830381600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b5050602554604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018a90523060448301526000945061010090920490911691506369328dec906064016020604051808303816000875af1158015611993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b79190615032565b9050858110156119da5760405163407559a360e11b815260040160405180910390fd5b6000888152602760205260409020869055602654612710906119fd908890615013565b611a079190614f85565b6000898152602860209081526040918290209290925580516001600160a01b038581168252928101899052918716918a917f2d3ba0fa5be2ef8cb1ec8920a07a6cbccc2397b18ca3e70f48ea695500b8f218910160405180910390a35084925090505b94509492505050565b600085815260096020526040812054819081906001600160a01b039081169088168103611aa7578688935093505050611b3c565b86600003611abb578693509150611b3c9050565b611b358989838a611b306012876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b299190614fad565b8c8e612399565b6123e5565b9350935050505b9550959350505050565b80600003611b5357505050565b6001600160a01b038316611b7a57604051633a48ca7b60e11b815260040160405180910390fd5b611b8583838361251e565b505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470611bb860c0830183614edf565b604051611bc692919061504b565b60405180910390200315611d7a57600060608315611c9057611c86611bf16080850160608601614552565b6127105a611bff9190614f58565b600061010063fd614f4160e01b8c8c8c611c1f6101208d018d8701614552565b611c2c60208e018e614517565b611c3960c08f018f614edf565b604051602401611c4f979695949392919061505b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612581565b9092509050611d3d565b611ca06080840160608501614552565b6001600160a01b031663fd614f418888886000611cc060208a018a614517565b611ccd60c08b018b614edf565b6040518863ffffffff1660e01b8152600401611cef979695949392919061505b565b6000604051808303816000875af1158015611d0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d3691908101906150ae565b9050600191505b867fb1a4ab59facaedd6d3a71da3902e0a1fa5b99750c0e20cd878334378a41cb3358383604051611d6f92919061511b565b60405180910390a250505b5050505050565b63ffffffff811660009081526014602052604090205480611db557604051630c3bcd4960e41b815260040160405180910390fd5b919050565b6040805180820190915260008082526020820152600080611dda8461260b565b90506000611df082602001518360000151610fe9565b9050611dfa61262a565b158015611e16575060008181526006602052604090205460ff16155b15611e345760405163d7ad34f160e01b815260040160405180910390fd5b9094909350915050565b80600003611e4a575050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb59190615032565b9050611ec38333308561264f565b6040516370a0823160e01b8152306004820152829082906001600160a01b038616906370a0823190602401602060405180830381865afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2f9190615032565b611f399190614f58565b14611b8557604051631a39afd960e11b815260040160405180910390fd5b600082600003611f68575081611540565b846001600160a01b0316846001600160a01b031603611f88575081611540565b600061205f87878787611b308b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff69190614fad565b8b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120589190614fad565b8b8b612399565b50979650505050505050565b60008260ff168460ff1603612081575080611801565b60008360ff168560ff1610156120b75761209b8585615136565b6120a690600a61523d565b6120b09084615013565b9050611852565b6120c18486615136565b6120cc90600a61523d565b6115409084614f85565b83516020850151600091859183916120ed9161268d565b9050841561215b578361215b57604051632770a7eb60e21b8152306004820152602481018690526001600160a01b03831690639dc29fac90604401600060405180830381600087803b15801561214257600080fd5b505af1158015612156573d6000803e3d6000fd5b505050505b6000612167868c6126cc565b9050600080602a0160009054906101000a90046001600160a01b03166001600160a01b0316639fa92f9d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e4919061524c565b6001600160a01b031663fa31de018c8c6121fe87876126e8565b6040518463ffffffff1660e01b815260040161221c93929190615269565b6020604051808303816000875af115801561223b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225f9190615032565b604080518c8152602081018a9052600181830152905191925063ffffffff8d169133916001600160a01b038c16917fa3d219cf126a12be40d7ad1ceef46231c987988dd4e686457b610e1b6b80a4bf9181900360600190a49b9a5050505050505050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610bec565b600080600061231085856127c3565b9150915061231d81612808565b509392505050565b600481015460009063ffffffff90811690841603612344575082611852565b506000938452600a01602052505060409020546001600160a01b031690565b6000818152600960205260408120546001600160a01b0316806103e457604051634cdfde3760e11b815260040160405180910390fd5b6000826000036123ab57506000611852565b60006127106123ba8482614f58565b6123c49086615013565b6123ce9190614f85565b90506123db86868361206b565b9695505050505050565b600085815260236020526040812060080154819081901561243b5761243061240d89896129c1565b6124178a896129c1565b60008b8152602385016020526040902091908888612a41565b869250925050611b3c565b60008881526005820160205260408120546001600160a01b0316906124639089908390612d6e565b61246e888288612e83565b6001600160a01b03811663d460f0a2878a8a8961248d42610e10614758565b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b0393841660248601529290911660448401526064830152608482015260a4016020604051808303816000875af11580156124ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125129190615032565b87935093505050611b3c565b6040516001600160a01b038316602482015260448101829052611b8590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f35565b6000606060008060008661ffff166001600160401b038111156125a6576125a6614770565b6040519080825280601f01601f1916602001820160405280156125d0576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156125f1578692505b828152826000602083013e90999098509650505050505050565b60408051808201909152600080825260208201526103e4826000613007565b600080612635610bab565b6001600160a01b0316148061187c57505060195460ff1690565b6040516001600160a01b03808516602483015283166044820152606481018290526126879085906323b872dd60e01b9060840161254a565b50505050565b600061180160016040516001600160e01b031960e087901b166020820152602481018590526044015b60408051601f19818403018152919052906130ff565b600061180160038085856040516020016126b6939291906152a4565b60608260016126fd62ffffff1983168261311a565b50612707846131f3565b6127425760405162461bcd60e51b815260206004820152600760248201526610b0b1ba34b7b760c91b60448201526064015b60405180910390fd5b604080516002808252606082018352600092602083019080368337019050509050858160008151811061277757612777614f25565b602002602001019062ffffff1916908162ffffff19168152505084816001815181106127a5576127a5614f25565b62ffffff19909216602092830291909101909101526123db816131fe565b60008082516041036127f95760208301516040840151606085015160001a6127ed87828585613253565b94509450505050612801565b506000905060025b9250929050565b600081600481111561281c5761281c61528e565b036128245750565b60018160048111156128385761283861528e565b036128855760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401612739565b60028160048111156128995761289961528e565b036128e65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401612739565b60038160048111156128fa576128fa61528e565b036129525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401612739565b60048160048111156129665761296661528e565b036129be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401612739565b50565b60008281526024602090815260408083206001600160a01b0385168085529083528184205486855260239093529083206008018054849360ff1692919083908110612a0e57612a0e614f25565b6000918252602090912001546001600160a01b0316146118525760405163054e442960e41b815260040160405180910390fd5b600080866008018660ff1681548110612a5c57612a5c614f25565b6000918252602090912001546040516370a0823160e01b81523360048201526001600160a01b03909116915081906370a0823190602401602060405180830381865afa158015612ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad49190615032565b841115612b175760405162461bcd60e51b815260206004820152601160248201527036b7b932903a3430b7103cb7ba9037bbb760791b6044820152606401612739565b600080600089600a01805480602002602001604051908101604052809291908181526020018280548015612b6a57602002820191906000526020600020905b815481526020019060010190808311612b56575b50505050509050612b7e8a8a8a8a8561333d565b909350915085831015612bc05760405162461bcd60e51b815260206004820152600a6024820152696479203c206d696e447960b01b6044820152606401612739565b60008a6009018960ff1681548110612bda57612bda614f25565b90600052602060002001546402540be4008c6006015485612bfb9190615013565b612c059190614f85565b612c0f9190614f85565b905087828b60ff1681518110612c2757612c27614f25565b6020026020010151612c399190614758565b8b600a018b60ff1681548110612c5157612c51614f25565b90600052602060002001819055508084838b60ff1681518110612c7657612c76614f25565b6020026020010151612c889190614f58565b612c929190614f58565b8b600a018a60ff1681548110612caa57612caa614f25565b6000918252602090912001558015612d0f57808b600b018a60ff1681548110612cd557612cd5614f25565b9060005260206000200154612cea9190614758565b8b600b018a60ff1681548110612d0257612d02614f25565b6000918252602090912001555b8a54604080518a81526020810187905260ff8d8116828401528c16606082015290513392917f28d4cf2d5709da3b474b5f05cfd7083faffd601f9500d1f8439b8a13ec7df320919081900360800190a350919998505050505050505050565b801580612de85750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de69190615032565b155b612e535760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401612739565b6040516001600160a01b038316602482015260448101829052611b8590849063095ea7b360e01b9060640161254a565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef89190615032565b612f029190614758565b6040516001600160a01b03851660248201526044810182905290915061268790859063095ea7b360e01b9060640161254a565b6000612f8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135039092919063ffffffff16565b805190915015611b855780806020019051810190612fa891906152e0565b611b855760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401612739565b604080518082019091526000808252602082015260408051808201909152600080825260208201526001600160a01b0384166130445790506103e4565b506001600160a01b03831660009081526007830160209081526040918290208251808401909352805463ffffffff16808452600190910154918301919091521561308f5790506103e4565b6130998484613512565b156130bf57600483015463ffffffff1681526001600160a01b0384166020820152611801565b506001600160a01b03831660009081526008830160209081526040918290208251808401909352805463ffffffff16835260010154908201529392505050565b81516000906020840161154064ffffffffff85168284613548565b6000613126838361358f565b6131ec5760006131456131398560d81c90565b64ffffffffff166135b2565b915050600061315a8464ffffffffff166135b2565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161273991906152fd565b5090919050565b60006103e482613660565b6040516060906000613213846020840161366d565b9050600061322a8260181c6001600160601b031690565b6001600160601b031690506000613240836136fd565b9184525082016020016040525092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561328a5750600090506003611a6a565b8460ff16601b141580156132a257508460ff16601c14155b156132b35750600090506004611a6a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613307573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661333057600060019250925050611a6a565b9660009650945050505050565b60008060008760090180548060200260200160405190810160405280929190818152602001828054801561339057602002820191906000526020600020905b81548152602001906001019080831161337c575b5050505050905060006133a38583613713565b905080518860ff161080156133bb575080518760ff16105b6133fc5760405162461bcd60e51b8152602060048201526012602482015271696e646578206f7574206f662072616e676560701b6044820152606401612739565b6000818960ff168151811061341357613413614f25565b6020026020010151838a60ff168151811061343057613430614f25565b6020026020010151886134439190615013565b61344d9190614758565b9050600061346661345d8c61381d565b8b8b8587613828565b9050600181848b60ff168151811061348057613480614f25565b60200260200101516134929190614f58565b61349c9190614f58565b95506402540be4008b60050154876134b49190615013565b6134be9190614f85565b9450838960ff16815181106134d5576134d5614f25565b602002602001015185876134e99190614f58565b6134f39190614f85565b9550505050509550959350505050565b60606118528484600085613a8f565b6001600160a01b038216600090815260088201602052604081205463ffffffff1615613540575060006103e4565b50503b151590565b6000806135558385614758565b9050604051811115613565575060005b8060000361357a5762ffffff19915050611801565b5050606092831b9190911790911b1760181b90565b60008164ffffffffff166135a38460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156136075760006135d1826008615310565b60ff1685901c90506135e281613bc0565b61ffff16841793508160ff166010146135fd57601084901b93505b50600019016135b8565b50600f5b60ff8160ff16101561365a576000613624826008615310565b60ff1685901c905061363581613bc0565b61ffff16831792508160ff1660001461365057601083901b92505b506000190161360b565b50915091565b60006103e4826003613bf2565b6000604051828111156136805760206060fd5b506000805b84518110156136ed5760008582815181106136a2576136a2614f25565b602002602001015190506136b881848701613c51565b506136cc8160181c6001600160601b031690565b6001600160601b0316830192505080806136e590614fd0565b915050613685565b50606083901b811760181b611852565b600061370882613da8565b6103e4906020615013565b815181516060919081146137605760405162461bcd60e51b81526020600482015260146024820152736d69736d61746368206d756c7469706c6965727360601b6044820152606401612739565b6000816001600160401b0381111561377a5761377a614770565b6040519080825280602002602001820160405280156137a3578160200160208202803683370190505b50905060005b82811015613814578481815181106137c3576137c3614f25565b60200260200101518682815181106137dd576137dd614f25565b60200260200101516137ef9190615013565b82828151811061380157613801614f25565b60209081029190910101526001016137a9565b50949350505050565b60006103e482613ddd565b805160009060ff808616908716036138825760405162461bcd60e51b815260206004820152601760248201527f636f6d7061726520746f6b656e20746f20697473656c660000000000000000006044820152606401612739565b808660ff161080156138965750808560ff16105b6138d45760405162461bcd60e51b815260206004820152600f60248201526e1d1bdad95b881b9bdd08199bdd5b99608a1b6044820152606401612739565b60006138e08489613e7d565b9050806000806138f08b86615013565b90506000805b86811015613977578b60ff16810361391057899150613943565b8a60ff16811461393b5788818151811061392c5761392c614f25565b60200260200101519150613943565b6001016138f6565b61394d8285614758565b93506139598783615013565b6139638787615013565b61396d9190614f85565b94506001016138f6565b506139828683615013565b606461398e8787615013565b6139989190615013565b6139a29190614f85565b93506000826139b2606488615013565b6139bc9190614f85565b6139c69085614758565b9050600086815b610100811015613a465781925088848360026139e99190615013565b6139f39190614758565b6139fd9190614f58565b88613a088480615013565b613a129190614758565b613a1c9190614f85565b9150613a28828461402a565b15613a3e57509850611540975050505050505050565b6001016139cd565b5060405162461bcd60e51b815260206004820152601e60248201527f417070726f78696d6174696f6e20646964206e6f7420636f6e766572676500006044820152606401612739565b606082471015613af05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401612739565b6001600160a01b0385163b613b475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401612739565b600080866001600160a01b03168587604051613b639190615331565b60006040518083038185875af1925050503d8060008114613ba0576040519150601f19603f3d011682016040523d82523d6000602084013e613ba5565b606091505b5091509150613bb5828286614041565b979650505050505050565b6000613bd260048360ff16901c61407a565b60ff1661ffff919091161760081b613be98261407a565b60ff1617919050565b6000816003811115613c0657613c0661528e565b60ff16613c12846141c7565b60ff161480156118015750816003811115613c2f57613c2f61528e565b613c38846141db565b6003811115613c4957613c4961528e565b149392505050565b600062ffffff1980841603613cb95760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401612739565b613cc2836141f6565b613d225760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401612739565b6000613d378460181c6001600160601b031690565b6001600160601b031690506000613d578560781c6001600160601b031690565b6001600160601b031690506000604051905084811115613d775760206060fd5b8285848460045afa506123db613d8d8760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b60006020613dbf8360181c6001600160601b031690565b613dd3906001600160601b0316601f614758565b6103e49190614f85565b600481015460028201546000919042821115611801576003840154600185015480831115613e4157613e0f8285614f58565b613e198342614f58565b613e238386614f58565b613e2d9190615013565b613e379190614f85565b6123db9082614758565b613e4b8285614f58565b613e558342614f58565b613e5f8584614f58565b613e699190615013565b613e739190614f85565b6123db9082614f58565b815160009081805b82811015613ebc57858181518110613e9f57613e9f614f25565b602002602001015182613eb29190614758565b9150600101613e85565b5080600003613ed0576000925050506103e4565b60008181613ede8588615013565b905060005b610100811015613feb578260005b87811015613f3c57878b8281518110613f0c57613f0c614f25565b6020026020010151613f1e9190615013565b613f288684615013565b613f329190614f85565b9150600101613ef1565b5083945080876001613f4e9190614758565b613f589190615013565b606485613f658287614f58565b613f6f9190615013565b613f799190614f85565b613f839190614758565b84613f8e8984615013565b6064613f9a8a88615013565b613fa49190614f85565b613fae9190614758565b613fb89190615013565b613fc29190614f85565b9350613fce848661402a565b15613fe257839750505050505050506103e4565b50600101613ee3565b5060405162461bcd60e51b81526020600482015260136024820152724420646f6573206e6f7420636f6e766572676560681b6044820152606401612739565b600060016140388484614233565b11159392505050565b60608315614050575081611801565b8251156140605782518084602001fd5b8160405162461bcd60e51b815260040161273991906152fd565b600060f08083179060ff821690036140955750603092915050565b8060ff1660f1036140a95750603192915050565b8060ff1660f2036140bd5750603292915050565b8060ff1660f3036140d15750603392915050565b8060ff1660f4036140e55750603492915050565b8060ff1660f5036140f95750603592915050565b8060ff1660f60361410d5750603692915050565b8060ff1660f7036141215750603792915050565b8060ff1660f8036141355750603892915050565b8060ff1660f9036141495750603992915050565b8060ff1660fa0361415d5750606192915050565b8060ff1660fb036141715750606292915050565b8060ff1660fc036141855750606392915050565b8060ff1660fd036141995750606492915050565b8060ff1660fe036141ad5750606592915050565b8060ff1660ff036141c15750606692915050565b50919050565b60006103e462ffffff198316826001614258565b600060d882901c60ff1660038111156103e4576103e461528e565b60006142028260d81c90565b64ffffffffff1664ffffffffff0361421c57506000919050565b600061422783614288565b60405110199392505050565b60008183111561424e576142478284614f58565b90506103e4565b6118018383614f58565b6000614265826020615136565b614270906008615310565b60ff1661427e8585856142c1565b901c949350505050565b600061429d8260181c6001600160601b031690565b6142b08360781c6001600160601b031690565b016001600160601b03169050919050565b60008160ff166000036142d657506000611801565b6142e98460181c6001600160601b031690565b6001600160601b03166142ff60ff841685614758565b11156143635761434a61431b8560781c6001600160601b031690565b6001600160601b03166143378660181c6001600160601b031690565b6001600160601b0316858560ff1661441d565b60405162461bcd60e51b815260040161273991906152fd565b60208260ff1611156143dd5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401612739565b6008820260006143f68660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6060600061442a866135b2565b9150506000614438866135b2565b9150506000614446866135b2565b9150506000614454866135b2565b9150508383838360405160200161446e9493929190615343565b604051602081830303815290604052945050505050949350505050565b8280548282559060005260206000209081019282156144de579160200282015b828111156144de5781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906144ab565b506144ea9291506144ee565b5090565b5b808211156144ea57600081556001016144ef565b803563ffffffff81168114611db557600080fd5b60006020828403121561452957600080fd5b61180182614503565b6001600160a01b03811681146129be57600080fd5b8035611db581614532565b60006020828403121561456457600080fd5b813561180181614532565b60006020828403121561458157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156145c95783516001600160a01b0316835292840192918401916001016145a4565b50909695505050505050565b600080604083850312156145e857600080fd5b82356001600160401b038111156145fe57600080fd5b83016101a0818603121561461157600080fd5b946020939093013593505050565b60006020828403121561463157600080fd5b81356001600160401b0381111561464757600080fd5b820160a0818503121561180157600080fd5b60008060008060008060008060e0898b03121561467557600080fd5b61467e89614503565b9750602089013561468e81614532565b9650604089013561469e81614532565b955060608901356146ae81614532565b94506080890135935060a0890135925060c08901356001600160401b03808211156146d857600080fd5b818b0191508b601f8301126146ec57600080fd5b8135818111156146fb57600080fd5b8c602082850101111561470d57600080fd5b6020830194508093505050509295985092959890939650565b6000806040838503121561473957600080fd5b61461183614503565b634e487b7160e01b600052601160045260246000fd5b6000821982111561476b5761476b614742565b500190565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156147a9576147a9614770565b60405290565b604051601f8201601f191681016001600160401b03811182821017156147d7576147d7614770565b604052919050565b80151581146129be57600080fd5b8035611db5816147df565b60006001600160401b0382111561481157614811614770565b50601f01601f191660200190565b600082601f83011261483057600080fd5b813561484361483e826147f8565b6147af565b81815284602083860101111561485857600080fd5b816020850160208301376000918101602001919091529392505050565b60006101a0823603121561488857600080fd5b614890614786565b61489983614503565b81526148a760208401614503565b60208201526148b860408401614503565b60408201526148c960608401614547565b60608201526148da60808401614547565b60808201526148eb60a084016147ed565b60a082015260c08301356001600160401b0381111561490957600080fd5b6149153682860161481f565b60c08301525060e083013560e0820152610100614933818501614547565b9082015261012083810135908201526101408084013590820152610160808401359082015261018092830135928101929092525090565b6000823561019e1983360301811261498157600080fd5b9190910192915050565b6000808335601e198436030181126149a257600080fd5b83016020810192503590506001600160401b038111156149c157600080fd5b80360382131561280157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e19843603018112614a1057600080fd5b83016020810192503590506001600160401b03811115614a2f57600080fd5b8060051b360382131561280157600080fd5b8183526000602080850194508260005b85811015614a7f578135614a6481614532565b6001600160a01b031687529582019590820190600101614a51565b509495945050505050565b81835260006020808501808196508560051b810191508460005b87811015614ada578284038952614abb828861498b565b614ac68682846149d0565b9a87019a9550505090840190600101614aa4565b5091979650505050505050565b608081526000610120863561019e19883603018112614b0557600080fd5b60a060808501528701614b27828501614b1d83614503565b63ffffffff169052565b614b3360208201614503565b610140614b478187018363ffffffff169052565b614b5360408401614503565b9150610160614b698188018463ffffffff169052565b614b7560608501614547565b9250610180614b8e818901856001600160a01b03169052565b614b9a60808601614547565b93506101a0614bb3818a01866001600160a01b03169052565b614bbf60a087016147ed565b8015156101c08b01529450614bd760c087018761498b565b9550816101e08b0152614bef6102c08b0187836149d0565b9550505060e0850135610200890152610100614c0c818701614547565b6001600160a01b03166102208a0152858701356102408a0152838601356102608a0152828601356102808a0152818601356102a08a0152614c5060208e018e6149f9565b97509550607f199350838986030160a08a0152614c6e858888614a41565b9650614c7d60408e018e6149f9565b96509450838988030160c08a0152614c96878787614a8a565b9650614ca460608e01614547565b6001600160a01b03811660e08b01529550614cc260808e018e61498b565b965094508389880301818a015250505050614cde8383836149d0565b9350505050614cf860208301866001600160a01b03169052565b83604083015261154060608301846001600160a01b03169052565b60005b83811015614d2e578181015183820152602001614d16565b838111156126875750506000910152565b60008151808452614d57816020860160208601614d13565b601f01601f19169290920160200192915050565b805163ffffffff16825260006101a06020830151614d91602086018263ffffffff169052565b506040830151614da9604086018263ffffffff169052565b506060830151614dc460608601826001600160a01b03169052565b506080830151614ddf60808601826001600160a01b03169052565b5060a0830151614df360a086018215159052565b5060c08301518160c0860152614e0b82860182614d3f565b91505060e083015160e085015261010080840151614e33828701826001600160a01b03169052565b50506101208381015190850152610140808401519085015261016080840151908501526101809283015192909301919091525090565b6020815260006118016020830184614d6b565b6000808335601e19843603018112614e9357600080fd5b8301803591506001600160401b03821115614ead57600080fd5b6020019150600581901b360382131561280157600080fd5b838152604060208201526000611540604083018486614a41565b6000808335601e19843603018112614ef657600080fd5b8301803591506001600160401b03821115614f1057600080fd5b60200191503681900382131561280157600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215614f4d57600080fd5b8135611801816147df565b600082821015614f6a57614f6a614742565b500390565b634e487b7160e01b600052601260045260246000fd5b600082614f9457614f94614f6f565b500490565b600082614fa857614fa8614f6f565b500690565b600060208284031215614fbf57600080fd5b815160ff8116811461180157600080fd5b600060018201614fe257614fe2614742565b5060010190565b604081526000614ffc6040830185614d6b565b905060018060a01b03831660208301529392505050565b600081600019048311821515161561502d5761502d614742565b500290565b60006020828403121561504457600080fd5b5051919050565b8183823760009101908152919050565b878152602081018790526001600160a01b0386811660408301528516606082015263ffffffff8416608082015260c060a082018190526000906150a190830184866149d0565b9998505050505050505050565b6000602082840312156150c057600080fd5b81516001600160401b038111156150d657600080fd5b8201601f810184136150e757600080fd5b80516150f561483e826147f8565b81815285602083850101111561510a57600080fd5b611540826020830160208601614d13565b82151581526040602082015260006118526040830184614d3f565b600060ff821660ff84168082101561515057615150614742565b90039392505050565b600181815b8085111561519457816000190482111561517a5761517a614742565b8085161561518757918102915b93841c939080029061515e565b509250929050565b6000826151ab575060016103e4565b816151b8575060006103e4565b81600181146151ce57600281146151d8576151f4565b60019150506103e4565b60ff8411156151e9576151e9614742565b50506001821b6103e4565b5060208310610133831016604e8410600b8410161715615217575081810a6103e4565b6152218383615159565b806000190482111561523557615235614742565b029392505050565b600061180160ff84168361519c565b60006020828403121561525e57600080fd5b815161180181614532565b63ffffffff841681528260208201526060604082015260006115406060830184614d3f565b634e487b7160e01b600052602160045260246000fd5b6000600485106152c457634e487b7160e01b600052602160045260246000fd5b5060f89390931b83526001830191909152602182015260410190565b6000602082840312156152f257600080fd5b8151611801816147df565b6020815260006118016020830184614d3f565b600060ff821660ff84168160ff048111821515161561523557615235614742565b60008251614981818460208701614d13565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d82016123db56fea264697066735822122008d7e13fbf529ec0c241f45081744607e8bd3c17c0646173174c1b1ba178252b64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80636989ca7c116100a05780639b098908116100645780639b09890814610316578063affed0e014610343578063b49c53a714610358578063c26c9c0a14610378578063c2fb26a6146103a857600080fd5b80636989ca7c146102955780638a336231146102b55780638aac16ba146102d557806391f5de79146102e857806397f641ab146102fb57600080fd5b80632424401f116100e75780632424401f146101f45780633339df961461020957806341bdc8b514610227578063541267111461024757806363e3e7d21461026757600080fd5b806305a363de14610119578063121cca3114610146578063159e041f1461017e5780631a8bc0e1146101c7575b600080fd5b34801561012557600080fd5b5061012e600081565b60405161ffff90911681526020015b60405180910390f35b34801561015257600080fd5b50610166610161366004614517565b6103cd565b6040516001600160a01b03909116815260200161013d565b34801561018a57600080fd5b506101b7610199366004614552565b6001600160a01b031660009081526029602052604090205460ff1690565b604051901515815260200161013d565b3480156101d357600080fd5b506101e76101e236600461456f565b6103ea565b60405161013d9190614588565b61020761020236600461456f565b610456565b005b34801561021557600080fd5b50602a546001600160a01b0316610166565b34801561023357600080fd5b50610207610242366004614552565b61053c565b34801561025357600080fd5b506102076102623660046145d5565b61058e565b34801561027357600080fd5b5061028761028236600461461f565b610690565b60405190815260200161013d565b3480156102a157600080fd5b506102076102b0366004614552565b6107e3565b3480156102c157600080fd5b506102076102d0366004614552565b6108a9565b6102876102e3366004614659565b61096c565b6102876102f6366004614659565b610a33565b34801561030757600080fd5b5061028766d529ae9e86000081565b34801561032257600080fd5b5061028761033136600461456f565b6000908152600f602052604090205490565b34801561034f57600080fd5b50600354610287565b34801561036457600080fd5b50610207610373366004614726565b610aec565b34801561038457600080fd5b506101b761039336600461456f565b6000908152600b602052604090205460ff1690565b3480156103b457600080fd5b5060045460405163ffffffff909116815260200161013d565b63ffffffff81166000908152601460205260408120545b92915050565b6000818152600c602090815260409182902080548351818402810184019094528084526060939283018282801561044a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161042c575b50505050509050919050565b6022546001190161047a57604051637ce54e2d60e11b815260040160405180910390fd5b600260225560255460ff16156104a357604051633ee5b89360e01b815260040160405180910390fd5b346000036104c4576040516348e7dc3f60e01b815260040160405180910390fd5b6000818152600f6020526040812080543492906104e2908490614758565b90915550506000818152600f6020908152604091829020548251908152339181019190915282917feab1c093c8ba2224a2907cd9efb6ed51c233306ff5a66853b84e02a0bf95feab910160405180910390a2506001602255565b33610545610bab565b6001600160a01b03161461056c576040516314e74a2560e21b815260040160405180910390fd5b602a80546001600160a01b0319166001600160a01b0392909216919091179055565b81336105a060a0830160808401614552565b6001600160a01b0316146105c75760405163e3613aff60e01b815260040160405180910390fd5b6127108211156105ea57604051633345cd4360e11b815260040160405180910390fd5b60045463ffffffff166106036040850160208601614517565b63ffffffff161461062757604051632a8e462760e01b815260040160405180910390fd5b600061063a61063585614875565b610bd9565b600081815260136020526040908190208590555190915081907fb243c3cea6cd1bbfd64d5d0765f13734ca7b87fdf14e017391fe12a8891434ca906106829086815260200190565b60405180910390a250505050565b602254600090600119016106b757604051637ce54e2d60e11b815260040160405180910390fd5b600260225560255460ff16156106e057604051633ee5b89360e01b815260040160405180910390fd5b6000806106ec84610c09565b600082815260106020526040812080546001600160a01b031916331790559193509150808061074f856107476107228a8061496a565b61018001356107318b8061496a565b610742906060810190604001614517565b610fe9565b86158a61102b565b92509250925060006107648885858989611500565b90506001600160a01b03831661077a898061496a565b61078b906080810190606001614552565b6001600160a01b0316877f0b07a8b0b083f8976b3c832b720632f49cb8ba1e7a99e1b145f51a47d3391cb78b8686336040516107ca9493929190614ae7565b60405180910390a4505060016022555091949350505050565b336107ec610bab565b6001600160a01b031614610813576040516314e74a2560e21b815260040160405180910390fd5b6001600160a01b03811660009081526029602052604090205460ff1661084c57604051637840a40d60e01b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff19169055815192835233908301527f4860b0a180d4b5969c2757493a999f05d0b22318320f154a02170aa239e24b1391015b60405180910390a150565b336108b2610bab565b6001600160a01b0316146108d9576040516314e74a2560e21b815260040160405180910390fd5b6001600160a01b03811660009081526029602052604090205460ff16156109135760405163e2a4506360e01b815260040160405180910390fd5b6001600160a01b038116600081815260296020908152604091829020805460ff19166001179055815192835233908301527f3860a100215fe93b6b95ed1ae0870e538f85a73b30d073f63fefc60e08b0c124910161089e565b604080516101a08101825260045463ffffffff90811682528a1660208083019190915260008284018190526001600160a01b03808c1660608501528916608084015260a083018190528351601f86018390048302810183019094528484529283929160c0830191908790879081908401838280828437600092018290525093855250505060208201889052336040830152606082018190526080820181905260a0820181905260c0909101529050610a25818988611549565b9a9950505050505050505050565b604080516101a08101825260045463ffffffff90811682528a1660208083019190915260008284018190526001600160a01b03808c16606085015289166080840152600160a08401528351601f86018390048302810183019094528484529283929160c0830191908790879081908401838280828437600092018290525093855250505060208201889052336040830152606082018190526080820181905260a0820181905260c0909101529050610a25818988611549565b33610af5610bab565b6001600160a01b031614610b1c576040516314e74a2560e21b815260040160405180910390fd5b60045463ffffffff90811690831603610b4857604051632892757b60e21b815260040160405180910390fd5b63ffffffff821660008181526014602090815260409182902084905581519283526001600160a01b038416908301523382820152517fb07f562723347d6ea7f9f37b3b31f96b65104c3339d1c89e1b6fa88e2410b85c9181900360600190a15050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b600081604051602001610bec9190614e69565b604051602081830303815290604052805190602001209050919050565b336000908152600e6020526040812054819060ff16158015610c575750610c30838061496a565b610c419060a0810190608001614552565b6001600160a01b0316336001600160a01b031614155b15610c7557604051637c32a2b360e01b815260040160405180910390fd5b60045463ffffffff16610c88848061496a565b610c99906040810190602001614517565b63ffffffff1614610cbd5760405163b6bb322560e01b815260040160405180910390fd5b6000610ccc6020850185614e7c565b6011549092508211159050610cf4576040516313c06ef360e01b815260040160405180910390fd5b6000610d0c610d03868061496a565b61063590614875565b6000818152600b6020908152604080832054905193945060ff1692610d3e918591879101918252602082015260400190565b60405160208183030381529060405280519060200120905083600014610f89578115610d7d5760405163373c9f6f60e01b815260040160405180910390fd5b60296000610d9160808a0160608b01614552565b6001600160a01b0316815260208101919091526040016000205460ff16610dcb57604051631fa09b5360e31b815260040160405180910390fd5b610e1883610ddc60208a018a614e7c565b604051602001610dee93929190614ec5565b60408051601f198184030181529190528051602090910120610e1360808a018a614edf565b611808565b6001600160a01b0316610e316080890160608a01614552565b6001600160a01b031614610e5857604051638579eca560e01b815260040160405180910390fd5b60005b84811015610f8357610e6b61185a565b158015610ec85750601c6000610e8460208b018b614e7c565b84818110610e9457610e94614f25565b9050602002016020810190610ea99190614552565b6001600160a01b0316815260208101919091526040016000205460ff16155b15610ee657604051630e1eb7f760e31b815260040160405180910390fd5b610f1982610ef760408b018b614e7c565b84818110610f0757610f07614f25565b9050602002810190610e139190614edf565b6001600160a01b0316610f2f60208a018a614e7c565b83818110610f3f57610f3f614f25565b9050602002016020810190610f549190614552565b6001600160a01b031614610f7b57604051633a1dd23360e21b815260040160405180910390fd5b600101610e5b565b50610fa7565b81610fa757604051636320d2cf60e11b815260040160405180910390fd5b6000838152601060205260409020546001600160a01b031615610fdd5760405163c2f8eb9360e01b815260040160405180910390fd5b50909590945092505050565b6000828260405160200161100d92919091825263ffffffff16602082015260400190565b60405160208183030381529060405280519060200120905092915050565b6000808061103c6020850185614e7c565b6000898152600c6020526040902061105592909161448b565b50600061108b87611066878061496a565b6101800135611075888061496a565b611086906060810190604001614517565b611881565b9050611097858061496a565b61012001356000036110b1576000935091508190506114f6565b60006110bd868061496a565b6101200135905086156114765760006110d96020880188614e7c565b91506110fd90506110ea888061496a565b6101200135600060010154612710611890565b91508060010361130757611111878061496a565b6111229060c081019060a001614f3b565b15801561118e575081600d600061113c60208b018b614e7c565b600081811061114d5761114d614f25565b90506020020160208101906111629190614552565b6001600160a01b0390811682526020808301939093526040918201600090812091881681529252902054105b80156111a9575060255461010090046001600160a01b031615155b1561127257601d60006111bf60208a018a614e7c565b60008181106111d0576111d0614f25565b90506020020160208101906111e59190614552565b6001600160a01b0316815260208101919091526040016000205460ff1661121f576040516310c4e50960e01b815260040160405180910390fd5b6000806112608c8c8661123560208e018e614e7c565b600081811061124657611246614f25565b905060200201602081019061125b9190614552565b6118a7565b90985096509394506114f69350505050565b81600d600061128460208b018b614e7c565b600081811061129557611295614f25565b90506020020160208101906112aa9190614552565b6001600160a01b03166001600160a01b031681526020019081526020016000206000856001600160a01b03166001600160a01b0316815260200190815260200160002060008282546112fc9190614f58565b909155506114749050565b60006113138284614f85565b905060005b611323600184614f58565b8110156113c05781600d600061133c60208d018d614e7c565b8581811061134c5761134c614f25565b90506020020160208101906113619190614552565b6001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b0316815260200190815260200160002060008282546113b39190614f58565b9091555050600101611318565b5060006113cd8385614f99565b6113d79083614758565b905080600d60006113eb60208d018d614e7c565b6113f6600189614f58565b81811061140557611405614f25565b905060200201602081019061141a9190614552565b6001600160a01b03166001600160a01b031681526020019081526020016000206000876001600160a01b03166001600160a01b03168152602001908152602001600020600082825461146c9190614f58565b909155505050505b505b611480868061496a565b6114919060c081019060a001614f3b565b156114a257935091508190506114f6565b60008981526013602052604081205490806114e98b86868685036114d3576114ca8d8061496a565b60e001356114d5565b865b6114df8e8061496a565b6101400135611a73565b9098509650939450505050505b9450945094915050565b600061152784611510888061496a565b611521906080810190606001614552565b87611b46565b61153d838686856115388b8061496a565b611b8a565b50835b95945050505050565b60255460009060ff161561157057604051633ee5b89360e01b815260040160405180910390fd5b60006001600160a01b03841615801561158857508215155b156115a65760405163ae715ad360e01b815260040160405180910390fd5b6115b38560200151611d81565b60608601519091506001600160a01b03166115e05760405162845fdd60e41b815260040160405180910390fd5b6127108560e0015111156116075760405163388d723160e11b815260040160405180910390fd5b604080518082019091526000808252602082018190529081906000806001600160a01b0389161561169e5761163b89611dba565b6020820151825192955090925061165491839190611881565b83518b5191965063ffffffff91821691161480156116835750886001600160a01b0316856001600160a01b0316145b835163ffffffff1660408c015260208401516101808c015291505b87156116c6576116ae8989611e3e565b6116bf818a878b8e60e00151611f57565b6101208b01525b6001600160a01b0389161561174757611742896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a9190614fad565b60128a61206b565b61174a565b60005b6101408b01526117598a610bd9565b60038054919550600061176b83614fd0565b909155506101608b0152506000838152600f602052604081208054349290611794908490614758565b9250508190555060006117b5848b602001518886898f6101200151886120d6565b9050808a6101600151857ff396bf2f190af41bfaba814075e8d206f741ff48b2effe0af036a5aef81559eb8d896040516117f0929190614fe9565b60405180910390a450919450505050505b9392505050565b6000611852611816856122c6565b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061230192505050565b949350505050565b600080611865610bab565b6001600160a01b0316148061187c575060175460ff165b905090565b60006118528484846000612325565b60008161189d8486615013565b6118529190614f85565b60008060006118b586612363565b6025546040516369a933a560e01b81526001600160a01b0380841660048301526024820189905230604483015260006064830152929350610100909104909116906369a933a590608401600060405180830381600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b5050602554604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018a90523060448301526000945061010090920490911691506369328dec906064016020604051808303816000875af1158015611993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b79190615032565b9050858110156119da5760405163407559a360e11b815260040160405180910390fd5b6000888152602760205260409020869055602654612710906119fd908890615013565b611a079190614f85565b6000898152602860209081526040918290209290925580516001600160a01b038581168252928101899052918716918a917f2d3ba0fa5be2ef8cb1ec8920a07a6cbccc2397b18ca3e70f48ea695500b8f218910160405180910390a35084925090505b94509492505050565b600085815260096020526040812054819081906001600160a01b039081169088168103611aa7578688935093505050611b3c565b86600003611abb578693509150611b3c9050565b611b358989838a611b306012876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b299190614fad565b8c8e612399565b6123e5565b9350935050505b9550959350505050565b80600003611b5357505050565b6001600160a01b038316611b7a57604051633a48ca7b60e11b815260040160405180910390fd5b611b8583838361251e565b505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470611bb860c0830183614edf565b604051611bc692919061504b565b60405180910390200315611d7a57600060608315611c9057611c86611bf16080850160608601614552565b6127105a611bff9190614f58565b600061010063fd614f4160e01b8c8c8c611c1f6101208d018d8701614552565b611c2c60208e018e614517565b611c3960c08f018f614edf565b604051602401611c4f979695949392919061505b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612581565b9092509050611d3d565b611ca06080840160608501614552565b6001600160a01b031663fd614f418888886000611cc060208a018a614517565b611ccd60c08b018b614edf565b6040518863ffffffff1660e01b8152600401611cef979695949392919061505b565b6000604051808303816000875af1158015611d0e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d3691908101906150ae565b9050600191505b867fb1a4ab59facaedd6d3a71da3902e0a1fa5b99750c0e20cd878334378a41cb3358383604051611d6f92919061511b565b60405180910390a250505b5050505050565b63ffffffff811660009081526014602052604090205480611db557604051630c3bcd4960e41b815260040160405180910390fd5b919050565b6040805180820190915260008082526020820152600080611dda8461260b565b90506000611df082602001518360000151610fe9565b9050611dfa61262a565b158015611e16575060008181526006602052604090205460ff16155b15611e345760405163d7ad34f160e01b815260040160405180910390fd5b9094909350915050565b80600003611e4a575050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb59190615032565b9050611ec38333308561264f565b6040516370a0823160e01b8152306004820152829082906001600160a01b038616906370a0823190602401602060405180830381865afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2f9190615032565b611f399190614f58565b14611b8557604051631a39afd960e11b815260040160405180910390fd5b600082600003611f68575081611540565b846001600160a01b0316846001600160a01b031603611f88575081611540565b600061205f87878787611b308b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff69190614fad565b8b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120589190614fad565b8b8b612399565b50979650505050505050565b60008260ff168460ff1603612081575080611801565b60008360ff168560ff1610156120b75761209b8585615136565b6120a690600a61523d565b6120b09084615013565b9050611852565b6120c18486615136565b6120cc90600a61523d565b6115409084614f85565b83516020850151600091859183916120ed9161268d565b9050841561215b578361215b57604051632770a7eb60e21b8152306004820152602481018690526001600160a01b03831690639dc29fac90604401600060405180830381600087803b15801561214257600080fd5b505af1158015612156573d6000803e3d6000fd5b505050505b6000612167868c6126cc565b9050600080602a0160009054906101000a90046001600160a01b03166001600160a01b0316639fa92f9d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e4919061524c565b6001600160a01b031663fa31de018c8c6121fe87876126e8565b6040518463ffffffff1660e01b815260040161221c93929190615269565b6020604051808303816000875af115801561223b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225f9190615032565b604080518c8152602081018a9052600181830152905191925063ffffffff8d169133916001600160a01b038c16917fa3d219cf126a12be40d7ad1ceef46231c987988dd4e686457b610e1b6b80a4bf9181900360600190a49b9a5050505050505050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01610bec565b600080600061231085856127c3565b9150915061231d81612808565b509392505050565b600481015460009063ffffffff90811690841603612344575082611852565b506000938452600a01602052505060409020546001600160a01b031690565b6000818152600960205260408120546001600160a01b0316806103e457604051634cdfde3760e11b815260040160405180910390fd5b6000826000036123ab57506000611852565b60006127106123ba8482614f58565b6123c49086615013565b6123ce9190614f85565b90506123db86868361206b565b9695505050505050565b600085815260236020526040812060080154819081901561243b5761243061240d89896129c1565b6124178a896129c1565b60008b8152602385016020526040902091908888612a41565b869250925050611b3c565b60008881526005820160205260408120546001600160a01b0316906124639089908390612d6e565b61246e888288612e83565b6001600160a01b03811663d460f0a2878a8a8961248d42610e10614758565b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b0393841660248601529290911660448401526064830152608482015260a4016020604051808303816000875af11580156124ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125129190615032565b87935093505050611b3c565b6040516001600160a01b038316602482015260448101829052611b8590849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f35565b6000606060008060008661ffff166001600160401b038111156125a6576125a6614770565b6040519080825280601f01601f1916602001820160405280156125d0576020820181803683370190505b5090506000808751602089018b8e8ef191503d9250868311156125f1578692505b828152826000602083013e90999098509650505050505050565b60408051808201909152600080825260208201526103e4826000613007565b600080612635610bab565b6001600160a01b0316148061187c57505060195460ff1690565b6040516001600160a01b03808516602483015283166044820152606481018290526126879085906323b872dd60e01b9060840161254a565b50505050565b600061180160016040516001600160e01b031960e087901b166020820152602481018590526044015b60408051601f19818403018152919052906130ff565b600061180160038085856040516020016126b6939291906152a4565b60608260016126fd62ffffff1983168261311a565b50612707846131f3565b6127425760405162461bcd60e51b815260206004820152600760248201526610b0b1ba34b7b760c91b60448201526064015b60405180910390fd5b604080516002808252606082018352600092602083019080368337019050509050858160008151811061277757612777614f25565b602002602001019062ffffff1916908162ffffff19168152505084816001815181106127a5576127a5614f25565b62ffffff19909216602092830291909101909101526123db816131fe565b60008082516041036127f95760208301516040840151606085015160001a6127ed87828585613253565b94509450505050612801565b506000905060025b9250929050565b600081600481111561281c5761281c61528e565b036128245750565b60018160048111156128385761283861528e565b036128855760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401612739565b60028160048111156128995761289961528e565b036128e65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401612739565b60038160048111156128fa576128fa61528e565b036129525760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401612739565b60048160048111156129665761296661528e565b036129be5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401612739565b50565b60008281526024602090815260408083206001600160a01b0385168085529083528184205486855260239093529083206008018054849360ff1692919083908110612a0e57612a0e614f25565b6000918252602090912001546001600160a01b0316146118525760405163054e442960e41b815260040160405180910390fd5b600080866008018660ff1681548110612a5c57612a5c614f25565b6000918252602090912001546040516370a0823160e01b81523360048201526001600160a01b03909116915081906370a0823190602401602060405180830381865afa158015612ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad49190615032565b841115612b175760405162461bcd60e51b815260206004820152601160248201527036b7b932903a3430b7103cb7ba9037bbb760791b6044820152606401612739565b600080600089600a01805480602002602001604051908101604052809291908181526020018280548015612b6a57602002820191906000526020600020905b815481526020019060010190808311612b56575b50505050509050612b7e8a8a8a8a8561333d565b909350915085831015612bc05760405162461bcd60e51b815260206004820152600a6024820152696479203c206d696e447960b01b6044820152606401612739565b60008a6009018960ff1681548110612bda57612bda614f25565b90600052602060002001546402540be4008c6006015485612bfb9190615013565b612c059190614f85565b612c0f9190614f85565b905087828b60ff1681518110612c2757612c27614f25565b6020026020010151612c399190614758565b8b600a018b60ff1681548110612c5157612c51614f25565b90600052602060002001819055508084838b60ff1681518110612c7657612c76614f25565b6020026020010151612c889190614f58565b612c929190614f58565b8b600a018a60ff1681548110612caa57612caa614f25565b6000918252602090912001558015612d0f57808b600b018a60ff1681548110612cd557612cd5614f25565b9060005260206000200154612cea9190614758565b8b600b018a60ff1681548110612d0257612d02614f25565b6000918252602090912001555b8a54604080518a81526020810187905260ff8d8116828401528c16606082015290513392917f28d4cf2d5709da3b474b5f05cfd7083faffd601f9500d1f8439b8a13ec7df320919081900360800190a350919998505050505050505050565b801580612de85750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de69190615032565b155b612e535760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401612739565b6040516001600160a01b038316602482015260448101829052611b8590849063095ea7b360e01b9060640161254a565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef89190615032565b612f029190614758565b6040516001600160a01b03851660248201526044810182905290915061268790859063095ea7b360e01b9060640161254a565b6000612f8a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135039092919063ffffffff16565b805190915015611b855780806020019051810190612fa891906152e0565b611b855760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401612739565b604080518082019091526000808252602082015260408051808201909152600080825260208201526001600160a01b0384166130445790506103e4565b506001600160a01b03831660009081526007830160209081526040918290208251808401909352805463ffffffff16808452600190910154918301919091521561308f5790506103e4565b6130998484613512565b156130bf57600483015463ffffffff1681526001600160a01b0384166020820152611801565b506001600160a01b03831660009081526008830160209081526040918290208251808401909352805463ffffffff16835260010154908201529392505050565b81516000906020840161154064ffffffffff85168284613548565b6000613126838361358f565b6131ec5760006131456131398560d81c90565b64ffffffffff166135b2565b915050600061315a8464ffffffffff166135b2565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161273991906152fd565b5090919050565b60006103e482613660565b6040516060906000613213846020840161366d565b9050600061322a8260181c6001600160601b031690565b6001600160601b031690506000613240836136fd565b9184525082016020016040525092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561328a5750600090506003611a6a565b8460ff16601b141580156132a257508460ff16601c14155b156132b35750600090506004611a6a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613307573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661333057600060019250925050611a6a565b9660009650945050505050565b60008060008760090180548060200260200160405190810160405280929190818152602001828054801561339057602002820191906000526020600020905b81548152602001906001019080831161337c575b5050505050905060006133a38583613713565b905080518860ff161080156133bb575080518760ff16105b6133fc5760405162461bcd60e51b8152602060048201526012602482015271696e646578206f7574206f662072616e676560701b6044820152606401612739565b6000818960ff168151811061341357613413614f25565b6020026020010151838a60ff168151811061343057613430614f25565b6020026020010151886134439190615013565b61344d9190614758565b9050600061346661345d8c61381d565b8b8b8587613828565b9050600181848b60ff168151811061348057613480614f25565b60200260200101516134929190614f58565b61349c9190614f58565b95506402540be4008b60050154876134b49190615013565b6134be9190614f85565b9450838960ff16815181106134d5576134d5614f25565b602002602001015185876134e99190614f58565b6134f39190614f85565b9550505050509550959350505050565b60606118528484600085613a8f565b6001600160a01b038216600090815260088201602052604081205463ffffffff1615613540575060006103e4565b50503b151590565b6000806135558385614758565b9050604051811115613565575060005b8060000361357a5762ffffff19915050611801565b5050606092831b9190911790911b1760181b90565b60008164ffffffffff166135a38460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156136075760006135d1826008615310565b60ff1685901c90506135e281613bc0565b61ffff16841793508160ff166010146135fd57601084901b93505b50600019016135b8565b50600f5b60ff8160ff16101561365a576000613624826008615310565b60ff1685901c905061363581613bc0565b61ffff16831792508160ff1660001461365057601083901b92505b506000190161360b565b50915091565b60006103e4826003613bf2565b6000604051828111156136805760206060fd5b506000805b84518110156136ed5760008582815181106136a2576136a2614f25565b602002602001015190506136b881848701613c51565b506136cc8160181c6001600160601b031690565b6001600160601b0316830192505080806136e590614fd0565b915050613685565b50606083901b811760181b611852565b600061370882613da8565b6103e4906020615013565b815181516060919081146137605760405162461bcd60e51b81526020600482015260146024820152736d69736d61746368206d756c7469706c6965727360601b6044820152606401612739565b6000816001600160401b0381111561377a5761377a614770565b6040519080825280602002602001820160405280156137a3578160200160208202803683370190505b50905060005b82811015613814578481815181106137c3576137c3614f25565b60200260200101518682815181106137dd576137dd614f25565b60200260200101516137ef9190615013565b82828151811061380157613801614f25565b60209081029190910101526001016137a9565b50949350505050565b60006103e482613ddd565b805160009060ff808616908716036138825760405162461bcd60e51b815260206004820152601760248201527f636f6d7061726520746f6b656e20746f20697473656c660000000000000000006044820152606401612739565b808660ff161080156138965750808560ff16105b6138d45760405162461bcd60e51b815260206004820152600f60248201526e1d1bdad95b881b9bdd08199bdd5b99608a1b6044820152606401612739565b60006138e08489613e7d565b9050806000806138f08b86615013565b90506000805b86811015613977578b60ff16810361391057899150613943565b8a60ff16811461393b5788818151811061392c5761392c614f25565b60200260200101519150613943565b6001016138f6565b61394d8285614758565b93506139598783615013565b6139638787615013565b61396d9190614f85565b94506001016138f6565b506139828683615013565b606461398e8787615013565b6139989190615013565b6139a29190614f85565b93506000826139b2606488615013565b6139bc9190614f85565b6139c69085614758565b9050600086815b610100811015613a465781925088848360026139e99190615013565b6139f39190614758565b6139fd9190614f58565b88613a088480615013565b613a129190614758565b613a1c9190614f85565b9150613a28828461402a565b15613a3e57509850611540975050505050505050565b6001016139cd565b5060405162461bcd60e51b815260206004820152601e60248201527f417070726f78696d6174696f6e20646964206e6f7420636f6e766572676500006044820152606401612739565b606082471015613af05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401612739565b6001600160a01b0385163b613b475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401612739565b600080866001600160a01b03168587604051613b639190615331565b60006040518083038185875af1925050503d8060008114613ba0576040519150601f19603f3d011682016040523d82523d6000602084013e613ba5565b606091505b5091509150613bb5828286614041565b979650505050505050565b6000613bd260048360ff16901c61407a565b60ff1661ffff919091161760081b613be98261407a565b60ff1617919050565b6000816003811115613c0657613c0661528e565b60ff16613c12846141c7565b60ff161480156118015750816003811115613c2f57613c2f61528e565b613c38846141db565b6003811115613c4957613c4961528e565b149392505050565b600062ffffff1980841603613cb95760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401612739565b613cc2836141f6565b613d225760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401612739565b6000613d378460181c6001600160601b031690565b6001600160601b031690506000613d578560781c6001600160601b031690565b6001600160601b031690506000604051905084811115613d775760206060fd5b8285848460045afa506123db613d8d8760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b60006020613dbf8360181c6001600160601b031690565b613dd3906001600160601b0316601f614758565b6103e49190614f85565b600481015460028201546000919042821115611801576003840154600185015480831115613e4157613e0f8285614f58565b613e198342614f58565b613e238386614f58565b613e2d9190615013565b613e379190614f85565b6123db9082614758565b613e4b8285614f58565b613e558342614f58565b613e5f8584614f58565b613e699190615013565b613e739190614f85565b6123db9082614f58565b815160009081805b82811015613ebc57858181518110613e9f57613e9f614f25565b602002602001015182613eb29190614758565b9150600101613e85565b5080600003613ed0576000925050506103e4565b60008181613ede8588615013565b905060005b610100811015613feb578260005b87811015613f3c57878b8281518110613f0c57613f0c614f25565b6020026020010151613f1e9190615013565b613f288684615013565b613f329190614f85565b9150600101613ef1565b5083945080876001613f4e9190614758565b613f589190615013565b606485613f658287614f58565b613f6f9190615013565b613f799190614f85565b613f839190614758565b84613f8e8984615013565b6064613f9a8a88615013565b613fa49190614f85565b613fae9190614758565b613fb89190615013565b613fc29190614f85565b9350613fce848661402a565b15613fe257839750505050505050506103e4565b50600101613ee3565b5060405162461bcd60e51b81526020600482015260136024820152724420646f6573206e6f7420636f6e766572676560681b6044820152606401612739565b600060016140388484614233565b11159392505050565b60608315614050575081611801565b8251156140605782518084602001fd5b8160405162461bcd60e51b815260040161273991906152fd565b600060f08083179060ff821690036140955750603092915050565b8060ff1660f1036140a95750603192915050565b8060ff1660f2036140bd5750603292915050565b8060ff1660f3036140d15750603392915050565b8060ff1660f4036140e55750603492915050565b8060ff1660f5036140f95750603592915050565b8060ff1660f60361410d5750603692915050565b8060ff1660f7036141215750603792915050565b8060ff1660f8036141355750603892915050565b8060ff1660f9036141495750603992915050565b8060ff1660fa0361415d5750606192915050565b8060ff1660fb036141715750606292915050565b8060ff1660fc036141855750606392915050565b8060ff1660fd036141995750606492915050565b8060ff1660fe036141ad5750606592915050565b8060ff1660ff036141c15750606692915050565b50919050565b60006103e462ffffff198316826001614258565b600060d882901c60ff1660038111156103e4576103e461528e565b60006142028260d81c90565b64ffffffffff1664ffffffffff0361421c57506000919050565b600061422783614288565b60405110199392505050565b60008183111561424e576142478284614f58565b90506103e4565b6118018383614f58565b6000614265826020615136565b614270906008615310565b60ff1661427e8585856142c1565b901c949350505050565b600061429d8260181c6001600160601b031690565b6142b08360781c6001600160601b031690565b016001600160601b03169050919050565b60008160ff166000036142d657506000611801565b6142e98460181c6001600160601b031690565b6001600160601b03166142ff60ff841685614758565b11156143635761434a61431b8560781c6001600160601b031690565b6001600160601b03166143378660181c6001600160601b031690565b6001600160601b0316858560ff1661441d565b60405162461bcd60e51b815260040161273991906152fd565b60208260ff1611156143dd5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401612739565b6008820260006143f68660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6060600061442a866135b2565b9150506000614438866135b2565b9150506000614446866135b2565b9150506000614454866135b2565b9150508383838360405160200161446e9493929190615343565b604051602081830303815290604052945050505050949350505050565b8280548282559060005260206000209081019282156144de579160200282015b828111156144de5781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906144ab565b506144ea9291506144ee565b5090565b5b808211156144ea57600081556001016144ef565b803563ffffffff81168114611db557600080fd5b60006020828403121561452957600080fd5b61180182614503565b6001600160a01b03811681146129be57600080fd5b8035611db581614532565b60006020828403121561456457600080fd5b813561180181614532565b60006020828403121561458157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156145c95783516001600160a01b0316835292840192918401916001016145a4565b50909695505050505050565b600080604083850312156145e857600080fd5b82356001600160401b038111156145fe57600080fd5b83016101a0818603121561461157600080fd5b946020939093013593505050565b60006020828403121561463157600080fd5b81356001600160401b0381111561464757600080fd5b820160a0818503121561180157600080fd5b60008060008060008060008060e0898b03121561467557600080fd5b61467e89614503565b9750602089013561468e81614532565b9650604089013561469e81614532565b955060608901356146ae81614532565b94506080890135935060a0890135925060c08901356001600160401b03808211156146d857600080fd5b818b0191508b601f8301126146ec57600080fd5b8135818111156146fb57600080fd5b8c602082850101111561470d57600080fd5b6020830194508093505050509295985092959890939650565b6000806040838503121561473957600080fd5b61461183614503565b634e487b7160e01b600052601160045260246000fd5b6000821982111561476b5761476b614742565b500190565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156147a9576147a9614770565b60405290565b604051601f8201601f191681016001600160401b03811182821017156147d7576147d7614770565b604052919050565b80151581146129be57600080fd5b8035611db5816147df565b60006001600160401b0382111561481157614811614770565b50601f01601f191660200190565b600082601f83011261483057600080fd5b813561484361483e826147f8565b6147af565b81815284602083860101111561485857600080fd5b816020850160208301376000918101602001919091529392505050565b60006101a0823603121561488857600080fd5b614890614786565b61489983614503565b81526148a760208401614503565b60208201526148b860408401614503565b60408201526148c960608401614547565b60608201526148da60808401614547565b60808201526148eb60a084016147ed565b60a082015260c08301356001600160401b0381111561490957600080fd5b6149153682860161481f565b60c08301525060e083013560e0820152610100614933818501614547565b9082015261012083810135908201526101408084013590820152610160808401359082015261018092830135928101929092525090565b6000823561019e1983360301811261498157600080fd5b9190910192915050565b6000808335601e198436030181126149a257600080fd5b83016020810192503590506001600160401b038111156149c157600080fd5b80360382131561280157600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e19843603018112614a1057600080fd5b83016020810192503590506001600160401b03811115614a2f57600080fd5b8060051b360382131561280157600080fd5b8183526000602080850194508260005b85811015614a7f578135614a6481614532565b6001600160a01b031687529582019590820190600101614a51565b509495945050505050565b81835260006020808501808196508560051b810191508460005b87811015614ada578284038952614abb828861498b565b614ac68682846149d0565b9a87019a9550505090840190600101614aa4565b5091979650505050505050565b608081526000610120863561019e19883603018112614b0557600080fd5b60a060808501528701614b27828501614b1d83614503565b63ffffffff169052565b614b3360208201614503565b610140614b478187018363ffffffff169052565b614b5360408401614503565b9150610160614b698188018463ffffffff169052565b614b7560608501614547565b9250610180614b8e818901856001600160a01b03169052565b614b9a60808601614547565b93506101a0614bb3818a01866001600160a01b03169052565b614bbf60a087016147ed565b8015156101c08b01529450614bd760c087018761498b565b9550816101e08b0152614bef6102c08b0187836149d0565b9550505060e0850135610200890152610100614c0c818701614547565b6001600160a01b03166102208a0152858701356102408a0152838601356102608a0152828601356102808a0152818601356102a08a0152614c5060208e018e6149f9565b97509550607f199350838986030160a08a0152614c6e858888614a41565b9650614c7d60408e018e6149f9565b96509450838988030160c08a0152614c96878787614a8a565b9650614ca460608e01614547565b6001600160a01b03811660e08b01529550614cc260808e018e61498b565b965094508389880301818a015250505050614cde8383836149d0565b9350505050614cf860208301866001600160a01b03169052565b83604083015261154060608301846001600160a01b03169052565b60005b83811015614d2e578181015183820152602001614d16565b838111156126875750506000910152565b60008151808452614d57816020860160208601614d13565b601f01601f19169290920160200192915050565b805163ffffffff16825260006101a06020830151614d91602086018263ffffffff169052565b506040830151614da9604086018263ffffffff169052565b506060830151614dc460608601826001600160a01b03169052565b506080830151614ddf60808601826001600160a01b03169052565b5060a0830151614df360a086018215159052565b5060c08301518160c0860152614e0b82860182614d3f565b91505060e083015160e085015261010080840151614e33828701826001600160a01b03169052565b50506101208381015190850152610140808401519085015261016080840151908501526101809283015192909301919091525090565b6020815260006118016020830184614d6b565b6000808335601e19843603018112614e9357600080fd5b8301803591506001600160401b03821115614ead57600080fd5b6020019150600581901b360382131561280157600080fd5b838152604060208201526000611540604083018486614a41565b6000808335601e19843603018112614ef657600080fd5b8301803591506001600160401b03821115614f1057600080fd5b60200191503681900382131561280157600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215614f4d57600080fd5b8135611801816147df565b600082821015614f6a57614f6a614742565b500390565b634e487b7160e01b600052601260045260246000fd5b600082614f9457614f94614f6f565b500490565b600082614fa857614fa8614f6f565b500690565b600060208284031215614fbf57600080fd5b815160ff8116811461180157600080fd5b600060018201614fe257614fe2614742565b5060010190565b604081526000614ffc6040830185614d6b565b905060018060a01b03831660208301529392505050565b600081600019048311821515161561502d5761502d614742565b500290565b60006020828403121561504457600080fd5b5051919050565b8183823760009101908152919050565b878152602081018790526001600160a01b0386811660408301528516606082015263ffffffff8416608082015260c060a082018190526000906150a190830184866149d0565b9998505050505050505050565b6000602082840312156150c057600080fd5b81516001600160401b038111156150d657600080fd5b8201601f810184136150e757600080fd5b80516150f561483e826147f8565b81815285602083850101111561510a57600080fd5b611540826020830160208601614d13565b82151581526040602082015260006118526040830184614d3f565b600060ff821660ff84168082101561515057615150614742565b90039392505050565b600181815b8085111561519457816000190482111561517a5761517a614742565b8085161561518757918102915b93841c939080029061515e565b509250929050565b6000826151ab575060016103e4565b816151b8575060006103e4565b81600181146151ce57600281146151d8576151f4565b60019150506103e4565b60ff8411156151e9576151e9614742565b50506001821b6103e4565b5060208310610133831016604e8410600b8410161715615217575081810a6103e4565b6152218383615159565b806000190482111561523557615235614742565b029392505050565b600061180160ff84168361519c565b60006020828403121561525e57600080fd5b815161180181614532565b63ffffffff841681528260208201526060604082015260006115406060830184614d3f565b634e487b7160e01b600052602160045260246000fd5b6000600485106152c457634e487b7160e01b600052602160045260246000fd5b5060f89390931b83526001830191909152602182015260410190565b6000602082840312156152f257600080fd5b8151611801816147df565b6020815260006118016020830184614d3f565b600060ff821660ff84168160ff048111821515161561523557615235614742565b60008251614981818460208701614d13565b7f54797065644d656d566965772f696e646578202d204f76657272616e20746865815274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b60208201526001600160d01b031960d086811b821660358401526e040eed2e8d040d8cadccee8d04060f608b1b603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f666673657420306050850152600f60fb1b607085015285821b83166071850152607784015283901b166086820152601760f91b608c8201526000608d82016123db56fea264697066735822122008d7e13fbf529ec0c241f45081744607e8bd3c17c0646173174c1b1ba178252b64736f6c634300080f0033",
  "devdoc": {
    "events": {
      "AavePortalMintUnbacked(bytes32,address,address,uint256)": {
        "params": {
          "amount": "- The amount of asset that was provided by Aave Portal",
          "asset": "- The asset that was provided by Aave Portal",
          "router": "- The authorized router that used Aave Portal liquidity",
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "Executed(bytes32,address,address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)": {
        "details": "`execute` may be called when providing fast liquidity or when processing a reconciled (slow) transfer.",
        "params": {
          "amount": "- The amount of transferring asset the recipient address receives or the external call is executed with.",
          "args": "- The `ExecuteArgs` provided to the function.",
          "asset": "- The asset the recipient is given or the external call is executed with. Should be the adopted asset on that chain.",
          "caller": "- The account that called the function.",
          "local": "- The local asset that was either supplied by the router for a fast-liquidity transfer or minted by the bridge in a reconciled (slow) transfer. Could be the same as the adopted `asset` param.",
          "to": "- The recipient `CallParams.to` provided, created as indexed parameter.",
          "transferId": "- The unique identifier of the crosschain transfer."
        }
      },
      "ExecutorUpdated(address,address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "newExecutor": "- The executor new value",
          "oldExecutor": "- The executor old value"
        }
      },
      "ExternalCalldataExecuted(bytes32,bool,bytes)": {
        "params": {
          "returnData": "- Return bytes from the IXReceiver",
          "success": "- Whether calldata succeeded",
          "transferId": "- The unique identifier of the crosschain transfer."
        }
      },
      "RemoteAdded(uint32,address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "domain": "- The domain the remote instance is on",
          "remote": "- The address of the remote instance"
        }
      },
      "Send(address,address,uint32,bytes32,uint256,bool)": {
        "params": {
          "amount": "the amount of tokens sent",
          "from": "the address sending tokens",
          "toDomain": "the domain of the chain the tokens are being sent to",
          "toHook": "True if sent to a hook, on the remote chain, false        otherwise",
          "toId": "the bytes32 address of the recipient of the tokens",
          "token": "the address of the token contract"
        }
      },
      "SequencerAdded(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "sequencer": "- The sequencer address to be added or removed"
        }
      },
      "SequencerRemoved(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "sequencer": "- The sequencer address to be added or removed"
        }
      },
      "SlippageUpdated(bytes32,uint256)": {
        "params": {
          "slippage": "- The updated slippage boundary",
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "TransferRelayerFeesUpdated(bytes32,uint256,address)": {
        "params": {
          "caller": "- The account that called the function",
          "relayerFee": "- The updated amount of relayer fee in native asset",
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "XCalled(bytes32,uint256,bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address)": {
        "params": {
          "local": "- The address of the local asset (i.e. bridged token) used in the transfer.",
          "messageHash": "- The hash of the message bytes (containing all transfer info) that were bridged.",
          "nonce": "- The bridge nonce of the transfer on the origin domain.",
          "params": "- The `CallParams` provided to the function.",
          "transferId": "- The unique identifier of the crosschain transfer."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addSequencer(address)": {
        "params": {
          "_sequencer": "- The sequencer address to add."
        }
      },
      "bumpTransfer(bytes32)": {
        "params": {
          "_transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote xApp Router",
          "_router": "The address of the remote xApp Router"
        }
      },
      "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))": {
        "details": "Can be called before or after `handle` [reconcile] is called (regarding the same transfer), depending on whether the fast liquidity route (i.e. funds provided by routers) is being used for this transfer. As a result, executed calldata (including properties like `originSender`) may or may not be verified depending on whether the reconcile has been completed (i.e. the optimistic confirmation period has elapsed).",
        "params": {
          "_args": "- ExecuteArgs arguments."
        },
        "returns": {
          "_0": "bytes32 - The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for reconciliation to occur."
        }
      },
      "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)": {
        "params": {
          "_params": "CallParams associated with the transfer",
          "_slippage": "The updated slippage"
        }
      },
      "removeSequencer(address)": {
        "params": {
          "_sequencer": "- The sequencer address to remove."
        }
      },
      "setXAppConnectionManager(address)": {
        "params": {
          "_xAppConnectionManager": "The address of the xAppConnectionManager contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AavePortalMintUnbacked(bytes32,address,address,uint256)": {
        "notice": "Emitted when a router used Aave Portal liquidity for fast transfer"
      },
      "Executed(bytes32,address,address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)": {
        "notice": "Emitted when `execute` is called on the destination domain of a transfer."
      },
      "ExecutorUpdated(address,address,address)": {
        "notice": "Emitted when the executor variable is updated"
      },
      "ExternalCalldataExecuted(bytes32,bool,bytes)": {
        "notice": "Emitted when a transfer has its external data executed"
      },
      "RemoteAdded(uint32,address,address)": {
        "notice": "Emitted when a new remote instance is added"
      },
      "Send(address,address,uint32,bytes32,uint256,bool)": {
        "notice": "emitted when tokens are sent from this domain to another domain"
      },
      "SequencerAdded(address,address)": {
        "notice": "Emitted when a sequencer is added or removed from whitelists"
      },
      "SequencerRemoved(address,address)": {
        "notice": "Emitted when a sequencer is added or removed from whitelists"
      },
      "SlippageUpdated(bytes32,uint256)": {
        "notice": "Emitted when `forceUpdateSlippage` is called by an user on the destination domain"
      },
      "TransferRelayerFeesUpdated(bytes32,uint256,address)": {
        "notice": "Emitted when `bumpTransfer` is called by an user on the origin domain"
      },
      "XCalled(bytes32,uint256,bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address)": {
        "notice": "Emitted when `xcall` is called on the origin domain of a transfer."
      }
    },
    "kind": "user",
    "methods": {
      "addSequencer(address)": {
        "notice": "Used to add an approved sequencer to the whitelist."
      },
      "bumpTransfer(bytes32)": {
        "notice": "Anyone can call this function on the origin domain to increase the relayer fee for a transfer."
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same xApp on a remote chain"
      },
      "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))": {
        "notice": "Called on a destination domain to disburse correct assets to end recipient and execute any included calldata."
      },
      "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)": {
        "notice": "Allows a user-specified account to update the slippage they are willing to take on destination transfers."
      },
      "removeSequencer(address)": {
        "notice": "Used to remove an approved sequencer from the whitelist."
      },
      "setXAppConnectionManager(address)": {
        "notice": "Modify the contract the xApp uses to validate Replica contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6739,
        "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)21231_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)4344)dyn_storage": {
        "base": "t_contract(IERC20)4344",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridgeRouter)17298": {
        "encoding": "inplace",
        "label": "contract IBridgeRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IConnectorManager)38432": {
        "encoding": "inplace",
        "label": "contract IConnectorManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4344": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IStableSwap)18841": {
        "encoding": "inplace",
        "label": "contract IStableSwap",
        "numberOfBytes": "20"
      },
      "t_contract(LPToken)15518": {
        "encoding": "inplace",
        "label": "contract LPToken",
        "numberOfBytes": "20"
      },
      "t_contract(RelayerFeeRouter)29706": {
        "encoding": "inplace",
        "label": "contract RelayerFeeRouter",
        "numberOfBytes": "20"
      },
      "t_enum(Role)20992": {
        "encoding": "inplace",
        "label": "enum Role",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(Role)20992)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum Role)",
        "numberOfBytes": "32",
        "value": "t_enum(Role)20992"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenId)20997_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenId)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenId)20997_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_contract(IStableSwap)18841)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IStableSwap)",
        "numberOfBytes": "32",
        "value": "t_contract(IStableSwap)18841"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint8))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint8))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint8)"
      },
      "t_mapping(t_bytes32,t_struct(Swap)22416_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SwapUtils.Swap)",
        "numberOfBytes": "32",
        "value": "t_struct(Swap)22416_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(AppStorage)21231_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 21065,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 21067,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "LIQUIDITY_FEE_NUMERATOR",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 21071,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "relayerFeeRouter",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(RelayerFeeRouter)29706"
          },
          {
            "astId": 21074,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "nonce",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 21077,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "domain",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 21080,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "tokenBeacon",
            "offset": 4,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 21086,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adoptedToLocalPools",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_bytes32,t_contract(IStableSwap)18841)"
          },
          {
            "astId": 21091,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approvedAssets",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 21097,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adoptedToCanonical",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_address,t_struct(TokenId)20997_storage)"
          },
          {
            "astId": 21103,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "representationToCanonical",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_struct(TokenId)20997_storage)"
          },
          {
            "astId": 21108,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "canonicalToAdopted",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 21113,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "canonicalToRepresentation",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 21118,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "reconciledTransfers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 21124,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "routedTransfers",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
          },
          {
            "astId": 21131,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "routerBalances",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 21136,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approvedRelayers",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21141,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "relayerFees",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 21146,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "transferRelayer",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 21149,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "maxRoutersPerTransfer",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 21153,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "bridgeRouter",
            "offset": 0,
            "slot": "18",
            "type": "t_contract(IBridgeRouter)17298"
          },
          {
            "astId": 21158,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "slippage",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 21163,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "remotes",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint32,t_bytes32)"
          },
          {
            "astId": 21165,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_proposed",
            "offset": 0,
            "slot": "21",
            "type": "t_address"
          },
          {
            "astId": 21167,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_proposedOwnershipTimestamp",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 21169,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_routerWhitelistRemoved",
            "offset": 0,
            "slot": "23",
            "type": "t_bool"
          },
          {
            "astId": 21171,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_routerWhitelistTimestamp",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 21173,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_assetWhitelistRemoved",
            "offset": 0,
            "slot": "25",
            "type": "t_bool"
          },
          {
            "astId": 21175,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_assetWhitelistTimestamp",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 21181,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "roles",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_address,t_enum(Role)20992)"
          },
          {
            "astId": 21184,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "routerPermissionInfo",
            "offset": 0,
            "slot": "28",
            "type": "t_struct(RouterPermissionsManagerInfo)21063_storage"
          },
          {
            "astId": 21186,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_status",
            "offset": 0,
            "slot": "34",
            "type": "t_uint256"
          },
          {
            "astId": 21192,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "swapStorages",
            "offset": 0,
            "slot": "35",
            "type": "t_mapping(t_bytes32,t_struct(Swap)22416_storage)"
          },
          {
            "astId": 21199,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "tokenIndexes",
            "offset": 0,
            "slot": "36",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint8))"
          },
          {
            "astId": 21202,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_paused",
            "offset": 0,
            "slot": "37",
            "type": "t_bool"
          },
          {
            "astId": 21205,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "aavePool",
            "offset": 1,
            "slot": "37",
            "type": "t_address"
          },
          {
            "astId": 21208,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "aavePortalFeeNumerator",
            "offset": 0,
            "slot": "38",
            "type": "t_uint256"
          },
          {
            "astId": 21213,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "portalDebt",
            "offset": 0,
            "slot": "39",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 21218,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "portalFeeDebt",
            "offset": 0,
            "slot": "40",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 21223,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approvedSequencers",
            "offset": 0,
            "slot": "41",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21227,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "xAppConnectionManager",
            "offset": 0,
            "slot": "42",
            "type": "t_contract(IConnectorManager)38432"
          },
          {
            "astId": 21230,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_ownershipDelay",
            "offset": 0,
            "slot": "43",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "1408"
      },
      "t_struct(RouterPermissionsManagerInfo)21063_storage": {
        "encoding": "inplace",
        "label": "struct RouterPermissionsManagerInfo",
        "members": [
          {
            "astId": 21042,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approvedRouters",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21046,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approvedForPortalRouters",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 21050,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "routerRecipients",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21054,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "routerOwners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21058,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "proposedRouterOwners",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 21062,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "proposedRouterTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Swap)22416_storage": {
        "encoding": "inplace",
        "label": "struct SwapUtils.Swap",
        "members": [
          {
            "astId": 22387,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 22389,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "initialA",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22391,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "futureA",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 22393,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "initialATime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 22395,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "futureATime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 22397,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "swapFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 22399,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adminFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 22402,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "lpToken",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(LPToken)15518"
          },
          {
            "astId": 22406,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "pooledTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_contract(IERC20)4344)dyn_storage"
          },
          {
            "astId": 22409,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "tokenPrecisionMultipliers",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 22412,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "balances",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 22415,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adminFees",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(TokenId)20997_storage": {
        "encoding": "inplace",
        "label": "struct TokenId",
        "members": [
          {
            "astId": 20994,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "domain",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 20996,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}