{
  "address": "0x3d18bdcF71325b5EeCa87F41e631E73755Bd25F8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delayBlocks",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_merkle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_watcherManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__acceptProposedOwner_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "connector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "domains",
          "type": "uint32[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "connectors",
          "type": "address[]"
        }
      ],
      "name": "ConnectorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "connector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32[]",
          "name": "domains",
          "type": "uint32[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "connectors",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "ConnectorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updated",
          "type": "uint256"
        }
      ],
      "name": "DelayBlocksUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "fraudulentRoot",
          "type": "bytes32"
        }
      ],
      "name": "RootDiscarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "aggregateRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "domainsHash",
          "type": "bytes32"
        }
      ],
      "name": "RootPropagated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "receivedRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "queueIndex",
          "type": "uint256"
        }
      ],
      "name": "RootReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "aggregateRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "aggregatedMessageRoots",
          "type": "bytes32[]"
        }
      ],
      "name": "RootsAggregated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "watcherManager",
          "type": "address"
        }
      ],
      "name": "WatcherManagerChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEQUEUE_MAX",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DOMAINS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MERKLE",
      "outputs": [
        {
          "internalType": "contract MerkleTreeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_connector",
          "type": "address"
        }
      ],
      "name": "addConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_inbound",
          "type": "bytes32"
        }
      ],
      "name": "aggregate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "connectors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connectorsHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dequeue",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "discardRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "domains",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainsHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "getConnectorForDomain",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "getDomainIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingInboundRootsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "isDomainSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingInboundRoots",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "first",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "last",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_connectors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_fees",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_encodedData",
          "type": "bytes[]"
        }
      ],
      "name": "propagate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "removeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delayBlocks",
          "type": "uint256"
        }
      ],
      "name": "setDelayBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_watcherManager",
          "type": "address"
        }
      ],
      "name": "setWatcherManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_connectors",
          "type": "address[]"
        }
      ],
      "name": "validateConnectors",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_connectors",
          "type": "address[]"
        }
      ],
      "name": "validateDomains",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "watcherManager",
      "outputs": [
        {
          "internalType": "contract WatcherManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fcd379fdbe480d04edc7c458bd61abe986e5143a89904be2540aa3acd87e969",
  "receipt": {
    "to": null,
    "from": "0x54BAA998771639628ffC0206c3b916c466b79c89",
    "contractAddress": "0x3d18bdcF71325b5EeCa87F41e631E73755Bd25F8",
    "transactionIndex": 28,
    "gasUsed": "2325797",
    "logsBloom": "0x
    "blockHash": "0x73cdb6162ef516cfdd2c99509163a32cbe0537910a06adddae9ddbe82e21c91c",
    "transactionHash": "0x0fcd379fdbe480d04edc7c458bd61abe986e5143a89904be2540aa3acd87e969",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 7960095,
        "transactionHash": "0x0fcd379fdbe480d04edc7c458bd61abe986e5143a89904be2540aa3acd87e969",
        "address": "0x3d18bdcF71325b5EeCa87F41e631E73755Bd25F8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000054baa998771639628ffc0206c3b916c466b79c89"
        ],
        "data": "0x",
        "logIndex": 183,
        "blockHash": "0x73cdb6162ef516cfdd2c99509163a32cbe0537910a06adddae9ddbe82e21c91c"
      }
    ],
    "blockNumber": 7960095,
    "cumulativeGasUsed": "13398106",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100,
    "0x5f515E2D14781A00cf20271A13E9aCCa2e03f2b7",
    "0xFC85847772C1E3aB4cd8E9ECE1B73cD6A9fc1f17"
  ],
  "numDeployments": 1,
  "solcInputHash": "1f467203f3254f7bc6438ece86adb35a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delayBlocks\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_merkle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_watcherManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProposedOwnable__acceptProposedOwner_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"domains\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"connectors\",\"type\":\"address[]\"}],\"name\":\"ConnectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"connector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"domains\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"connectors\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ConnectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updated\",\"type\":\"uint256\"}],\"name\":\"DelayBlocksUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"fraudulentRoot\",\"type\":\"bytes32\"}],\"name\":\"RootDiscarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"aggregateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"domainsHash\",\"type\":\"bytes32\"}],\"name\":\"RootPropagated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receivedRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueIndex\",\"type\":\"uint256\"}],\"name\":\"RootReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"aggregateRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"aggregatedMessageRoots\",\"type\":\"bytes32[]\"}],\"name\":\"RootsAggregated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"watcherManager\",\"type\":\"address\"}],\"name\":\"WatcherManagerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEQUEUE_MAX\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DOMAINS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE\",\"outputs\":[{\"internalType\":\"contract MerkleTreeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_connector\",\"type\":\"address\"}],\"name\":\"addConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_inbound\",\"type\":\"bytes32\"}],\"name\":\"aggregate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dequeue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"discardRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"getConnectorForDomain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"getDomainIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingInboundRootsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"isDomainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingInboundRoots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"first\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"last\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_encodedData\",\"type\":\"bytes[]\"}],\"name\":\"propagate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"removeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delayBlocks\",\"type\":\"uint256\"}],\"name\":\"setDelayBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_watcherManager\",\"type\":\"address\"}],\"name\":\"setWatcherManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"}],\"name\":\"validateConnectors\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"}],\"name\":\"validateDomains\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"watcherManager\",\"outputs\":[{\"internalType\":\"contract WatcherManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addConnector(uint32,address)\":{\"details\":\"Only owner can add a new connector. Address should be the connector on L1.Cannot add address(0) to avoid duplicated domain in array and reduce gas fee while propagating.\",\"params\":{\"_connector\":\"Address of the hub connector.\",\"_domain\":\"The target spoke domain of the given connector.\"}},\"aggregate(uint32,bytes32)\":{\"details\":\"The aggregate tree's root, which will include this inbound root, will be propagated to all spoke domains (via `propagate`) on a regular basis assuming the verification period is surpassed without dispute.\",\"params\":{\"_domain\":\"The source domain of the given root.\",\"_inbound\":\"The inbound root coming from the given domain.\"}},\"constructor\":{\"params\":{\"_delayBlocks\":\"The delay for the validation period for incoming messages in blocks.\",\"_merkle\":\"The address of the MerkleTreeManager on this domain.\",\"_watcherManager\":\"The address of the WatcherManager on this domain.\"}},\"dequeue()\":{\"details\":\"Will dequeue a fixed maximum amount of roots to prevent out of gas errors. As such, this method is public and separate from `propagate` so we can curtail an overloaded queue as needed.Reverts if no verified inbound roots are found.\",\"returns\":{\"_0\":\"bytes32 The new aggregate root.\",\"_1\":\"uint256 The updated count (number of leaves).\"}},\"discardRoot(bytes32)\":{\"details\":\"The given root does NOT have to currently be in the queue. It isn't removed from the queue directly, but instead is filtered out when dequeuing is done for the sake of aggregation.Can only be called by the owner when the protocol is paused.\",\"params\":{\"_root\":\"The root to be discarded.\"}},\"getConnectorForDomain(uint32)\":{\"details\":\"Inefficient, should only be used by caller if they have no index reference.\",\"params\":{\"_domain\":\"The domain for which to get the hub connector address.\"}},\"getDomainIndex(uint32)\":{\"details\":\"Reverts if domain is not supported.\",\"params\":{\"_domain\":\"The domain for which to get the index value.\"}},\"isDomainSupported(uint32)\":{\"params\":{\"_domain\":\"Domain to check.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"propagate(address[],uint256[],bytes[])\":{\"details\":\"Should be called by relayers at a regular interval.\",\"params\":{\"_connectors\":\"Array of connectors: should match exactly the array of `connectors` in storage; used here to reduce gas costs, and keep them static regardless of number of supported domains.\",\"_encodedData\":\"Array of encodedData: extra params for each AMB if required\",\"_fees\":\"Array of fees in native token for an AMB if required\"}},\"removeConnector(uint32)\":{\"details\":\"Only watcher can remove a connector. TODO: Could add a metatx-able `removeConnectorWithSig` if we want to use relayers?\",\"params\":{\"_domain\":\"The spoke domain of the target connector we want to remove.\"}},\"renounceOwnership()\":{\"details\":\"Renounce ownership should be impossible as long as watchers can freely remove connectors and only the owner can add them back\"},\"validateConnectors(address[])\":{\"details\":\"Reverts if domains or connectors do not match, including ordering.\",\"params\":{\"_connectors\":\"The given connectors array to check.\"}},\"validateDomains(uint32[],address[])\":{\"details\":\"Reverts if domains or connectors do not match, including ordering.\",\"params\":{\"_connectors\":\"The given connectors array to check.\",\"_domains\":\"The given domains array to check.\"}}},\"stateVariables\":{\"pendingInboundRoots\":{\"details\":\"Watchers should be able to watch this queue for fraudulent messages and pause this contract if fraud is detected.\"}},\"version\":1},\"userdoc\":{\"events\":{\"WatcherManagerChanged(address)\":{\"notice\":\"Emitted when the manager address changes\"}},\"kind\":\"user\",\"methods\":{\"DEQUEUE_MAX()\":{\"notice\":\"Maximum number of values to dequeue from the queue in one sitting (one call of `propagate` or `dequeue`). Used to cap gas requirements.\"},\"MAX_DOMAINS()\":{\"notice\":\"The absolute maximum number of domains that we should support. Domain and connector arrays are naturally unbounded, but the gas cost of reading these arrays in `updateHashes()` is bounded by the block's gas limit. If we want to set a hard ceiling for gas costs for the `updateHashes()` method at approx. 2M gas, with an average SLOAD cost of 900 gas per domain (1 uint32, 1 address):       2M / 900 = ~2222 domains Realistically, the cap on the number of domains will likely exist in other places, but we cap it here as a last resort.\"},\"MERKLE()\":{\"notice\":\"MerkleTreeManager contract instance. Will hold the active tree of aggregated inbound roots. The root of this tree will be distributed crosschain to all spoke domains.\"},\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"addConnector(uint32,address)\":{\"notice\":\"Add a new supported domain and corresponding hub connector to the system. This new domain will receive the propagated aggregate root.\"},\"aggregate(uint32,bytes32)\":{\"notice\":\"Accept an inbound root coming from a given domain's hub connector, enqueuing this incoming root into the current queue as it awaits the verification period.\"},\"connectors(uint256)\":{\"notice\":\"Tracks the addresses of the hub connector contracts corresponding to subscribed spoke domains. The index of any given connector in this array should match the index of that connector's target spoke domain in the `domains` array above.\"},\"connectorsHash()\":{\"notice\":\"A \\\"quick reference\\\" hash used in the `propagate` method below to validate that the provided array of connectors matches the one we have in storage.\"},\"constructor\":{\"notice\":\"Creates a new RootManager instance.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"delayBlocks()\":{\"notice\":\"Number of blocks to delay the processing of a message to allow for watchers to verify the validity and pause if necessary.\"},\"dequeue()\":{\"notice\":\"Dequeue verified inbound roots and insert them into the aggregator tree.\"},\"discardRoot(bytes32)\":{\"notice\":\"Removes (effectively blacklists) a given (fraudulent) root from the queue of pending inbound roots.\"},\"domains(uint256)\":{\"notice\":\"Domains array tracks currently subscribed domains to this hub aggregator. We should distribute the aggregate root to all of these domains in the `propagate` method.\"},\"domainsHash()\":{\"notice\":\"A \\\"quick reference\\\" hash used in the `propagate` method below to validate that the provided array of domains matches the one we have in storage.\"},\"getConnectorForDomain(uint32)\":{\"notice\":\"Gets the corresponding hub connector address for a given spoke domain.\"},\"getDomainIndex(uint32)\":{\"notice\":\"Gets the index of a given domain in the domains and connectors arrays.\"},\"isDomainSupported(uint32)\":{\"notice\":\"Convenience shortcut for supported domains. Used to sanity check adding new domains.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"pause()\":{\"notice\":\"Watchers can pause contracts if fraud is detected\"},\"pendingInboundRoots()\":{\"notice\":\"Queue used for management of verification for inbound roots from spoke chains. Once the verification period elapses, the inbound messages can be aggregated into the merkle tree for propagation to spoke chains.\"},\"propagate(address[],uint256[],bytes[])\":{\"notice\":\"This is called by relayers to take the current aggregate tree root and propagate it to all spoke domains (via their respective hub connectors).\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"removeConnector(uint32)\":{\"notice\":\"Remove support for a connector and respective domain. That connector/domain will no longer receive updates for the latest aggregate root.\"},\"renounceOwnership()\":{\"notice\":\"Remove ability to renounce ownership\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"setDelayBlocks(uint256)\":{\"notice\":\"Set the `delayBlocks`, the period in blocks over which an incoming message is verified.\"},\"setWatcherManager(address)\":{\"notice\":\"Owner can enroll a watcher (abilities are defined by inheriting contracts)\"},\"unpause()\":{\"notice\":\"Owner can unpause contracts if fraud is detected by watchers\"},\"validateConnectors(address[])\":{\"notice\":\"Validate given connectors array is correct (i.e. it mirrors what is currently saved in storage).\"},\"validateDomains(uint32[],address[])\":{\"notice\":\"Validate given domains and connectors arrays are correct (i.e. they mirror what is currently saved in storage).\"},\"watcherManager()\":{\"notice\":\"The `WatcherManager` contract governs the watcher whitelist.\"}},\"notice\":\"This contract exists at cluster hubs, and aggregates all transfer roots from messaging spokes into a single merkle tree. Regularly broadcasts the root of the aggregator tree back out to all the messaging spokes.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/RootManager.sol\":\"RootManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/messaging/MerkleTreeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {ProposedOwnableUpgradeable} from \\\"../shared/ProposedOwnableUpgradeable.sol\\\";\\nimport {MerkleLib} from \\\"./libraries/MerkleLib.sol\\\";\\n\\n/**\\n * @title MerkleTreeManager\\n * @notice Contains a Merkle tree instance and exposes read/write functions for the tree.\\n * @dev On the hub domain there are two MerkleTreeManager contracts, one for the hub and one for the MainnetSpokeConnector.\\n */\\ncontract MerkleTreeManager is ProposedOwnableUpgradeable {\\n  // ========== Custom Errors ===========\\n\\n  error MerkleTreeManager__setArborist_zeroAddress();\\n  error MerkleTreeManager__setArborist_alreadyArborist();\\n\\n  // ============ Events ============\\n\\n  event ArboristUpdated(address previous, address updated);\\n\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n\\n  // ============ Public Storage ============\\n\\n  /**\\n   * @notice Core data structure with which this contract is tasked with keeping custody.\\n   * Writable only by the designated arborist.\\n   */\\n  MerkleLib.Tree public tree;\\n\\n  /**\\n   * @notice The arborist contract that has permission to write to this tree.\\n   * @dev This could be the root manager contract or a spoke connector contract, for example.\\n   */\\n  address public arborist;\\n\\n  // ============ Modifiers ============\\n\\n  modifier onlyArborist() {\\n    require(arborist == msg.sender, \\\"!arborist\\\");\\n    _;\\n  }\\n\\n  // ============ Getters ============\\n\\n  /**\\n   * @notice Returns the current branch.\\n   */\\n  function branch() public view returns (bytes32[32] memory) {\\n    return tree.branch;\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the current root.\\n   */\\n  function root() public view returns (bytes32) {\\n    return tree.root();\\n  }\\n\\n  /**\\n   * @notice Returns the number of inserted leaves in the tree (current index).\\n   */\\n  function count() public view returns (uint256) {\\n    return tree.count;\\n  }\\n\\n  // ======== Initializer =========\\n\\n  function initialize(address _arborist) public initializer {\\n    __MerkleTreeManager_init(_arborist);\\n    __ProposedOwnable_init();\\n  }\\n\\n  /**\\n   * @dev Initializes MerkleTreeManager instance. Sets the msg.sender as the initial permissioned\\n   */\\n  function __MerkleTreeManager_init(address _arborist) internal onlyInitializing {\\n    __MerkleTreeManager_init_unchained(_arborist);\\n  }\\n\\n  function __MerkleTreeManager_init_unchained(address _arborist) internal onlyInitializing {\\n    arborist = _arborist;\\n  }\\n\\n  // ============ Admin Functions ==============\\n\\n  /**\\n   * @notice Method for the current arborist to assign write permissions to a new arborist.\\n   * @param newArborist The new address to set as the current arborist.\\n   */\\n  function setArborist(address newArborist) external onlyOwner {\\n    if (newArborist == address(0)) revert MerkleTreeManager__setArborist_zeroAddress();\\n    address current = arborist;\\n    if (current == newArborist) revert MerkleTreeManager__setArborist_alreadyArborist();\\n\\n    // Emit updated event\\n    emit ArboristUpdated(current, newArborist);\\n\\n    arborist = newArborist;\\n  }\\n\\n  /**\\n   * @notice Remove ability to renounce ownership\\n   * @dev Renounce ownership should be impossible as long as there is a possibility the\\n   * arborist may change.\\n   */\\n  function renounceOwnership() public virtual override onlyOwner {}\\n\\n  // ========= Public Functions =========\\n\\n  /**\\n   * @notice Inserts the given leaves into the tree.\\n   * @param leaves The leaves to be inserted into the tree.\\n   * @return _root Current root for convenience.\\n   * @return _count Current node count (i.e. number of indices) AFTER the insertion of the new leaf,\\n   * provided for convenience.\\n   */\\n  function insert(bytes32[] memory leaves) public onlyArborist returns (bytes32 _root, uint256 _count) {\\n    // TODO: Considerably more efficient to put this tree into memory, conduct operations,\\n    // then re-assign it to storage - *especially* if we have multiple leaves to insert.\\n    // MerkleLib.Tree memory _tree = tree;\\n\\n    for (uint256 i; i < leaves.length; ) {\\n      // Insert the new node.\\n      tree.insert(leaves[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // Get return details for convenience.\\n    _root = tree.root();\\n    _count = tree.count;\\n\\n    // TODO: IFF using tree assigned to memory, write the newly updated tree to storage.\\n    // tree = _tree;\\n  }\\n\\n  /**\\n   * @notice Inserts the given leaf into the tree.\\n   * @param leaf The leaf to be inserted into the tree.\\n   * @return _root Current root for convenience.\\n   * @return _count Current node count (i.e. number of indices) AFTER the insertion of the new leaf,\\n   * provided for convenience.\\n   */\\n  function insert(bytes32 leaf) public onlyArborist returns (bytes32 _root, uint256 _count) {\\n    // Insert the new node.\\n    tree.insert(leaf);\\n    _count = tree.count;\\n    _root = tree.root();\\n  }\\n\\n  // ============ Upgrade Gap ============\\n  uint256[48] private __GAP; // gap for upgrade safety\\n}\\n\",\"keccak256\":\"0x1ec51c5252417f2bd08561703ecb457c4c5d91e5910054f3db719f104265337d\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/RootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {ProposedOwnable} from \\\"../shared/ProposedOwnable.sol\\\";\\n\\nimport {IRootManager} from \\\"./interfaces/IRootManager.sol\\\";\\nimport {IHubConnector} from \\\"./interfaces/IHubConnector.sol\\\";\\nimport {Message} from \\\"./libraries/Message.sol\\\";\\nimport {QueueLib} from \\\"./libraries/Queue.sol\\\";\\nimport {DomainIndexer} from \\\"./libraries/DomainIndexer.sol\\\";\\n\\nimport {MerkleTreeManager} from \\\"./MerkleTreeManager.sol\\\";\\nimport {WatcherClient} from \\\"./WatcherClient.sol\\\";\\n\\n/**\\n * @notice This contract exists at cluster hubs, and aggregates all transfer roots from messaging\\n * spokes into a single merkle tree. Regularly broadcasts the root of the aggregator tree back out\\n * to all the messaging spokes.\\n */\\ncontract RootManager is ProposedOwnable, IRootManager, WatcherClient, DomainIndexer {\\n  // ============ Libraries ============\\n\\n  using QueueLib for QueueLib.Queue;\\n\\n  // ============ Events ============\\n\\n  event DelayBlocksUpdated(uint256 previous, uint256 updated);\\n\\n  event RootReceived(uint32 domain, bytes32 receivedRoot, uint256 queueIndex);\\n\\n  event RootsAggregated(bytes32 aggregateRoot, uint256 count, bytes32[] aggregatedMessageRoots);\\n\\n  event RootPropagated(bytes32 aggregateRoot, uint256 count, bytes32 domainsHash);\\n\\n  event RootDiscarded(bytes32 fraudulentRoot);\\n\\n  event ConnectorAdded(uint32 domain, address connector, uint32[] domains, address[] connectors);\\n\\n  event ConnectorRemoved(uint32 domain, address connector, uint32[] domains, address[] connectors, address caller);\\n\\n  // ============ Properties ============\\n\\n  /**\\n   * @notice Maximum number of values to dequeue from the queue in one sitting (one call of `propagate`\\n   * or `dequeue`). Used to cap gas requirements.\\n   */\\n  uint128 public constant DEQUEUE_MAX = 100;\\n\\n  /**\\n   * @notice Number of blocks to delay the processing of a message to allow for watchers to verify\\n   * the validity and pause if necessary.\\n   */\\n  uint256 public delayBlocks;\\n\\n  /**\\n   * @notice Queue used for management of verification for inbound roots from spoke chains. Once\\n   * the verification period elapses, the inbound messages can be aggregated into the merkle tree\\n   * for propagation to spoke chains.\\n   * @dev Watchers should be able to watch this queue for fraudulent messages and pause this contract\\n   * if fraud is detected.\\n   */\\n  QueueLib.Queue public pendingInboundRoots;\\n\\n  /**\\n   * @notice MerkleTreeManager contract instance. Will hold the active tree of aggregated inbound roots.\\n   * The root of this tree will be distributed crosschain to all spoke domains.\\n   */\\n  MerkleTreeManager public immutable MERKLE;\\n\\n  // ============ Modifiers ============\\n\\n  modifier onlyConnector(uint32 _domain) {\\n    require(getConnectorForDomain(_domain) == msg.sender, \\\"!connector\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new RootManager instance.\\n   * @param _delayBlocks The delay for the validation period for incoming messages in blocks.\\n   * @param _merkle The address of the MerkleTreeManager on this domain.\\n   * @param _watcherManager The address of the WatcherManager on this domain.\\n   */\\n  constructor(\\n    uint256 _delayBlocks,\\n    address _merkle,\\n    address _watcherManager\\n  ) ProposedOwnable() WatcherClient(_watcherManager) {\\n    _setOwner(msg.sender);\\n\\n    require(_merkle != address(0), \\\"!zero merkle\\\");\\n    MERKLE = MerkleTreeManager(_merkle);\\n\\n    delayBlocks = _delayBlocks;\\n\\n    // Initialize pending inbound root queue.\\n    pendingInboundRoots.initialize();\\n  }\\n\\n  // ================ Getters ================\\n\\n  function getPendingInboundRootsCount() public view returns (uint256) {\\n    return pendingInboundRoots.length();\\n  }\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Set the `delayBlocks`, the period in blocks over which an incoming message\\n   * is verified.\\n   */\\n  function setDelayBlocks(uint256 _delayBlocks) public onlyOwner {\\n    require(_delayBlocks != delayBlocks, \\\"!delayBlocks\\\");\\n    emit DelayBlocksUpdated(_delayBlocks, delayBlocks);\\n    delayBlocks = _delayBlocks;\\n  }\\n\\n  /**\\n   * @notice Add a new supported domain and corresponding hub connector to the system. This new domain\\n   * will receive the propagated aggregate root.\\n   * @dev Only owner can add a new connector. Address should be the connector on L1.\\n   * @dev Cannot add address(0) to avoid duplicated domain in array and reduce gas fee while propagating.\\n   *\\n   * @param _domain The target spoke domain of the given connector.\\n   * @param _connector Address of the hub connector.\\n   */\\n  function addConnector(uint32 _domain, address _connector) external onlyOwner {\\n    addDomain(_domain, _connector);\\n    emit ConnectorAdded(_domain, _connector, domains, connectors);\\n  }\\n\\n  /**\\n   * @notice Remove support for a connector and respective domain. That connector/domain will no longer\\n   * receive updates for the latest aggregate root.\\n   * @dev Only watcher can remove a connector.\\n   * TODO: Could add a metatx-able `removeConnectorWithSig` if we want to use relayers?\\n   *\\n   * @param _domain The spoke domain of the target connector we want to remove.\\n   */\\n  function removeConnector(uint32 _domain) public onlyWatcher {\\n    address _connector = removeDomain(_domain);\\n    emit ConnectorRemoved(_domain, _connector, domains, connectors, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Removes (effectively blacklists) a given (fraudulent) root from the queue of pending\\n   * inbound roots.\\n   * @dev The given root does NOT have to currently be in the queue. It isn't removed from the queue\\n   * directly, but instead is filtered out when dequeuing is done for the sake of aggregation.\\n   * @dev Can only be called by the owner when the protocol is paused.\\n   *\\n   * @param _root The root to be discarded.\\n   */\\n  function discardRoot(bytes32 _root) public onlyOwner whenPaused {\\n    pendingInboundRoots.remove(_root);\\n    emit RootDiscarded(_root);\\n  }\\n\\n  /**\\n   * @notice Remove ability to renounce ownership\\n   * @dev Renounce ownership should be impossible as long as watchers can freely remove connectors\\n   * and only the owner can add them back\\n   */\\n  function renounceOwnership() public virtual override(ProposedOwnable, WatcherClient) onlyOwner {}\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice This is called by relayers to take the current aggregate tree root and propagate it to all\\n   * spoke domains (via their respective hub connectors).\\n   * @dev Should be called by relayers at a regular interval.\\n   *\\n   * @param _connectors Array of connectors: should match exactly the array of `connectors` in storage;\\n   * used here to reduce gas costs, and keep them static regardless of number of supported domains.\\n   * @param _fees Array of fees in native token for an AMB if required\\n   * @param _encodedData Array of encodedData: extra params for each AMB if required\\n   */\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) external payable whenNotPaused {\\n    validateConnectors(_connectors);\\n\\n    uint256 _numDomains = _connectors.length;\\n    // Sanity check: fees and encodedData lengths matches connectors length.\\n    require(_fees.length == _numDomains && _encodedData.length == _numDomains, \\\"invalid lengths\\\");\\n\\n    // Dequeue verified roots from the queue and insert into the tree.\\n    (bytes32 _aggregateRoot, uint256 _count) = dequeue();\\n\\n    uint256 sum = msg.value;\\n    for (uint32 i; i < _numDomains; ) {\\n      // NOTE: This will ensure there is sufficient msg.value for all fees before calling `sendMessage`\\n      // This will revert as soon as there are insufficient fees for call i, even if call n > i has\\n      // sufficient budget, this function will revert\\n      sum -= _fees[i];\\n\\n      // Send the message with appropriate encoded data and fees\\n      IHubConnector(_connectors[i]).sendMessage{value: _fees[i]}(abi.encodePacked(_aggregateRoot), _encodedData[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit RootPropagated(_aggregateRoot, _count, domainsHash);\\n  }\\n\\n  /**\\n   * @notice Accept an inbound root coming from a given domain's hub connector, enqueuing this incoming\\n   * root into the current queue as it awaits the verification period.\\n   * @dev The aggregate tree's root, which will include this inbound root, will be propagated to all spoke\\n   * domains (via `propagate`) on a regular basis assuming the verification period is surpassed without\\n   * dispute.\\n   *\\n   * @param _domain The source domain of the given root.\\n   * @param _inbound The inbound root coming from the given domain.\\n   */\\n  function aggregate(uint32 _domain, bytes32 _inbound) external whenNotPaused onlyConnector(_domain) {\\n    uint128 lastIndex = pendingInboundRoots.enqueue(_inbound);\\n    emit RootReceived(_domain, _inbound, lastIndex);\\n  }\\n\\n  /**\\n   * @notice Dequeue verified inbound roots and insert them into the aggregator tree.\\n   * @dev Will dequeue a fixed maximum amount of roots to prevent out of gas errors. As such, this\\n   * method is public and separate from `propagate` so we can curtail an overloaded queue as needed.\\n   * @dev Reverts if no verified inbound roots are found.\\n   *\\n   * @return bytes32 The new aggregate root.\\n   * @return uint256 The updated count (number of leaves).\\n   */\\n  function dequeue() public whenNotPaused returns (bytes32, uint256) {\\n    // Get all of the verified roots from the queue.\\n    bytes32[] memory _verifiedInboundRoots = pendingInboundRoots.dequeueVerified(delayBlocks, DEQUEUE_MAX);\\n\\n    // Sanity check: there must be some verified roots to aggregate and send: otherwise we would be\\n    // propagating a redundant aggregate root.\\n    require(_verifiedInboundRoots.length != 0, \\\"no verified roots\\\");\\n\\n    // Insert the leaves into the aggregator tree (method will also calculate and return the current\\n    // aggregate root and count).\\n    (bytes32 _aggregateRoot, uint256 _count) = MERKLE.insert(_verifiedInboundRoots);\\n\\n    emit RootsAggregated(_aggregateRoot, _count, _verifiedInboundRoots);\\n\\n    return (_aggregateRoot, _count);\\n  }\\n}\\n\",\"keccak256\":\"0x24d88330282cd641c69339972e03116dbf28b13e12c3b1b9da86232e3e7d0616\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/WatcherClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"../shared/ProposedOwnable.sol\\\";\\nimport {WatcherManager} from \\\"./WatcherManager.sol\\\";\\n\\n/**\\n * @notice This contract abstracts the functionality of the watcher manager.\\n * Contracts can inherit this contract to be able to use the watcher manager's shared watcher set.\\n */\\n\\ncontract WatcherClient is ProposedOwnable, Pausable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted when the manager address changes\\n   * @param watcherManager The updated manager\\n   */\\n  event WatcherManagerChanged(address watcherManager);\\n\\n  // ============ Properties ============\\n  /**\\n   * @notice The `WatcherManager` contract governs the watcher whitelist.\\n   * @dev Multiple clients can share a watcher set using the same manager\\n   */\\n  WatcherManager public watcherManager;\\n\\n  // ============ Constructor ============\\n  constructor(address _watcherManager) ProposedOwnable() {\\n    watcherManager = WatcherManager(_watcherManager);\\n  }\\n\\n  // ============ Modifiers ============\\n  /**\\n   * @notice Enforces the sender is the watcher\\n   */\\n  modifier onlyWatcher() {\\n    require(watcherManager.isWatcher(msg.sender), \\\"!watcher\\\");\\n    _;\\n  }\\n\\n  // ============ Admin fns ============\\n  /**\\n   * @notice Owner can enroll a watcher (abilities are defined by inheriting contracts)\\n   */\\n  function setWatcherManager(address _watcherManager) external onlyOwner {\\n    require(_watcherManager != address(watcherManager), \\\"already watcher manager\\\");\\n    watcherManager = WatcherManager(_watcherManager);\\n    emit WatcherManagerChanged(_watcherManager);\\n  }\\n\\n  /**\\n   * @notice Owner can unpause contracts if fraud is detected by watchers\\n   */\\n  function unpause() external onlyOwner whenPaused {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Remove ability to renounce ownership\\n   * @dev Renounce ownership should be impossible as long as only the owner\\n   * is able to unpause the contracts. You can still propose `address(0)`,\\n   * but it will never be accepted.\\n   */\\n  function renounceOwnership() public virtual override onlyOwner {}\\n\\n  // ============ Watcher fns ============\\n\\n  /**\\n   * @notice Watchers can pause contracts if fraud is detected\\n   */\\n  function pause() external onlyWatcher whenNotPaused {\\n    _pause();\\n  }\\n}\\n\",\"keccak256\":\"0xdb16e742043c8beaf83132232d941fb34a94bf9c98b39e42c3972bf5dd5868a5\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/WatcherManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {ProposedOwnable} from \\\"../shared/ProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This contract manages a set of watchers. This is meant to be used as a shared resource that contracts can\\n * inherit to make use of the same watcher set.\\n */\\n\\ncontract WatcherManager is ProposedOwnable {\\n  // ============ Events ============\\n  event WatcherAdded(address watcher);\\n\\n  event WatcherRemoved(address watcher);\\n\\n  // ============ Properties ============\\n  mapping(address => bool) public isWatcher;\\n\\n  // ============ Constructor ============\\n  constructor() ProposedOwnable() {\\n    _setOwner(msg.sender);\\n  }\\n\\n  // ============ Modifiers ============\\n\\n  // ============ Admin fns ============\\n  /**\\n   * @dev Owner can enroll a watcher (abilities are defined by inheriting contracts)\\n   */\\n  function addWatcher(address _watcher) external onlyOwner {\\n    require(!isWatcher[_watcher], \\\"already watcher\\\");\\n    isWatcher[_watcher] = true;\\n    emit WatcherAdded(_watcher);\\n  }\\n\\n  /**\\n   * @dev Owner can unenroll a watcher (abilities are defined by inheriting contracts)\\n   */\\n  function removeWatcher(address _watcher) external onlyOwner {\\n    require(isWatcher[_watcher], \\\"!exist\\\");\\n    isWatcher[_watcher] = false;\\n    emit WatcherRemoved(_watcher);\\n  }\\n\\n  /**\\n   * @notice Remove ability to renounce ownership\\n   * @dev Renounce ownership should be impossible as long as the watcher griefing\\n   * vector exists. You can still propose `address(0)`, but it will never be accepted.\\n   */\\n  function renounceOwnership() public virtual override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xe622064c50a8e3e43e0579e00323a68f450a770c8deeec60833d46d05c770123\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"../../shared/interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This interface is what the Connext contract will send and receive messages through.\\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\\n * could be Nomad or a generic AMB under the hood).\\n *\\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\\n *\\n * Flow from transfer from polygon to optimism:\\n * 1. User calls `xcall` with destination specified\\n * 2. This will swap in to the bridge assets\\n * 3. The swapped assets will get burned\\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\\n *    to the root\\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\\n *    mainnet. This is done on all \\\"spoke\\\" domains.\\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\\n *    root from all of the AMBs\\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\\n *      tree root\\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\\n *    process on the `Connext` contract\\n * 9. Takes minted bridge tokens and credits the LP\\n *\\n * AMB requirements:\\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\\n * - Ability to read *our root* from the AMB\\n *\\n * AMBs:\\n * - PoS bridge from polygon\\n * - arbitrum bridge\\n * - optimism bridge\\n * - gnosis chain\\n * - bsc (use multichain for messaging)\\n */\\ninterface IConnector is IProposedOwnable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted whenever a message is successfully sent over an AMB\\n   * @param data The contents of the message\\n   * @param encodedData Data used to send the message; specific to connector\\n   * @param caller Who called the function (sent the message)\\n   */\\n  event MessageSent(bytes data, bytes encodedData, address caller);\\n\\n  /**\\n   * @notice Emitted whenever a message is successfully received over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function\\n   */\\n  event MessageProcessed(bytes data, address caller);\\n\\n  // ============ Public fns ============\\n\\n  function processMessage(bytes memory _data) external;\\n\\n  function verifySender(address _expected) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfba166354b442fa72b05be07aed38400b47f68498e8dfdd94fc43df00c401ed1\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IHubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IConnector} from \\\"./IConnector.sol\\\";\\n\\ninterface IHubConnector is IConnector {\\n  function sendMessage(bytes memory _data, bytes memory _encodedData) external payable;\\n}\\n\",\"keccak256\":\"0x9c3b0b9f1ab326d6283e404818b8c2c55c4fc1ee9919830a1d04ebc3f4a022cd\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IRootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\ninterface IRootManager {\\n  /**\\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to\\n   * spoke domains.\\n   * @dev This must read information for the root from the registered AMBs.\\n   */\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) external payable;\\n\\n  /**\\n   * @notice Called by the connectors for various domains on the hub to aggregate their latest\\n   * inbound root.\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function aggregate(uint32 _domain, bytes32 _outbound) external;\\n}\\n\",\"keccak256\":\"0xa895dfaa4baad37a636e7e7e7da72a0a4badfd2d3d8256f975e5101cd5a98236\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/DomainIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice This abstract contract was written to ensure domain and connector mutex is scalable for the\\n * purposes of messaging layer operations. In particular, it aims to reduce gas costs to be relatively\\n * static regardless of the number of domains kept in storage by enabling callers of `RootManager.propagate`\\n * to supply the `domains` and `connectors` arrays as params, and check the hashes of those params against\\n * those we keep in storage.\\n */\\nabstract contract DomainIndexer {\\n  // ============ Properties ============\\n\\n  /**\\n   * @notice The absolute maximum number of domains that we should support. Domain and connector arrays\\n   * are naturally unbounded, but the gas cost of reading these arrays in `updateHashes()` is bounded by\\n   * the block's gas limit.\\n   *\\n   * If we want to set a hard ceiling for gas costs for the `updateHashes()` method at approx. 2M gas,\\n   * with an average SLOAD cost of 900 gas per domain (1 uint32, 1 address):\\n   *       2M / 900 = ~2222 domains\\n   *\\n   * Realistically, the cap on the number of domains will likely exist in other places, but we cap it\\n   * here as a last resort.\\n   */\\n  uint256 public constant MAX_DOMAINS = 2000;\\n\\n  /**\\n   * @notice Domains array tracks currently subscribed domains to this hub aggregator.\\n   * We should distribute the aggregate root to all of these domains in the `propagate` method.\\n   * @dev Whenever this domains array is updated, the connectors array should also be updated.\\n   */\\n  uint32[] public domains;\\n\\n  /**\\n   * @notice A \\\"quick reference\\\" hash used in the `propagate` method below to validate that the provided\\n   * array of domains matches the one we have in storage.\\n   * @dev This hash should be re-calculated whenever the domains array is updated.\\n   */\\n  bytes32 public domainsHash;\\n\\n  /**\\n   * @notice Tracks the addresses of the hub connector contracts corresponding to subscribed spoke domains.\\n   * The index of any given connector in this array should match the index of that connector's target spoke\\n   * domain in the `domains` array above.\\n   * @dev This should be updated whenever the domains array is updated.\\n   */\\n  address[] public connectors;\\n\\n  /**\\n   * @notice A \\\"quick reference\\\" hash used in the `propagate` method below to validate that the provided\\n   * array of connectors matches the one we have in storage.\\n   * @dev This hash should be re-calculated whenever the connectors array is updated.\\n   */\\n  bytes32 public connectorsHash;\\n\\n  /**\\n   * @notice Shortcut to reverse lookup the index by domain. We index starting at one so the zero value can\\n   * be considered invalid (see fn: `isDomainSupported`).\\n   * @dev This should be updated whenever the domains array is updated.\\n   */\\n  mapping(uint32 => uint256) private domainToIndexPlusOne;\\n\\n  // ============ Getters ============\\n\\n  /**\\n   * @notice Convenience shortcut for supported domains. Used to sanity check adding new domains.\\n   * @param _domain Domain to check.\\n   */\\n  function isDomainSupported(uint32 _domain) public view returns (bool) {\\n    return domainToIndexPlusOne[_domain] != 0;\\n  }\\n\\n  /**\\n   * @notice Gets the index of a given domain in the domains and connectors arrays.\\n   * @dev Reverts if domain is not supported.\\n   * @param _domain The domain for which to get the index value.\\n   */\\n  function getDomainIndex(uint32 _domain) public view returns (uint256) {\\n    uint256 index = domainToIndexPlusOne[_domain];\\n    require(index != 0, \\\"!supported\\\");\\n    return index - 1;\\n  }\\n\\n  /**\\n   * @notice Gets the corresponding hub connector address for a given spoke domain.\\n   * @dev Inefficient, should only be used by caller if they have no index reference.\\n   * @param _domain The domain for which to get the hub connector address.\\n   */\\n  function getConnectorForDomain(uint32 _domain) public view returns (address) {\\n    return connectors[getDomainIndex(_domain)];\\n  }\\n\\n  /**\\n   * @notice Validate given domains and connectors arrays are correct (i.e. they mirror what is\\n   * currently saved in storage).\\n   * @dev Reverts if domains or connectors do not match, including ordering.\\n   * @param _domains The given domains array to check.\\n   * @param _connectors The given connectors array to check.\\n   */\\n  function validateDomains(uint32[] calldata _domains, address[] calldata _connectors) public view {\\n    // Validate that given domains match the current array in storage.\\n    require(keccak256(abi.encode(_domains)) == domainsHash, \\\"!domains\\\");\\n    // Validate that given connectors match the current array in storage.\\n    require(keccak256(abi.encode(_connectors)) == connectorsHash, \\\"!connectors\\\");\\n  }\\n\\n  /**\\n   * @notice Validate given connectors array is correct (i.e. it mirrors what is\\n   * currently saved in storage).\\n   * @dev Reverts if domains or connectors do not match, including ordering.\\n   * @param _connectors The given connectors array to check.\\n   */\\n  function validateConnectors(address[] calldata _connectors) public view {\\n    // Validate that given connectors match the current array in storage.\\n    require(keccak256(abi.encode(_connectors)) == connectorsHash, \\\"!connectors\\\");\\n  }\\n\\n  // ============ Helper Functions ============\\n\\n  /**\\n   * @notice Handles all mutex for adding support for a given domain.\\n   * @param _domain Domain for which we are adding support.\\n   * @param _connector Corresponding hub connector address belonging to given domain.\\n   */\\n  function addDomain(uint32 _domain, address _connector) internal {\\n    // Sanity check: domain does not already exist.\\n    require(!isDomainSupported(_domain), \\\"exists\\\");\\n    // Sanity check: connector is reasonable.\\n    require(_connector != address(0), \\\"!connector\\\");\\n    // Sanity check: Under maximum.\\n    require(domains.length < MAX_DOMAINS, \\\"DomainIndexer at capacity\\\");\\n\\n    // Push domain and connector to respective arrays.\\n    domains.push(_domain);\\n    connectors.push(_connector);\\n    // Set reverse lookup.\\n    uint256 _indexPlusOne = domains.length;\\n    domainToIndexPlusOne[_domain] = _indexPlusOne;\\n\\n    // Update the hashes for the given arrays.\\n    updateHashes();\\n  }\\n\\n  /**\\n   * @notice Handles all mutex for removing support for a given domain.\\n   * @param _domain Domain we are removing.\\n   * @return address of the hub connector for the domain we removed.\\n   */\\n  function removeDomain(uint32 _domain) internal returns (address) {\\n    uint256 _index = getDomainIndex(_domain);\\n    // Get the connector at the given index.\\n    address _connector = connectors[_index];\\n    // Sanity check: connector exists.\\n    require(_connector != address(0), \\\"connector !exists\\\");\\n\\n    // Shortcut: is the index the last index in the domains/connectors arrays?\\n    // IFF not, we'll need to swap the target with the current last so we can pop().\\n    uint256 _lastIndex = domains.length - 1;\\n    if (_index < _lastIndex) {\\n      // If the target index for removal is not the last index, we'll need to move the last index\\n      // item to the target index's place so we can conveniently pop the last item.\\n      // Replace domain in domains array with the domain in the final index.\\n      domains[_index] = domains[_lastIndex];\\n      connectors[_index] = connectors[_lastIndex];\\n    }\\n\\n    // Pop the last item in the arrays.\\n    domains.pop();\\n    connectors.pop();\\n    // Erase reverse lookup.\\n    delete domainToIndexPlusOne[_domain];\\n\\n    // Update the hashes for the given arrays.\\n    updateHashes();\\n\\n    return _connector;\\n  }\\n\\n  /**\\n   * @notice Calculate the new hashes for the domains and connectors arrays and update storage refs.\\n   * @dev Used for the Connector update functions `addConnector`, `removeConnector`.\\n   */\\n  function updateHashes() internal {\\n    uint32[] memory _domains = domains;\\n    address[] memory _connectors = connectors;\\n    domainsHash = keccak256(abi.encode(_domains));\\n    connectorsHash = keccak256(abi.encode(_connectors));\\n  }\\n}\\n\",\"keccak256\":\"0xd946a8f6d2be1eb6aed6a2ee40686e59ad913dc3a1f4b3505f144092736a2088\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/MerkleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title MerkleLib\\n * @author Illusory Systems Inc.\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\n **/\\nlibrary MerkleLib {\\n  // ========== Custom Errors ===========\\n\\n  error MerkleLib__insert_treeIsFull();\\n\\n  // ============ Constants =============\\n\\n  uint256 internal constant TREE_DEPTH = 32;\\n  uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\n\\n  /**\\n   * @notice Struct representing incremental merkle tree. Contains current\\n   * branch and the number of inserted leaves in the tree.\\n   **/\\n  struct Tree {\\n    bytes32[TREE_DEPTH] branch;\\n    uint256 count;\\n  }\\n\\n  // ========= In-Memory Methods =========\\n\\n  /**\\n   * @notice Inserts a given node (leaf) into merkle tree. Operates on an in-memory tree and\\n   * returns an updated version of that tree.\\n   * @dev Reverts if the tree is already full.\\n   * @param node Element to insert into tree.\\n   * @return Tree Updated tree.\\n   **/\\n  // function insert(Tree memory tree, bytes32 node) internal pure returns (Tree memory) {\\n  //   uint256 size = tree.count + 1; // Add 1 since we'll be including a new node.\\n  //   if (size >= MAX_LEAVES) revert MerkleLib__insert_treeIsFull();\\n\\n  //   // Update tree.count to increase the current count by 1.\\n  //   tree.count = size;\\n\\n  //   // Loop starting at 0, ending when we've finished inserting the node (i.e. hashing it) into\\n  //   // the active branch. Each loop we cut size in half, hashing the inserted node up the active\\n  //   // branch along the way.\\n  //   for (uint256 i; i < TREE_DEPTH; ) {\\n  //     // Check if the current size is odd; if so, we set this index in the branch to be the node.\\n  //     if ((size & 1) == 1) {\\n  //       // If i > 0, then this node will be a hash of the original node with every layer up\\n  //       // until layer `i`.\\n  //       tree.branch[i] = node;\\n  //       return tree;\\n  //     }\\n  //     // If the size is not yet odd, we hash the current index in the tree branch with the node.\\n  //     node = keccak256(abi.encodePacked(tree.branch[i], node));\\n  //     size /= 2;\\n\\n  //     unchecked {\\n  //       ++i;\\n  //     }\\n  //   }\\n  //   // As the loop should always end prematurely with the `return` statement, this code should\\n  //   // be unreachable. We revert here just to be safe.\\n  //   revert MerkleLib__insert_treeIsFull();\\n  // }\\n\\n  // ========= Storage Methods =========\\n\\n  /**\\n   * @notice Inserts a given node (leaf) into merkle tree.\\n   * @dev Reverts if the tree is already full.\\n   * @param node Element to insert into tree.\\n   * @return uint256 Updated count (number of nodes in the tree).\\n   **/\\n  function insert(Tree storage tree, bytes32 node) internal returns (uint256) {\\n    uint256 size = tree.count + 1; // Add 1 since we'll be including a new node.\\n    if (size >= MAX_LEAVES) revert MerkleLib__insert_treeIsFull();\\n\\n    // Update tree.count to increase the current count by 1.\\n    tree.count = size;\\n\\n    // Loop starting at 0, ending when we've finished inserting the node (i.e. hashing it) into\\n    // the active branch. Each loop we cut size in half, hashing the inserted node up the active\\n    // branch along the way.\\n    for (uint256 i; i < TREE_DEPTH; ) {\\n      // Check if the current size is odd; if so, we set this index in the branch to be the node.\\n      if ((size & 1) == 1) {\\n        // If i > 0, then this node will be a hash of the original node with every layer up\\n        // until layer `i`.\\n        tree.branch[i] = node;\\n        return size;\\n      }\\n      // If the size is not yet odd, we hash the current index in the tree branch with the node.\\n      node = keccak256(abi.encodePacked(tree.branch[i], node));\\n      size /= 2;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    // As the loop should always end prematurely with the `return` statement, this code should\\n    // be unreachable. We revert here just to be safe.\\n    revert MerkleLib__insert_treeIsFull();\\n  }\\n\\n  /**\\n   * @notice Calculates and returns tree's current root.\\n   * @return bytes32 root.\\n   **/\\n  function root(Tree storage tree) internal view returns (bytes32) {\\n    return rootWithCtx(tree, zeroHashes());\\n  }\\n\\n  // ========= Helper Methods =========\\n\\n  /**\\n   * @notice Calculates and returns tree's current root given array of zero hashes.\\n   * @param _zeroes Array of zero hashes.\\n   * @return _current Calculated root of tree.\\n   **/\\n  function rootWithCtx(Tree storage tree, bytes32[TREE_DEPTH] memory _zeroes) internal view returns (bytes32 _current) {\\n    uint256 _index = tree.count;\\n\\n    // TODO: Optimization: skip the first N loops where the ith bits are all 0 - start at that\\n    // depth with zero hashes.\\n    for (uint256 i; i < TREE_DEPTH; ) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(tree.branch[i], _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the merkle root for the given leaf `_item`,\\n   * a merkle branch, and the index of `_item` in the tree.\\n   * @param _item Merkle leaf\\n   * @param _branch Merkle proof\\n   * @param _index Index of `_item` in tree\\n   * @return _current Calculated merkle root\\n   **/\\n  function branchRoot(\\n    bytes32 _item,\\n    bytes32[TREE_DEPTH] memory _branch,\\n    uint256 _index\\n  ) internal pure returns (bytes32 _current) {\\n    _current = _item;\\n\\n    for (uint256 i; i < TREE_DEPTH; ) {\\n      uint256 _ithBit = (_index >> i) & 0x01;\\n      bytes32 _next = _branch[i];\\n      if (_ithBit == 1) {\\n        _current = keccak256(abi.encodePacked(_next, _current));\\n      } else {\\n        _current = keccak256(abi.encodePacked(_current, _next));\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /// @notice Returns array of TREE_DEPTH zero hashes\\n  /// @return _zeroes Array of TREE_DEPTH zero hashes\\n  function zeroHashes() internal pure returns (bytes32[TREE_DEPTH] memory _zeroes) {\\n    _zeroes[0] = Z_0;\\n    _zeroes[1] = Z_1;\\n    _zeroes[2] = Z_2;\\n    _zeroes[3] = Z_3;\\n    _zeroes[4] = Z_4;\\n    _zeroes[5] = Z_5;\\n    _zeroes[6] = Z_6;\\n    _zeroes[7] = Z_7;\\n    _zeroes[8] = Z_8;\\n    _zeroes[9] = Z_9;\\n    _zeroes[10] = Z_10;\\n    _zeroes[11] = Z_11;\\n    _zeroes[12] = Z_12;\\n    _zeroes[13] = Z_13;\\n    _zeroes[14] = Z_14;\\n    _zeroes[15] = Z_15;\\n    _zeroes[16] = Z_16;\\n    _zeroes[17] = Z_17;\\n    _zeroes[18] = Z_18;\\n    _zeroes[19] = Z_19;\\n    _zeroes[20] = Z_20;\\n    _zeroes[21] = Z_21;\\n    _zeroes[22] = Z_22;\\n    _zeroes[23] = Z_23;\\n    _zeroes[24] = Z_24;\\n    _zeroes[25] = Z_25;\\n    _zeroes[26] = Z_26;\\n    _zeroes[27] = Z_27;\\n    _zeroes[28] = Z_28;\\n    _zeroes[29] = Z_29;\\n    _zeroes[30] = Z_30;\\n    _zeroes[31] = Z_31;\\n  }\\n\\n  // keccak256 zero hashes\\n  bytes32 internal constant Z_0 = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n  bytes32 internal constant Z_1 = hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\n  bytes32 internal constant Z_2 = hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\n  bytes32 internal constant Z_3 = hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\n  bytes32 internal constant Z_4 = hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\n  bytes32 internal constant Z_5 = hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\n  bytes32 internal constant Z_6 = hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\n  bytes32 internal constant Z_7 = hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\n  bytes32 internal constant Z_8 = hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\n  bytes32 internal constant Z_9 = hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\n  bytes32 internal constant Z_10 = hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\n  bytes32 internal constant Z_11 = hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\n  bytes32 internal constant Z_12 = hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\n  bytes32 internal constant Z_13 = hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\n  bytes32 internal constant Z_14 = hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\n  bytes32 internal constant Z_15 = hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\n  bytes32 internal constant Z_16 = hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\n  bytes32 internal constant Z_17 = hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\n  bytes32 internal constant Z_18 = hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\n  bytes32 internal constant Z_19 = hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\n  bytes32 internal constant Z_20 = hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\n  bytes32 internal constant Z_21 = hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\n  bytes32 internal constant Z_22 = hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\n  bytes32 internal constant Z_23 = hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\n  bytes32 internal constant Z_24 = hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\n  bytes32 internal constant Z_25 = hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\n  bytes32 internal constant Z_26 = hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\n  bytes32 internal constant Z_27 = hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\n  bytes32 internal constant Z_28 = hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\n  bytes32 internal constant Z_29 = hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\n  bytes32 internal constant Z_30 = hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\n  bytes32 internal constant Z_31 = hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\n}\\n\",\"keccak256\":\"0x27c9c1a187f9069d9f46131f126ee587862c396c35b72b2620cf6face756d017\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport \\\"../../shared/libraries/TypedMemView.sol\\\";\\n\\nimport {TypeCasts} from \\\"../../shared/libraries/TypeCasts.sol\\\";\\n\\n/**\\n * @title Message Library\\n * @author Illusory Systems Inc.\\n * @notice Library for formatted messages used by Home and Replica.\\n **/\\nlibrary Message {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // Number of bytes in formatted message before `body` field\\n  uint256 internal constant PREFIX_LENGTH = 76;\\n\\n  /**\\n   * @notice Returns formatted (packed) message with provided fields\\n   * @param _originDomain Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes of message body\\n   * @return Formatted message\\n   **/\\n  function formatMessage(\\n    uint32 _originDomain,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destinationDomain,\\n    bytes32 _recipient,\\n    bytes memory _messageBody\\n  ) internal pure returns (bytes memory) {\\n    return abi.encodePacked(_originDomain, _sender, _nonce, _destinationDomain, _recipient, _messageBody);\\n  }\\n\\n  /**\\n   * @notice Returns leaf of formatted message with provided fields.\\n   * @param _origin Domain of home chain\\n   * @param _sender Address of sender as bytes32\\n   * @param _nonce Destination-specific nonce number\\n   * @param _destination Domain of destination chain\\n   * @param _recipient Address of recipient on destination chain as bytes32\\n   * @param _body Raw bytes of message body\\n   * @return Leaf (hash) of formatted message\\n   **/\\n  function messageHash(\\n    uint32 _origin,\\n    bytes32 _sender,\\n    uint32 _nonce,\\n    uint32 _destination,\\n    bytes32 _recipient,\\n    bytes memory _body\\n  ) internal pure returns (bytes32) {\\n    return keccak256(formatMessage(_origin, _sender, _nonce, _destination, _recipient, _body));\\n  }\\n\\n  /// @notice Returns message's origin field\\n  function origin(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(0, 4));\\n  }\\n\\n  /// @notice Returns message's sender field\\n  function sender(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(4, 32);\\n  }\\n\\n  /// @notice Returns message's nonce field\\n  function nonce(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(36, 4));\\n  }\\n\\n  /// @notice Returns message's destination field\\n  function destination(bytes29 _message) internal pure returns (uint32) {\\n    return uint32(_message.indexUint(40, 4));\\n  }\\n\\n  /// @notice Returns message's recipient field as bytes32\\n  function recipient(bytes29 _message) internal pure returns (bytes32) {\\n    return _message.index(44, 32);\\n  }\\n\\n  /// @notice Returns message's recipient field as an address\\n  function recipientAddress(bytes29 _message) internal pure returns (address) {\\n    return TypeCasts.bytes32ToAddress(recipient(_message));\\n  }\\n\\n  /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\\n  function body(bytes29 _message) internal pure returns (bytes29) {\\n    return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);\\n  }\\n\\n  function leaf(bytes29 _message) internal view returns (bytes32) {\\n    return\\n      messageHash(\\n        origin(_message),\\n        sender(_message),\\n        nonce(_message),\\n        destination(_message),\\n        recipient(_message),\\n        TypedMemView.clone(body(_message))\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0xe25199cc0bf7b348c8bf2990667da2b71d1ef1aafdf780e6e46e063d19b3b81a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title QueueLib\\n * @notice Library containing queue struct and operations for queue used by RootManager and SpokeConnector\\n * for handling the verification period. Tracks both message data itself and the block that the message was\\n * committed to the queue.\\n **/\\nlibrary QueueLib {\\n  /**\\n   * @notice Queue struct\\n   * @dev Internally keeps track of the `first` and `last` elements through\\n   * indices and a mapping of indices to enqueued elements.\\n   **/\\n  struct Queue {\\n    uint128 first;\\n    uint128 last;\\n    // Message data (roots) that have been received.\\n    mapping(uint256 => bytes32) data;\\n    // The block that the message data was committed.\\n    mapping(uint256 => uint256) commitBlock;\\n    // A reverse mapping of all entries that have been \\\"removed\\\" by value; behaves like a blacklist.\\n    // NOTE: Removed values can still be pushed to the queue, but will be ignored/skipped when dequeuing.\\n    mapping(bytes32 => bool) removed;\\n  }\\n\\n  /**\\n   * @notice Initializes the queue\\n   * @dev Empty state denoted by queue.first > queue.last. Queue initialized with\\n   * queue.first = 1 and queue.last = 0.\\n   **/\\n  function initialize(Queue storage queue) internal {\\n    queue.first = 1;\\n    queue.last = 0;\\n  }\\n\\n  /**\\n   * @notice Enqueues a single new element and records block number that the item was enqueued\\n   * (i.e. current block).\\n   * @param item New element to be enqueued.\\n   * @return last Index of newly enqueued element.\\n   **/\\n  function enqueue(Queue storage queue, bytes32 item) internal returns (uint128 last) {\\n    // Commit block is the block we are committing this item to the queue.\\n    uint256 commitBlock = block.number;\\n    // Increment `last` position.\\n    last = ++queue.last;\\n    // Add the item and record block number.\\n    queue.data[last] = item;\\n    queue.commitBlock[last] = commitBlock;\\n  }\\n\\n  /**\\n   * @notice Dequeues element at front of queue if it exists AND it's surpassed the given\\n   * verification period (i.e. has been sitting in the queue for enough blocks).\\n   * @param queue QueueStorage struct from contract.\\n   * @param delay The required delay that must have been surpassed in order to merit dequeuing\\n   * the element.\\n   * @param max The maximum number of elements we are allowed to dequeue in this call.\\n   * @return item Dequeued element IFF delay period has been surpassed; otherwise, empty bytes32.\\n   **/\\n  function dequeueVerified(\\n    Queue storage queue,\\n    uint256 delay,\\n    uint128 max\\n  ) internal returns (bytes32[] memory) {\\n    uint128 first = queue.first;\\n    uint128 last = queue.last;\\n    require(last >= first, \\\"queue empty\\\");\\n    require(first != 0, \\\"queue !init'd\\\");\\n    require(max > 0, \\\"!acceptable max\\\");\\n\\n    {\\n      // If we would otherwise be searching beyond the maximum amount we are allowed to dequeue in this\\n      // call, reduce `last` to artificially shrink the available queue within the scope of this method.\\n      uint128 highestAllowed = first + max - 1;\\n      if (last > highestAllowed) {\\n        last = highestAllowed;\\n      }\\n    }\\n\\n    // Commit block must be below this block to be considered verified.\\n    // NOTE: It's assumed that block number is a higher value than delay (i.e. delay is reasonable).\\n    uint256 highestAcceptableCommitBlock = block.number - delay;\\n\\n    // To determine the last item index in the queue we want to return, iterate backwards until we\\n    // find a `commitBlock` that has surpassed the delay period.\\n    // TODO: The most efficient way to determine the split index here should be using a binary search.\\n    bool containsVerified;\\n    // NOTE: `first <= last` rephrased here to `!(first > last)` as it's a cheaper condition.\\n    while (!(first > last)) {\\n      uint256 commitBlock = queue.commitBlock[last];\\n      // NOTE: Same as `commitBlock <= highestAcceptableCommitBlock`.\\n      if (!(commitBlock > highestAcceptableCommitBlock)) {\\n        containsVerified = true;\\n        break;\\n      }\\n      unchecked {\\n        --last;\\n      }\\n    }\\n    // IFF no verified items were found, then we can return an empty array.\\n    if (!containsVerified) {\\n      return new bytes32[](0);\\n    }\\n\\n    bytes32[] memory items = new bytes32[](last + 1 - first);\\n    uint256 index; // Cursor for index in the batch of `items`.\\n    uint256 removedCount; // If any items have been removed, we filter them here.\\n    // NOTE: `first <= last` rephrased here to `!(first > last)` as it's a cheaper condition.\\n    while (!(first > last)) {\\n      bytes32 item = queue.data[first];\\n      // Check to see if the item has been removed before appending it to the array.\\n      if (!queue.removed[item]) {\\n        items[index] = item;\\n        unchecked {\\n          ++index;\\n        }\\n      } else {\\n        // The item was removed. We do NOT increment the index (we will re-use this position).\\n        unchecked {\\n          ++removedCount;\\n        }\\n      }\\n\\n      // Delete the item and the commitBlock.\\n      // NOTE: We do NOT delete the entry from `queue.removed`, as it's a reverse lookup and we want to\\n      // block that value permanently (e.g. if there's multiple of the same bad value in the queue).\\n      delete queue.data[first];\\n      delete queue.commitBlock[first];\\n\\n      unchecked {\\n        ++first;\\n      }\\n    }\\n\\n    // Update the value for `first` in our queue object since we've dequeued a number of elements.\\n    queue.first = first;\\n\\n    if (removedCount == 0) {\\n      return items;\\n    } else {\\n      // If some items were removed, there will be a number of trailing 0 values we need to truncate\\n      // from the array. Create a new array with all of the items up until these empty values.\\n      bytes32[] memory amendedItems = new bytes32[](index); // The last `index` is the new length.\\n      for (uint256 i; i < index; ) {\\n        amendedItems[i] = items[i];\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n      return amendedItems;\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets a certain value to be ignored (skipped) when dequeuing.\\n   */\\n  function remove(Queue storage queue, bytes32 item) internal {\\n    require(!queue.removed[item], \\\"already removed\\\");\\n    queue.removed[item] = true;\\n  }\\n\\n  /**\\n   * @notice Check whether the queue is empty.\\n   * @param queue QueueStorage struct from contract.\\n   * @return bool True if queue is empty and false if otherwise.\\n   */\\n  function isEmpty(Queue storage queue) internal view returns (bool) {\\n    return queue.last < queue.first;\\n  }\\n\\n  /**\\n   * @notice Returns number of elements in queue.\\n   * @param queue QueueStorage struct from contract.\\n   */\\n  function length(Queue storage queue) internal view returns (uint256) {\\n    uint128 last = queue.last;\\n    uint128 first = queue.first;\\n    // Cannot underflow unless state is corrupted.\\n    return _length(last, first);\\n  }\\n\\n  /**\\n   * @notice Returns number of elements between `last` and `first` (used internally).\\n   * @param last The last element index.\\n   * @param first The first element index.\\n   */\\n  function _length(uint128 last, uint128 first) internal pure returns (uint256) {\\n    return uint256(last + 1 - first);\\n  }\\n}\\n\",\"keccak256\":\"0xded752d2e9b3eb5cc915ecebc9e960041b9902b65d7aa59c7f44b0e0942f6cc4\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_delayNotElapsed();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n  error ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__renounceOwnership_delayNotElapsed();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    _proposedOwnershipTimestamp = 0;\\n    _proposed = address(0);\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\",\"keccak256\":\"0x0d037478c106eb6a609894104404ff65c747a5979150413b88dd630612de6e80\",\"license\":\"UNLICENSED\"},\"contracts/shared/ProposedOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\nimport {ProposedOwnable} from \\\"./ProposedOwnable.sol\\\";\\n\\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[47] private __GAP;\\n}\\n\",\"keccak256\":\"0x3de4d13b28e787211c289b04afc54af2461fb4b5d0ed3b39661d620e99ff2980\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0x4ec1aa589d37d0c1eac9966e26d2d3540d1661b81763e678f14d2c6fa0682323\",\"license\":\"MIT\"},\"contracts/shared/libraries/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  function coerceBytes32(string memory _s) internal pure returns (bytes32 _b) {\\n    _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n  }\\n\\n  // treat it as a null-terminated string of max 32 bytes\\n  function coerceString(bytes32 _buf) internal pure returns (string memory _newStr) {\\n    uint8 _slen = 0;\\n    while (_slen < 32 && _buf[_slen] != 0) {\\n      _slen++;\\n    }\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      _newStr := mload(0x40)\\n      mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n      mstore(_newStr, _slen)\\n      mstore(add(_newStr, 0x20), _buf)\\n    }\\n  }\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0xfbd5240880b3cd02a152a918d25ab619eef20dc36d2c91a7e7750c88f9a0109b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint256 constant TWENTY_SEVEN_BYTES = 8 * 27;\\n\\n  /**\\n   * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n   * @param _b    The byte\\n   * @return      char - The encoded hex character\\n   */\\n  function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n    // This can probably be done more efficiently, but it's only in error\\n    // paths, so we don't really care :)\\n    uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n    if (_nibble == 0xf0) {\\n      return 0x30;\\n    } // 0\\n    if (_nibble == 0xf1) {\\n      return 0x31;\\n    } // 1\\n    if (_nibble == 0xf2) {\\n      return 0x32;\\n    } // 2\\n    if (_nibble == 0xf3) {\\n      return 0x33;\\n    } // 3\\n    if (_nibble == 0xf4) {\\n      return 0x34;\\n    } // 4\\n    if (_nibble == 0xf5) {\\n      return 0x35;\\n    } // 5\\n    if (_nibble == 0xf6) {\\n      return 0x36;\\n    } // 6\\n    if (_nibble == 0xf7) {\\n      return 0x37;\\n    } // 7\\n    if (_nibble == 0xf8) {\\n      return 0x38;\\n    } // 8\\n    if (_nibble == 0xf9) {\\n      return 0x39;\\n    } // 9\\n    if (_nibble == 0xfa) {\\n      return 0x61;\\n    } // a\\n    if (_nibble == 0xfb) {\\n      return 0x62;\\n    } // b\\n    if (_nibble == 0xfc) {\\n      return 0x63;\\n    } // c\\n    if (_nibble == 0xfd) {\\n      return 0x64;\\n    } // d\\n    if (_nibble == 0xfe) {\\n      return 0x65;\\n    } // e\\n    if (_nibble == 0xff) {\\n      return 0x66;\\n    } // f\\n  }\\n\\n  /**\\n   * @notice      Returns a uint16 containing the hex-encoded byte.\\n   * @param _b    The byte\\n   * @return      encoded - The hex-encoded byte\\n   */\\n  function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n    encoded |= nibbleHex(_b >> 4); // top 4 bits\\n    encoded <<= 8;\\n    encoded |= nibbleHex(_b); // lower 4 bits\\n  }\\n\\n  /**\\n   * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n   *              `second` contains the encoded lower 16 bytes.\\n   *\\n   * @param _b    The 32 bytes as uint256\\n   * @return      first - The top 16 bytes\\n   * @return      second - The bottom 16 bytes\\n   */\\n  function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n    for (uint256 i = 31; i > 15; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      first |= byteHex(_byte);\\n      if (i != 16) {\\n        first <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n\\n    // abusing underflow here =_=\\n    for (uint256 i = 15; i < 255; ) {\\n      uint8 _byte = uint8(_b >> (i * 8));\\n      second |= byteHex(_byte);\\n      if (i != 0) {\\n        second <<= 16;\\n      }\\n      unchecked {\\n        i -= 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a valid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is valid\\n   */\\n  function isValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return false;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := not(gt(_end, mload(0x40)))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    require(isValid(memView), \\\"Validity assertion failed\\\");\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n      (, uint256 e) = encodeHex(uint256(_expected));\\n      string memory err = string(\\n        abi.encodePacked(\\\"Type assertion failed. Got 0x\\\", uint80(g), \\\". Expected 0x\\\", uint80(e))\\n      );\\n      revert(err);\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(newView, shr(40, shl(40, memView)))\\n      newView := or(newView, shl(216, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      newView := shl(96, or(newView, _type)) // insert type\\n      newView := shl(96, or(newView, _loc)) // insert loc\\n      newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(216, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the 5-byte type flag is equal\\n   */\\n  function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (left ^ right) >> TWENTY_SEVEN_BYTES == 0;\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Construct an error message for an indexing overrun.\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @param _index    The index\\n   * @param _slice    The slice where the overrun occurred\\n   * @return          err - The err\\n   */\\n  function indexErrOverrun(\\n    uint256 _loc,\\n    uint256 _len,\\n    uint256 _index,\\n    uint256 _slice\\n  ) internal pure returns (string memory err) {\\n    (, uint256 a) = encodeHex(_loc);\\n    (, uint256 b) = encodeHex(_len);\\n    (, uint256 c) = encodeHex(_index);\\n    (, uint256 d) = encodeHex(_slice);\\n    err = string(\\n      abi.encodePacked(\\n        \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n        uint48(a),\\n        \\\" with length 0x\\\",\\n        uint48(b),\\n        \\\". Attempted to index at offset 0x\\\",\\n        uint48(c),\\n        \\\" with length 0x\\\",\\n        uint48(d),\\n        \\\".\\\"\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n    }\\n    require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n    require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    bool res;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      res := staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len)\\n    }\\n    require(res, \\\"identity OOG\\\");\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    for (uint256 i = 0; i < memViews.length; i++) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x8c432d71f0fbfb0d84c898800410140c1bf738636d3e72c40a0c63f439894cc4\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620029073803806200290783398101604081905262000034916200015d565b600380546001600160a81b0319166101006001600160a01b038416021790556200005e33620000db565b6001600160a01b038216620000a85760405162461bcd60e51b815260206004820152600c60248201526b217a65726f206d65726b6c6560a01b604482015260640160405180910390fd5b6001600160a01b0382166080526009839055620000d2600a6200013a602090811b6200127f17901c565b5050506200019e565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60019055565b80516001600160a01b03811681146200015857600080fd5b919050565b6000806000606084860312156200017357600080fd5b83519250620001856020850162000140565b9150620001956040850162000140565b90509250925092565b608051612746620001c16000396000818161050b0152610d7801526127466000f3fe6080604052600436106102045760003560e01c80638456cb5911610118578063b1f8100d116100a0578063d1851c921161006f578063d1851c9214610600578063d232c2201461061e578063d2a3cc711461063d578063db0f01691461065d578063e6f1208d1461067d57600080fd5b8063b1f8100d14610595578063b904670f146105b5578063c5b350df146105d5578063c8ef89de146105ea57600080fd5b8063957908d1116100e7578063957908d1146104cf578063a01892a5146104f9578063a792c29b1461052d578063aa0d60a314610552578063ad9c0c2e1461057f57600080fd5b80638456cb59146104675780638da5cb5b1461047c5780638e7d93fa1461049a578063909907cb146104ba57600080fd5b8063412e12db1161019b5780636a42b8f81161016a5780636a42b8f8146103bb578063715018a6146103d15780637bc24d99146103e65780637d434e91146103fc5780637d5343081461041c57600080fd5b8063412e12db14610345578063498c2c2e146103585780635c975abb1461036e57806366cf8fab1461038657600080fd5b806327186c6a116101d757806327186c6a146102cd5780633c4baaf8146102ed5780633cf52ffb1461031b5780633f4ba83a1461033057600080fd5b80630f8ef4ee1461020957806313ede1a11461022b5780631eeaabea1461026857806324ec5d0514610288575b600080fd5b34801561021557600080fd5b50610229610224366004611e19565b61069d565b005b34801561023757600080fd5b5061024b610246366004611e19565b610712565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027457600080fd5b50610229610283366004611e19565b61073c565b34801561029457600080fd5b506102bd6102a3366004611e4b565b63ffffffff16600090815260086020526040902054151590565b604051901515815260200161025f565b3480156102d957600080fd5b506102296102e8366004611eb2565b6107ee565b3480156102f957600080fd5b5061030d610308366004611e4b565b610859565b60405190815260200161025f565b34801561032757600080fd5b5060025461030d565b34801561033c57600080fd5b506102296108bd565b610229610353366004611f3b565b6108fa565b34801561036457600080fd5b5061030d60075481565b34801561037a57600080fd5b5060035460ff166102bd565b34801561039257600080fd5b506103a66103a1366004611e19565b610aed565b60405163ffffffff909116815260200161025f565b3480156103c757600080fd5b5062093a8061030d565b3480156103dd57600080fd5b50610229610b27565b3480156103f257600080fd5b5061030d60055481565b34801561040857600080fd5b5061024b610417366004611e4b565b610b52565b34801561042857600080fd5b50600a54610447906001600160801b0380821691600160801b90041682565b604080516001600160801b0393841681529290911660208301520161025f565b34801561047357600080fd5b50610229610b8a565b34801561048857600080fd5b506000546001600160a01b031661024b565b3480156104a657600080fd5b506102296104b53660046120ae565b610c41565b3480156104c657600080fd5b5061030d610cfc565b3480156104db57600080fd5b506104e4610d0d565b6040805192835260208301919091520161025f565b34801561050557600080fd5b5061024b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561053957600080fd5b5060035461024b9061010090046001600160a01b031681565b34801561055e57600080fd5b50610567606481565b6040516001600160801b03909116815260200161025f565b34801561058b57600080fd5b5061030d60095481565b3480156105a157600080fd5b506102296105b03660046120ef565b610e4d565b3480156105c157600080fd5b506102296105d036600461210a565b610ef5565b3480156105e157600080fd5b50610229610f6d565b3480156105f657600080fd5b5061030d6107d081565b34801561060c57600080fd5b506001546001600160a01b031661024b565b34801561062a57600080fd5b506000546001600160a01b0316156102bd565b34801561064957600080fd5b506102296106583660046120ef565b610fdd565b34801561066957600080fd5b5061022961067836600461213d565b6110c1565b34801561068957600080fd5b50610229610698366004611e4b565b611192565b6000546001600160a01b031633146106c8576040516311a8a1bb60e31b815260040160405180910390fd5b6106d0611285565b6106db600a826112ce565b6040518181527fd2a17a10ab346c94fae909b2fbfa0fedaf30d08983e74dcc0a92be2c40c437f9906020015b60405180910390a150565b6006818154811061072257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610767576040516311a8a1bb60e31b815260040160405180910390fd5b60095481036107ac5760405162461bcd60e51b815260206004820152600c60248201526b2164656c6179426c6f636b7360a01b60448201526064015b60405180910390fd5b6009546040805183815260208101929092527fef322fd61cb3d8514326f0b28140a92a29cd10996ad80d0671e43d2483464c1d910160405180910390a1600955565b60075482826040516020016108049291906121a9565b60405160208183030381529060405280519060200120146108555760405162461bcd60e51b815260206004820152600b60248201526a21636f6e6e6563746f727360a81b60448201526064016107a3565b5050565b63ffffffff81166000908152600860205260408120548082036108ab5760405162461bcd60e51b815260206004820152600a602482015269085cdd5c1c1bdc9d195960b21b60448201526064016107a3565b6108b660018261220b565b9392505050565b6000546001600160a01b031633146108e8576040516311a8a1bb60e31b815260040160405180910390fd5b6108f0611285565b6108f861133f565b565b610902611391565b61090c85856107ee565b83828114801561091c5750808251145b61095a5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206c656e6774687360881b60448201526064016107a3565b600080610965610d0d565b90925090503460005b848163ffffffff161015610a9e5787878263ffffffff168181106109945761099461221e565b90506020020135826109a6919061220b565b915089898263ffffffff168181106109c0576109c061221e565b90506020020160208101906109d591906120ef565b6001600160a01b03166348e6fa2389898463ffffffff168181106109fb576109fb61221e565b9050602002013586604051602001610a1591815260200190565b604051602081830303815290604052898563ffffffff1681518110610a3c57610a3c61221e565b60200260200101516040518463ffffffff1660e01b8152600401610a6192919061227a565b6000604051808303818588803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b505050505080600101905061096e565b50600554604080518581526020810185905280820192909252517f3fcedb4669de80ca7de6e18b7b25cc8e4f6861796f1db0f2409fcdf0d6901f569181900360600190a1505050505050505050565b60048181548110610afd57600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6000546001600160a01b031633146108f8576040516311a8a1bb60e31b815260040160405180910390fd5b60006006610b5f83610859565b81548110610b6f57610b6f61221e565b6000918252602090912001546001600160a01b031692915050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa91906122a8565b610c315760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b60448201526064016107a3565b610c39611391565b6108f86113d7565b610c49611391565b8133610c5482610b52565b6001600160a01b031614610c975760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b60448201526064016107a3565b6000610ca4600a84611414565b6040805163ffffffff87168152602081018690526001600160801b0383168183015290519192507f1daad24ee1bf0bcc72ab681d29df86ec2794361b223da31f148b9f826cd135a8919081900360600190a150505050565b6000610d08600a611486565b905090565b600080610d18611391565b600954600090610d2c90600a9060646114b0565b90508051600003610d735760405162461bcd60e51b81526020600482015260116024820152706e6f20766572696669656420726f6f747360781b60448201526064016107a3565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166334a55ee6846040518263ffffffff1660e01b8152600401610dc29190612305565b60408051808303816000875af1158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190612318565b915091507f41b13c36968d02a1fd71e0f5db55ba2fb043c215a4d1e17633293ff273a77cd4828285604051610e3b9392919061233c565b60405180910390a19093509150509091565b6000546001600160a01b03163314610e78576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610e9d57506001600160a01b03811615155b15610ebb576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610ee957604051634a2fb73f60e11b815260040160405180910390fd5b610ef281611850565b50565b6000546001600160a01b03163314610f20576040516311a8a1bb60e31b815260040160405180910390fd5b610f2a828261189e565b7f95ef69787290b89c35a092c89db1b283b43724d01263e683cfb560c758cdbe70828260046006604051610f619493929190612521565b60405180910390a15050565b6001546001600160a01b03163314610f98576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610faa919061220b565b11610fc85760405163d39c12bb60e01b815260040160405180910390fd5b6001546108f8906001600160a01b0316611a3c565b6000546001600160a01b03163314611008576040516311a8a1bb60e31b815260040160405180910390fd5b6003546001600160a01b0361010090910481169082160361106b5760405162461bcd60e51b815260206004820152601760248201527f616c72656164792077617463686572206d616e6167657200000000000000000060448201526064016107a3565b60038054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527fc16d059e43d7f8e29ccb4e001a2f249d3c59e274925d6a6bc3912943441d9f6c90602001610707565b60055484846040516020016110d792919061256e565b60405160208183030381529060405280519060200120146111255760405162461bcd60e51b815260206004820152600860248201526721646f6d61696e7360c01b60448201526064016107a3565b600754828260405160200161113b9291906121a9565b604051602081830303815290604052805190602001201461118c5760405162461bcd60e51b815260206004820152600b60248201526a21636f6e6e6563746f727360a81b60448201526064016107a3565b50505050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120291906122a8565b6112395760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b60448201526064016107a3565b600061124482611a9b565b90507f6a1097f391a37dc63e0860e64ec34442971eeed2fda4d1a90141fa9ce25eb7eb82826004600633604051610f619594939291906125ac565b60019055565b60035460ff166108f85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107a3565b600081815260038301602052604090205460ff16156113215760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481c995b5bdd9959608a1b60448201526064016107a3565b6000908152600390910160205260409020805460ff19166001179055565b611347611285565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60035460ff16156108f85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a3565b6113df611391565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113743390565b81546000904390849060109061143990600160801b90046001600160801b0316612602565b82546001600160801b038083166101009490940a84810291021990911617909255600090815260018601602090815260408083209690965560029096019095529290932092909255919050565b80546000906001600160801b03600160801b8204811691166114a88282611cb7565b949350505050565b82546060906001600160801b0380821691600160801b900416818110156115075760405162461bcd60e51b815260206004820152600b60248201526a717565756520656d70747960a81b60448201526064016107a3565b816001600160801b03166000036115505760405162461bcd60e51b815260206004820152600d60248201526c1c5d595d5948085a5b9a5d09d9609a1b60448201526064016107a3565b6000846001600160801b03161161159b5760405162461bcd60e51b815260206004820152600f60248201526e042c2c6c6cae0e8c2c4d8ca40dac2f608b1b60448201526064016107a3565b600060016115a98685612628565b6115b3919061264f565b9050806001600160801b0316826001600160801b031611156115d3578091505b5060006115e0864361220b565b905060005b826001600160801b0316846001600160801b031611611637576001600160801b038316600090815260028901602052604090205482811161162a576001915050611637565b50600019909201916115e5565b8061165757505060408051600081526020810190915292506108b6915050565b600084611665856001612628565b61166f919061264f565b6001600160801b031667ffffffffffffffff81111561169057611690611ef4565b6040519080825280602002602001820160405280156116b9578160200160208202803683370190505b5090506000805b856001600160801b0316876001600160801b031611611775576001600160801b038716600090815260018c01602090815260408083205480845260038f019092529091205460ff16611736578084848151811061171f5761171f61221e565b60200260200101818152505082600101925061173d565b8160010191505b506001600160801b038716600090815260018c81016020908152604080842084905560028f01909152822091909155909601956116c0565b8a546fffffffffffffffffffffffffffffffff19166001600160801b038816178b5560008190036117af57829750505050505050506108b6565b60008267ffffffffffffffff8111156117ca576117ca611ef4565b6040519080825280602002602001820160405280156117f3578160200160208202803683370190505b50905060005b83811015611840578481815181106118135761181361221e565b602002602001015182828151811061182d5761182d61221e565b60209081029190910101526001016117f9565b5097506108b69650505050505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b63ffffffff8216600090815260086020526040902054156118ea5760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016107a3565b6001600160a01b03811661192d5760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b60448201526064016107a3565b6004546107d0116119805760405162461bcd60e51b815260206004820152601960248201527f446f6d61696e496e64657865722061742063617061636974790000000000000060448201526064016107a3565b600480546001818101835560088083047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805463ffffffff808916600790961687026101000a8681029102199091161790556006805492830190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b0386166001600160a01b03199091161790559154600091825260209290925260409020819055611a37611ce1565b505050565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080611aa783610859565b9050600060068281548110611abe57611abe61221e565b6000918252602090912001546001600160a01b0316905080611b165760405162461bcd60e51b8152602060048201526011602482015270636f6e6e6563746f72202165786973747360781b60448201526064016107a3565b600454600090611b289060019061220b565b905080831015611c1f5760048181548110611b4557611b4561221e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1660048481548110611b7e57611b7e61221e565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555060068181548110611bc457611bc461221e565b600091825260209091200154600680546001600160a01b039092169185908110611bf057611bf061221e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6004805480611c3057611c3061266f565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a021916905590556006805480611c6f57611c6f61266f565b60008281526020808220830160001990810180546001600160a01b031916905590920190925563ffffffff87168252600890526040812055611caf611ce1565b509392505050565b600081611cc5846001612628565b611ccf919061264f565b6001600160801b031690505b92915050565b60006004805480602002602001604051908101604052809291908181526020018280548015611d5b57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611d1e5790505b5050505050905060006006805480602002602001604051908101604052809291908181526020018280548015611dba57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d9c575b5050505050905081604051602001611dd29190612685565b60408051601f19818403018152908290528051602091820120600555611dfa918391016126cf565b60408051601f1981840301815291905280516020909101206007555050565b600060208284031215611e2b57600080fd5b5035919050565b803563ffffffff81168114611e4657600080fd5b919050565b600060208284031215611e5d57600080fd5b6108b682611e32565b60008083601f840112611e7857600080fd5b50813567ffffffffffffffff811115611e9057600080fd5b6020830191508360208260051b8501011115611eab57600080fd5b9250929050565b60008060208385031215611ec557600080fd5b823567ffffffffffffffff811115611edc57600080fd5b611ee885828601611e66565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f3357611f33611ef4565b604052919050565b600080600080600060608688031215611f5357600080fd5b67ffffffffffffffff8087351115611f6a57600080fd5b611f778888358901611e66565b9096509450602087013581811115611f8e57600080fd5b611f9a89828a01611e66565b909550935050604087013581811115611fb257600080fd5b8701601f81018913611fc357600080fd5b803582811115611fd557611fd5611ef4565b611fe460208260051b01611f0a565b8082825260208201915060208360051b85010192508b83111561200657600080fd5b602084015b8381101561209b57858135111561202157600080fd5b803585018d603f82011261203457600080fd5b60208101358781111561204957612049611ef4565b61205c601f8201601f1916602001611f0a565b8181528f604083850101111561207157600080fd5b8160408401602083013760006020838301015280865250505060208301925060208101905061200b565b5080955050505050509295509295909350565b600080604083850312156120c157600080fd5b6120ca83611e32565b946020939093013593505050565b80356001600160a01b0381168114611e4657600080fd5b60006020828403121561210157600080fd5b6108b6826120d8565b6000806040838503121561211d57600080fd5b61212683611e32565b9150612134602084016120d8565b90509250929050565b6000806000806040858703121561215357600080fd5b843567ffffffffffffffff8082111561216b57600080fd5b61217788838901611e66565b9096509450602087013591508082111561219057600080fd5b5061219d87828801611e66565b95989497509550505050565b60208082528181018390526000908460408401835b868110156121ea576001600160a01b036121d7846120d8565b16825291830191908301906001016121be565b509695505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611cdb57611cdb6121f5565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561225a5760208185018101518683018201520161223e565b506000602082860101526020601f19601f83011685010191505092915050565b60408152600061228d6040830185612234565b828103602084015261229f8185612234565b95945050505050565b6000602082840312156122ba57600080fd5b815180151581146108b657600080fd5b600081518084526020808501945080840160005b838110156122fa578151875295820195908201906001016122de565b509495945050505050565b6020815260006108b660208301846122ca565b6000806040838503121561232b57600080fd5b505080516020909101519092909150565b83815282602082015260606040820152600061229f60608301846122ca565b805480835260008281526020808220940193909190825b826007820110156123ea57815463ffffffff8082168852602082811c821690890152604082811c821690890152606082811c821690890152608082811c82169089015260a082811c82169089015260c082811c9091169088015260e090811c9087015261010090950194600190910190600801612372565b905490828110156124085763ffffffff821686526020909501946001015b8281101561242857602082901c63ffffffff168652602095909501946001015b828110156124475763ffffffff604083901c1686526020909501946001015b828110156124665763ffffffff606083901c1686526020909501946001015b828110156124855763ffffffff608083901c1686526020909501946001015b828110156124a45763ffffffff60a083901c1686526020909501946001015b828110156124c35763ffffffff60c083901c1686526020909501946001015b828110156124d95760e082901c86526020860195505b5093949350505050565b6000815480845260208085019450836000528060002060005b838110156122fa5781546001600160a01b0316875295820195600191820191016124fc565b63ffffffff851681526001600160a01b03841660208201526080604082018190526000906125519083018561235b565b828103606084015261256381856124e3565b979650505050505050565b60208082528181018390526000908460408401835b868110156121ea5763ffffffff61259984611e32565b1682529183019190830190600101612583565b63ffffffff86168152600060018060a01b03808716602084015260a060408401526125da60a084018761235b565b83810360608501526125ec81876124e3565b9250508084166080840152509695505050505050565b60006001600160801b0380831681810361261e5761261e6121f5565b6001019392505050565b6001600160801b03818116838216019080821115612648576126486121f5565b5092915050565b6001600160801b03828116828216039080821115612648576126486121f5565b634e487b7160e01b600052603160045260246000fd5b6020808252825182820181905260009190848201906040850190845b818110156126c357835163ffffffff16835292840192918401916001016126a1565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156126c35783516001600160a01b0316835292840192918401916001016126eb56fea26469706673582212205fc978b9372cd06ddc0b14667d8a5526c91e03ea02be1cc0b13868f9bb8f16a864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c80638456cb5911610118578063b1f8100d116100a0578063d1851c921161006f578063d1851c9214610600578063d232c2201461061e578063d2a3cc711461063d578063db0f01691461065d578063e6f1208d1461067d57600080fd5b8063b1f8100d14610595578063b904670f146105b5578063c5b350df146105d5578063c8ef89de146105ea57600080fd5b8063957908d1116100e7578063957908d1146104cf578063a01892a5146104f9578063a792c29b1461052d578063aa0d60a314610552578063ad9c0c2e1461057f57600080fd5b80638456cb59146104675780638da5cb5b1461047c5780638e7d93fa1461049a578063909907cb146104ba57600080fd5b8063412e12db1161019b5780636a42b8f81161016a5780636a42b8f8146103bb578063715018a6146103d15780637bc24d99146103e65780637d434e91146103fc5780637d5343081461041c57600080fd5b8063412e12db14610345578063498c2c2e146103585780635c975abb1461036e57806366cf8fab1461038657600080fd5b806327186c6a116101d757806327186c6a146102cd5780633c4baaf8146102ed5780633cf52ffb1461031b5780633f4ba83a1461033057600080fd5b80630f8ef4ee1461020957806313ede1a11461022b5780631eeaabea1461026857806324ec5d0514610288575b600080fd5b34801561021557600080fd5b50610229610224366004611e19565b61069d565b005b34801561023757600080fd5b5061024b610246366004611e19565b610712565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561027457600080fd5b50610229610283366004611e19565b61073c565b34801561029457600080fd5b506102bd6102a3366004611e4b565b63ffffffff16600090815260086020526040902054151590565b604051901515815260200161025f565b3480156102d957600080fd5b506102296102e8366004611eb2565b6107ee565b3480156102f957600080fd5b5061030d610308366004611e4b565b610859565b60405190815260200161025f565b34801561032757600080fd5b5060025461030d565b34801561033c57600080fd5b506102296108bd565b610229610353366004611f3b565b6108fa565b34801561036457600080fd5b5061030d60075481565b34801561037a57600080fd5b5060035460ff166102bd565b34801561039257600080fd5b506103a66103a1366004611e19565b610aed565b60405163ffffffff909116815260200161025f565b3480156103c757600080fd5b5062093a8061030d565b3480156103dd57600080fd5b50610229610b27565b3480156103f257600080fd5b5061030d60055481565b34801561040857600080fd5b5061024b610417366004611e4b565b610b52565b34801561042857600080fd5b50600a54610447906001600160801b0380821691600160801b90041682565b604080516001600160801b0393841681529290911660208301520161025f565b34801561047357600080fd5b50610229610b8a565b34801561048857600080fd5b506000546001600160a01b031661024b565b3480156104a657600080fd5b506102296104b53660046120ae565b610c41565b3480156104c657600080fd5b5061030d610cfc565b3480156104db57600080fd5b506104e4610d0d565b6040805192835260208301919091520161025f565b34801561050557600080fd5b5061024b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561053957600080fd5b5060035461024b9061010090046001600160a01b031681565b34801561055e57600080fd5b50610567606481565b6040516001600160801b03909116815260200161025f565b34801561058b57600080fd5b5061030d60095481565b3480156105a157600080fd5b506102296105b03660046120ef565b610e4d565b3480156105c157600080fd5b506102296105d036600461210a565b610ef5565b3480156105e157600080fd5b50610229610f6d565b3480156105f657600080fd5b5061030d6107d081565b34801561060c57600080fd5b506001546001600160a01b031661024b565b34801561062a57600080fd5b506000546001600160a01b0316156102bd565b34801561064957600080fd5b506102296106583660046120ef565b610fdd565b34801561066957600080fd5b5061022961067836600461213d565b6110c1565b34801561068957600080fd5b50610229610698366004611e4b565b611192565b6000546001600160a01b031633146106c8576040516311a8a1bb60e31b815260040160405180910390fd5b6106d0611285565b6106db600a826112ce565b6040518181527fd2a17a10ab346c94fae909b2fbfa0fedaf30d08983e74dcc0a92be2c40c437f9906020015b60405180910390a150565b6006818154811061072257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610767576040516311a8a1bb60e31b815260040160405180910390fd5b60095481036107ac5760405162461bcd60e51b815260206004820152600c60248201526b2164656c6179426c6f636b7360a01b60448201526064015b60405180910390fd5b6009546040805183815260208101929092527fef322fd61cb3d8514326f0b28140a92a29cd10996ad80d0671e43d2483464c1d910160405180910390a1600955565b60075482826040516020016108049291906121a9565b60405160208183030381529060405280519060200120146108555760405162461bcd60e51b815260206004820152600b60248201526a21636f6e6e6563746f727360a81b60448201526064016107a3565b5050565b63ffffffff81166000908152600860205260408120548082036108ab5760405162461bcd60e51b815260206004820152600a602482015269085cdd5c1c1bdc9d195960b21b60448201526064016107a3565b6108b660018261220b565b9392505050565b6000546001600160a01b031633146108e8576040516311a8a1bb60e31b815260040160405180910390fd5b6108f0611285565b6108f861133f565b565b610902611391565b61090c85856107ee565b83828114801561091c5750808251145b61095a5760405162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206c656e6774687360881b60448201526064016107a3565b600080610965610d0d565b90925090503460005b848163ffffffff161015610a9e5787878263ffffffff168181106109945761099461221e565b90506020020135826109a6919061220b565b915089898263ffffffff168181106109c0576109c061221e565b90506020020160208101906109d591906120ef565b6001600160a01b03166348e6fa2389898463ffffffff168181106109fb576109fb61221e565b9050602002013586604051602001610a1591815260200190565b604051602081830303815290604052898563ffffffff1681518110610a3c57610a3c61221e565b60200260200101516040518463ffffffff1660e01b8152600401610a6192919061227a565b6000604051808303818588803b158015610a7a57600080fd5b505af1158015610a8e573d6000803e3d6000fd5b505050505080600101905061096e565b50600554604080518581526020810185905280820192909252517f3fcedb4669de80ca7de6e18b7b25cc8e4f6861796f1db0f2409fcdf0d6901f569181900360600190a1505050505050505050565b60048181548110610afd57600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6000546001600160a01b031633146108f8576040516311a8a1bb60e31b815260040160405180910390fd5b60006006610b5f83610859565b81548110610b6f57610b6f61221e565b6000918252602090912001546001600160a01b031692915050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa158015610bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfa91906122a8565b610c315760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b60448201526064016107a3565b610c39611391565b6108f86113d7565b610c49611391565b8133610c5482610b52565b6001600160a01b031614610c975760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b60448201526064016107a3565b6000610ca4600a84611414565b6040805163ffffffff87168152602081018690526001600160801b0383168183015290519192507f1daad24ee1bf0bcc72ab681d29df86ec2794361b223da31f148b9f826cd135a8919081900360600190a150505050565b6000610d08600a611486565b905090565b600080610d18611391565b600954600090610d2c90600a9060646114b0565b90508051600003610d735760405162461bcd60e51b81526020600482015260116024820152706e6f20766572696669656420726f6f747360781b60448201526064016107a3565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166334a55ee6846040518263ffffffff1660e01b8152600401610dc29190612305565b60408051808303816000875af1158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190612318565b915091507f41b13c36968d02a1fd71e0f5db55ba2fb043c215a4d1e17633293ff273a77cd4828285604051610e3b9392919061233c565b60405180910390a19093509150509091565b6000546001600160a01b03163314610e78576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610e9d57506001600160a01b03811615155b15610ebb576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610ee957604051634a2fb73f60e11b815260040160405180910390fd5b610ef281611850565b50565b6000546001600160a01b03163314610f20576040516311a8a1bb60e31b815260040160405180910390fd5b610f2a828261189e565b7f95ef69787290b89c35a092c89db1b283b43724d01263e683cfb560c758cdbe70828260046006604051610f619493929190612521565b60405180910390a15050565b6001546001600160a01b03163314610f98576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610faa919061220b565b11610fc85760405163d39c12bb60e01b815260040160405180910390fd5b6001546108f8906001600160a01b0316611a3c565b6000546001600160a01b03163314611008576040516311a8a1bb60e31b815260040160405180910390fd5b6003546001600160a01b0361010090910481169082160361106b5760405162461bcd60e51b815260206004820152601760248201527f616c72656164792077617463686572206d616e6167657200000000000000000060448201526064016107a3565b60038054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527fc16d059e43d7f8e29ccb4e001a2f249d3c59e274925d6a6bc3912943441d9f6c90602001610707565b60055484846040516020016110d792919061256e565b60405160208183030381529060405280519060200120146111255760405162461bcd60e51b815260206004820152600860248201526721646f6d61696e7360c01b60448201526064016107a3565b600754828260405160200161113b9291906121a9565b604051602081830303815290604052805190602001201461118c5760405162461bcd60e51b815260206004820152600b60248201526a21636f6e6e6563746f727360a81b60448201526064016107a3565b50505050565b6003546040516384785ecd60e01b81523360048201526101009091046001600160a01b0316906384785ecd90602401602060405180830381865afa1580156111de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120291906122a8565b6112395760405162461bcd60e51b815260206004820152600860248201526710bbb0ba31b432b960c11b60448201526064016107a3565b600061124482611a9b565b90507f6a1097f391a37dc63e0860e64ec34442971eeed2fda4d1a90141fa9ce25eb7eb82826004600633604051610f619594939291906125ac565b60019055565b60035460ff166108f85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107a3565b600081815260038301602052604090205460ff16156113215760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481c995b5bdd9959608a1b60448201526064016107a3565b6000908152600390910160205260409020805460ff19166001179055565b611347611285565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60035460ff16156108f85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a3565b6113df611391565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113743390565b81546000904390849060109061143990600160801b90046001600160801b0316612602565b82546001600160801b038083166101009490940a84810291021990911617909255600090815260018601602090815260408083209690965560029096019095529290932092909255919050565b80546000906001600160801b03600160801b8204811691166114a88282611cb7565b949350505050565b82546060906001600160801b0380821691600160801b900416818110156115075760405162461bcd60e51b815260206004820152600b60248201526a717565756520656d70747960a81b60448201526064016107a3565b816001600160801b03166000036115505760405162461bcd60e51b815260206004820152600d60248201526c1c5d595d5948085a5b9a5d09d9609a1b60448201526064016107a3565b6000846001600160801b03161161159b5760405162461bcd60e51b815260206004820152600f60248201526e042c2c6c6cae0e8c2c4d8ca40dac2f608b1b60448201526064016107a3565b600060016115a98685612628565b6115b3919061264f565b9050806001600160801b0316826001600160801b031611156115d3578091505b5060006115e0864361220b565b905060005b826001600160801b0316846001600160801b031611611637576001600160801b038316600090815260028901602052604090205482811161162a576001915050611637565b50600019909201916115e5565b8061165757505060408051600081526020810190915292506108b6915050565b600084611665856001612628565b61166f919061264f565b6001600160801b031667ffffffffffffffff81111561169057611690611ef4565b6040519080825280602002602001820160405280156116b9578160200160208202803683370190505b5090506000805b856001600160801b0316876001600160801b031611611775576001600160801b038716600090815260018c01602090815260408083205480845260038f019092529091205460ff16611736578084848151811061171f5761171f61221e565b60200260200101818152505082600101925061173d565b8160010191505b506001600160801b038716600090815260018c81016020908152604080842084905560028f01909152822091909155909601956116c0565b8a546fffffffffffffffffffffffffffffffff19166001600160801b038816178b5560008190036117af57829750505050505050506108b6565b60008267ffffffffffffffff8111156117ca576117ca611ef4565b6040519080825280602002602001820160405280156117f3578160200160208202803683370190505b50905060005b83811015611840578481815181106118135761181361221e565b602002602001015182828151811061182d5761182d61221e565b60209081029190910101526001016117f9565b5097506108b69650505050505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b63ffffffff8216600090815260086020526040902054156118ea5760405162461bcd60e51b815260206004820152600660248201526565786973747360d01b60448201526064016107a3565b6001600160a01b03811661192d5760405162461bcd60e51b815260206004820152600a60248201526910b1b7b73732b1ba37b960b11b60448201526064016107a3565b6004546107d0116119805760405162461bcd60e51b815260206004820152601960248201527f446f6d61696e496e64657865722061742063617061636974790000000000000060448201526064016107a3565b600480546001818101835560088083047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01805463ffffffff808916600790961687026101000a8681029102199091161790556006805492830190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910180546001600160a01b0386166001600160a01b03199091161790559154600091825260209290925260409020819055611a37611ce1565b505050565b600080546001600160a01b038381166001600160a01b0319808416821785556002859055600180549091169055604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080611aa783610859565b9050600060068281548110611abe57611abe61221e565b6000918252602090912001546001600160a01b0316905080611b165760405162461bcd60e51b8152602060048201526011602482015270636f6e6e6563746f72202165786973747360781b60448201526064016107a3565b600454600090611b289060019061220b565b905080831015611c1f5760048181548110611b4557611b4561221e565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1660048481548110611b7e57611b7e61221e565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff16021790555060068181548110611bc457611bc461221e565b600091825260209091200154600680546001600160a01b039092169185908110611bf057611bf061221e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b6004805480611c3057611c3061266f565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a021916905590556006805480611c6f57611c6f61266f565b60008281526020808220830160001990810180546001600160a01b031916905590920190925563ffffffff87168252600890526040812055611caf611ce1565b509392505050565b600081611cc5846001612628565b611ccf919061264f565b6001600160801b031690505b92915050565b60006004805480602002602001604051908101604052809291908181526020018280548015611d5b57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff1681526020019060040190602082600301049283019260010382029150808411611d1e5790505b5050505050905060006006805480602002602001604051908101604052809291908181526020018280548015611dba57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d9c575b5050505050905081604051602001611dd29190612685565b60408051601f19818403018152908290528051602091820120600555611dfa918391016126cf565b60408051601f1981840301815291905280516020909101206007555050565b600060208284031215611e2b57600080fd5b5035919050565b803563ffffffff81168114611e4657600080fd5b919050565b600060208284031215611e5d57600080fd5b6108b682611e32565b60008083601f840112611e7857600080fd5b50813567ffffffffffffffff811115611e9057600080fd5b6020830191508360208260051b8501011115611eab57600080fd5b9250929050565b60008060208385031215611ec557600080fd5b823567ffffffffffffffff811115611edc57600080fd5b611ee885828601611e66565b90969095509350505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f3357611f33611ef4565b604052919050565b600080600080600060608688031215611f5357600080fd5b67ffffffffffffffff8087351115611f6a57600080fd5b611f778888358901611e66565b9096509450602087013581811115611f8e57600080fd5b611f9a89828a01611e66565b909550935050604087013581811115611fb257600080fd5b8701601f81018913611fc357600080fd5b803582811115611fd557611fd5611ef4565b611fe460208260051b01611f0a565b8082825260208201915060208360051b85010192508b83111561200657600080fd5b602084015b8381101561209b57858135111561202157600080fd5b803585018d603f82011261203457600080fd5b60208101358781111561204957612049611ef4565b61205c601f8201601f1916602001611f0a565b8181528f604083850101111561207157600080fd5b8160408401602083013760006020838301015280865250505060208301925060208101905061200b565b5080955050505050509295509295909350565b600080604083850312156120c157600080fd5b6120ca83611e32565b946020939093013593505050565b80356001600160a01b0381168114611e4657600080fd5b60006020828403121561210157600080fd5b6108b6826120d8565b6000806040838503121561211d57600080fd5b61212683611e32565b9150612134602084016120d8565b90509250929050565b6000806000806040858703121561215357600080fd5b843567ffffffffffffffff8082111561216b57600080fd5b61217788838901611e66565b9096509450602087013591508082111561219057600080fd5b5061219d87828801611e66565b95989497509550505050565b60208082528181018390526000908460408401835b868110156121ea576001600160a01b036121d7846120d8565b16825291830191908301906001016121be565b509695505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611cdb57611cdb6121f5565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561225a5760208185018101518683018201520161223e565b506000602082860101526020601f19601f83011685010191505092915050565b60408152600061228d6040830185612234565b828103602084015261229f8185612234565b95945050505050565b6000602082840312156122ba57600080fd5b815180151581146108b657600080fd5b600081518084526020808501945080840160005b838110156122fa578151875295820195908201906001016122de565b509495945050505050565b6020815260006108b660208301846122ca565b6000806040838503121561232b57600080fd5b505080516020909101519092909150565b83815282602082015260606040820152600061229f60608301846122ca565b805480835260008281526020808220940193909190825b826007820110156123ea57815463ffffffff8082168852602082811c821690890152604082811c821690890152606082811c821690890152608082811c82169089015260a082811c82169089015260c082811c9091169088015260e090811c9087015261010090950194600190910190600801612372565b905490828110156124085763ffffffff821686526020909501946001015b8281101561242857602082901c63ffffffff168652602095909501946001015b828110156124475763ffffffff604083901c1686526020909501946001015b828110156124665763ffffffff606083901c1686526020909501946001015b828110156124855763ffffffff608083901c1686526020909501946001015b828110156124a45763ffffffff60a083901c1686526020909501946001015b828110156124c35763ffffffff60c083901c1686526020909501946001015b828110156124d95760e082901c86526020860195505b5093949350505050565b6000815480845260208085019450836000528060002060005b838110156122fa5781546001600160a01b0316875295820195600191820191016124fc565b63ffffffff851681526001600160a01b03841660208201526080604082018190526000906125519083018561235b565b828103606084015261256381856124e3565b979650505050505050565b60208082528181018390526000908460408401835b868110156121ea5763ffffffff61259984611e32565b1682529183019190830190600101612583565b63ffffffff86168152600060018060a01b03808716602084015260a060408401526125da60a084018761235b565b83810360608501526125ec81876124e3565b9250508084166080840152509695505050505050565b60006001600160801b0380831681810361261e5761261e6121f5565b6001019392505050565b6001600160801b03818116838216019080821115612648576126486121f5565b5092915050565b6001600160801b03828116828216039080821115612648576126486121f5565b634e487b7160e01b600052603160045260246000fd5b6020808252825182820181905260009190848201906040850190845b818110156126c357835163ffffffff16835292840192918401916001016126a1565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156126c35783516001600160a01b0316835292840192918401916001016126eb56fea26469706673582212205fc978b9372cd06ddc0b14667d8a5526c91e03ea02be1cc0b13868f9bb8f16a864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addConnector(uint32,address)": {
        "details": "Only owner can add a new connector. Address should be the connector on L1.Cannot add address(0) to avoid duplicated domain in array and reduce gas fee while propagating.",
        "params": {
          "_connector": "Address of the hub connector.",
          "_domain": "The target spoke domain of the given connector."
        }
      },
      "aggregate(uint32,bytes32)": {
        "details": "The aggregate tree's root, which will include this inbound root, will be propagated to all spoke domains (via `propagate`) on a regular basis assuming the verification period is surpassed without dispute.",
        "params": {
          "_domain": "The source domain of the given root.",
          "_inbound": "The inbound root coming from the given domain."
        }
      },
      "constructor": {
        "params": {
          "_delayBlocks": "The delay for the validation period for incoming messages in blocks.",
          "_merkle": "The address of the MerkleTreeManager on this domain.",
          "_watcherManager": "The address of the WatcherManager on this domain."
        }
      },
      "dequeue()": {
        "details": "Will dequeue a fixed maximum amount of roots to prevent out of gas errors. As such, this method is public and separate from `propagate` so we can curtail an overloaded queue as needed.Reverts if no verified inbound roots are found.",
        "returns": {
          "_0": "bytes32 The new aggregate root.",
          "_1": "uint256 The updated count (number of leaves)."
        }
      },
      "discardRoot(bytes32)": {
        "details": "The given root does NOT have to currently be in the queue. It isn't removed from the queue directly, but instead is filtered out when dequeuing is done for the sake of aggregation.Can only be called by the owner when the protocol is paused.",
        "params": {
          "_root": "The root to be discarded."
        }
      },
      "getConnectorForDomain(uint32)": {
        "details": "Inefficient, should only be used by caller if they have no index reference.",
        "params": {
          "_domain": "The domain for which to get the hub connector address."
        }
      },
      "getDomainIndex(uint32)": {
        "details": "Reverts if domain is not supported.",
        "params": {
          "_domain": "The domain for which to get the index value."
        }
      },
      "isDomainSupported(uint32)": {
        "params": {
          "_domain": "Domain to check."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "propagate(address[],uint256[],bytes[])": {
        "details": "Should be called by relayers at a regular interval.",
        "params": {
          "_connectors": "Array of connectors: should match exactly the array of `connectors` in storage; used here to reduce gas costs, and keep them static regardless of number of supported domains.",
          "_encodedData": "Array of encodedData: extra params for each AMB if required",
          "_fees": "Array of fees in native token for an AMB if required"
        }
      },
      "removeConnector(uint32)": {
        "details": "Only watcher can remove a connector. TODO: Could add a metatx-able `removeConnectorWithSig` if we want to use relayers?",
        "params": {
          "_domain": "The spoke domain of the target connector we want to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Renounce ownership should be impossible as long as watchers can freely remove connectors and only the owner can add them back"
      },
      "validateConnectors(address[])": {
        "details": "Reverts if domains or connectors do not match, including ordering.",
        "params": {
          "_connectors": "The given connectors array to check."
        }
      },
      "validateDomains(uint32[],address[])": {
        "details": "Reverts if domains or connectors do not match, including ordering.",
        "params": {
          "_connectors": "The given connectors array to check.",
          "_domains": "The given domains array to check."
        }
      }
    },
    "stateVariables": {
      "pendingInboundRoots": {
        "details": "Watchers should be able to watch this queue for fraudulent messages and pause this contract if fraud is detected."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "WatcherManagerChanged(address)": {
        "notice": "Emitted when the manager address changes"
      }
    },
    "kind": "user",
    "methods": {
      "DEQUEUE_MAX()": {
        "notice": "Maximum number of values to dequeue from the queue in one sitting (one call of `propagate` or `dequeue`). Used to cap gas requirements."
      },
      "MAX_DOMAINS()": {
        "notice": "The absolute maximum number of domains that we should support. Domain and connector arrays are naturally unbounded, but the gas cost of reading these arrays in `updateHashes()` is bounded by the block's gas limit. If we want to set a hard ceiling for gas costs for the `updateHashes()` method at approx. 2M gas, with an average SLOAD cost of 900 gas per domain (1 uint32, 1 address):       2M / 900 = ~2222 domains Realistically, the cap on the number of domains will likely exist in other places, but we cap it here as a last resort."
      },
      "MERKLE()": {
        "notice": "MerkleTreeManager contract instance. Will hold the active tree of aggregated inbound roots. The root of this tree will be distributed crosschain to all spoke domains."
      },
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "addConnector(uint32,address)": {
        "notice": "Add a new supported domain and corresponding hub connector to the system. This new domain will receive the propagated aggregate root."
      },
      "aggregate(uint32,bytes32)": {
        "notice": "Accept an inbound root coming from a given domain's hub connector, enqueuing this incoming root into the current queue as it awaits the verification period."
      },
      "connectors(uint256)": {
        "notice": "Tracks the addresses of the hub connector contracts corresponding to subscribed spoke domains. The index of any given connector in this array should match the index of that connector's target spoke domain in the `domains` array above."
      },
      "connectorsHash()": {
        "notice": "A \"quick reference\" hash used in the `propagate` method below to validate that the provided array of connectors matches the one we have in storage."
      },
      "constructor": {
        "notice": "Creates a new RootManager instance."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "delayBlocks()": {
        "notice": "Number of blocks to delay the processing of a message to allow for watchers to verify the validity and pause if necessary."
      },
      "dequeue()": {
        "notice": "Dequeue verified inbound roots and insert them into the aggregator tree."
      },
      "discardRoot(bytes32)": {
        "notice": "Removes (effectively blacklists) a given (fraudulent) root from the queue of pending inbound roots."
      },
      "domains(uint256)": {
        "notice": "Domains array tracks currently subscribed domains to this hub aggregator. We should distribute the aggregate root to all of these domains in the `propagate` method."
      },
      "domainsHash()": {
        "notice": "A \"quick reference\" hash used in the `propagate` method below to validate that the provided array of domains matches the one we have in storage."
      },
      "getConnectorForDomain(uint32)": {
        "notice": "Gets the corresponding hub connector address for a given spoke domain."
      },
      "getDomainIndex(uint32)": {
        "notice": "Gets the index of a given domain in the domains and connectors arrays."
      },
      "isDomainSupported(uint32)": {
        "notice": "Convenience shortcut for supported domains. Used to sanity check adding new domains."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "pause()": {
        "notice": "Watchers can pause contracts if fraud is detected"
      },
      "pendingInboundRoots()": {
        "notice": "Queue used for management of verification for inbound roots from spoke chains. Once the verification period elapses, the inbound messages can be aggregated into the merkle tree for propagation to spoke chains."
      },
      "propagate(address[],uint256[],bytes[])": {
        "notice": "This is called by relayers to take the current aggregate tree root and propagate it to all spoke domains (via their respective hub connectors)."
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "removeConnector(uint32)": {
        "notice": "Remove support for a connector and respective domain. That connector/domain will no longer receive updates for the latest aggregate root."
      },
      "renounceOwnership()": {
        "notice": "Remove ability to renounce ownership"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "setDelayBlocks(uint256)": {
        "notice": "Set the `delayBlocks`, the period in blocks over which an incoming message is verified."
      },
      "setWatcherManager(address)": {
        "notice": "Owner can enroll a watcher (abilities are defined by inheriting contracts)"
      },
      "unpause()": {
        "notice": "Owner can unpause contracts if fraud is detected by watchers"
      },
      "validateConnectors(address[])": {
        "notice": "Validate given connectors array is correct (i.e. it mirrors what is currently saved in storage)."
      },
      "validateDomains(uint32[],address[])": {
        "notice": "Validate given domains and connectors arrays are correct (i.e. they mirror what is currently saved in storage)."
      },
      "watcherManager()": {
        "notice": "The `WatcherManager` contract governs the watcher whitelist."
      }
    },
    "notice": "This contract exists at cluster hubs, and aggregates all transfer roots from messaging spokes into a single merkle tree. Regularly broadcasts the root of the aggregator tree back out to all the messaging spokes.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 49135,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 49137,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 49139,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10818,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "_paused",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 38152,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "watcherManager",
        "offset": 1,
        "slot": "3",
        "type": "t_contract(WatcherManager)38334"
      },
      {
        "astId": 47553,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "domains",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 47556,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "domainsHash",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 47560,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "connectors",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 47563,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "connectorsHash",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 47568,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "domainToIndexPlusOne",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 37568,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "delayBlocks",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 37572,
        "contract": "contracts/messaging/RootManager.sol:RootManager",
        "label": "pendingInboundRoots",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Queue)48665_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(WatcherManager)38334": {
        "encoding": "inplace",
        "label": "contract WatcherManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Queue)48665_storage": {
        "encoding": "inplace",
        "label": "struct QueueLib.Queue",
        "members": [
          {
            "astId": 48650,
            "contract": "contracts/messaging/RootManager.sol:RootManager",
            "label": "first",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 48652,
            "contract": "contracts/messaging/RootManager.sol:RootManager",
            "label": "last",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 48656,
            "contract": "contracts/messaging/RootManager.sol:RootManager",
            "label": "data",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_bytes32)"
          },
          {
            "astId": 48660,
            "contract": "contracts/messaging/RootManager.sol:RootManager",
            "label": "commitBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 48664,
            "contract": "contracts/messaging/RootManager.sol:RootManager",
            "label": "removed",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}