type AssetBalance @entity {
  id: ID!
  amount: BigInt!
  router: Router!
  assetId: Bytes!
  local: Bytes!
  canonicalId: Bytes!
}

# Router represents a router and its associated liquidity
type Router @entity {
  id: ID!
  assetBalances: [AssetBalance!]! @derivedFrom(field: "router")
  transfers: [Transfer!]! @derivedFrom(field: "router")
}

enum TransferStatus {
  XCalled
  Executed
  Reconciled
}

# Transfer represents a transfer
type Transfer @entity {
  id: ID!
  # Meta
  originDomain: BigInt!
  destinationDomain: BigInt!
  chainId: BigInt!
  status: TransferStatus!

  # Transfer Data
  to: Bytes!
  transferId: Bytes!
  callTo: Bytes!
  callData: Bytes!
  idx: BigInt
  nonce: BigInt
  router: Router

  # XCalled
  xcalledCaller: Bytes
  xcalledTransferringAmount: BigInt
  xcalledLocalAmount: BigInt
  xcalledTransferringAsset: Bytes
  xcalledLocalAsset: Bytes

  # XCalled Transaction
  xcalledTransactionHash: Bytes
  xcalledTimestamp: BigInt
  xcalledGasPrice: BigInt
  xcalledGasLimit: BigInt
  xcalledBlockNumber: BigInt

  # Executed
  executedCaller: Bytes
  executedTransferringAmount: BigInt
  executedLocalAmount: BigInt
  executedTransferringAsset: Bytes
  executedLocalAsset: Bytes

  # Executed Transaction
  executedTransactionHash: Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt

  # # Reconciled
  # root: Bytes
  # reconciledCaller: Bytes

  # # Reconciled Transaction
  # reconciledTransactionHash: Bytes
  # reconciledTimestamp: BigInt
  # reconciledGasPrice: BigInt
  # reconciledGasLimit: BigInt
  # reconciledBlockNumber: BigInt
}
