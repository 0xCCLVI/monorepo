schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar testgoerli_BigDecimal

scalar BigInt

input testgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testgoerli_Block_height {
  hash: testgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testgoerli_Bytes

type testgoerli_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: testgoerli_Bytes!
  rootManager: testgoerli_Bytes!
  mirrorConnector: testgoerli_Bytes!
}

input testgoerli_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: testgoerli_Bytes
  amb_not: testgoerli_Bytes
  amb_in: [testgoerli_Bytes!]
  amb_not_in: [testgoerli_Bytes!]
  amb_contains: testgoerli_Bytes
  amb_not_contains: testgoerli_Bytes
  rootManager: testgoerli_Bytes
  rootManager_not: testgoerli_Bytes
  rootManager_in: [testgoerli_Bytes!]
  rootManager_not_in: [testgoerli_Bytes!]
  rootManager_contains: testgoerli_Bytes
  rootManager_not_contains: testgoerli_Bytes
  mirrorConnector: testgoerli_Bytes
  mirrorConnector_not: testgoerli_Bytes
  mirrorConnector_in: [testgoerli_Bytes!]
  mirrorConnector_not_in: [testgoerli_Bytes!]
  mirrorConnector_contains: testgoerli_Bytes
  mirrorConnector_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

"""Defines the order direction, either ascending or descending"""
enum testgoerli_OrderDirection {
  asc
  desc
}

type testgoerli_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: testgoerli_Bytes!
  rootManager: testgoerli_Bytes!
  mirrorConnector: testgoerli_Bytes!
}

input testgoerli_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: testgoerli_Bytes
  amb_not: testgoerli_Bytes
  amb_in: [testgoerli_Bytes!]
  amb_not_in: [testgoerli_Bytes!]
  amb_contains: testgoerli_Bytes
  amb_not_contains: testgoerli_Bytes
  rootManager: testgoerli_Bytes
  rootManager_not: testgoerli_Bytes
  rootManager_in: [testgoerli_Bytes!]
  rootManager_not_in: [testgoerli_Bytes!]
  rootManager_contains: testgoerli_Bytes
  rootManager_not_contains: testgoerli_Bytes
  mirrorConnector: testgoerli_Bytes
  mirrorConnector_not: testgoerli_Bytes
  mirrorConnector_in: [testgoerli_Bytes!]
  mirrorConnector_not_in: [testgoerli_Bytes!]
  mirrorConnector_contains: testgoerli_Bytes
  mirrorConnector_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Query {
  testgoerli_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_RootAggregated
  testgoerli_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_RootAggregated_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_RootAggregated!]!
  testgoerli_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_RootPropagated
  testgoerli_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_RootPropagated_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_RootPropagated!]!
  testgoerli_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_PolygonConnectorMeta
  testgoerli_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_PolygonConnectorMeta_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_PolygonConnectorMeta!]!
  testgoerli_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_OptimismConnectorMeta
  testgoerli_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OptimismConnectorMeta_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_OptimismConnectorMeta!]!
  testgoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_RootMessageProcessed
  testgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_RootMessageProcessed_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
}

type testgoerli_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: testgoerli_Bytes!
  index: BigInt!
}

input testgoerli_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: testgoerli_Bytes
  receivedRoot_not: testgoerli_Bytes
  receivedRoot_in: [testgoerli_Bytes!]
  receivedRoot_not_in: [testgoerli_Bytes!]
  receivedRoot_contains: testgoerli_Bytes
  receivedRoot_not_contains: testgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type testgoerli_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: testgoerli_Bytes
  caller: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testgoerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: testgoerli_Bytes
  root_not: testgoerli_Bytes
  root_in: [testgoerli_Bytes!]
  root_not_in: [testgoerli_Bytes!]
  root_contains: testgoerli_Bytes
  root_not_contains: testgoerli_Bytes
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  transactionHash_not: testgoerli_Bytes
  transactionHash_in: [testgoerli_Bytes!]
  transactionHash_not_in: [testgoerli_Bytes!]
  transactionHash_contains: testgoerli_Bytes
  transactionHash_not_contains: testgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type testgoerli_RootPropagated {
  id: ID!
  aggregate: testgoerli_Bytes!
  domains: [BigInt!]
  count: BigInt!
}

input testgoerli_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: testgoerli_Bytes
  aggregate_not: testgoerli_Bytes
  aggregate_in: [testgoerli_Bytes!]
  aggregate_not_in: [testgoerli_Bytes!]
  aggregate_contains: testgoerli_Bytes
  aggregate_not_contains: testgoerli_Bytes
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_RootPropagated_orderBy {
  id
  aggregate
  domains
  count
}

type Subscription {
  testgoerli_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_RootAggregated
  testgoerli_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_RootAggregated_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_RootAggregated!]!
  testgoerli_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_RootPropagated
  testgoerli_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_RootPropagated_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_RootPropagated!]!
  testgoerli_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_PolygonConnectorMeta
  testgoerli_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_PolygonConnectorMeta_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_PolygonConnectorMeta!]!
  testgoerli_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_OptimismConnectorMeta
  testgoerli_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OptimismConnectorMeta_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_OptimismConnectorMeta!]!
  testgoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_RootMessageProcessed
  testgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_RootMessageProcessed_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
}

type testgoerli__Block_ {
  """The hash of the block"""
  hash: testgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type testgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}