schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type testoptimism_AggregateRoot {
  id: ID!
  root: testoptimism_Bytes!
  blockNumber: BigInt!
}

input testoptimism_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: testoptimism_Bytes
  root_not: testoptimism_Bytes
  root_gt: testoptimism_Bytes
  root_lt: testoptimism_Bytes
  root_gte: testoptimism_Bytes
  root_lte: testoptimism_Bytes
  root_in: [testoptimism_Bytes!]
  root_not_in: [testoptimism_Bytes!]
  root_contains: testoptimism_Bytes
  root_not_contains: testoptimism_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_AggregateRoot_filter]
  or: [testoptimism_AggregateRoot_filter]
}

enum testoptimism_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type testoptimism_Asset {
  id: ID!
  key: testoptimism_Bytes
  canonicalId: testoptimism_Bytes
  canonicalDomain: BigInt
  adoptedAsset: testoptimism_Bytes
  localAsset: testoptimism_Bytes
  blockNumber: BigInt
}

type testoptimism_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testoptimism_Router!
  asset: testoptimism_Asset!
  feesEarned: BigInt!
}

input testoptimism_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: testoptimism_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testoptimism_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_AssetBalance_filter]
  or: [testoptimism_AssetBalance_filter]
}

enum testoptimism_AssetBalance_orderBy {
  id
  amount
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  feesEarned
}

input testoptimism_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: testoptimism_Bytes
  key_not: testoptimism_Bytes
  key_gt: testoptimism_Bytes
  key_lt: testoptimism_Bytes
  key_gte: testoptimism_Bytes
  key_lte: testoptimism_Bytes
  key_in: [testoptimism_Bytes!]
  key_not_in: [testoptimism_Bytes!]
  key_contains: testoptimism_Bytes
  key_not_contains: testoptimism_Bytes
  canonicalId: testoptimism_Bytes
  canonicalId_not: testoptimism_Bytes
  canonicalId_gt: testoptimism_Bytes
  canonicalId_lt: testoptimism_Bytes
  canonicalId_gte: testoptimism_Bytes
  canonicalId_lte: testoptimism_Bytes
  canonicalId_in: [testoptimism_Bytes!]
  canonicalId_not_in: [testoptimism_Bytes!]
  canonicalId_contains: testoptimism_Bytes
  canonicalId_not_contains: testoptimism_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: testoptimism_Bytes
  adoptedAsset_not: testoptimism_Bytes
  adoptedAsset_gt: testoptimism_Bytes
  adoptedAsset_lt: testoptimism_Bytes
  adoptedAsset_gte: testoptimism_Bytes
  adoptedAsset_lte: testoptimism_Bytes
  adoptedAsset_in: [testoptimism_Bytes!]
  adoptedAsset_not_in: [testoptimism_Bytes!]
  adoptedAsset_contains: testoptimism_Bytes
  adoptedAsset_not_contains: testoptimism_Bytes
  localAsset: testoptimism_Bytes
  localAsset_not: testoptimism_Bytes
  localAsset_gt: testoptimism_Bytes
  localAsset_lt: testoptimism_Bytes
  localAsset_gte: testoptimism_Bytes
  localAsset_lte: testoptimism_Bytes
  localAsset_in: [testoptimism_Bytes!]
  localAsset_not_in: [testoptimism_Bytes!]
  localAsset_contains: testoptimism_Bytes
  localAsset_not_contains: testoptimism_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_Asset_filter]
  or: [testoptimism_Asset_filter]
}

enum testoptimism_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

scalar testoptimism_BigDecimal

scalar BigInt

input testoptimism_BlockChangedFilter {
  number_gte: Int!
}

input testoptimism_Block_height {
  hash: testoptimism_Bytes
  number: Int
  number_gte: Int
}

scalar testoptimism_Bytes

type testoptimism_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: testoptimism_Bytes
  rootManager: testoptimism_Bytes
  mirrorConnector: testoptimism_Bytes
}

input testoptimism_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: testoptimism_Bytes
  amb_not: testoptimism_Bytes
  amb_gt: testoptimism_Bytes
  amb_lt: testoptimism_Bytes
  amb_gte: testoptimism_Bytes
  amb_lte: testoptimism_Bytes
  amb_in: [testoptimism_Bytes!]
  amb_not_in: [testoptimism_Bytes!]
  amb_contains: testoptimism_Bytes
  amb_not_contains: testoptimism_Bytes
  rootManager: testoptimism_Bytes
  rootManager_not: testoptimism_Bytes
  rootManager_gt: testoptimism_Bytes
  rootManager_lt: testoptimism_Bytes
  rootManager_gte: testoptimism_Bytes
  rootManager_lte: testoptimism_Bytes
  rootManager_in: [testoptimism_Bytes!]
  rootManager_not_in: [testoptimism_Bytes!]
  rootManager_contains: testoptimism_Bytes
  rootManager_not_contains: testoptimism_Bytes
  mirrorConnector: testoptimism_Bytes
  mirrorConnector_not: testoptimism_Bytes
  mirrorConnector_gt: testoptimism_Bytes
  mirrorConnector_lt: testoptimism_Bytes
  mirrorConnector_gte: testoptimism_Bytes
  mirrorConnector_lte: testoptimism_Bytes
  mirrorConnector_in: [testoptimism_Bytes!]
  mirrorConnector_not_in: [testoptimism_Bytes!]
  mirrorConnector_contains: testoptimism_Bytes
  mirrorConnector_not_contains: testoptimism_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_ConnectorMeta_filter]
  or: [testoptimism_ConnectorMeta_filter]
}

enum testoptimism_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type testoptimism_DestinationMessage {
  id: ID!
  leaf: testoptimism_Bytes
  processed: Boolean
  returnData: testoptimism_Bytes
  success: Boolean
  transactionHash: testoptimism_Bytes
  blockNumber: BigInt
}

input testoptimism_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: testoptimism_Bytes
  leaf_not: testoptimism_Bytes
  leaf_gt: testoptimism_Bytes
  leaf_lt: testoptimism_Bytes
  leaf_gte: testoptimism_Bytes
  leaf_lte: testoptimism_Bytes
  leaf_in: [testoptimism_Bytes!]
  leaf_not_in: [testoptimism_Bytes!]
  leaf_contains: testoptimism_Bytes
  leaf_not_contains: testoptimism_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: testoptimism_Bytes
  returnData_not: testoptimism_Bytes
  returnData_gt: testoptimism_Bytes
  returnData_lt: testoptimism_Bytes
  returnData_gte: testoptimism_Bytes
  returnData_lte: testoptimism_Bytes
  returnData_in: [testoptimism_Bytes!]
  returnData_not_in: [testoptimism_Bytes!]
  returnData_contains: testoptimism_Bytes
  returnData_not_contains: testoptimism_Bytes
  success: Boolean
  success_not: Boolean
  success_in: [Boolean!]
  success_not_in: [Boolean!]
  transactionHash: testoptimism_Bytes
  transactionHash_not: testoptimism_Bytes
  transactionHash_gt: testoptimism_Bytes
  transactionHash_lt: testoptimism_Bytes
  transactionHash_gte: testoptimism_Bytes
  transactionHash_lte: testoptimism_Bytes
  transactionHash_in: [testoptimism_Bytes!]
  transactionHash_not_in: [testoptimism_Bytes!]
  transactionHash_contains: testoptimism_Bytes
  transactionHash_not_contains: testoptimism_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_DestinationMessage_filter]
  or: [testoptimism_DestinationMessage_filter]
}

enum testoptimism_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  success
  transactionHash
  blockNumber
}

type testoptimism_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimism_Bytes
  nonce: BigInt
  status: testoptimism_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testoptimism_Router_orderBy, orderDirection: testoptimism_OrderDirection, where: testoptimism_Router_filter): [testoptimism_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: testoptimism_Bytes
  delegate: testoptimism_Bytes
  receiveLocal: Boolean
  callData: testoptimism_Bytes
  slippage: BigInt
  originSender: testoptimism_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: testoptimism_Bytes
  asset: testoptimism_Asset
  routersFee: BigInt
  executedCaller: testoptimism_Bytes
  executedTransactionHash: testoptimism_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: testoptimism_Bytes
  reconciledTransactionHash: testoptimism_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input testoptimism_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimism_Bytes
  transferId_not: testoptimism_Bytes
  transferId_gt: testoptimism_Bytes
  transferId_lt: testoptimism_Bytes
  transferId_gte: testoptimism_Bytes
  transferId_lte: testoptimism_Bytes
  transferId_in: [testoptimism_Bytes!]
  transferId_not_in: [testoptimism_Bytes!]
  transferId_contains: testoptimism_Bytes
  transferId_not_contains: testoptimism_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: testoptimism_TransferStatus
  status_not: testoptimism_TransferStatus
  status_in: [testoptimism_TransferStatus!]
  status_not_in: [testoptimism_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: testoptimism_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: testoptimism_Bytes
  to_not: testoptimism_Bytes
  to_gt: testoptimism_Bytes
  to_lt: testoptimism_Bytes
  to_gte: testoptimism_Bytes
  to_lte: testoptimism_Bytes
  to_in: [testoptimism_Bytes!]
  to_not_in: [testoptimism_Bytes!]
  to_contains: testoptimism_Bytes
  to_not_contains: testoptimism_Bytes
  delegate: testoptimism_Bytes
  delegate_not: testoptimism_Bytes
  delegate_gt: testoptimism_Bytes
  delegate_lt: testoptimism_Bytes
  delegate_gte: testoptimism_Bytes
  delegate_lte: testoptimism_Bytes
  delegate_in: [testoptimism_Bytes!]
  delegate_not_in: [testoptimism_Bytes!]
  delegate_contains: testoptimism_Bytes
  delegate_not_contains: testoptimism_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: testoptimism_Bytes
  callData_not: testoptimism_Bytes
  callData_gt: testoptimism_Bytes
  callData_lt: testoptimism_Bytes
  callData_gte: testoptimism_Bytes
  callData_lte: testoptimism_Bytes
  callData_in: [testoptimism_Bytes!]
  callData_not_in: [testoptimism_Bytes!]
  callData_contains: testoptimism_Bytes
  callData_not_contains: testoptimism_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: testoptimism_Bytes
  originSender_not: testoptimism_Bytes
  originSender_gt: testoptimism_Bytes
  originSender_lt: testoptimism_Bytes
  originSender_gte: testoptimism_Bytes
  originSender_lte: testoptimism_Bytes
  originSender_in: [testoptimism_Bytes!]
  originSender_not_in: [testoptimism_Bytes!]
  originSender_contains: testoptimism_Bytes
  originSender_not_contains: testoptimism_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: testoptimism_Bytes
  canonicalId_not: testoptimism_Bytes
  canonicalId_gt: testoptimism_Bytes
  canonicalId_lt: testoptimism_Bytes
  canonicalId_gte: testoptimism_Bytes
  canonicalId_lte: testoptimism_Bytes
  canonicalId_in: [testoptimism_Bytes!]
  canonicalId_not_in: [testoptimism_Bytes!]
  canonicalId_contains: testoptimism_Bytes
  canonicalId_not_contains: testoptimism_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testoptimism_Asset_filter
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: testoptimism_Bytes
  executedCaller_not: testoptimism_Bytes
  executedCaller_gt: testoptimism_Bytes
  executedCaller_lt: testoptimism_Bytes
  executedCaller_gte: testoptimism_Bytes
  executedCaller_lte: testoptimism_Bytes
  executedCaller_in: [testoptimism_Bytes!]
  executedCaller_not_in: [testoptimism_Bytes!]
  executedCaller_contains: testoptimism_Bytes
  executedCaller_not_contains: testoptimism_Bytes
  executedTransactionHash: testoptimism_Bytes
  executedTransactionHash_not: testoptimism_Bytes
  executedTransactionHash_gt: testoptimism_Bytes
  executedTransactionHash_lt: testoptimism_Bytes
  executedTransactionHash_gte: testoptimism_Bytes
  executedTransactionHash_lte: testoptimism_Bytes
  executedTransactionHash_in: [testoptimism_Bytes!]
  executedTransactionHash_not_in: [testoptimism_Bytes!]
  executedTransactionHash_contains: testoptimism_Bytes
  executedTransactionHash_not_contains: testoptimism_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: testoptimism_Bytes
  reconciledCaller_not: testoptimism_Bytes
  reconciledCaller_gt: testoptimism_Bytes
  reconciledCaller_lt: testoptimism_Bytes
  reconciledCaller_gte: testoptimism_Bytes
  reconciledCaller_lte: testoptimism_Bytes
  reconciledCaller_in: [testoptimism_Bytes!]
  reconciledCaller_not_in: [testoptimism_Bytes!]
  reconciledCaller_contains: testoptimism_Bytes
  reconciledCaller_not_contains: testoptimism_Bytes
  reconciledTransactionHash: testoptimism_Bytes
  reconciledTransactionHash_not: testoptimism_Bytes
  reconciledTransactionHash_gt: testoptimism_Bytes
  reconciledTransactionHash_lt: testoptimism_Bytes
  reconciledTransactionHash_gte: testoptimism_Bytes
  reconciledTransactionHash_lte: testoptimism_Bytes
  reconciledTransactionHash_in: [testoptimism_Bytes!]
  reconciledTransactionHash_not_in: [testoptimism_Bytes!]
  reconciledTransactionHash_contains: testoptimism_Bytes
  reconciledTransactionHash_not_contains: testoptimism_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_DestinationTransfer_filter]
  or: [testoptimism_DestinationTransfer_filter]
}

enum testoptimism_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  asset__id
  asset__key
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum testoptimism_OrderDirection {
  asc
  desc
}

type testoptimism_OriginMessage {
  id: ID!
  transferId: testoptimism_Bytes
  destinationDomain: BigInt
  leaf: testoptimism_Bytes
  index: BigInt
  root: testoptimism_Bytes
  message: testoptimism_Bytes
  transactionHash: testoptimism_Bytes
  blockNumber: BigInt
  rootCount: testoptimism_RootCount
}

input testoptimism_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: testoptimism_Bytes
  transferId_not: testoptimism_Bytes
  transferId_gt: testoptimism_Bytes
  transferId_lt: testoptimism_Bytes
  transferId_gte: testoptimism_Bytes
  transferId_lte: testoptimism_Bytes
  transferId_in: [testoptimism_Bytes!]
  transferId_not_in: [testoptimism_Bytes!]
  transferId_contains: testoptimism_Bytes
  transferId_not_contains: testoptimism_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: testoptimism_Bytes
  leaf_not: testoptimism_Bytes
  leaf_gt: testoptimism_Bytes
  leaf_lt: testoptimism_Bytes
  leaf_gte: testoptimism_Bytes
  leaf_lte: testoptimism_Bytes
  leaf_in: [testoptimism_Bytes!]
  leaf_not_in: [testoptimism_Bytes!]
  leaf_contains: testoptimism_Bytes
  leaf_not_contains: testoptimism_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: testoptimism_Bytes
  root_not: testoptimism_Bytes
  root_gt: testoptimism_Bytes
  root_lt: testoptimism_Bytes
  root_gte: testoptimism_Bytes
  root_lte: testoptimism_Bytes
  root_in: [testoptimism_Bytes!]
  root_not_in: [testoptimism_Bytes!]
  root_contains: testoptimism_Bytes
  root_not_contains: testoptimism_Bytes
  message: testoptimism_Bytes
  message_not: testoptimism_Bytes
  message_gt: testoptimism_Bytes
  message_lt: testoptimism_Bytes
  message_gte: testoptimism_Bytes
  message_lte: testoptimism_Bytes
  message_in: [testoptimism_Bytes!]
  message_not_in: [testoptimism_Bytes!]
  message_contains: testoptimism_Bytes
  message_not_contains: testoptimism_Bytes
  transactionHash: testoptimism_Bytes
  transactionHash_not: testoptimism_Bytes
  transactionHash_gt: testoptimism_Bytes
  transactionHash_lt: testoptimism_Bytes
  transactionHash_gte: testoptimism_Bytes
  transactionHash_lte: testoptimism_Bytes
  transactionHash_in: [testoptimism_Bytes!]
  transactionHash_not_in: [testoptimism_Bytes!]
  transactionHash_contains: testoptimism_Bytes
  transactionHash_not_contains: testoptimism_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: testoptimism_RootCount_filter
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_OriginMessage_filter]
  or: [testoptimism_OriginMessage_filter]
}

enum testoptimism_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
  blockNumber
  rootCount
  rootCount__id
  rootCount__count
}

type testoptimism_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimism_Bytes
  nonce: BigInt
  status: testoptimism_TransferStatus
  messageHash: testoptimism_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: testoptimism_Bytes
  delegate: testoptimism_Bytes
  receiveLocal: Boolean
  callData: testoptimism_Bytes
  slippage: BigInt
  originSender: testoptimism_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: testoptimism_Bytes
  asset: testoptimism_Asset
  message: testoptimism_OriginMessage
  caller: testoptimism_Bytes
  transactionHash: testoptimism_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testoptimism_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimism_Bytes
  transferId_not: testoptimism_Bytes
  transferId_gt: testoptimism_Bytes
  transferId_lt: testoptimism_Bytes
  transferId_gte: testoptimism_Bytes
  transferId_lte: testoptimism_Bytes
  transferId_in: [testoptimism_Bytes!]
  transferId_not_in: [testoptimism_Bytes!]
  transferId_contains: testoptimism_Bytes
  transferId_not_contains: testoptimism_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: testoptimism_TransferStatus
  status_not: testoptimism_TransferStatus
  status_in: [testoptimism_TransferStatus!]
  status_not_in: [testoptimism_TransferStatus!]
  messageHash: testoptimism_Bytes
  messageHash_not: testoptimism_Bytes
  messageHash_gt: testoptimism_Bytes
  messageHash_lt: testoptimism_Bytes
  messageHash_gte: testoptimism_Bytes
  messageHash_lte: testoptimism_Bytes
  messageHash_in: [testoptimism_Bytes!]
  messageHash_not_in: [testoptimism_Bytes!]
  messageHash_contains: testoptimism_Bytes
  messageHash_not_contains: testoptimism_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: testoptimism_Bytes
  to_not: testoptimism_Bytes
  to_gt: testoptimism_Bytes
  to_lt: testoptimism_Bytes
  to_gte: testoptimism_Bytes
  to_lte: testoptimism_Bytes
  to_in: [testoptimism_Bytes!]
  to_not_in: [testoptimism_Bytes!]
  to_contains: testoptimism_Bytes
  to_not_contains: testoptimism_Bytes
  delegate: testoptimism_Bytes
  delegate_not: testoptimism_Bytes
  delegate_gt: testoptimism_Bytes
  delegate_lt: testoptimism_Bytes
  delegate_gte: testoptimism_Bytes
  delegate_lte: testoptimism_Bytes
  delegate_in: [testoptimism_Bytes!]
  delegate_not_in: [testoptimism_Bytes!]
  delegate_contains: testoptimism_Bytes
  delegate_not_contains: testoptimism_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: testoptimism_Bytes
  callData_not: testoptimism_Bytes
  callData_gt: testoptimism_Bytes
  callData_lt: testoptimism_Bytes
  callData_gte: testoptimism_Bytes
  callData_lte: testoptimism_Bytes
  callData_in: [testoptimism_Bytes!]
  callData_not_in: [testoptimism_Bytes!]
  callData_contains: testoptimism_Bytes
  callData_not_contains: testoptimism_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: testoptimism_Bytes
  originSender_not: testoptimism_Bytes
  originSender_gt: testoptimism_Bytes
  originSender_lt: testoptimism_Bytes
  originSender_gte: testoptimism_Bytes
  originSender_lte: testoptimism_Bytes
  originSender_in: [testoptimism_Bytes!]
  originSender_not_in: [testoptimism_Bytes!]
  originSender_contains: testoptimism_Bytes
  originSender_not_contains: testoptimism_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: testoptimism_Bytes
  canonicalId_not: testoptimism_Bytes
  canonicalId_gt: testoptimism_Bytes
  canonicalId_lt: testoptimism_Bytes
  canonicalId_gte: testoptimism_Bytes
  canonicalId_lte: testoptimism_Bytes
  canonicalId_in: [testoptimism_Bytes!]
  canonicalId_not_in: [testoptimism_Bytes!]
  canonicalId_contains: testoptimism_Bytes
  canonicalId_not_contains: testoptimism_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testoptimism_Asset_filter
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: testoptimism_OriginMessage_filter
  caller: testoptimism_Bytes
  caller_not: testoptimism_Bytes
  caller_gt: testoptimism_Bytes
  caller_lt: testoptimism_Bytes
  caller_gte: testoptimism_Bytes
  caller_lte: testoptimism_Bytes
  caller_in: [testoptimism_Bytes!]
  caller_not_in: [testoptimism_Bytes!]
  caller_contains: testoptimism_Bytes
  caller_not_contains: testoptimism_Bytes
  transactionHash: testoptimism_Bytes
  transactionHash_not: testoptimism_Bytes
  transactionHash_gt: testoptimism_Bytes
  transactionHash_lt: testoptimism_Bytes
  transactionHash_gte: testoptimism_Bytes
  transactionHash_lte: testoptimism_Bytes
  transactionHash_in: [testoptimism_Bytes!]
  transactionHash_not_in: [testoptimism_Bytes!]
  transactionHash_contains: testoptimism_Bytes
  transactionHash_not_contains: testoptimism_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_OriginTransfer_filter]
  or: [testoptimism_OriginTransfer_filter]
}

enum testoptimism_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  asset__id
  asset__key
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  message
  message__id
  message__transferId
  message__destinationDomain
  message__leaf
  message__index
  message__root
  message__message
  message__transactionHash
  message__blockNumber
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type testoptimism_PooledToken {
  id: ID!
  asset: testoptimism_Bytes!
}

input testoptimism_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: testoptimism_Bytes
  asset_not: testoptimism_Bytes
  asset_gt: testoptimism_Bytes
  asset_lt: testoptimism_Bytes
  asset_gte: testoptimism_Bytes
  asset_lte: testoptimism_Bytes
  asset_in: [testoptimism_Bytes!]
  asset_not_in: [testoptimism_Bytes!]
  asset_contains: testoptimism_Bytes
  asset_not_contains: testoptimism_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_PooledToken_filter]
  or: [testoptimism_PooledToken_filter]
}

enum testoptimism_PooledToken_orderBy {
  id
  asset
}

type Query {
  testoptimism_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Asset
  testoptimism_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Asset_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Asset!]!
  testoptimism_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_AssetBalance
  testoptimism_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_AssetBalance_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_AssetBalance!]!
  testoptimism_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Router
  testoptimism_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Router_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Router!]!
  testoptimism_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Setting
  testoptimism_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Setting_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Setting!]!
  testoptimism_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Relayer
  testoptimism_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Relayer_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Relayer!]!
  testoptimism_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Sequencer
  testoptimism_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Sequencer_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Sequencer!]!
  testoptimism_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_OriginTransfer
  testoptimism_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_OriginTransfer_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_OriginTransfer!]!
  testoptimism_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_DestinationTransfer
  testoptimism_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_DestinationTransfer_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_DestinationTransfer!]!
  testoptimism_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_OriginMessage
  testoptimism_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_OriginMessage_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_OriginMessage!]!
  testoptimism_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_DestinationMessage
  testoptimism_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_DestinationMessage_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_DestinationMessage!]!
  testoptimism_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_AggregateRoot
  testoptimism_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_AggregateRoot_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_AggregateRoot!]!
  testoptimism_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_ConnectorMeta
  testoptimism_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_ConnectorMeta_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_ConnectorMeta!]!
  testoptimism_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_RootCount
  testoptimism_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_RootCount_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_RootCount!]!
  testoptimism_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_RootMessageSent
  testoptimism_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_RootMessageSent_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_RootMessageSent!]!
  testoptimism_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_StableSwap
  testoptimism_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_StableSwap_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_StableSwap!]!
  testoptimism_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_PooledToken
  testoptimism_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_PooledToken_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_PooledToken!]!
  testoptimism_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_StableSwapLiquidity
  testoptimism_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_StableSwapLiquidity_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_StableSwapLiquidity!]!
  """Access to subgraph metadata"""
  testoptimism__meta(block: testoptimism_Block_height): testoptimism__Meta_
}

type testoptimism_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testoptimism_Bytes
}

input testoptimism_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: testoptimism_Bytes
  relayer_not: testoptimism_Bytes
  relayer_gt: testoptimism_Bytes
  relayer_lt: testoptimism_Bytes
  relayer_gte: testoptimism_Bytes
  relayer_lte: testoptimism_Bytes
  relayer_in: [testoptimism_Bytes!]
  relayer_not_in: [testoptimism_Bytes!]
  relayer_contains: testoptimism_Bytes
  relayer_not_contains: testoptimism_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_Relayer_filter]
  or: [testoptimism_Relayer_filter]
}

enum testoptimism_Relayer_orderBy {
  id
  isActive
  relayer
}

type testoptimism_RootCount {
  id: ID!
  count: BigInt
}

input testoptimism_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_RootCount_filter]
  or: [testoptimism_RootCount_filter]
}

enum testoptimism_RootCount_orderBy {
  id
  count
}

type testoptimism_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: testoptimism_Bytes
  count: BigInt
  caller: testoptimism_Bytes
  transactionHash: testoptimism_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testoptimism_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: testoptimism_Bytes
  root_not: testoptimism_Bytes
  root_gt: testoptimism_Bytes
  root_lt: testoptimism_Bytes
  root_gte: testoptimism_Bytes
  root_lte: testoptimism_Bytes
  root_in: [testoptimism_Bytes!]
  root_not_in: [testoptimism_Bytes!]
  root_contains: testoptimism_Bytes
  root_not_contains: testoptimism_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: testoptimism_Bytes
  caller_not: testoptimism_Bytes
  caller_gt: testoptimism_Bytes
  caller_lt: testoptimism_Bytes
  caller_gte: testoptimism_Bytes
  caller_lte: testoptimism_Bytes
  caller_in: [testoptimism_Bytes!]
  caller_not_in: [testoptimism_Bytes!]
  caller_contains: testoptimism_Bytes
  caller_not_contains: testoptimism_Bytes
  transactionHash: testoptimism_Bytes
  transactionHash_not: testoptimism_Bytes
  transactionHash_gt: testoptimism_Bytes
  transactionHash_lt: testoptimism_Bytes
  transactionHash_gte: testoptimism_Bytes
  transactionHash_lte: testoptimism_Bytes
  transactionHash_in: [testoptimism_Bytes!]
  transactionHash_not_in: [testoptimism_Bytes!]
  transactionHash_contains: testoptimism_Bytes
  transactionHash_not_contains: testoptimism_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_RootMessageSent_filter]
  or: [testoptimism_RootMessageSent_filter]
}

enum testoptimism_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type testoptimism_Router {
  id: ID!
  isActive: Boolean!
  owner: testoptimism_Bytes
  recipient: testoptimism_Bytes
  proposedOwner: testoptimism_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testoptimism_AssetBalance_orderBy, orderDirection: testoptimism_OrderDirection, where: testoptimism_AssetBalance_filter): [testoptimism_AssetBalance!]!
}

input testoptimism_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: testoptimism_Bytes
  owner_not: testoptimism_Bytes
  owner_gt: testoptimism_Bytes
  owner_lt: testoptimism_Bytes
  owner_gte: testoptimism_Bytes
  owner_lte: testoptimism_Bytes
  owner_in: [testoptimism_Bytes!]
  owner_not_in: [testoptimism_Bytes!]
  owner_contains: testoptimism_Bytes
  owner_not_contains: testoptimism_Bytes
  recipient: testoptimism_Bytes
  recipient_not: testoptimism_Bytes
  recipient_gt: testoptimism_Bytes
  recipient_lt: testoptimism_Bytes
  recipient_gte: testoptimism_Bytes
  recipient_lte: testoptimism_Bytes
  recipient_in: [testoptimism_Bytes!]
  recipient_not_in: [testoptimism_Bytes!]
  recipient_contains: testoptimism_Bytes
  recipient_not_contains: testoptimism_Bytes
  proposedOwner: testoptimism_Bytes
  proposedOwner_not: testoptimism_Bytes
  proposedOwner_gt: testoptimism_Bytes
  proposedOwner_lt: testoptimism_Bytes
  proposedOwner_gte: testoptimism_Bytes
  proposedOwner_lte: testoptimism_Bytes
  proposedOwner_in: [testoptimism_Bytes!]
  proposedOwner_not_in: [testoptimism_Bytes!]
  proposedOwner_contains: testoptimism_Bytes
  proposedOwner_not_contains: testoptimism_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: testoptimism_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_Router_filter]
  or: [testoptimism_Router_filter]
}

enum testoptimism_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type testoptimism_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: testoptimism_Bytes
}

input testoptimism_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: testoptimism_Bytes
  sequencer_not: testoptimism_Bytes
  sequencer_gt: testoptimism_Bytes
  sequencer_lt: testoptimism_Bytes
  sequencer_gte: testoptimism_Bytes
  sequencer_lte: testoptimism_Bytes
  sequencer_in: [testoptimism_Bytes!]
  sequencer_not_in: [testoptimism_Bytes!]
  sequencer_contains: testoptimism_Bytes
  sequencer_not_contains: testoptimism_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_Sequencer_filter]
  or: [testoptimism_Sequencer_filter]
}

enum testoptimism_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type testoptimism_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testoptimism_Bytes!
}

input testoptimism_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: testoptimism_Bytes
  caller_not: testoptimism_Bytes
  caller_gt: testoptimism_Bytes
  caller_lt: testoptimism_Bytes
  caller_gte: testoptimism_Bytes
  caller_lte: testoptimism_Bytes
  caller_in: [testoptimism_Bytes!]
  caller_not_in: [testoptimism_Bytes!]
  caller_contains: testoptimism_Bytes
  caller_not_contains: testoptimism_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_Setting_filter]
  or: [testoptimism_Setting_filter]
}

enum testoptimism_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type testoptimism_StableSwap {
  id: ID!
  isActive: Boolean
  key: testoptimism_Bytes
  canonicalId: testoptimism_Bytes
  domain: BigInt
  swapPool: testoptimism_Bytes
  lpToken: testoptimism_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: testoptimism_PooledToken_orderBy, orderDirection: testoptimism_OrderDirection, where: testoptimism_PooledToken_filter): [testoptimism_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
}

type testoptimism_StableSwapLiquidity {
  id: ID!
  provider: testoptimism_Bytes!
  stableSwap: testoptimism_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input testoptimism_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: testoptimism_Bytes
  provider_not: testoptimism_Bytes
  provider_gt: testoptimism_Bytes
  provider_lt: testoptimism_Bytes
  provider_gte: testoptimism_Bytes
  provider_lte: testoptimism_Bytes
  provider_in: [testoptimism_Bytes!]
  provider_not_in: [testoptimism_Bytes!]
  provider_contains: testoptimism_Bytes
  provider_not_contains: testoptimism_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: testoptimism_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_StableSwapLiquidity_filter]
  or: [testoptimism_StableSwapLiquidity_filter]
}

enum testoptimism_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

input testoptimism_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: testoptimism_Bytes
  key_not: testoptimism_Bytes
  key_gt: testoptimism_Bytes
  key_lt: testoptimism_Bytes
  key_gte: testoptimism_Bytes
  key_lte: testoptimism_Bytes
  key_in: [testoptimism_Bytes!]
  key_not_in: [testoptimism_Bytes!]
  key_contains: testoptimism_Bytes
  key_not_contains: testoptimism_Bytes
  canonicalId: testoptimism_Bytes
  canonicalId_not: testoptimism_Bytes
  canonicalId_gt: testoptimism_Bytes
  canonicalId_lt: testoptimism_Bytes
  canonicalId_gte: testoptimism_Bytes
  canonicalId_lte: testoptimism_Bytes
  canonicalId_in: [testoptimism_Bytes!]
  canonicalId_not_in: [testoptimism_Bytes!]
  canonicalId_contains: testoptimism_Bytes
  canonicalId_not_contains: testoptimism_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: testoptimism_Bytes
  swapPool_not: testoptimism_Bytes
  swapPool_gt: testoptimism_Bytes
  swapPool_lt: testoptimism_Bytes
  swapPool_gte: testoptimism_Bytes
  swapPool_lte: testoptimism_Bytes
  swapPool_in: [testoptimism_Bytes!]
  swapPool_not_in: [testoptimism_Bytes!]
  swapPool_contains: testoptimism_Bytes
  swapPool_not_contains: testoptimism_Bytes
  lpToken: testoptimism_Bytes
  lpToken_not: testoptimism_Bytes
  lpToken_gt: testoptimism_Bytes
  lpToken_lt: testoptimism_Bytes
  lpToken_gte: testoptimism_Bytes
  lpToken_lte: testoptimism_Bytes
  lpToken_in: [testoptimism_Bytes!]
  lpToken_not_in: [testoptimism_Bytes!]
  lpToken_contains: testoptimism_Bytes
  lpToken_not_contains: testoptimism_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: testoptimism_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimism_BlockChangedFilter
  and: [testoptimism_StableSwap_filter]
  or: [testoptimism_StableSwap_filter]
}

enum testoptimism_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
}

type Subscription {
  testoptimism_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Asset
  testoptimism_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Asset_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Asset!]!
  testoptimism_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_AssetBalance
  testoptimism_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_AssetBalance_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_AssetBalance!]!
  testoptimism_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Router
  testoptimism_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Router_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Router!]!
  testoptimism_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Setting
  testoptimism_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Setting_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Setting!]!
  testoptimism_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Relayer
  testoptimism_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Relayer_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Relayer!]!
  testoptimism_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_Sequencer
  testoptimism_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_Sequencer_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_Sequencer!]!
  testoptimism_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_OriginTransfer
  testoptimism_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_OriginTransfer_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_OriginTransfer!]!
  testoptimism_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_DestinationTransfer
  testoptimism_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_DestinationTransfer_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_DestinationTransfer!]!
  testoptimism_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_OriginMessage
  testoptimism_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_OriginMessage_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_OriginMessage!]!
  testoptimism_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_DestinationMessage
  testoptimism_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_DestinationMessage_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_DestinationMessage!]!
  testoptimism_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_AggregateRoot
  testoptimism_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_AggregateRoot_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_AggregateRoot!]!
  testoptimism_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_ConnectorMeta
  testoptimism_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_ConnectorMeta_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_ConnectorMeta!]!
  testoptimism_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_RootCount
  testoptimism_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_RootCount_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_RootCount!]!
  testoptimism_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_RootMessageSent
  testoptimism_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_RootMessageSent_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_RootMessageSent!]!
  testoptimism_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_StableSwap
  testoptimism_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_StableSwap_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_StableSwap!]!
  testoptimism_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_PooledToken
  testoptimism_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_PooledToken_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_PooledToken!]!
  testoptimism_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimism_StableSwapLiquidity
  testoptimism_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimism_StableSwapLiquidity_orderBy
    orderDirection: testoptimism_OrderDirection
    where: testoptimism_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimism_StableSwapLiquidity!]!
  """Access to subgraph metadata"""
  testoptimism__meta(block: testoptimism_Block_height): testoptimism__Meta_
}

enum testoptimism_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testoptimism__Block_ {
  """The hash of the block"""
  hash: testoptimism_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type testoptimism__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testoptimism__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}