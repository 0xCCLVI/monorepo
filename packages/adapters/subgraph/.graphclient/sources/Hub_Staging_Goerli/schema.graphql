schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar staginggoerlihub_BigDecimal

scalar BigInt

input staginggoerlihub_BlockChangedFilter {
  number_gte: Int!
}

input staginggoerlihub_Block_height {
  hash: staginggoerlihub_Bytes
  number: Int
  number_gte: Int
}

scalar staginggoerlihub_Bytes

type staginggoerlihub_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerlihub_Bytes!
  rootManager: staginggoerlihub_Bytes!
  mirrorConnector: staginggoerlihub_Bytes!
}

input staginggoerlihub_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerlihub_Bytes
  amb_not: staginggoerlihub_Bytes
  amb_in: [staginggoerlihub_Bytes!]
  amb_not_in: [staginggoerlihub_Bytes!]
  amb_contains: staginggoerlihub_Bytes
  amb_not_contains: staginggoerlihub_Bytes
  rootManager: staginggoerlihub_Bytes
  rootManager_not: staginggoerlihub_Bytes
  rootManager_in: [staginggoerlihub_Bytes!]
  rootManager_not_in: [staginggoerlihub_Bytes!]
  rootManager_contains: staginggoerlihub_Bytes
  rootManager_not_contains: staginggoerlihub_Bytes
  mirrorConnector: staginggoerlihub_Bytes
  mirrorConnector_not: staginggoerlihub_Bytes
  mirrorConnector_in: [staginggoerlihub_Bytes!]
  mirrorConnector_not_in: [staginggoerlihub_Bytes!]
  mirrorConnector_contains: staginggoerlihub_Bytes
  mirrorConnector_not_contains: staginggoerlihub_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerlihub_BlockChangedFilter
}

enum staginggoerlihub_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

"""Defines the order direction, either ascending or descending"""
enum staginggoerlihub_OrderDirection {
  asc
  desc
}

type staginggoerlihub_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerlihub_Bytes!
  rootManager: staginggoerlihub_Bytes!
  mirrorConnector: staginggoerlihub_Bytes!
}

input staginggoerlihub_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerlihub_Bytes
  amb_not: staginggoerlihub_Bytes
  amb_in: [staginggoerlihub_Bytes!]
  amb_not_in: [staginggoerlihub_Bytes!]
  amb_contains: staginggoerlihub_Bytes
  amb_not_contains: staginggoerlihub_Bytes
  rootManager: staginggoerlihub_Bytes
  rootManager_not: staginggoerlihub_Bytes
  rootManager_in: [staginggoerlihub_Bytes!]
  rootManager_not_in: [staginggoerlihub_Bytes!]
  rootManager_contains: staginggoerlihub_Bytes
  rootManager_not_contains: staginggoerlihub_Bytes
  mirrorConnector: staginggoerlihub_Bytes
  mirrorConnector_not: staginggoerlihub_Bytes
  mirrorConnector_in: [staginggoerlihub_Bytes!]
  mirrorConnector_not_in: [staginggoerlihub_Bytes!]
  mirrorConnector_contains: staginggoerlihub_Bytes
  mirrorConnector_not_contains: staginggoerlihub_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerlihub_BlockChangedFilter
}

enum staginggoerlihub_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Query {
  staginggoerlihub_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_RootAggregated
  staginggoerlihub_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_RootAggregated_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_RootAggregated!]!
  staginggoerlihub_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_RootPropagated
  staginggoerlihub_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_RootPropagated_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_RootPropagated!]!
  staginggoerlihub_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_PolygonConnectorMeta
  staginggoerlihub_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_PolygonConnectorMeta_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_PolygonConnectorMeta!]!
  staginggoerlihub_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_OptimismConnectorMeta
  staginggoerlihub_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_OptimismConnectorMeta_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_OptimismConnectorMeta!]!
  staginggoerlihub_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_RootMessageProcessed
  staginggoerlihub_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_RootMessageProcessed_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  staginggoerlihub__meta(block: staginggoerlihub_Block_height): staginggoerlihub__Meta_
}

type staginggoerlihub_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: staginggoerlihub_Bytes!
  index: BigInt!
}

input staginggoerlihub_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: staginggoerlihub_Bytes
  receivedRoot_not: staginggoerlihub_Bytes
  receivedRoot_in: [staginggoerlihub_Bytes!]
  receivedRoot_not_in: [staginggoerlihub_Bytes!]
  receivedRoot_contains: staginggoerlihub_Bytes
  receivedRoot_not_contains: staginggoerlihub_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerlihub_BlockChangedFilter
}

enum staginggoerlihub_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type staginggoerlihub_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: staginggoerlihub_Bytes
  caller: staginggoerlihub_Bytes
  transactionHash: staginggoerlihub_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input staginggoerlihub_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: staginggoerlihub_Bytes
  root_not: staginggoerlihub_Bytes
  root_in: [staginggoerlihub_Bytes!]
  root_not_in: [staginggoerlihub_Bytes!]
  root_contains: staginggoerlihub_Bytes
  root_not_contains: staginggoerlihub_Bytes
  caller: staginggoerlihub_Bytes
  caller_not: staginggoerlihub_Bytes
  caller_in: [staginggoerlihub_Bytes!]
  caller_not_in: [staginggoerlihub_Bytes!]
  caller_contains: staginggoerlihub_Bytes
  caller_not_contains: staginggoerlihub_Bytes
  transactionHash: staginggoerlihub_Bytes
  transactionHash_not: staginggoerlihub_Bytes
  transactionHash_in: [staginggoerlihub_Bytes!]
  transactionHash_not_in: [staginggoerlihub_Bytes!]
  transactionHash_contains: staginggoerlihub_Bytes
  transactionHash_not_contains: staginggoerlihub_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerlihub_BlockChangedFilter
}

enum staginggoerlihub_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type staginggoerlihub_RootPropagated {
  id: ID!
  aggregate: staginggoerlihub_Bytes!
  domains: [BigInt!]
  count: BigInt!
}

input staginggoerlihub_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: staginggoerlihub_Bytes
  aggregate_not: staginggoerlihub_Bytes
  aggregate_in: [staginggoerlihub_Bytes!]
  aggregate_not_in: [staginggoerlihub_Bytes!]
  aggregate_contains: staginggoerlihub_Bytes
  aggregate_not_contains: staginggoerlihub_Bytes
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerlihub_BlockChangedFilter
}

enum staginggoerlihub_RootPropagated_orderBy {
  id
  aggregate
  domains
  count
}

type Subscription {
  staginggoerlihub_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_RootAggregated
  staginggoerlihub_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_RootAggregated_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_RootAggregated!]!
  staginggoerlihub_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_RootPropagated
  staginggoerlihub_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_RootPropagated_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_RootPropagated!]!
  staginggoerlihub_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_PolygonConnectorMeta
  staginggoerlihub_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_PolygonConnectorMeta_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_PolygonConnectorMeta!]!
  staginggoerlihub_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_OptimismConnectorMeta
  staginggoerlihub_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_OptimismConnectorMeta_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_OptimismConnectorMeta!]!
  staginggoerlihub_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerlihub_RootMessageProcessed
  staginggoerlihub_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerlihub_RootMessageProcessed_orderBy
    orderDirection: staginggoerlihub_OrderDirection
    where: staginggoerlihub_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerlihub_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerlihub_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  staginggoerlihub__meta(block: staginggoerlihub_Block_height): staginggoerlihub__Meta_
}

type staginggoerlihub__Block_ {
  """The hash of the block"""
  hash: staginggoerlihub_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type staginggoerlihub__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: staginggoerlihub__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}