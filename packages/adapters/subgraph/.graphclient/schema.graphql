schema {
  query: Query
  subscription: Subscription
}

type Query {
  goerli_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootAggregated
  goerli_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootAggregated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootAggregated!]!
  goerli_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootPropagated
  goerli_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootPropagated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootPropagated!]!
  goerli_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregatedMessageRoot
  goerli_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregatedMessageRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregatedMessageRoot!]!
  goerli_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootManagerMeta
  goerli_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootManagerMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootManagerMeta!]!
  goerli_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_PolygonConnectorMeta
  goerli_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_PolygonConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_PolygonConnectorMeta!]!
  goerli_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OptimismConnectorMeta
  goerli_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OptimismConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OptimismConnectorMeta!]!
  goerli_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_BnbConnectorMeta
  goerli_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_BnbConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_BnbConnectorMeta!]!
  goerli_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ArbitrumConnectorMeta
  goerli_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ArbitrumConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ArbitrumConnectorMeta!]!
  goerli_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_GnosisConnectorMeta
  goerli_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_GnosisConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_GnosisConnectorMeta!]!
  goerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessageProcessed
  goerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageProcessed_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
  goerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Setting!]!
  goerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Relayer!]!
  goerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_TransferRelayerFee
  goerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_TransferRelayerFee_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_TransferRelayerFee!]!
  goerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Sequencer
  goerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Sequencer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Sequencer!]!
  goerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!
  goerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginMessage
  goerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginMessage!]!
  goerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregateRoot
  goerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregateRoot!]!
  goerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ConnectorMeta
  goerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ConnectorMeta!]!
  goerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootCount
  goerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootCount_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootCount!]!
  goerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessageSent
  goerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageSent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageSent!]!
  goerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwap!]!
  goerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_PooledToken
  goerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_PooledToken_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_PooledToken!]!
  goerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapLiquidity
  goerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapLiquidity_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapLiquidity!]!
  testgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Router!]!
  testgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
  mainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootAggregated
  mainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootAggregated_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootAggregated!]!
  mainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootPropagated
  mainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootPropagated_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootPropagated!]!
  mainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregatedMessageRoot
  mainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregatedMessageRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregatedMessageRoot!]!
  mainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootManagerMeta
  mainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootManagerMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootManagerMeta!]!
  mainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_PolygonConnectorMeta
  mainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_PolygonConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_PolygonConnectorMeta!]!
  mainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OptimismConnectorMeta
  mainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OptimismConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OptimismConnectorMeta!]!
  mainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_BnbConnectorMeta
  mainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_BnbConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_BnbConnectorMeta!]!
  mainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_ArbitrumConnectorMeta
  mainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_ArbitrumConnectorMeta!]!
  mainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_GnosisConnectorMeta
  mainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_GnosisConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_GnosisConnectorMeta!]!
  mainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootMessageProcessed
  mainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootMessageProcessed_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  mainnet__meta(block: mainnet_Block_height): mainnet__Meta_
  staginggoerli_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootAggregated
  staginggoerli_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootAggregated_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootAggregated!]!
  staginggoerli_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootPropagated
  staginggoerli_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootPropagated_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootPropagated!]!
  staginggoerli_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AggregatedMessageRoot
  staginggoerli_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AggregatedMessageRoot_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AggregatedMessageRoot!]!
  staginggoerli_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootManagerMeta
  staginggoerli_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootManagerMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootManagerMeta!]!
  staginggoerli_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_PolygonConnectorMeta
  staginggoerli_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_PolygonConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_PolygonConnectorMeta!]!
  staginggoerli_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OptimismConnectorMeta
  staginggoerli_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OptimismConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OptimismConnectorMeta!]!
  staginggoerli_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_BnbConnectorMeta
  staginggoerli_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_BnbConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_BnbConnectorMeta!]!
  staginggoerli_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_ArbitrumConnectorMeta
  staginggoerli_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_ArbitrumConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_ArbitrumConnectorMeta!]!
  staginggoerli_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_GnosisConnectorMeta
  staginggoerli_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_GnosisConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_GnosisConnectorMeta!]!
  staginggoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootMessageProcessed
  staginggoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageProcessed_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  stagingoptimismgoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SystemInfo
  stagingoptimismgoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SystemInfo_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SystemInfo!]!
  stagingoptimismgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_PooledToken
  stagingoptimismgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_PooledToken_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_PooledToken!]!
  stagingoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwapAddLiquidityEvent
  stagingoptimismgoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwapAddLiquidityEvent!]!
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwapRemoveLiquidityEvent
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwapRemoveLiquidityEvent!]!
  stagingoptimismgoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwapExchange
  stagingoptimismgoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwapExchange_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwapExchange!]!
  stagingoptimismgoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SwapDailyVolume
  stagingoptimismgoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SwapDailyVolume_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SwapDailyVolume!]!
  stagingoptimismgoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SwapHourlyVolume
  stagingoptimismgoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SwapHourlyVolume_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SwapHourlyVolume!]!
  stagingoptimismgoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SwapWeeklyVolume
  stagingoptimismgoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SwapWeeklyVolume_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SwapWeeklyVolume!]!
  stagingoptimismgoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwapEvent
  stagingoptimismgoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwapEvent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwapEvent!]!
  stagingoptimismgoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SwapTradeVolume
  stagingoptimismgoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SwapTradeVolume_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
  arbitrumgoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SystemInfo
  arbitrumgoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SystemInfo_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SystemInfo!]!
  arbitrumgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_PooledToken
  arbitrumgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_PooledToken_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_PooledToken!]!
  arbitrumgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwap
  arbitrumgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwap_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwap!]!
  arbitrumgoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapAddLiquidityEvent
  arbitrumgoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapAddLiquidityEvent!]!
  arbitrumgoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapRemoveLiquidityEvent
  arbitrumgoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapRemoveLiquidityEvent!]!
  arbitrumgoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapExchange
  arbitrumgoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapExchange_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapExchange!]!
  arbitrumgoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SwapDailyVolume
  arbitrumgoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SwapDailyVolume_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SwapDailyVolume!]!
  arbitrumgoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SwapHourlyVolume
  arbitrumgoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SwapHourlyVolume_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SwapHourlyVolume!]!
  arbitrumgoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SwapWeeklyVolume
  arbitrumgoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SwapWeeklyVolume_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SwapWeeklyVolume!]!
  arbitrumgoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapEvent
  arbitrumgoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapEvent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapEvent!]!
  arbitrumgoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SwapTradeVolume
  arbitrumgoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SwapTradeVolume_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  arbitrumgoerli__meta(block: arbitrumgoerli_Block_height): arbitrumgoerli__Meta_
  optimism_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SystemInfo
  optimism_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SystemInfo_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SystemInfo!]!
  optimism_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_PooledToken
  optimism_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_PooledToken_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_PooledToken!]!
  optimism_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwap
  optimism_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwap_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwap!]!
  optimism_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapAddLiquidityEvent
  optimism_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapAddLiquidityEvent_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapAddLiquidityEvent!]!
  optimism_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapRemoveLiquidityEvent
  optimism_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapRemoveLiquidityEvent!]!
  optimism_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapExchange
  optimism_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapExchange_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapExchange!]!
  optimism_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SwapDailyVolume
  optimism_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SwapDailyVolume_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SwapDailyVolume!]!
  optimism_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SwapHourlyVolume
  optimism_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SwapHourlyVolume_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SwapHourlyVolume!]!
  optimism_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SwapWeeklyVolume
  optimism_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SwapWeeklyVolume_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SwapWeeklyVolume!]!
  optimism_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapEvent
  optimism_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapEvent_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapEvent!]!
  optimism_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SwapTradeVolume
  optimism_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SwapTradeVolume_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  optimism__meta(block: optimism_Block_height): optimism__Meta_
  staginggoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SystemInfo
  staginggoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SystemInfo_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SystemInfo!]!
  staginggoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_PooledToken
  staginggoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_PooledToken_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_PooledToken!]!
  staginggoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwap
  staginggoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwap_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwap!]!
  staginggoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwapAddLiquidityEvent
  staginggoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwapAddLiquidityEvent!]!
  staginggoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwapRemoveLiquidityEvent
  staginggoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwapRemoveLiquidityEvent!]!
  staginggoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwapExchange
  staginggoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwapExchange_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwapExchange!]!
  staginggoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SwapDailyVolume
  staginggoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SwapDailyVolume_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SwapDailyVolume!]!
  staginggoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SwapHourlyVolume
  staginggoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SwapHourlyVolume_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SwapHourlyVolume!]!
  staginggoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SwapWeeklyVolume
  staginggoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SwapWeeklyVolume_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SwapWeeklyVolume!]!
  staginggoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwapEvent
  staginggoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwapEvent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwapEvent!]!
  staginggoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SwapTradeVolume
  staginggoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SwapTradeVolume_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SwapTradeVolume!]!
  stagingmumbai_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SystemInfo
  stagingmumbai_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SystemInfo_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SystemInfo!]!
  stagingmumbai_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_PooledToken
  stagingmumbai_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_PooledToken_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_PooledToken!]!
  stagingmumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwap
  stagingmumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwap_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwap!]!
  stagingmumbai_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwapAddLiquidityEvent
  stagingmumbai_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwapAddLiquidityEvent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwapAddLiquidityEvent!]!
  stagingmumbai_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwapRemoveLiquidityEvent
  stagingmumbai_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwapRemoveLiquidityEvent!]!
  stagingmumbai_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwapExchange
  stagingmumbai_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwapExchange_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwapExchange!]!
  stagingmumbai_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SwapDailyVolume
  stagingmumbai_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SwapDailyVolume_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SwapDailyVolume!]!
  stagingmumbai_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SwapHourlyVolume
  stagingmumbai_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SwapHourlyVolume_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SwapHourlyVolume!]!
  stagingmumbai_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SwapWeeklyVolume
  stagingmumbai_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SwapWeeklyVolume_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SwapWeeklyVolume!]!
  stagingmumbai_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwapEvent
  stagingmumbai_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwapEvent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwapEvent!]!
  stagingmumbai_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SwapTradeVolume
  stagingmumbai_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SwapTradeVolume_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  stagingmumbai__meta(block: stagingmumbai_Block_height): stagingmumbai__Meta_
  bnb_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SystemInfo
  bnb_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SystemInfo_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SystemInfo!]!
  bnb_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_PooledToken
  bnb_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_PooledToken_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_PooledToken!]!
  bnb_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwap
  bnb_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwap_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwap!]!
  bnb_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapAddLiquidityEvent
  bnb_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapAddLiquidityEvent_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapAddLiquidityEvent!]!
  bnb_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapRemoveLiquidityEvent
  bnb_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapRemoveLiquidityEvent!]!
  bnb_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapExchange
  bnb_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapExchange_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapExchange!]!
  bnb_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SwapDailyVolume
  bnb_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SwapDailyVolume_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SwapDailyVolume!]!
  bnb_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SwapHourlyVolume
  bnb_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SwapHourlyVolume_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SwapHourlyVolume!]!
  bnb_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SwapWeeklyVolume
  bnb_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SwapWeeklyVolume_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SwapWeeklyVolume!]!
  bnb_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapEvent
  bnb_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapEvent_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapEvent!]!
  bnb_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SwapTradeVolume
  bnb_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SwapTradeVolume_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  bnb__meta(block: bnb_Block_height): bnb__Meta_
  mumbai_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SystemInfo
  mumbai_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SystemInfo_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SystemInfo!]!
  mumbai_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_PooledToken
  mumbai_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_PooledToken_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_PooledToken!]!
  mumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwap
  mumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwap_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwap!]!
  mumbai_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapAddLiquidityEvent
  mumbai_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapAddLiquidityEvent_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapAddLiquidityEvent!]!
  mumbai_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapRemoveLiquidityEvent
  mumbai_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapRemoveLiquidityEvent!]!
  mumbai_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapExchange
  mumbai_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapExchange_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapExchange!]!
  mumbai_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SwapDailyVolume
  mumbai_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SwapDailyVolume_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SwapDailyVolume!]!
  mumbai_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SwapHourlyVolume
  mumbai_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SwapHourlyVolume_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SwapHourlyVolume!]!
  mumbai_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SwapWeeklyVolume
  mumbai_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SwapWeeklyVolume_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SwapWeeklyVolume!]!
  mumbai_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapEvent
  mumbai_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapEvent_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapEvent!]!
  mumbai_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SwapTradeVolume
  mumbai_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SwapTradeVolume_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  mumbai__meta(block: mumbai_Block_height): mumbai__Meta_
  goerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SystemInfo
  goerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SystemInfo_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SystemInfo!]!
  goerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapAddLiquidityEvent
  goerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapAddLiquidityEvent!]!
  goerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapRemoveLiquidityEvent
  goerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapRemoveLiquidityEvent!]!
  goerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapExchange
  goerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapExchange_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapExchange!]!
  goerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SwapDailyVolume
  goerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SwapDailyVolume_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SwapDailyVolume!]!
  goerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SwapHourlyVolume
  goerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SwapHourlyVolume_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SwapHourlyVolume!]!
  goerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SwapWeeklyVolume
  goerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SwapWeeklyVolume_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SwapWeeklyVolume!]!
  goerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapEvent
  goerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapEvent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapEvent!]!
  goerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SwapTradeVolume
  goerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SwapTradeVolume_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SwapTradeVolume!]!
  arbitrumone_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SystemInfo
  arbitrumone_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SystemInfo_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SystemInfo!]!
  arbitrumone_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_PooledToken
  arbitrumone_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_PooledToken_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_PooledToken!]!
  arbitrumone_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwap
  arbitrumone_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwap_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwap!]!
  arbitrumone_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapAddLiquidityEvent
  arbitrumone_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapAddLiquidityEvent_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapAddLiquidityEvent!]!
  arbitrumone_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapRemoveLiquidityEvent
  arbitrumone_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapRemoveLiquidityEvent!]!
  arbitrumone_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapExchange
  arbitrumone_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapExchange_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapExchange!]!
  arbitrumone_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SwapDailyVolume
  arbitrumone_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SwapDailyVolume_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SwapDailyVolume!]!
  arbitrumone_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SwapHourlyVolume
  arbitrumone_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SwapHourlyVolume_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SwapHourlyVolume!]!
  arbitrumone_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SwapWeeklyVolume
  arbitrumone_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SwapWeeklyVolume_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SwapWeeklyVolume!]!
  arbitrumone_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapEvent
  arbitrumone_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapEvent_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapEvent!]!
  arbitrumone_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SwapTradeVolume
  arbitrumone_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SwapTradeVolume_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  arbitrumone__meta(block: arbitrumone_Block_height): arbitrumone__Meta_
  xdai_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SystemInfo
  xdai_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SystemInfo_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SystemInfo!]!
  xdai_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_PooledToken
  xdai_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_PooledToken_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_PooledToken!]!
  xdai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwap
  xdai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwap_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwap!]!
  xdai_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapAddLiquidityEvent
  xdai_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapAddLiquidityEvent_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapAddLiquidityEvent!]!
  xdai_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapRemoveLiquidityEvent
  xdai_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapRemoveLiquidityEvent!]!
  xdai_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapExchange
  xdai_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapExchange_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapExchange!]!
  xdai_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SwapDailyVolume
  xdai_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SwapDailyVolume_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SwapDailyVolume!]!
  xdai_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SwapHourlyVolume
  xdai_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SwapHourlyVolume_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SwapHourlyVolume!]!
  xdai_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SwapWeeklyVolume
  xdai_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SwapWeeklyVolume_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SwapWeeklyVolume!]!
  xdai_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapEvent
  xdai_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapEvent_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapEvent!]!
  xdai_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SwapTradeVolume
  xdai_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SwapTradeVolume_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  xdai__meta(block: xdai_Block_height): xdai__Meta_
  stagingarbitrumgoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SystemInfo
  stagingarbitrumgoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SystemInfo_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SystemInfo!]!
  stagingarbitrumgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_PooledToken
  stagingarbitrumgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_PooledToken_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_PooledToken!]!
  stagingarbitrumgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwap
  stagingarbitrumgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwap_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwap!]!
  stagingarbitrumgoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwapAddLiquidityEvent
  stagingarbitrumgoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwapAddLiquidityEvent!]!
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent!]!
  stagingarbitrumgoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwapExchange
  stagingarbitrumgoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwapExchange_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwapExchange!]!
  stagingarbitrumgoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SwapDailyVolume
  stagingarbitrumgoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SwapDailyVolume_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SwapDailyVolume!]!
  stagingarbitrumgoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SwapHourlyVolume
  stagingarbitrumgoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SwapHourlyVolume_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SwapHourlyVolume!]!
  stagingarbitrumgoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SwapWeeklyVolume
  stagingarbitrumgoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SwapWeeklyVolume_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SwapWeeklyVolume!]!
  stagingarbitrumgoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwapEvent
  stagingarbitrumgoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwapEvent_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwapEvent!]!
  stagingarbitrumgoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SwapTradeVolume
  stagingarbitrumgoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SwapTradeVolume_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  stagingarbitrumgoerli__meta(block: stagingarbitrumgoerli_Block_height): stagingarbitrumgoerli__Meta_
  polygon_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SystemInfo
  polygon_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SystemInfo_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SystemInfo!]!
  polygon_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_PooledToken
  polygon_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_PooledToken_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_PooledToken!]!
  polygon_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwap
  polygon_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwap_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwap!]!
  polygon_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapAddLiquidityEvent
  polygon_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapAddLiquidityEvent_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapAddLiquidityEvent!]!
  polygon_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapRemoveLiquidityEvent
  polygon_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapRemoveLiquidityEvent!]!
  polygon_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapExchange
  polygon_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapExchange_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapExchange!]!
  polygon_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SwapDailyVolume
  polygon_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SwapDailyVolume_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SwapDailyVolume!]!
  polygon_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SwapHourlyVolume
  polygon_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SwapHourlyVolume_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SwapHourlyVolume!]!
  polygon_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SwapWeeklyVolume
  polygon_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SwapWeeklyVolume_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SwapWeeklyVolume!]!
  polygon_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapEvent
  polygon_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapEvent_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapEvent!]!
  polygon_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SwapTradeVolume
  polygon_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SwapTradeVolume_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  polygon__meta(block: polygon_Block_height): polygon__Meta_
  testoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
  optimismgoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SystemInfo
  optimismgoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SystemInfo_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SystemInfo!]!
  optimismgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_PooledToken
  optimismgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_PooledToken_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_PooledToken!]!
  optimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwap
  optimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwap_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwap!]!
  optimismgoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapAddLiquidityEvent
  optimismgoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapAddLiquidityEvent!]!
  optimismgoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapRemoveLiquidityEvent
  optimismgoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapRemoveLiquidityEvent!]!
  optimismgoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapExchange
  optimismgoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapExchange_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapExchange!]!
  optimismgoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SwapDailyVolume
  optimismgoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SwapDailyVolume_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SwapDailyVolume!]!
  optimismgoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SwapHourlyVolume
  optimismgoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SwapHourlyVolume_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SwapHourlyVolume!]!
  optimismgoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SwapWeeklyVolume
  optimismgoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SwapWeeklyVolume_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SwapWeeklyVolume!]!
  optimismgoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapEvent
  optimismgoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapEvent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapEvent!]!
  optimismgoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SwapTradeVolume
  optimismgoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SwapTradeVolume_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  optimismgoerli__meta(block: optimismgoerli_Block_height): optimismgoerli__Meta_
  stagingoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetStatus
  stagingoptimismgoerli_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetStatus_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetStatus!]!
  stagingoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Sequencer
  stagingoptimismgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Sequencer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Sequencer!]!
  stagingoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  stagingoptimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginMessage
  stagingoptimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginMessage!]!
  stagingoptimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AggregateRoot
  stagingoptimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AggregateRoot_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AggregateRoot!]!
  stagingoptimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_ConnectorMeta
  stagingoptimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_ConnectorMeta!]!
  stagingoptimismgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootCount
  stagingoptimismgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootCount_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootCount!]!
  stagingoptimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootMessageSent
  stagingoptimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageSent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootMessageSent!]!
  stagingmumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Asset
  stagingmumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Asset_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Asset!]!
  stagingmumbai_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AssetStatus
  stagingmumbai_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AssetStatus_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AssetStatus!]!
  stagingmumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AssetBalance
  stagingmumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AssetBalance_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AssetBalance!]!
  stagingmumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Router
  stagingmumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Router_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Router!]!
  stagingmumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Setting
  stagingmumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Setting_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Setting!]!
  stagingmumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Relayer
  stagingmumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Relayer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Relayer!]!
  stagingmumbai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Sequencer
  stagingmumbai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Sequencer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Sequencer!]!
  stagingmumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginTransfer
  stagingmumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginTransfer!]!
  stagingmumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_DestinationTransfer
  stagingmumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_DestinationTransfer!]!
  stagingmumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginMessage
  stagingmumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginMessage!]!
  stagingmumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AggregateRoot
  stagingmumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AggregateRoot_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AggregateRoot!]!
  stagingmumbai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_ConnectorMeta
  stagingmumbai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_ConnectorMeta_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_ConnectorMeta!]!
  stagingmumbai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootCount
  stagingmumbai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootCount_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootCount!]!
  stagingmumbai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootMessageSent
  stagingmumbai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootMessageSent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootMessageSent!]!
  stagingarbitrumgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Asset
  stagingarbitrumgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Asset_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Asset!]!
  stagingarbitrumgoerli_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_AssetStatus
  stagingarbitrumgoerli_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_AssetStatus_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_AssetStatus!]!
  stagingarbitrumgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_AssetBalance
  stagingarbitrumgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_AssetBalance_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_AssetBalance!]!
  stagingarbitrumgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Router
  stagingarbitrumgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Router_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Router!]!
  stagingarbitrumgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Setting
  stagingarbitrumgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Setting_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Setting!]!
  stagingarbitrumgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Relayer
  stagingarbitrumgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Relayer_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Relayer!]!
  stagingarbitrumgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Sequencer
  stagingarbitrumgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Sequencer_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Sequencer!]!
  stagingarbitrumgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_OriginTransfer
  stagingarbitrumgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_OriginTransfer_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_OriginTransfer!]!
  stagingarbitrumgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_DestinationTransfer
  stagingarbitrumgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_DestinationTransfer_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_DestinationTransfer!]!
  stagingarbitrumgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_OriginMessage
  stagingarbitrumgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_OriginMessage_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_OriginMessage!]!
  stagingarbitrumgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_AggregateRoot
  stagingarbitrumgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_AggregateRoot_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_AggregateRoot!]!
  stagingarbitrumgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_ConnectorMeta
  stagingarbitrumgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_ConnectorMeta_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_ConnectorMeta!]!
  stagingarbitrumgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_RootCount
  stagingarbitrumgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_RootCount_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_RootCount!]!
  stagingarbitrumgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_RootMessageSent
  stagingarbitrumgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_RootMessageSent_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_RootMessageSent!]!
  arbitrumone_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Asset
  arbitrumone_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Asset_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Asset!]!
  arbitrumone_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_AssetBalance
  arbitrumone_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_AssetBalance_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_AssetBalance!]!
  arbitrumone_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Router
  arbitrumone_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Router_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Router!]!
  arbitrumone_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Setting
  arbitrumone_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Setting_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Setting!]!
  arbitrumone_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Relayer
  arbitrumone_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Relayer_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Relayer!]!
  arbitrumone_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_TransferRelayerFee
  arbitrumone_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_TransferRelayerFee_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_TransferRelayerFee!]!
  arbitrumone_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Sequencer
  arbitrumone_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Sequencer_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Sequencer!]!
  arbitrumone_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_OriginTransfer
  arbitrumone_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_OriginTransfer_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_OriginTransfer!]!
  arbitrumone_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_DestinationTransfer
  arbitrumone_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_DestinationTransfer_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_DestinationTransfer!]!
  arbitrumone_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_OriginMessage
  arbitrumone_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_OriginMessage_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_OriginMessage!]!
  arbitrumone_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_AggregateRoot
  arbitrumone_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_AggregateRoot_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_AggregateRoot!]!
  arbitrumone_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_ConnectorMeta
  arbitrumone_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_ConnectorMeta_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_ConnectorMeta!]!
  arbitrumone_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_RootCount
  arbitrumone_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_RootCount_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_RootCount!]!
  arbitrumone_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_RootMessageSent
  arbitrumone_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_RootMessageSent_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_RootMessageSent!]!
  arbitrumone_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapLiquidity
  arbitrumone_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapLiquidity_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapLiquidity!]!
  optimism_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Asset
  optimism_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Asset_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Asset!]!
  optimism_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_AssetBalance
  optimism_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_AssetBalance_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_AssetBalance!]!
  optimism_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Router
  optimism_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Router_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Router!]!
  optimism_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Setting
  optimism_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Setting_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Setting!]!
  optimism_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Relayer
  optimism_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Relayer_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Relayer!]!
  optimism_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_TransferRelayerFee
  optimism_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_TransferRelayerFee_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_TransferRelayerFee!]!
  optimism_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Sequencer
  optimism_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Sequencer_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Sequencer!]!
  optimism_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_OriginTransfer
  optimism_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_OriginTransfer_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_OriginTransfer!]!
  optimism_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_DestinationTransfer
  optimism_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_DestinationTransfer_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_DestinationTransfer!]!
  optimism_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_OriginMessage
  optimism_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_OriginMessage_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_OriginMessage!]!
  optimism_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_AggregateRoot
  optimism_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_AggregateRoot_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_AggregateRoot!]!
  optimism_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_ConnectorMeta
  optimism_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_ConnectorMeta_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_ConnectorMeta!]!
  optimism_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_RootCount
  optimism_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_RootCount_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_RootCount!]!
  optimism_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_RootMessageSent
  optimism_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_RootMessageSent_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_RootMessageSent!]!
  optimism_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapLiquidity
  optimism_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapLiquidity_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapLiquidity!]!
  bnb_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Asset
  bnb_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Asset_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Asset!]!
  bnb_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_AssetBalance
  bnb_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_AssetBalance_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_AssetBalance!]!
  bnb_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Router
  bnb_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Router_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Router!]!
  bnb_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Setting
  bnb_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Setting_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Setting!]!
  bnb_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Relayer
  bnb_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Relayer_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Relayer!]!
  bnb_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_TransferRelayerFee
  bnb_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_TransferRelayerFee_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_TransferRelayerFee!]!
  bnb_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Sequencer
  bnb_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Sequencer_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Sequencer!]!
  bnb_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_OriginTransfer
  bnb_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_OriginTransfer_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_OriginTransfer!]!
  bnb_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_DestinationTransfer
  bnb_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_DestinationTransfer_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_DestinationTransfer!]!
  bnb_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_OriginMessage
  bnb_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_OriginMessage_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_OriginMessage!]!
  bnb_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_AggregateRoot
  bnb_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_AggregateRoot_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_AggregateRoot!]!
  bnb_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_ConnectorMeta
  bnb_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_ConnectorMeta_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_ConnectorMeta!]!
  bnb_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_RootCount
  bnb_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_RootCount_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_RootCount!]!
  bnb_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_RootMessageSent
  bnb_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_RootMessageSent_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_RootMessageSent!]!
  bnb_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapLiquidity
  bnb_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapLiquidity_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapLiquidity!]!
  mumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Asset
  mumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Asset_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Asset!]!
  mumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AssetBalance
  mumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AssetBalance_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AssetBalance!]!
  mumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Router
  mumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Router_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Router!]!
  mumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Setting
  mumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Setting_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Setting!]!
  mumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Relayer
  mumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Relayer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Relayer!]!
  mumbai_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_TransferRelayerFee
  mumbai_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_TransferRelayerFee_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_TransferRelayerFee!]!
  mumbai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Sequencer
  mumbai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Sequencer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Sequencer!]!
  mumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginTransfer
  mumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginTransfer!]!
  mumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_DestinationTransfer
  mumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_DestinationTransfer!]!
  mumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginMessage
  mumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginMessage!]!
  mumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AggregateRoot
  mumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AggregateRoot_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AggregateRoot!]!
  mumbai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_ConnectorMeta
  mumbai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_ConnectorMeta_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_ConnectorMeta!]!
  mumbai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_RootCount
  mumbai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_RootCount_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_RootCount!]!
  mumbai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_RootMessageSent
  mumbai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_RootMessageSent_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_RootMessageSent!]!
  mumbai_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapLiquidity
  mumbai_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapLiquidity_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapLiquidity!]!
  mainnet_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Asset
  mainnet_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Asset_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Asset!]!
  mainnet_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AssetBalance
  mainnet_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AssetBalance_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AssetBalance!]!
  mainnet_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Router
  mainnet_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Router_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Router!]!
  mainnet_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Setting
  mainnet_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Setting_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Setting!]!
  mainnet_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Relayer
  mainnet_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Relayer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Relayer!]!
  mainnet_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_TransferRelayerFee
  mainnet_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_TransferRelayerFee_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_TransferRelayerFee!]!
  mainnet_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Sequencer
  mainnet_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Sequencer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Sequencer!]!
  mainnet_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OriginTransfer
  mainnet_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OriginTransfer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OriginTransfer!]!
  mainnet_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_DestinationTransfer
  mainnet_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_DestinationTransfer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_DestinationTransfer!]!
  mainnet_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OriginMessage
  mainnet_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OriginMessage_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OriginMessage!]!
  mainnet_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregateRoot
  mainnet_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregateRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregateRoot!]!
  mainnet_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_ConnectorMeta
  mainnet_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_ConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_ConnectorMeta!]!
  mainnet_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootCount
  mainnet_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootCount_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootCount!]!
  mainnet_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootMessageSent
  mainnet_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootMessageSent_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootMessageSent!]!
  mainnet_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_StableSwap
  mainnet_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_StableSwap_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_StableSwap!]!
  mainnet_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_PooledToken
  mainnet_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_PooledToken_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_PooledToken!]!
  mainnet_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_StableSwapLiquidity
  mainnet_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_StableSwapLiquidity_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_StableSwapLiquidity!]!
  arbitrumgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Asset
  arbitrumgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Asset_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Asset!]!
  arbitrumgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_AssetBalance
  arbitrumgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_AssetBalance_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_AssetBalance!]!
  arbitrumgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Router
  arbitrumgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Router_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Router!]!
  arbitrumgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Setting
  arbitrumgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Setting_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Setting!]!
  arbitrumgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Relayer
  arbitrumgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Relayer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Relayer!]!
  arbitrumgoerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_TransferRelayerFee
  arbitrumgoerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_TransferRelayerFee_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_TransferRelayerFee!]!
  arbitrumgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Sequencer
  arbitrumgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Sequencer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Sequencer!]!
  arbitrumgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_OriginTransfer
  arbitrumgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_OriginTransfer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_OriginTransfer!]!
  arbitrumgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_DestinationTransfer
  arbitrumgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_DestinationTransfer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_DestinationTransfer!]!
  arbitrumgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_OriginMessage
  arbitrumgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_OriginMessage_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_OriginMessage!]!
  arbitrumgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_AggregateRoot
  arbitrumgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_AggregateRoot_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_AggregateRoot!]!
  arbitrumgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_ConnectorMeta
  arbitrumgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_ConnectorMeta_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_ConnectorMeta!]!
  arbitrumgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_RootCount
  arbitrumgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_RootCount_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_RootCount!]!
  arbitrumgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_RootMessageSent
  arbitrumgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_RootMessageSent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_RootMessageSent!]!
  arbitrumgoerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapLiquidity
  arbitrumgoerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapLiquidity_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapLiquidity!]!
  polygon_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Asset
  polygon_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Asset_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Asset!]!
  polygon_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_AssetBalance
  polygon_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_AssetBalance_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_AssetBalance!]!
  polygon_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Router
  polygon_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Router_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Router!]!
  polygon_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Setting
  polygon_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Setting_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Setting!]!
  polygon_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Relayer
  polygon_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Relayer_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Relayer!]!
  polygon_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_TransferRelayerFee
  polygon_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_TransferRelayerFee_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_TransferRelayerFee!]!
  polygon_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Sequencer
  polygon_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Sequencer_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Sequencer!]!
  polygon_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_OriginTransfer
  polygon_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_OriginTransfer_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_OriginTransfer!]!
  polygon_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_DestinationTransfer
  polygon_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_DestinationTransfer_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_DestinationTransfer!]!
  polygon_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_OriginMessage
  polygon_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_OriginMessage_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_OriginMessage!]!
  polygon_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_AggregateRoot
  polygon_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_AggregateRoot_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_AggregateRoot!]!
  polygon_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_ConnectorMeta
  polygon_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_ConnectorMeta_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_ConnectorMeta!]!
  polygon_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_RootCount
  polygon_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_RootCount_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_RootCount!]!
  polygon_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_RootMessageSent
  polygon_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_RootMessageSent_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_RootMessageSent!]!
  polygon_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapLiquidity
  polygon_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapLiquidity_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapLiquidity!]!
  optimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Asset
  optimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Asset_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Asset!]!
  optimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AssetBalance
  optimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AssetBalance_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AssetBalance!]!
  optimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Router
  optimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Router_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Router!]!
  optimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Setting
  optimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Setting_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Setting!]!
  optimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Relayer
  optimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Relayer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Relayer!]!
  optimismgoerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_TransferRelayerFee
  optimismgoerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_TransferRelayerFee_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_TransferRelayerFee!]!
  optimismgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Sequencer
  optimismgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Sequencer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Sequencer!]!
  optimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_OriginTransfer
  optimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_OriginTransfer!]!
  optimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_DestinationTransfer
  optimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_DestinationTransfer!]!
  optimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_OriginMessage
  optimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_OriginMessage!]!
  optimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AggregateRoot
  optimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AggregateRoot_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AggregateRoot!]!
  optimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_ConnectorMeta
  optimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_ConnectorMeta_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_ConnectorMeta!]!
  optimismgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootCount
  optimismgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootCount_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootCount!]!
  optimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageSent
  optimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageSent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageSent!]!
  optimismgoerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapLiquidity
  optimismgoerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapLiquidity_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapLiquidity!]!
  staginggoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Router!]!
  staginggoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Setting
  staginggoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Setting_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Setting!]!
  staginggoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Relayer
  staginggoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Relayer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Relayer!]!
  staginggoerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_TransferRelayerFee
  staginggoerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_TransferRelayerFee_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_TransferRelayerFee!]!
  staginggoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Sequencer
  staginggoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Sequencer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Sequencer!]!
  staginggoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_DestinationTransfer!]!
  staginggoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OriginMessage
  staginggoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginMessage_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OriginMessage!]!
  staginggoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AggregateRoot
  staginggoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AggregateRoot_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AggregateRoot!]!
  staginggoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_ConnectorMeta
  staginggoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_ConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_ConnectorMeta!]!
  staginggoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootCount
  staginggoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootCount_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootCount!]!
  staginggoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootMessageSent
  staginggoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageSent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootMessageSent!]!
  local1338_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Asset
  local1338_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Asset_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Asset!]!
  local1338_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_AssetBalance
  local1338_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AssetBalance_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_AssetBalance!]!
  local1338_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Router
  local1338_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Router_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Router!]!
  local1338_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Setting
  local1338_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Setting_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Setting!]!
  local1338_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Relayer
  local1338_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Relayer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Relayer!]!
  local1338_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_TransferRelayerFee
  local1338_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_TransferRelayerFee_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_TransferRelayerFee!]!
  local1338_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Sequencer
  local1338_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Sequencer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Sequencer!]!
  local1338_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_OriginTransfer
  local1338_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_OriginTransfer!]!
  local1338_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_DestinationTransfer
  local1338_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_DestinationTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_DestinationTransfer!]!
  local1338_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_OriginMessage
  local1338_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginMessage_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_OriginMessage!]!
  local1338_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_AggregateRoot
  local1338_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AggregateRoot_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_AggregateRoot!]!
  local1338_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_ConnectorMeta
  local1338_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_ConnectorMeta_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_ConnectorMeta!]!
  local1338_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_RootCount
  local1338_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_RootCount_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_RootCount!]!
  local1338_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_RootMessageSent
  local1338_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_RootMessageSent_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_RootMessageSent!]!
  local1338_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwap
  local1338_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwap_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwap!]!
  local1338_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_PooledToken
  local1338_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_PooledToken_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_PooledToken!]!
  local1338_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwapAddLiquidityEvent
  local1338_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwapAddLiquidityEvent_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwapAddLiquidityEvent!]!
  local1338_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwapRemoveLiquidityEvent
  local1338_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwapRemoveLiquidityEvent!]!
  local1338_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwapExchange
  local1338_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwapExchange_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwapExchange!]!
  local1338_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SwapDailyVolume
  local1338_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SwapDailyVolume_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SwapDailyVolume!]!
  local1338_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SwapHourlyVolume
  local1338_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SwapHourlyVolume_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SwapHourlyVolume!]!
  local1338_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SwapWeeklyVolume
  local1338_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SwapWeeklyVolume_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SwapWeeklyVolume!]!
  local1338_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwapEvent
  local1338_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwapEvent_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwapEvent!]!
  local1338_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SwapTradeVolume
  local1338_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SwapTradeVolume_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  local1338__meta(block: local1338_Block_height): local1338__Meta_
  local1337_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Asset!]!
  local1337_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_AssetBalance!]!
  local1337_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Router!]!
  local1337_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Setting!]!
  local1337_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Relayer!]!
  local1337_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_TransferRelayerFee
  local1337_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_TransferRelayerFee_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_TransferRelayerFee!]!
  local1337_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Sequencer
  local1337_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Sequencer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Sequencer!]!
  local1337_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_DestinationTransfer!]!
  local1337_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_OriginMessage
  local1337_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginMessage_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_OriginMessage!]!
  local1337_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_AggregateRoot
  local1337_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AggregateRoot_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_AggregateRoot!]!
  local1337_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_ConnectorMeta
  local1337_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_ConnectorMeta_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_ConnectorMeta!]!
  local1337_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_RootCount
  local1337_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_RootCount_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_RootCount!]!
  local1337_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_RootMessageSent
  local1337_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_RootMessageSent_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_RootMessageSent!]!
  local1337_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwap!]!
  local1337_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_PooledToken
  local1337_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_PooledToken_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_PooledToken!]!
  local1337_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwapAddLiquidityEvent
  local1337_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwapAddLiquidityEvent_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwapAddLiquidityEvent!]!
  local1337_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwapRemoveLiquidityEvent
  local1337_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwapRemoveLiquidityEvent!]!
  local1337_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwapExchange
  local1337_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwapExchange_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwapExchange!]!
  local1337_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SwapDailyVolume
  local1337_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SwapDailyVolume_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SwapDailyVolume!]!
  local1337_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SwapHourlyVolume
  local1337_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SwapHourlyVolume_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SwapHourlyVolume!]!
  local1337_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SwapWeeklyVolume
  local1337_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SwapWeeklyVolume_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SwapWeeklyVolume!]!
  local1337_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwapEvent
  local1337_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwapEvent_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwapEvent!]!
  local1337_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SwapTradeVolume
  local1337_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SwapTradeVolume_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
  xdai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Asset
  xdai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Asset_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Asset!]!
  xdai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_AssetBalance
  xdai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_AssetBalance_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_AssetBalance!]!
  xdai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Router
  xdai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Router_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Router!]!
  xdai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Setting
  xdai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Setting_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Setting!]!
  xdai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Relayer
  xdai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Relayer_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Relayer!]!
  xdai_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_TransferRelayerFee
  xdai_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_TransferRelayerFee_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_TransferRelayerFee!]!
  xdai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Sequencer
  xdai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Sequencer_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Sequencer!]!
  xdai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_OriginTransfer
  xdai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_OriginTransfer_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_OriginTransfer!]!
  xdai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_DestinationTransfer
  xdai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_DestinationTransfer_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_DestinationTransfer!]!
  xdai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_OriginMessage
  xdai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_OriginMessage_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_OriginMessage!]!
  xdai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_AggregateRoot
  xdai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_AggregateRoot_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_AggregateRoot!]!
  xdai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_ConnectorMeta
  xdai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_ConnectorMeta_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_ConnectorMeta!]!
  xdai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_RootCount
  xdai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_RootCount_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_RootCount!]!
  xdai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_RootMessageSent
  xdai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_RootMessageSent_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_RootMessageSent!]!
  xdai_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapLiquidity
  xdai_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapLiquidity_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapLiquidity!]!
}

type Subscription {
  goerli_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootAggregated
  goerli_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootAggregated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootAggregated!]!
  goerli_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootPropagated
  goerli_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootPropagated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootPropagated!]!
  goerli_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregatedMessageRoot
  goerli_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregatedMessageRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregatedMessageRoot!]!
  goerli_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootManagerMeta
  goerli_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootManagerMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootManagerMeta!]!
  goerli_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_PolygonConnectorMeta
  goerli_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_PolygonConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_PolygonConnectorMeta!]!
  goerli_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OptimismConnectorMeta
  goerli_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OptimismConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OptimismConnectorMeta!]!
  goerli_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_BnbConnectorMeta
  goerli_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_BnbConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_BnbConnectorMeta!]!
  goerli_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ArbitrumConnectorMeta
  goerli_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ArbitrumConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ArbitrumConnectorMeta!]!
  goerli_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_GnosisConnectorMeta
  goerli_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_GnosisConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_GnosisConnectorMeta!]!
  goerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessageProcessed
  goerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageProcessed_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
  goerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Setting!]!
  goerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Relayer!]!
  goerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_TransferRelayerFee
  goerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_TransferRelayerFee_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_TransferRelayerFee!]!
  goerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Sequencer
  goerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Sequencer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Sequencer!]!
  goerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!
  goerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginMessage
  goerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginMessage!]!
  goerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregateRoot
  goerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregateRoot!]!
  goerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ConnectorMeta
  goerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ConnectorMeta!]!
  goerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootCount
  goerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootCount_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootCount!]!
  goerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessageSent
  goerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageSent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageSent!]!
  goerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwap!]!
  goerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_PooledToken
  goerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_PooledToken_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_PooledToken!]!
  goerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapLiquidity
  goerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapLiquidity_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapLiquidity!]!
  testgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Router!]!
  testgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
  mainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootAggregated
  mainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootAggregated_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootAggregated!]!
  mainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootPropagated
  mainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootPropagated_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootPropagated!]!
  mainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregatedMessageRoot
  mainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregatedMessageRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregatedMessageRoot!]!
  mainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootManagerMeta
  mainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootManagerMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootManagerMeta!]!
  mainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_PolygonConnectorMeta
  mainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_PolygonConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_PolygonConnectorMeta!]!
  mainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OptimismConnectorMeta
  mainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OptimismConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OptimismConnectorMeta!]!
  mainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_BnbConnectorMeta
  mainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_BnbConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_BnbConnectorMeta!]!
  mainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_ArbitrumConnectorMeta
  mainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_ArbitrumConnectorMeta!]!
  mainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_GnosisConnectorMeta
  mainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_GnosisConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_GnosisConnectorMeta!]!
  mainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootMessageProcessed
  mainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootMessageProcessed_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  mainnet__meta(block: mainnet_Block_height): mainnet__Meta_
  staginggoerli_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootAggregated
  staginggoerli_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootAggregated_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootAggregated!]!
  staginggoerli_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootPropagated
  staginggoerli_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootPropagated_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootPropagated!]!
  staginggoerli_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AggregatedMessageRoot
  staginggoerli_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AggregatedMessageRoot_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AggregatedMessageRoot!]!
  staginggoerli_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootManagerMeta
  staginggoerli_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootManagerMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootManagerMeta!]!
  staginggoerli_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_PolygonConnectorMeta
  staginggoerli_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_PolygonConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_PolygonConnectorMeta!]!
  staginggoerli_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OptimismConnectorMeta
  staginggoerli_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OptimismConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OptimismConnectorMeta!]!
  staginggoerli_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_BnbConnectorMeta
  staginggoerli_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_BnbConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_BnbConnectorMeta!]!
  staginggoerli_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_ArbitrumConnectorMeta
  staginggoerli_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_ArbitrumConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_ArbitrumConnectorMeta!]!
  staginggoerli_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_GnosisConnectorMeta
  staginggoerli_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_GnosisConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_GnosisConnectorMeta!]!
  staginggoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootMessageProcessed
  staginggoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageProcessed_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  stagingoptimismgoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SystemInfo
  stagingoptimismgoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SystemInfo_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SystemInfo!]!
  stagingoptimismgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_PooledToken
  stagingoptimismgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_PooledToken_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_PooledToken!]!
  stagingoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwapAddLiquidityEvent
  stagingoptimismgoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwapAddLiquidityEvent!]!
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwapRemoveLiquidityEvent
  stagingoptimismgoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwapRemoveLiquidityEvent!]!
  stagingoptimismgoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwapExchange
  stagingoptimismgoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwapExchange_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwapExchange!]!
  stagingoptimismgoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SwapDailyVolume
  stagingoptimismgoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SwapDailyVolume_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SwapDailyVolume!]!
  stagingoptimismgoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SwapHourlyVolume
  stagingoptimismgoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SwapHourlyVolume_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SwapHourlyVolume!]!
  stagingoptimismgoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SwapWeeklyVolume
  stagingoptimismgoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SwapWeeklyVolume_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SwapWeeklyVolume!]!
  stagingoptimismgoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwapEvent
  stagingoptimismgoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwapEvent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwapEvent!]!
  stagingoptimismgoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SwapTradeVolume
  stagingoptimismgoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SwapTradeVolume_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
  arbitrumgoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SystemInfo
  arbitrumgoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SystemInfo_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SystemInfo!]!
  arbitrumgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_PooledToken
  arbitrumgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_PooledToken_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_PooledToken!]!
  arbitrumgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwap
  arbitrumgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwap_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwap!]!
  arbitrumgoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapAddLiquidityEvent
  arbitrumgoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapAddLiquidityEvent!]!
  arbitrumgoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapRemoveLiquidityEvent
  arbitrumgoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapRemoveLiquidityEvent!]!
  arbitrumgoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapExchange
  arbitrumgoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapExchange_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapExchange!]!
  arbitrumgoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SwapDailyVolume
  arbitrumgoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SwapDailyVolume_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SwapDailyVolume!]!
  arbitrumgoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SwapHourlyVolume
  arbitrumgoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SwapHourlyVolume_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SwapHourlyVolume!]!
  arbitrumgoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SwapWeeklyVolume
  arbitrumgoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SwapWeeklyVolume_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SwapWeeklyVolume!]!
  arbitrumgoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapEvent
  arbitrumgoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapEvent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapEvent!]!
  arbitrumgoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_SwapTradeVolume
  arbitrumgoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_SwapTradeVolume_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  arbitrumgoerli__meta(block: arbitrumgoerli_Block_height): arbitrumgoerli__Meta_
  optimism_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SystemInfo
  optimism_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SystemInfo_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SystemInfo!]!
  optimism_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_PooledToken
  optimism_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_PooledToken_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_PooledToken!]!
  optimism_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwap
  optimism_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwap_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwap!]!
  optimism_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapAddLiquidityEvent
  optimism_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapAddLiquidityEvent_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapAddLiquidityEvent!]!
  optimism_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapRemoveLiquidityEvent
  optimism_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapRemoveLiquidityEvent!]!
  optimism_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapExchange
  optimism_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapExchange_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapExchange!]!
  optimism_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SwapDailyVolume
  optimism_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SwapDailyVolume_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SwapDailyVolume!]!
  optimism_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SwapHourlyVolume
  optimism_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SwapHourlyVolume_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SwapHourlyVolume!]!
  optimism_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SwapWeeklyVolume
  optimism_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SwapWeeklyVolume_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SwapWeeklyVolume!]!
  optimism_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapEvent
  optimism_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapEvent_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapEvent!]!
  optimism_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_SwapTradeVolume
  optimism_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_SwapTradeVolume_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  optimism__meta(block: optimism_Block_height): optimism__Meta_
  staginggoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SystemInfo
  staginggoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SystemInfo_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SystemInfo!]!
  staginggoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_PooledToken
  staginggoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_PooledToken_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_PooledToken!]!
  staginggoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwap
  staginggoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwap_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwap!]!
  staginggoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwapAddLiquidityEvent
  staginggoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwapAddLiquidityEvent!]!
  staginggoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwapRemoveLiquidityEvent
  staginggoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwapRemoveLiquidityEvent!]!
  staginggoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwapExchange
  staginggoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwapExchange_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwapExchange!]!
  staginggoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SwapDailyVolume
  staginggoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SwapDailyVolume_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SwapDailyVolume!]!
  staginggoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SwapHourlyVolume
  staginggoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SwapHourlyVolume_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SwapHourlyVolume!]!
  staginggoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SwapWeeklyVolume
  staginggoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SwapWeeklyVolume_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SwapWeeklyVolume!]!
  staginggoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwapEvent
  staginggoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwapEvent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_StableSwapEvent!]!
  staginggoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_SwapTradeVolume
  staginggoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SwapTradeVolume_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_SwapTradeVolume!]!
  stagingmumbai_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SystemInfo
  stagingmumbai_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SystemInfo_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SystemInfo!]!
  stagingmumbai_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_PooledToken
  stagingmumbai_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_PooledToken_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_PooledToken!]!
  stagingmumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwap
  stagingmumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwap_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwap!]!
  stagingmumbai_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwapAddLiquidityEvent
  stagingmumbai_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwapAddLiquidityEvent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwapAddLiquidityEvent!]!
  stagingmumbai_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwapRemoveLiquidityEvent
  stagingmumbai_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwapRemoveLiquidityEvent!]!
  stagingmumbai_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwapExchange
  stagingmumbai_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwapExchange_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwapExchange!]!
  stagingmumbai_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SwapDailyVolume
  stagingmumbai_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SwapDailyVolume_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SwapDailyVolume!]!
  stagingmumbai_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SwapHourlyVolume
  stagingmumbai_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SwapHourlyVolume_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SwapHourlyVolume!]!
  stagingmumbai_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SwapWeeklyVolume
  stagingmumbai_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SwapWeeklyVolume_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SwapWeeklyVolume!]!
  stagingmumbai_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwapEvent
  stagingmumbai_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwapEvent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwapEvent!]!
  stagingmumbai_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SwapTradeVolume
  stagingmumbai_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SwapTradeVolume_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  stagingmumbai__meta(block: stagingmumbai_Block_height): stagingmumbai__Meta_
  bnb_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SystemInfo
  bnb_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SystemInfo_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SystemInfo!]!
  bnb_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_PooledToken
  bnb_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_PooledToken_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_PooledToken!]!
  bnb_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwap
  bnb_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwap_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwap!]!
  bnb_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapAddLiquidityEvent
  bnb_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapAddLiquidityEvent_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapAddLiquidityEvent!]!
  bnb_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapRemoveLiquidityEvent
  bnb_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapRemoveLiquidityEvent!]!
  bnb_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapExchange
  bnb_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapExchange_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapExchange!]!
  bnb_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SwapDailyVolume
  bnb_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SwapDailyVolume_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SwapDailyVolume!]!
  bnb_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SwapHourlyVolume
  bnb_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SwapHourlyVolume_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SwapHourlyVolume!]!
  bnb_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SwapWeeklyVolume
  bnb_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SwapWeeklyVolume_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SwapWeeklyVolume!]!
  bnb_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapEvent
  bnb_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapEvent_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapEvent!]!
  bnb_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_SwapTradeVolume
  bnb_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_SwapTradeVolume_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  bnb__meta(block: bnb_Block_height): bnb__Meta_
  mumbai_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SystemInfo
  mumbai_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SystemInfo_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SystemInfo!]!
  mumbai_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_PooledToken
  mumbai_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_PooledToken_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_PooledToken!]!
  mumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwap
  mumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwap_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwap!]!
  mumbai_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapAddLiquidityEvent
  mumbai_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapAddLiquidityEvent_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapAddLiquidityEvent!]!
  mumbai_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapRemoveLiquidityEvent
  mumbai_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapRemoveLiquidityEvent!]!
  mumbai_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapExchange
  mumbai_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapExchange_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapExchange!]!
  mumbai_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SwapDailyVolume
  mumbai_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SwapDailyVolume_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SwapDailyVolume!]!
  mumbai_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SwapHourlyVolume
  mumbai_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SwapHourlyVolume_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SwapHourlyVolume!]!
  mumbai_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SwapWeeklyVolume
  mumbai_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SwapWeeklyVolume_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SwapWeeklyVolume!]!
  mumbai_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapEvent
  mumbai_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapEvent_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapEvent!]!
  mumbai_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SwapTradeVolume
  mumbai_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SwapTradeVolume_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  mumbai__meta(block: mumbai_Block_height): mumbai__Meta_
  goerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SystemInfo
  goerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SystemInfo_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SystemInfo!]!
  goerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapAddLiquidityEvent
  goerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapAddLiquidityEvent!]!
  goerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapRemoveLiquidityEvent
  goerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapRemoveLiquidityEvent!]!
  goerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapExchange
  goerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapExchange_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapExchange!]!
  goerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SwapDailyVolume
  goerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SwapDailyVolume_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SwapDailyVolume!]!
  goerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SwapHourlyVolume
  goerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SwapHourlyVolume_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SwapHourlyVolume!]!
  goerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SwapWeeklyVolume
  goerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SwapWeeklyVolume_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SwapWeeklyVolume!]!
  goerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwapEvent
  goerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwapEvent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwapEvent!]!
  goerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_SwapTradeVolume
  goerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SwapTradeVolume_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_SwapTradeVolume!]!
  arbitrumone_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SystemInfo
  arbitrumone_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SystemInfo_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SystemInfo!]!
  arbitrumone_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_PooledToken
  arbitrumone_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_PooledToken_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_PooledToken!]!
  arbitrumone_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwap
  arbitrumone_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwap_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwap!]!
  arbitrumone_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapAddLiquidityEvent
  arbitrumone_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapAddLiquidityEvent_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapAddLiquidityEvent!]!
  arbitrumone_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapRemoveLiquidityEvent
  arbitrumone_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapRemoveLiquidityEvent!]!
  arbitrumone_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapExchange
  arbitrumone_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapExchange_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapExchange!]!
  arbitrumone_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SwapDailyVolume
  arbitrumone_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SwapDailyVolume_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SwapDailyVolume!]!
  arbitrumone_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SwapHourlyVolume
  arbitrumone_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SwapHourlyVolume_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SwapHourlyVolume!]!
  arbitrumone_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SwapWeeklyVolume
  arbitrumone_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SwapWeeklyVolume_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SwapWeeklyVolume!]!
  arbitrumone_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapEvent
  arbitrumone_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapEvent_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapEvent!]!
  arbitrumone_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_SwapTradeVolume
  arbitrumone_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_SwapTradeVolume_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  arbitrumone__meta(block: arbitrumone_Block_height): arbitrumone__Meta_
  xdai_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SystemInfo
  xdai_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SystemInfo_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SystemInfo!]!
  xdai_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_PooledToken
  xdai_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_PooledToken_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_PooledToken!]!
  xdai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwap
  xdai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwap_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwap!]!
  xdai_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapAddLiquidityEvent
  xdai_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapAddLiquidityEvent_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapAddLiquidityEvent!]!
  xdai_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapRemoveLiquidityEvent
  xdai_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapRemoveLiquidityEvent!]!
  xdai_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapExchange
  xdai_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapExchange_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapExchange!]!
  xdai_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SwapDailyVolume
  xdai_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SwapDailyVolume_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SwapDailyVolume!]!
  xdai_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SwapHourlyVolume
  xdai_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SwapHourlyVolume_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SwapHourlyVolume!]!
  xdai_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SwapWeeklyVolume
  xdai_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SwapWeeklyVolume_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SwapWeeklyVolume!]!
  xdai_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapEvent
  xdai_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapEvent_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapEvent!]!
  xdai_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_SwapTradeVolume
  xdai_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_SwapTradeVolume_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  xdai__meta(block: xdai_Block_height): xdai__Meta_
  stagingarbitrumgoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SystemInfo
  stagingarbitrumgoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SystemInfo_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SystemInfo!]!
  stagingarbitrumgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_PooledToken
  stagingarbitrumgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_PooledToken_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_PooledToken!]!
  stagingarbitrumgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwap
  stagingarbitrumgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwap_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwap!]!
  stagingarbitrumgoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwapAddLiquidityEvent
  stagingarbitrumgoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwapAddLiquidityEvent!]!
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent
  stagingarbitrumgoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent!]!
  stagingarbitrumgoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwapExchange
  stagingarbitrumgoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwapExchange_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwapExchange!]!
  stagingarbitrumgoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SwapDailyVolume
  stagingarbitrumgoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SwapDailyVolume_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SwapDailyVolume!]!
  stagingarbitrumgoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SwapHourlyVolume
  stagingarbitrumgoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SwapHourlyVolume_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SwapHourlyVolume!]!
  stagingarbitrumgoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SwapWeeklyVolume
  stagingarbitrumgoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SwapWeeklyVolume_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SwapWeeklyVolume!]!
  stagingarbitrumgoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_StableSwapEvent
  stagingarbitrumgoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_StableSwapEvent_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_StableSwapEvent!]!
  stagingarbitrumgoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_SwapTradeVolume
  stagingarbitrumgoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_SwapTradeVolume_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  stagingarbitrumgoerli__meta(block: stagingarbitrumgoerli_Block_height): stagingarbitrumgoerli__Meta_
  polygon_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SystemInfo
  polygon_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SystemInfo_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SystemInfo!]!
  polygon_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_PooledToken
  polygon_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_PooledToken_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_PooledToken!]!
  polygon_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwap
  polygon_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwap_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwap!]!
  polygon_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapAddLiquidityEvent
  polygon_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapAddLiquidityEvent_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapAddLiquidityEvent!]!
  polygon_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapRemoveLiquidityEvent
  polygon_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapRemoveLiquidityEvent!]!
  polygon_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapExchange
  polygon_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapExchange_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapExchange!]!
  polygon_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SwapDailyVolume
  polygon_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SwapDailyVolume_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SwapDailyVolume!]!
  polygon_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SwapHourlyVolume
  polygon_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SwapHourlyVolume_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SwapHourlyVolume!]!
  polygon_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SwapWeeklyVolume
  polygon_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SwapWeeklyVolume_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SwapWeeklyVolume!]!
  polygon_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapEvent
  polygon_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapEvent_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapEvent!]!
  polygon_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_SwapTradeVolume
  polygon_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_SwapTradeVolume_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  polygon__meta(block: polygon_Block_height): polygon__Meta_
  testoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
  optimismgoerli_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SystemInfo
  optimismgoerli_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SystemInfo_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SystemInfo!]!
  optimismgoerli_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_PooledToken
  optimismgoerli_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_PooledToken_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_PooledToken!]!
  optimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwap
  optimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwap_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwap!]!
  optimismgoerli_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapAddLiquidityEvent
  optimismgoerli_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapAddLiquidityEvent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapAddLiquidityEvent!]!
  optimismgoerli_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapRemoveLiquidityEvent
  optimismgoerli_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapRemoveLiquidityEvent!]!
  optimismgoerli_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapExchange
  optimismgoerli_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapExchange_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapExchange!]!
  optimismgoerli_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SwapDailyVolume
  optimismgoerli_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SwapDailyVolume_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SwapDailyVolume!]!
  optimismgoerli_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SwapHourlyVolume
  optimismgoerli_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SwapHourlyVolume_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SwapHourlyVolume!]!
  optimismgoerli_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SwapWeeklyVolume
  optimismgoerli_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SwapWeeklyVolume_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SwapWeeklyVolume!]!
  optimismgoerli_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapEvent
  optimismgoerli_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapEvent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapEvent!]!
  optimismgoerli_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_SwapTradeVolume
  optimismgoerli_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SwapTradeVolume_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  optimismgoerli__meta(block: optimismgoerli_Block_height): optimismgoerli__Meta_
  stagingoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetStatus
  stagingoptimismgoerli_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetStatus_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetStatus!]!
  stagingoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Sequencer
  stagingoptimismgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Sequencer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Sequencer!]!
  stagingoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  stagingoptimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginMessage
  stagingoptimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginMessage!]!
  stagingoptimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AggregateRoot
  stagingoptimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AggregateRoot_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AggregateRoot!]!
  stagingoptimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_ConnectorMeta
  stagingoptimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_ConnectorMeta!]!
  stagingoptimismgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootCount
  stagingoptimismgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootCount_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootCount!]!
  stagingoptimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootMessageSent
  stagingoptimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageSent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootMessageSent!]!
  stagingmumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Asset
  stagingmumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Asset_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Asset!]!
  stagingmumbai_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AssetStatus
  stagingmumbai_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AssetStatus_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AssetStatus!]!
  stagingmumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AssetBalance
  stagingmumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AssetBalance_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AssetBalance!]!
  stagingmumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Router
  stagingmumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Router_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Router!]!
  stagingmumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Setting
  stagingmumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Setting_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Setting!]!
  stagingmumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Relayer
  stagingmumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Relayer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Relayer!]!
  stagingmumbai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Sequencer
  stagingmumbai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Sequencer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Sequencer!]!
  stagingmumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginTransfer
  stagingmumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginTransfer!]!
  stagingmumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_DestinationTransfer
  stagingmumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_DestinationTransfer!]!
  stagingmumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginMessage
  stagingmumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginMessage!]!
  stagingmumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AggregateRoot
  stagingmumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AggregateRoot_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AggregateRoot!]!
  stagingmumbai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_ConnectorMeta
  stagingmumbai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_ConnectorMeta_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_ConnectorMeta!]!
  stagingmumbai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootCount
  stagingmumbai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootCount_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootCount!]!
  stagingmumbai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootMessageSent
  stagingmumbai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootMessageSent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootMessageSent!]!
  stagingarbitrumgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Asset
  stagingarbitrumgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Asset_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Asset!]!
  stagingarbitrumgoerli_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_AssetStatus
  stagingarbitrumgoerli_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_AssetStatus_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_AssetStatus!]!
  stagingarbitrumgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_AssetBalance
  stagingarbitrumgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_AssetBalance_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_AssetBalance!]!
  stagingarbitrumgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Router
  stagingarbitrumgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Router_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Router!]!
  stagingarbitrumgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Setting
  stagingarbitrumgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Setting_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Setting!]!
  stagingarbitrumgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Relayer
  stagingarbitrumgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Relayer_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Relayer!]!
  stagingarbitrumgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_Sequencer
  stagingarbitrumgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_Sequencer_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_Sequencer!]!
  stagingarbitrumgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_OriginTransfer
  stagingarbitrumgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_OriginTransfer_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_OriginTransfer!]!
  stagingarbitrumgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_DestinationTransfer
  stagingarbitrumgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_DestinationTransfer_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_DestinationTransfer!]!
  stagingarbitrumgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_OriginMessage
  stagingarbitrumgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_OriginMessage_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_OriginMessage!]!
  stagingarbitrumgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_AggregateRoot
  stagingarbitrumgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_AggregateRoot_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_AggregateRoot!]!
  stagingarbitrumgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_ConnectorMeta
  stagingarbitrumgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_ConnectorMeta_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_ConnectorMeta!]!
  stagingarbitrumgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_RootCount
  stagingarbitrumgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_RootCount_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_RootCount!]!
  stagingarbitrumgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingarbitrumgoerli_RootMessageSent
  stagingarbitrumgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingarbitrumgoerli_RootMessageSent_orderBy
    orderDirection: stagingarbitrumgoerli_OrderDirection
    where: stagingarbitrumgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingarbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingarbitrumgoerli_RootMessageSent!]!
  arbitrumone_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Asset
  arbitrumone_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Asset_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Asset!]!
  arbitrumone_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_AssetBalance
  arbitrumone_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_AssetBalance_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_AssetBalance!]!
  arbitrumone_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Router
  arbitrumone_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Router_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Router!]!
  arbitrumone_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Setting
  arbitrumone_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Setting_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Setting!]!
  arbitrumone_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Relayer
  arbitrumone_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Relayer_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Relayer!]!
  arbitrumone_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_TransferRelayerFee
  arbitrumone_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_TransferRelayerFee_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_TransferRelayerFee!]!
  arbitrumone_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_Sequencer
  arbitrumone_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_Sequencer_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_Sequencer!]!
  arbitrumone_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_OriginTransfer
  arbitrumone_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_OriginTransfer_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_OriginTransfer!]!
  arbitrumone_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_DestinationTransfer
  arbitrumone_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_DestinationTransfer_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_DestinationTransfer!]!
  arbitrumone_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_OriginMessage
  arbitrumone_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_OriginMessage_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_OriginMessage!]!
  arbitrumone_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_AggregateRoot
  arbitrumone_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_AggregateRoot_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_AggregateRoot!]!
  arbitrumone_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_ConnectorMeta
  arbitrumone_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_ConnectorMeta_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_ConnectorMeta!]!
  arbitrumone_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_RootCount
  arbitrumone_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_RootCount_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_RootCount!]!
  arbitrumone_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_RootMessageSent
  arbitrumone_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_RootMessageSent_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_RootMessageSent!]!
  arbitrumone_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumone_StableSwapLiquidity
  arbitrumone_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumone_StableSwapLiquidity_orderBy
    orderDirection: arbitrumone_OrderDirection
    where: arbitrumone_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumone_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumone_StableSwapLiquidity!]!
  optimism_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Asset
  optimism_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Asset_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Asset!]!
  optimism_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_AssetBalance
  optimism_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_AssetBalance_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_AssetBalance!]!
  optimism_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Router
  optimism_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Router_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Router!]!
  optimism_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Setting
  optimism_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Setting_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Setting!]!
  optimism_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Relayer
  optimism_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Relayer_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Relayer!]!
  optimism_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_TransferRelayerFee
  optimism_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_TransferRelayerFee_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_TransferRelayerFee!]!
  optimism_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_Sequencer
  optimism_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_Sequencer_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_Sequencer!]!
  optimism_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_OriginTransfer
  optimism_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_OriginTransfer_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_OriginTransfer!]!
  optimism_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_DestinationTransfer
  optimism_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_DestinationTransfer_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_DestinationTransfer!]!
  optimism_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_OriginMessage
  optimism_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_OriginMessage_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_OriginMessage!]!
  optimism_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_AggregateRoot
  optimism_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_AggregateRoot_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_AggregateRoot!]!
  optimism_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_ConnectorMeta
  optimism_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_ConnectorMeta_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_ConnectorMeta!]!
  optimism_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_RootCount
  optimism_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_RootCount_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_RootCount!]!
  optimism_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_RootMessageSent
  optimism_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_RootMessageSent_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_RootMessageSent!]!
  optimism_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimism_StableSwapLiquidity
  optimism_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: optimism_StableSwapLiquidity_orderBy
    orderDirection: optimism_OrderDirection
    where: optimism_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimism_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimism_StableSwapLiquidity!]!
  bnb_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Asset
  bnb_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Asset_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Asset!]!
  bnb_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_AssetBalance
  bnb_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_AssetBalance_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_AssetBalance!]!
  bnb_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Router
  bnb_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Router_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Router!]!
  bnb_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Setting
  bnb_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Setting_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Setting!]!
  bnb_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Relayer
  bnb_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Relayer_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Relayer!]!
  bnb_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_TransferRelayerFee
  bnb_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_TransferRelayerFee_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_TransferRelayerFee!]!
  bnb_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_Sequencer
  bnb_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_Sequencer_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_Sequencer!]!
  bnb_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_OriginTransfer
  bnb_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_OriginTransfer_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_OriginTransfer!]!
  bnb_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_DestinationTransfer
  bnb_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_DestinationTransfer_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_DestinationTransfer!]!
  bnb_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_OriginMessage
  bnb_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_OriginMessage_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_OriginMessage!]!
  bnb_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_AggregateRoot
  bnb_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_AggregateRoot_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_AggregateRoot!]!
  bnb_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_ConnectorMeta
  bnb_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_ConnectorMeta_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_ConnectorMeta!]!
  bnb_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_RootCount
  bnb_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_RootCount_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_RootCount!]!
  bnb_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_RootMessageSent
  bnb_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_RootMessageSent_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_RootMessageSent!]!
  bnb_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): bnb_StableSwapLiquidity
  bnb_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: bnb_StableSwapLiquidity_orderBy
    orderDirection: bnb_OrderDirection
    where: bnb_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: bnb_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [bnb_StableSwapLiquidity!]!
  mumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Asset
  mumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Asset_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Asset!]!
  mumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AssetBalance
  mumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AssetBalance_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AssetBalance!]!
  mumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Router
  mumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Router_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Router!]!
  mumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Setting
  mumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Setting_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Setting!]!
  mumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Relayer
  mumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Relayer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Relayer!]!
  mumbai_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_TransferRelayerFee
  mumbai_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_TransferRelayerFee_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_TransferRelayerFee!]!
  mumbai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Sequencer
  mumbai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Sequencer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Sequencer!]!
  mumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginTransfer
  mumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginTransfer!]!
  mumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_DestinationTransfer
  mumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_DestinationTransfer!]!
  mumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginMessage
  mumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginMessage!]!
  mumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AggregateRoot
  mumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AggregateRoot_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AggregateRoot!]!
  mumbai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_ConnectorMeta
  mumbai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_ConnectorMeta_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_ConnectorMeta!]!
  mumbai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_RootCount
  mumbai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_RootCount_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_RootCount!]!
  mumbai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_RootMessageSent
  mumbai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_RootMessageSent_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_RootMessageSent!]!
  mumbai_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwapLiquidity
  mumbai_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwapLiquidity_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwapLiquidity!]!
  mainnet_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Asset
  mainnet_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Asset_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Asset!]!
  mainnet_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AssetBalance
  mainnet_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AssetBalance_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AssetBalance!]!
  mainnet_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Router
  mainnet_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Router_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Router!]!
  mainnet_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Setting
  mainnet_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Setting_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Setting!]!
  mainnet_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Relayer
  mainnet_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Relayer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Relayer!]!
  mainnet_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_TransferRelayerFee
  mainnet_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_TransferRelayerFee_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_TransferRelayerFee!]!
  mainnet_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Sequencer
  mainnet_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Sequencer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Sequencer!]!
  mainnet_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OriginTransfer
  mainnet_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OriginTransfer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OriginTransfer!]!
  mainnet_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_DestinationTransfer
  mainnet_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_DestinationTransfer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_DestinationTransfer!]!
  mainnet_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OriginMessage
  mainnet_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OriginMessage_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OriginMessage!]!
  mainnet_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregateRoot
  mainnet_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregateRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregateRoot!]!
  mainnet_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_ConnectorMeta
  mainnet_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_ConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_ConnectorMeta!]!
  mainnet_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootCount
  mainnet_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootCount_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootCount!]!
  mainnet_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootMessageSent
  mainnet_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootMessageSent_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootMessageSent!]!
  mainnet_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_StableSwap
  mainnet_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_StableSwap_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_StableSwap!]!
  mainnet_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_PooledToken
  mainnet_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_PooledToken_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_PooledToken!]!
  mainnet_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_StableSwapLiquidity
  mainnet_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_StableSwapLiquidity_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_StableSwapLiquidity!]!
  arbitrumgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Asset
  arbitrumgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Asset_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Asset!]!
  arbitrumgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_AssetBalance
  arbitrumgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_AssetBalance_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_AssetBalance!]!
  arbitrumgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Router
  arbitrumgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Router_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Router!]!
  arbitrumgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Setting
  arbitrumgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Setting_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Setting!]!
  arbitrumgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Relayer
  arbitrumgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Relayer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Relayer!]!
  arbitrumgoerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_TransferRelayerFee
  arbitrumgoerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_TransferRelayerFee_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_TransferRelayerFee!]!
  arbitrumgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_Sequencer
  arbitrumgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_Sequencer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_Sequencer!]!
  arbitrumgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_OriginTransfer
  arbitrumgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_OriginTransfer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_OriginTransfer!]!
  arbitrumgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_DestinationTransfer
  arbitrumgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_DestinationTransfer_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_DestinationTransfer!]!
  arbitrumgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_OriginMessage
  arbitrumgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_OriginMessage_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_OriginMessage!]!
  arbitrumgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_AggregateRoot
  arbitrumgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_AggregateRoot_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_AggregateRoot!]!
  arbitrumgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_ConnectorMeta
  arbitrumgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_ConnectorMeta_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_ConnectorMeta!]!
  arbitrumgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_RootCount
  arbitrumgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_RootCount_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_RootCount!]!
  arbitrumgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_RootMessageSent
  arbitrumgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_RootMessageSent_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_RootMessageSent!]!
  arbitrumgoerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumgoerli_StableSwapLiquidity
  arbitrumgoerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumgoerli_StableSwapLiquidity_orderBy
    orderDirection: arbitrumgoerli_OrderDirection
    where: arbitrumgoerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumgoerli_StableSwapLiquidity!]!
  polygon_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Asset
  polygon_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Asset_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Asset!]!
  polygon_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_AssetBalance
  polygon_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_AssetBalance_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_AssetBalance!]!
  polygon_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Router
  polygon_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Router_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Router!]!
  polygon_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Setting
  polygon_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Setting_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Setting!]!
  polygon_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Relayer
  polygon_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Relayer_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Relayer!]!
  polygon_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_TransferRelayerFee
  polygon_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_TransferRelayerFee_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_TransferRelayerFee!]!
  polygon_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_Sequencer
  polygon_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_Sequencer_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_Sequencer!]!
  polygon_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_OriginTransfer
  polygon_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_OriginTransfer_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_OriginTransfer!]!
  polygon_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_DestinationTransfer
  polygon_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_DestinationTransfer_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_DestinationTransfer!]!
  polygon_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_OriginMessage
  polygon_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_OriginMessage_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_OriginMessage!]!
  polygon_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_AggregateRoot
  polygon_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_AggregateRoot_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_AggregateRoot!]!
  polygon_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_ConnectorMeta
  polygon_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_ConnectorMeta_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_ConnectorMeta!]!
  polygon_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_RootCount
  polygon_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_RootCount_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_RootCount!]!
  polygon_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_RootMessageSent
  polygon_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_RootMessageSent_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_RootMessageSent!]!
  polygon_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): polygon_StableSwapLiquidity
  polygon_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: polygon_StableSwapLiquidity_orderBy
    orderDirection: polygon_OrderDirection
    where: polygon_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: polygon_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [polygon_StableSwapLiquidity!]!
  optimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Asset
  optimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Asset_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Asset!]!
  optimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AssetBalance
  optimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AssetBalance_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AssetBalance!]!
  optimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Router
  optimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Router_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Router!]!
  optimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Setting
  optimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Setting_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Setting!]!
  optimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Relayer
  optimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Relayer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Relayer!]!
  optimismgoerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_TransferRelayerFee
  optimismgoerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_TransferRelayerFee_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_TransferRelayerFee!]!
  optimismgoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Sequencer
  optimismgoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Sequencer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Sequencer!]!
  optimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_OriginTransfer
  optimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_OriginTransfer!]!
  optimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_DestinationTransfer
  optimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_DestinationTransfer!]!
  optimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_OriginMessage
  optimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_OriginMessage!]!
  optimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AggregateRoot
  optimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AggregateRoot_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AggregateRoot!]!
  optimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_ConnectorMeta
  optimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_ConnectorMeta_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_ConnectorMeta!]!
  optimismgoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootCount
  optimismgoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootCount_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootCount!]!
  optimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageSent
  optimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageSent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageSent!]!
  optimismgoerli_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_StableSwapLiquidity
  optimismgoerli_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwapLiquidity_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_StableSwapLiquidity!]!
  staginggoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Router!]!
  staginggoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Setting
  staginggoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Setting_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Setting!]!
  staginggoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Relayer
  staginggoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Relayer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Relayer!]!
  staginggoerli_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_TransferRelayerFee
  staginggoerli_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_TransferRelayerFee_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_TransferRelayerFee!]!
  staginggoerli_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Sequencer
  staginggoerli_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Sequencer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Sequencer!]!
  staginggoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_DestinationTransfer!]!
  staginggoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OriginMessage
  staginggoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginMessage_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OriginMessage!]!
  staginggoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AggregateRoot
  staginggoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AggregateRoot_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AggregateRoot!]!
  staginggoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_ConnectorMeta
  staginggoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_ConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_ConnectorMeta!]!
  staginggoerli_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootCount
  staginggoerli_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootCount_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootCount!]!
  staginggoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_RootMessageSent
  staginggoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageSent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_RootMessageSent!]!
  local1338_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Asset
  local1338_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Asset_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Asset!]!
  local1338_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_AssetBalance
  local1338_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AssetBalance_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_AssetBalance!]!
  local1338_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Router
  local1338_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Router_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Router!]!
  local1338_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Setting
  local1338_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Setting_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Setting!]!
  local1338_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Relayer
  local1338_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Relayer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Relayer!]!
  local1338_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_TransferRelayerFee
  local1338_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_TransferRelayerFee_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_TransferRelayerFee!]!
  local1338_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Sequencer
  local1338_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Sequencer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Sequencer!]!
  local1338_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_OriginTransfer
  local1338_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_OriginTransfer!]!
  local1338_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_DestinationTransfer
  local1338_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_DestinationTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_DestinationTransfer!]!
  local1338_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_OriginMessage
  local1338_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginMessage_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_OriginMessage!]!
  local1338_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_AggregateRoot
  local1338_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AggregateRoot_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_AggregateRoot!]!
  local1338_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_ConnectorMeta
  local1338_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_ConnectorMeta_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_ConnectorMeta!]!
  local1338_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_RootCount
  local1338_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_RootCount_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_RootCount!]!
  local1338_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_RootMessageSent
  local1338_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_RootMessageSent_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_RootMessageSent!]!
  local1338_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwap
  local1338_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwap_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwap!]!
  local1338_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_PooledToken
  local1338_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_PooledToken_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_PooledToken!]!
  local1338_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwapAddLiquidityEvent
  local1338_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwapAddLiquidityEvent_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwapAddLiquidityEvent!]!
  local1338_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwapRemoveLiquidityEvent
  local1338_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwapRemoveLiquidityEvent!]!
  local1338_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwapExchange
  local1338_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwapExchange_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwapExchange!]!
  local1338_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SwapDailyVolume
  local1338_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SwapDailyVolume_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SwapDailyVolume!]!
  local1338_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SwapHourlyVolume
  local1338_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SwapHourlyVolume_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SwapHourlyVolume!]!
  local1338_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SwapWeeklyVolume
  local1338_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SwapWeeklyVolume_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SwapWeeklyVolume!]!
  local1338_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwapEvent
  local1338_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwapEvent_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwapEvent!]!
  local1338_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SwapTradeVolume
  local1338_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SwapTradeVolume_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  local1338__meta(block: local1338_Block_height): local1338__Meta_
  local1337_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Asset!]!
  local1337_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_AssetBalance!]!
  local1337_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Router!]!
  local1337_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Setting!]!
  local1337_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Relayer!]!
  local1337_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_TransferRelayerFee
  local1337_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_TransferRelayerFee_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_TransferRelayerFee!]!
  local1337_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_Sequencer
  local1337_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Sequencer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_Sequencer!]!
  local1337_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_DestinationTransfer!]!
  local1337_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_OriginMessage
  local1337_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginMessage_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_OriginMessage!]!
  local1337_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_AggregateRoot
  local1337_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AggregateRoot_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_AggregateRoot!]!
  local1337_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_ConnectorMeta
  local1337_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_ConnectorMeta_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_ConnectorMeta!]!
  local1337_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_RootCount
  local1337_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_RootCount_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_RootCount!]!
  local1337_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_RootMessageSent
  local1337_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_RootMessageSent_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_RootMessageSent!]!
  local1337_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwap!]!
  local1337_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_PooledToken
  local1337_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_PooledToken_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_PooledToken!]!
  local1337_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwapAddLiquidityEvent
  local1337_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwapAddLiquidityEvent_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwapAddLiquidityEvent!]!
  local1337_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwapRemoveLiquidityEvent
  local1337_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwapRemoveLiquidityEvent!]!
  local1337_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwapExchange
  local1337_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwapExchange_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwapExchange!]!
  local1337_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SwapDailyVolume
  local1337_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SwapDailyVolume_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SwapDailyVolume!]!
  local1337_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SwapHourlyVolume
  local1337_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SwapHourlyVolume_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SwapHourlyVolume!]!
  local1337_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SwapWeeklyVolume
  local1337_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SwapWeeklyVolume_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SwapWeeklyVolume!]!
  local1337_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_StableSwapEvent
  local1337_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwapEvent_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_StableSwapEvent!]!
  local1337_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1337_SwapTradeVolume
  local1337_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SwapTradeVolume_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1337_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
  xdai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Asset
  xdai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Asset_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Asset!]!
  xdai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_AssetBalance
  xdai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_AssetBalance_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_AssetBalance!]!
  xdai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Router
  xdai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Router_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Router!]!
  xdai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Setting
  xdai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Setting_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Setting!]!
  xdai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Relayer
  xdai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Relayer_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Relayer!]!
  xdai_transferRelayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_TransferRelayerFee
  xdai_transferRelayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_TransferRelayerFee_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_TransferRelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_TransferRelayerFee!]!
  xdai_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_Sequencer
  xdai_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_Sequencer_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_Sequencer!]!
  xdai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_OriginTransfer
  xdai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_OriginTransfer_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_OriginTransfer!]!
  xdai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_DestinationTransfer
  xdai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_DestinationTransfer_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_DestinationTransfer!]!
  xdai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_OriginMessage
  xdai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_OriginMessage_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_OriginMessage!]!
  xdai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_AggregateRoot
  xdai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_AggregateRoot_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_AggregateRoot!]!
  xdai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_ConnectorMeta
  xdai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_ConnectorMeta_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_ConnectorMeta!]!
  xdai_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_RootCount
  xdai_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_RootCount_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_RootCount!]!
  xdai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_RootMessageSent
  xdai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_RootMessageSent_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_RootMessageSent!]!
  xdai_stableSwapLiquidity(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xdai_StableSwapLiquidity
  xdai_stableSwapLiquidities(
    skip: Int = 0
    first: Int = 100
    orderBy: xdai_StableSwapLiquidity_orderBy
    orderDirection: xdai_OrderDirection
    where: xdai_StableSwapLiquidity_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xdai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xdai_StableSwapLiquidity!]!
}

type goerli_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: goerli_Bytes!
  domain: BigInt
}

input goerli_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: goerli_Bytes
  receivedRoot_not: goerli_Bytes
  receivedRoot_gt: goerli_Bytes
  receivedRoot_lt: goerli_Bytes
  receivedRoot_gte: goerli_Bytes
  receivedRoot_lte: goerli_Bytes
  receivedRoot_in: [goerli_Bytes!]
  receivedRoot_not_in: [goerli_Bytes!]
  receivedRoot_contains: goerli_Bytes
  receivedRoot_not_contains: goerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
}

type goerli_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar goerli_BigDecimal

scalar BigInt

input goerli_BlockChangedFilter {
  number_gte: Int!
}

input goerli_Block_height {
  hash: goerli_Bytes
  number: Int
  number_gte: Int
}

type goerli_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar goerli_Bytes

type goerli_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

"""Defines the order direction, either ascending or descending"""
enum goerli_OrderDirection {
  asc
  desc
}

type goerli_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: goerli_Bytes!
  index: BigInt!
}

input goerli_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: goerli_Bytes
  receivedRoot_not: goerli_Bytes
  receivedRoot_gt: goerli_Bytes
  receivedRoot_lt: goerli_Bytes
  receivedRoot_gte: goerli_Bytes
  receivedRoot_lte: goerli_Bytes
  receivedRoot_in: [goerli_Bytes!]
  receivedRoot_not_in: [goerli_Bytes!]
  receivedRoot_contains: goerli_Bytes
  receivedRoot_not_contains: goerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type goerli_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [goerli_Bytes!]
}

input goerli_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [goerli_Bytes!]
  connectors_not: [goerli_Bytes!]
  connectors_contains: [goerli_Bytes!]
  connectors_contains_nocase: [goerli_Bytes!]
  connectors_not_contains: [goerli_Bytes!]
  connectors_not_contains_nocase: [goerli_Bytes!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type goerli_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: goerli_Bytes
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_gt: goerli_Bytes
  root_lt: goerli_Bytes
  root_gte: goerli_Bytes
  root_lte: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_gt: goerli_Bytes
  caller_lt: goerli_Bytes
  caller_gte: goerli_Bytes
  caller_lte: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_gt: goerli_Bytes
  transactionHash_lt: goerli_Bytes
  transactionHash_gte: goerli_Bytes
  transactionHash_lte: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type goerli_RootPropagated {
  id: ID!
  aggregate: goerli_Bytes!
  domainsHash: goerli_Bytes!
  count: BigInt!
}

input goerli_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: goerli_Bytes
  aggregate_not: goerli_Bytes
  aggregate_gt: goerli_Bytes
  aggregate_lt: goerli_Bytes
  aggregate_gte: goerli_Bytes
  aggregate_lte: goerli_Bytes
  aggregate_in: [goerli_Bytes!]
  aggregate_not_in: [goerli_Bytes!]
  aggregate_contains: goerli_Bytes
  aggregate_not_contains: goerli_Bytes
  domainsHash: goerli_Bytes
  domainsHash_not: goerli_Bytes
  domainsHash_gt: goerli_Bytes
  domainsHash_lt: goerli_Bytes
  domainsHash_gte: goerli_Bytes
  domainsHash_lte: goerli_Bytes
  domainsHash_in: [goerli_Bytes!]
  domainsHash_not_in: [goerli_Bytes!]
  domainsHash_contains: goerli_Bytes
  domainsHash_not_contains: goerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
}

type goerli__Block_ {
  """The hash of the block"""
  hash: goerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type goerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: goerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type goerli_AggregateRoot {
  id: ID!
  root: goerli_Bytes!
  blockNumber: BigInt!
}

input goerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_gt: goerli_Bytes
  root_lt: goerli_Bytes
  root_gte: goerli_Bytes
  root_lte: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type goerli_Asset {
  id: ID!
  key: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: goerli_Bytes
  localAsset: goerli_Bytes
  blockNumber: BigInt
}

type goerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: goerli_Router!
  asset: goerli_Asset!
  feesEarned: BigInt!
}

input goerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: goerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: goerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input goerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: goerli_Bytes
  key_not: goerli_Bytes
  key_gt: goerli_Bytes
  key_lt: goerli_Bytes
  key_gte: goerli_Bytes
  key_lte: goerli_Bytes
  key_in: [goerli_Bytes!]
  key_not_in: [goerli_Bytes!]
  key_contains: goerli_Bytes
  key_not_contains: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_gt: goerli_Bytes
  canonicalId_lt: goerli_Bytes
  canonicalId_gte: goerli_Bytes
  canonicalId_lte: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: goerli_Bytes
  adoptedAsset_not: goerli_Bytes
  adoptedAsset_gt: goerli_Bytes
  adoptedAsset_lt: goerli_Bytes
  adoptedAsset_gte: goerli_Bytes
  adoptedAsset_lte: goerli_Bytes
  adoptedAsset_in: [goerli_Bytes!]
  adoptedAsset_not_in: [goerli_Bytes!]
  adoptedAsset_contains: goerli_Bytes
  adoptedAsset_not_contains: goerli_Bytes
  localAsset: goerli_Bytes
  localAsset_not: goerli_Bytes
  localAsset_gt: goerli_Bytes
  localAsset_lt: goerli_Bytes
  localAsset_gte: goerli_Bytes
  localAsset_lte: goerli_Bytes
  localAsset_in: [goerli_Bytes!]
  localAsset_not_in: [goerli_Bytes!]
  localAsset_contains: goerli_Bytes
  localAsset_not_contains: goerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type goerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: goerli_Bytes
  rootManager: goerli_Bytes
  mirrorConnector: goerli_Bytes
}

input goerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  status: goerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: goerli_Router_orderBy, orderDirection: goerli_OrderDirection, where: goerli_Router_filter): [goerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: goerli_Bytes
  delegate: goerli_Bytes
  receiveLocal: Boolean
  callData: goerli_Bytes
  slippage: BigInt
  originSender: goerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: goerli_Bytes
  asset: goerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: goerli_Bytes
  reconciledCaller: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: goerli_Bytes
}

input goerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_gt: goerli_Bytes
  transferId_lt: goerli_Bytes
  transferId_gte: goerli_Bytes
  transferId_lte: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: goerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_gt: goerli_Bytes
  to_lt: goerli_Bytes
  to_gte: goerli_Bytes
  to_lte: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  delegate: goerli_Bytes
  delegate_not: goerli_Bytes
  delegate_gt: goerli_Bytes
  delegate_lt: goerli_Bytes
  delegate_gte: goerli_Bytes
  delegate_lte: goerli_Bytes
  delegate_in: [goerli_Bytes!]
  delegate_not_in: [goerli_Bytes!]
  delegate_contains: goerli_Bytes
  delegate_not_contains: goerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_gt: goerli_Bytes
  callData_lt: goerli_Bytes
  callData_gte: goerli_Bytes
  callData_lte: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: goerli_Bytes
  originSender_not: goerli_Bytes
  originSender_gt: goerli_Bytes
  originSender_lt: goerli_Bytes
  originSender_gte: goerli_Bytes
  originSender_lte: goerli_Bytes
  originSender_in: [goerli_Bytes!]
  originSender_not_in: [goerli_Bytes!]
  originSender_contains: goerli_Bytes
  originSender_not_contains: goerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_gt: goerli_Bytes
  canonicalId_lt: goerli_Bytes
  canonicalId_gte: goerli_Bytes
  canonicalId_lte: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: goerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: goerli_Bytes
  executedCaller_not: goerli_Bytes
  executedCaller_gt: goerli_Bytes
  executedCaller_lt: goerli_Bytes
  executedCaller_gte: goerli_Bytes
  executedCaller_lte: goerli_Bytes
  executedCaller_in: [goerli_Bytes!]
  executedCaller_not_in: [goerli_Bytes!]
  executedCaller_contains: goerli_Bytes
  executedCaller_not_contains: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTransactionHash_not: goerli_Bytes
  executedTransactionHash_gt: goerli_Bytes
  executedTransactionHash_lt: goerli_Bytes
  executedTransactionHash_gte: goerli_Bytes
  executedTransactionHash_lte: goerli_Bytes
  executedTransactionHash_in: [goerli_Bytes!]
  executedTransactionHash_not_in: [goerli_Bytes!]
  executedTransactionHash_contains: goerli_Bytes
  executedTransactionHash_not_contains: goerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: goerli_Bytes
  executedTxOrigin_not: goerli_Bytes
  executedTxOrigin_gt: goerli_Bytes
  executedTxOrigin_lt: goerli_Bytes
  executedTxOrigin_gte: goerli_Bytes
  executedTxOrigin_lte: goerli_Bytes
  executedTxOrigin_in: [goerli_Bytes!]
  executedTxOrigin_not_in: [goerli_Bytes!]
  executedTxOrigin_contains: goerli_Bytes
  executedTxOrigin_not_contains: goerli_Bytes
  reconciledCaller: goerli_Bytes
  reconciledCaller_not: goerli_Bytes
  reconciledCaller_gt: goerli_Bytes
  reconciledCaller_lt: goerli_Bytes
  reconciledCaller_gte: goerli_Bytes
  reconciledCaller_lte: goerli_Bytes
  reconciledCaller_in: [goerli_Bytes!]
  reconciledCaller_not_in: [goerli_Bytes!]
  reconciledCaller_contains: goerli_Bytes
  reconciledCaller_not_contains: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTransactionHash_not: goerli_Bytes
  reconciledTransactionHash_gt: goerli_Bytes
  reconciledTransactionHash_lt: goerli_Bytes
  reconciledTransactionHash_gte: goerli_Bytes
  reconciledTransactionHash_lte: goerli_Bytes
  reconciledTransactionHash_in: [goerli_Bytes!]
  reconciledTransactionHash_not_in: [goerli_Bytes!]
  reconciledTransactionHash_contains: goerli_Bytes
  reconciledTransactionHash_not_contains: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: goerli_Bytes
  reconciledTxOrigin_not: goerli_Bytes
  reconciledTxOrigin_gt: goerli_Bytes
  reconciledTxOrigin_lt: goerli_Bytes
  reconciledTxOrigin_gte: goerli_Bytes
  reconciledTxOrigin_lte: goerli_Bytes
  reconciledTxOrigin_in: [goerli_Bytes!]
  reconciledTxOrigin_not_in: [goerli_Bytes!]
  reconciledTxOrigin_contains: goerli_Bytes
  reconciledTxOrigin_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type goerli_OriginMessage {
  id: ID!
  transferId: goerli_Bytes
  destinationDomain: BigInt
  leaf: goerli_Bytes
  index: BigInt
  message: goerli_Bytes
  root: goerli_Bytes
  transactionHash: goerli_Bytes
  blockNumber: BigInt
  rootCount: goerli_RootCount
}

input goerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_gt: goerli_Bytes
  transferId_lt: goerli_Bytes
  transferId_gte: goerli_Bytes
  transferId_lte: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: goerli_Bytes
  leaf_not: goerli_Bytes
  leaf_gt: goerli_Bytes
  leaf_lt: goerli_Bytes
  leaf_gte: goerli_Bytes
  leaf_lte: goerli_Bytes
  leaf_in: [goerli_Bytes!]
  leaf_not_in: [goerli_Bytes!]
  leaf_contains: goerli_Bytes
  leaf_not_contains: goerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: goerli_Bytes
  message_not: goerli_Bytes
  message_gt: goerli_Bytes
  message_lt: goerli_Bytes
  message_gte: goerli_Bytes
  message_lte: goerli_Bytes
  message_in: [goerli_Bytes!]
  message_not_in: [goerli_Bytes!]
  message_contains: goerli_Bytes
  message_not_contains: goerli_Bytes
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_gt: goerli_Bytes
  root_lt: goerli_Bytes
  root_gte: goerli_Bytes
  root_lte: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_gt: goerli_Bytes
  transactionHash_lt: goerli_Bytes
  transactionHash_gte: goerli_Bytes
  transactionHash_lte: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: goerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type goerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  status: goerli_TransferStatus
  messageHash: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: goerli_Bytes
  delegate: goerli_Bytes
  receiveLocal: Boolean
  callData: goerli_Bytes
  slippage: BigInt
  originSender: goerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: goerli_Bytes
  asset: goerli_Asset
  transacting: goerli_Bytes
  message: goerli_OriginMessage
  relayerFee: BigInt
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: goerli_Bytes
}

input goerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_gt: goerli_Bytes
  transferId_lt: goerli_Bytes
  transferId_gte: goerli_Bytes
  transferId_lte: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  messageHash: goerli_Bytes
  messageHash_not: goerli_Bytes
  messageHash_gt: goerli_Bytes
  messageHash_lt: goerli_Bytes
  messageHash_gte: goerli_Bytes
  messageHash_lte: goerli_Bytes
  messageHash_in: [goerli_Bytes!]
  messageHash_not_in: [goerli_Bytes!]
  messageHash_contains: goerli_Bytes
  messageHash_not_contains: goerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_gt: goerli_Bytes
  to_lt: goerli_Bytes
  to_gte: goerli_Bytes
  to_lte: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  delegate: goerli_Bytes
  delegate_not: goerli_Bytes
  delegate_gt: goerli_Bytes
  delegate_lt: goerli_Bytes
  delegate_gte: goerli_Bytes
  delegate_lte: goerli_Bytes
  delegate_in: [goerli_Bytes!]
  delegate_not_in: [goerli_Bytes!]
  delegate_contains: goerli_Bytes
  delegate_not_contains: goerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_gt: goerli_Bytes
  callData_lt: goerli_Bytes
  callData_gte: goerli_Bytes
  callData_lte: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: goerli_Bytes
  originSender_not: goerli_Bytes
  originSender_gt: goerli_Bytes
  originSender_lt: goerli_Bytes
  originSender_gte: goerli_Bytes
  originSender_lte: goerli_Bytes
  originSender_in: [goerli_Bytes!]
  originSender_not_in: [goerli_Bytes!]
  originSender_contains: goerli_Bytes
  originSender_not_contains: goerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_gt: goerli_Bytes
  canonicalId_lt: goerli_Bytes
  canonicalId_gte: goerli_Bytes
  canonicalId_lte: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: goerli_Asset_filter
  transacting: goerli_Bytes
  transacting_not: goerli_Bytes
  transacting_gt: goerli_Bytes
  transacting_lt: goerli_Bytes
  transacting_gte: goerli_Bytes
  transacting_lte: goerli_Bytes
  transacting_in: [goerli_Bytes!]
  transacting_not_in: [goerli_Bytes!]
  transacting_contains: goerli_Bytes
  transacting_not_contains: goerli_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: goerli_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_gt: goerli_Bytes
  caller_lt: goerli_Bytes
  caller_gte: goerli_Bytes
  caller_lte: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_gt: goerli_Bytes
  transactionHash_lt: goerli_Bytes
  transactionHash_gte: goerli_Bytes
  transactionHash_lte: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: goerli_Bytes
  txOrigin_not: goerli_Bytes
  txOrigin_gt: goerli_Bytes
  txOrigin_lt: goerli_Bytes
  txOrigin_gte: goerli_Bytes
  txOrigin_lte: goerli_Bytes
  txOrigin_in: [goerli_Bytes!]
  txOrigin_not_in: [goerli_Bytes!]
  txOrigin_contains: goerli_Bytes
  txOrigin_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type goerli_PooledToken {
  id: ID!
  asset: goerli_Bytes!
}

input goerli_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: goerli_Bytes
  asset_not: goerli_Bytes
  asset_gt: goerli_Bytes
  asset_lt: goerli_Bytes
  asset_gte: goerli_Bytes
  asset_lte: goerli_Bytes
  asset_in: [goerli_Bytes!]
  asset_not_in: [goerli_Bytes!]
  asset_contains: goerli_Bytes
  asset_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_PooledToken_orderBy {
  id
  asset
}

type goerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: goerli_Bytes
}

input goerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: goerli_Bytes
  relayer_not: goerli_Bytes
  relayer_gt: goerli_Bytes
  relayer_lt: goerli_Bytes
  relayer_gte: goerli_Bytes
  relayer_lte: goerli_Bytes
  relayer_in: [goerli_Bytes!]
  relayer_not_in: [goerli_Bytes!]
  relayer_contains: goerli_Bytes
  relayer_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type goerli_RootCount {
  id: ID!
  count: BigInt
}

input goerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootCount_orderBy {
  id
  count
}

type goerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: goerli_Bytes
  count: BigInt
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_gt: goerli_Bytes
  root_lt: goerli_Bytes
  root_gte: goerli_Bytes
  root_lte: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_gt: goerli_Bytes
  caller_lt: goerli_Bytes
  caller_gte: goerli_Bytes
  caller_lte: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_gt: goerli_Bytes
  transactionHash_lt: goerli_Bytes
  transactionHash_gte: goerli_Bytes
  transactionHash_lte: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type goerli_Router {
  id: ID!
  isActive: Boolean!
  owner: goerli_Bytes
  recipient: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: goerli_AssetBalance_orderBy, orderDirection: goerli_OrderDirection, where: goerli_AssetBalance_filter): [goerli_AssetBalance!]!
}

input goerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: goerli_Bytes
  owner_not: goerli_Bytes
  owner_gt: goerli_Bytes
  owner_lt: goerli_Bytes
  owner_gte: goerli_Bytes
  owner_lte: goerli_Bytes
  owner_in: [goerli_Bytes!]
  owner_not_in: [goerli_Bytes!]
  owner_contains: goerli_Bytes
  owner_not_contains: goerli_Bytes
  recipient: goerli_Bytes
  recipient_not: goerli_Bytes
  recipient_gt: goerli_Bytes
  recipient_lt: goerli_Bytes
  recipient_gte: goerli_Bytes
  recipient_lte: goerli_Bytes
  recipient_in: [goerli_Bytes!]
  recipient_not_in: [goerli_Bytes!]
  recipient_contains: goerli_Bytes
  recipient_not_contains: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedOwner_not: goerli_Bytes
  proposedOwner_gt: goerli_Bytes
  proposedOwner_lt: goerli_Bytes
  proposedOwner_gte: goerli_Bytes
  proposedOwner_lte: goerli_Bytes
  proposedOwner_in: [goerli_Bytes!]
  proposedOwner_not_in: [goerli_Bytes!]
  proposedOwner_contains: goerli_Bytes
  proposedOwner_not_contains: goerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: goerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type goerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: goerli_Bytes
}

input goerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: goerli_Bytes
  sequencer_not: goerli_Bytes
  sequencer_gt: goerli_Bytes
  sequencer_lt: goerli_Bytes
  sequencer_gte: goerli_Bytes
  sequencer_lte: goerli_Bytes
  sequencer_in: [goerli_Bytes!]
  sequencer_not_in: [goerli_Bytes!]
  sequencer_contains: goerli_Bytes
  sequencer_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type goerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: goerli_Bytes!
}

input goerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_gt: goerli_Bytes
  caller_lt: goerli_Bytes
  caller_gte: goerli_Bytes
  caller_lte: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type goerli_StableSwap {
  id: ID!
  isActive: Boolean
  key: goerli_Bytes!
  canonicalId: goerli_Bytes
  domain: BigInt
  swapPool: goerli_Bytes
  lpToken: goerli_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: goerli_PooledToken_orderBy, orderDirection: goerli_OrderDirection, where: goerli_PooledToken_filter): [goerli_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]!
  balances: [BigInt!]!
  adminFees: [BigInt!]!
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: goerli_StableSwapEvent_orderBy, orderDirection: goerli_OrderDirection, where: goerli_StableSwapEvent_filter): [goerli_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: goerli_StableSwapExchange_orderBy, orderDirection: goerli_OrderDirection, where: goerli_StableSwapExchange_filter): [goerli_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: goerli_SwapHourlyVolume_orderBy, orderDirection: goerli_OrderDirection, where: goerli_SwapHourlyVolume_filter): [goerli_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: goerli_SwapDailyVolume_orderBy, orderDirection: goerli_OrderDirection, where: goerli_SwapDailyVolume_filter): [goerli_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: goerli_SwapWeeklyVolume_orderBy, orderDirection: goerli_OrderDirection, where: goerli_SwapWeeklyVolume_filter): [goerli_SwapWeeklyVolume!]
}

type goerli_StableSwapLiquidity {
  id: ID!
  provider: goerli_Bytes!
  stableSwap: goerli_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input goerli_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: goerli_Bytes
  provider_not: goerli_Bytes
  provider_gt: goerli_Bytes
  provider_lt: goerli_Bytes
  provider_gte: goerli_Bytes
  provider_lte: goerli_Bytes
  provider_in: [goerli_Bytes!]
  provider_not_in: [goerli_Bytes!]
  provider_contains: goerli_Bytes
  provider_not_contains: goerli_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

input goerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: goerli_Bytes
  key_not: goerli_Bytes
  key_gt: goerli_Bytes
  key_lt: goerli_Bytes
  key_gte: goerli_Bytes
  key_lte: goerli_Bytes
  key_in: [goerli_Bytes!]
  key_not_in: [goerli_Bytes!]
  key_contains: goerli_Bytes
  key_not_contains: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_gt: goerli_Bytes
  canonicalId_lt: goerli_Bytes
  canonicalId_gte: goerli_Bytes
  canonicalId_lte: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: goerli_Bytes
  swapPool_not: goerli_Bytes
  swapPool_gt: goerli_Bytes
  swapPool_lt: goerli_Bytes
  swapPool_gte: goerli_Bytes
  swapPool_lte: goerli_Bytes
  swapPool_in: [goerli_Bytes!]
  swapPool_not_in: [goerli_Bytes!]
  swapPool_contains: goerli_Bytes
  swapPool_not_contains: goerli_Bytes
  lpToken: goerli_Bytes
  lpToken_not: goerli_Bytes
  lpToken_gt: goerli_Bytes
  lpToken_lt: goerli_Bytes
  lpToken_gte: goerli_Bytes
  lpToken_lte: goerli_Bytes
  lpToken_in: [goerli_Bytes!]
  lpToken_not_in: [goerli_Bytes!]
  lpToken_contains: goerli_Bytes
  lpToken_not_contains: goerli_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: goerli_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: goerli_StableSwapEvent_filter
  exchanges_: goerli_StableSwapExchange_filter
  hourlyVolumes_: goerli_SwapHourlyVolume_filter
  dailyVolumes_: goerli_SwapDailyVolume_filter
  weeklyVolumes_: goerli_SwapWeeklyVolume_filter
}

enum goerli_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type goerli_TransferRelayerFee {
  id: ID!
  transferId: goerli_Bytes!
  fee: BigInt
}

input goerli_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_gt: goerli_Bytes
  transferId_lt: goerli_Bytes
  transferId_gte: goerli_Bytes
  transferId_lte: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum goerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testgoerli_Asset {
  id: ID!
  key: testgoerli_Bytes
  local: testgoerli_Bytes!
  adoptedAsset: testgoerli_Bytes!
  canonicalId: testgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type testgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testgoerli_Router!
  asset: testgoerli_Asset!
}

input testgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: testgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input testgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: testgoerli_Bytes
  key_not: testgoerli_Bytes
  key_gt: testgoerli_Bytes
  key_lt: testgoerli_Bytes
  key_gte: testgoerli_Bytes
  key_lte: testgoerli_Bytes
  key_in: [testgoerli_Bytes!]
  key_not_in: [testgoerli_Bytes!]
  key_contains: testgoerli_Bytes
  key_not_contains: testgoerli_Bytes
  local: testgoerli_Bytes
  local_not: testgoerli_Bytes
  local_gt: testgoerli_Bytes
  local_lt: testgoerli_Bytes
  local_gte: testgoerli_Bytes
  local_lte: testgoerli_Bytes
  local_in: [testgoerli_Bytes!]
  local_not_in: [testgoerli_Bytes!]
  local_contains: testgoerli_Bytes
  local_not_contains: testgoerli_Bytes
  adoptedAsset: testgoerli_Bytes
  adoptedAsset_not: testgoerli_Bytes
  adoptedAsset_gt: testgoerli_Bytes
  adoptedAsset_lt: testgoerli_Bytes
  adoptedAsset_gte: testgoerli_Bytes
  adoptedAsset_lte: testgoerli_Bytes
  adoptedAsset_in: [testgoerli_Bytes!]
  adoptedAsset_not_in: [testgoerli_Bytes!]
  adoptedAsset_contains: testgoerli_Bytes
  adoptedAsset_not_contains: testgoerli_Bytes
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_gt: testgoerli_Bytes
  canonicalId_lt: testgoerli_Bytes
  canonicalId_gte: testgoerli_Bytes
  canonicalId_lte: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar testgoerli_BigDecimal

input testgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testgoerli_Block_height {
  hash: testgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testgoerli_Bytes

type testgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testgoerli_Router_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_Router_filter): [testgoerli_Router!]
  originSender: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input testgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_gt: testgoerli_Bytes
  transferId_lt: testgoerli_Bytes
  transferId_gte: testgoerli_Bytes
  transferId_lte: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_gt: testgoerli_Bytes
  to_lt: testgoerli_Bytes
  to_gte: testgoerli_Bytes
  to_lte: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_gt: testgoerli_Bytes
  callData_lt: testgoerli_Bytes
  callData_gte: testgoerli_Bytes
  callData_lte: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_gt: testgoerli_Bytes
  agent_lt: testgoerli_Bytes
  agent_gte: testgoerli_Bytes
  agent_lte: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_gt: testgoerli_Bytes
  recovery_lt: testgoerli_Bytes
  recovery_gte: testgoerli_Bytes
  recovery_lte: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_gt: testgoerli_Bytes
  callback_lt: testgoerli_Bytes
  callback_gte: testgoerli_Bytes
  callback_lte: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: testgoerli_Router_filter
  originSender: testgoerli_Bytes
  originSender_not: testgoerli_Bytes
  originSender_gt: testgoerli_Bytes
  originSender_lt: testgoerli_Bytes
  originSender_gte: testgoerli_Bytes
  originSender_lte: testgoerli_Bytes
  originSender_in: [testgoerli_Bytes!]
  originSender_not_in: [testgoerli_Bytes!]
  originSender_contains: testgoerli_Bytes
  originSender_not_contains: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_gt: testgoerli_Bytes
  transactingAsset_lt: testgoerli_Bytes
  transactingAsset_gte: testgoerli_Bytes
  transactingAsset_lte: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: testgoerli_Bytes
  localAsset_not: testgoerli_Bytes
  localAsset_gt: testgoerli_Bytes
  localAsset_lt: testgoerli_Bytes
  localAsset_gte: testgoerli_Bytes
  localAsset_lte: testgoerli_Bytes
  localAsset_in: [testgoerli_Bytes!]
  localAsset_not_in: [testgoerli_Bytes!]
  localAsset_contains: testgoerli_Bytes
  localAsset_not_contains: testgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: testgoerli_Bytes
  executedCaller_not: testgoerli_Bytes
  executedCaller_gt: testgoerli_Bytes
  executedCaller_lt: testgoerli_Bytes
  executedCaller_gte: testgoerli_Bytes
  executedCaller_lte: testgoerli_Bytes
  executedCaller_in: [testgoerli_Bytes!]
  executedCaller_not_in: [testgoerli_Bytes!]
  executedCaller_contains: testgoerli_Bytes
  executedCaller_not_contains: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
  executedTransactionHash_not: testgoerli_Bytes
  executedTransactionHash_gt: testgoerli_Bytes
  executedTransactionHash_lt: testgoerli_Bytes
  executedTransactionHash_gte: testgoerli_Bytes
  executedTransactionHash_lte: testgoerli_Bytes
  executedTransactionHash_in: [testgoerli_Bytes!]
  executedTransactionHash_not_in: [testgoerli_Bytes!]
  executedTransactionHash_contains: testgoerli_Bytes
  executedTransactionHash_not_contains: testgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: testgoerli_Bytes
  reconciledCaller_not: testgoerli_Bytes
  reconciledCaller_gt: testgoerli_Bytes
  reconciledCaller_lt: testgoerli_Bytes
  reconciledCaller_gte: testgoerli_Bytes
  reconciledCaller_lte: testgoerli_Bytes
  reconciledCaller_in: [testgoerli_Bytes!]
  reconciledCaller_not_in: [testgoerli_Bytes!]
  reconciledCaller_contains: testgoerli_Bytes
  reconciledCaller_not_contains: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
  reconciledTransactionHash_not: testgoerli_Bytes
  reconciledTransactionHash_gt: testgoerli_Bytes
  reconciledTransactionHash_lt: testgoerli_Bytes
  reconciledTransactionHash_gte: testgoerli_Bytes
  reconciledTransactionHash_lte: testgoerli_Bytes
  reconciledTransactionHash_in: [testgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testgoerli_Bytes!]
  reconciledTransactionHash_contains: testgoerli_Bytes
  reconciledTransactionHash_not_contains: testgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum testgoerli_OrderDirection {
  asc
  desc
}

type testgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testgoerli_Bytes
  bridgedAmount: BigInt
  caller: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_gt: testgoerli_Bytes
  transferId_lt: testgoerli_Bytes
  transferId_gte: testgoerli_Bytes
  transferId_lte: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_gt: testgoerli_Bytes
  to_lt: testgoerli_Bytes
  to_gte: testgoerli_Bytes
  to_lte: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_gt: testgoerli_Bytes
  callData_lt: testgoerli_Bytes
  callData_gte: testgoerli_Bytes
  callData_lte: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_gt: testgoerli_Bytes
  agent_lt: testgoerli_Bytes
  agent_gte: testgoerli_Bytes
  agent_lte: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_gt: testgoerli_Bytes
  recovery_lt: testgoerli_Bytes
  recovery_gte: testgoerli_Bytes
  recovery_lte: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_gt: testgoerli_Bytes
  callback_lt: testgoerli_Bytes
  callback_gte: testgoerli_Bytes
  callback_lte: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_gt: testgoerli_Bytes
  transactingAsset_lt: testgoerli_Bytes
  transactingAsset_gte: testgoerli_Bytes
  transactingAsset_lte: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: testgoerli_Bytes
  bridgedAsset_not: testgoerli_Bytes
  bridgedAsset_gt: testgoerli_Bytes
  bridgedAsset_lt: testgoerli_Bytes
  bridgedAsset_gte: testgoerli_Bytes
  bridgedAsset_lte: testgoerli_Bytes
  bridgedAsset_in: [testgoerli_Bytes!]
  bridgedAsset_not_in: [testgoerli_Bytes!]
  bridgedAsset_contains: testgoerli_Bytes
  bridgedAsset_not_contains: testgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_gt: testgoerli_Bytes
  caller_lt: testgoerli_Bytes
  caller_gte: testgoerli_Bytes
  caller_lte: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  transactionHash_not: testgoerli_Bytes
  transactionHash_gt: testgoerli_Bytes
  transactionHash_lt: testgoerli_Bytes
  transactionHash_gte: testgoerli_Bytes
  transactionHash_lte: testgoerli_Bytes
  transactionHash_in: [testgoerli_Bytes!]
  transactionHash_not_in: [testgoerli_Bytes!]
  transactionHash_contains: testgoerli_Bytes
  transactionHash_not_contains: testgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type testgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testgoerli_Bytes
}

input testgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: testgoerli_Bytes
  relayer_not: testgoerli_Bytes
  relayer_gt: testgoerli_Bytes
  relayer_lt: testgoerli_Bytes
  relayer_gte: testgoerli_Bytes
  relayer_lte: testgoerli_Bytes
  relayer_in: [testgoerli_Bytes!]
  relayer_not_in: [testgoerli_Bytes!]
  relayer_contains: testgoerli_Bytes
  relayer_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type testgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testgoerli_Bytes
  recipient: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testgoerli_AssetBalance_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_AssetBalance_filter): [testgoerli_AssetBalance!]!
}

input testgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: testgoerli_Bytes
  owner_not: testgoerli_Bytes
  owner_gt: testgoerli_Bytes
  owner_lt: testgoerli_Bytes
  owner_gte: testgoerli_Bytes
  owner_lte: testgoerli_Bytes
  owner_in: [testgoerli_Bytes!]
  owner_not_in: [testgoerli_Bytes!]
  owner_contains: testgoerli_Bytes
  owner_not_contains: testgoerli_Bytes
  recipient: testgoerli_Bytes
  recipient_not: testgoerli_Bytes
  recipient_gt: testgoerli_Bytes
  recipient_lt: testgoerli_Bytes
  recipient_gte: testgoerli_Bytes
  recipient_lte: testgoerli_Bytes
  recipient_in: [testgoerli_Bytes!]
  recipient_not_in: [testgoerli_Bytes!]
  recipient_contains: testgoerli_Bytes
  recipient_not_contains: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedOwner_not: testgoerli_Bytes
  proposedOwner_gt: testgoerli_Bytes
  proposedOwner_lt: testgoerli_Bytes
  proposedOwner_gte: testgoerli_Bytes
  proposedOwner_lte: testgoerli_Bytes
  proposedOwner_in: [testgoerli_Bytes!]
  proposedOwner_not_in: [testgoerli_Bytes!]
  proposedOwner_contains: testgoerli_Bytes
  proposedOwner_not_contains: testgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: testgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type testgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testgoerli_Bytes!
}

input testgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_gt: testgoerli_Bytes
  caller_lt: testgoerli_Bytes
  caller_gte: testgoerli_Bytes
  caller_lte: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type testgoerli_SponsorVault {
  id: ID!
  sponsorVault: testgoerli_Bytes!
}

input testgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: testgoerli_Bytes
  sponsorVault_not: testgoerli_Bytes
  sponsorVault_gt: testgoerli_Bytes
  sponsorVault_lt: testgoerli_Bytes
  sponsorVault_gte: testgoerli_Bytes
  sponsorVault_lte: testgoerli_Bytes
  sponsorVault_in: [testgoerli_Bytes!]
  sponsorVault_not_in: [testgoerli_Bytes!]
  sponsorVault_contains: testgoerli_Bytes
  sponsorVault_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type testgoerli_StableSwap {
  id: ID!
  canonicalId: testgoerli_Bytes!
  domain: BigInt
  swapPool: testgoerli_Bytes!
}

input testgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_gt: testgoerli_Bytes
  canonicalId_lt: testgoerli_Bytes
  canonicalId_gte: testgoerli_Bytes
  canonicalId_lte: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: testgoerli_Bytes
  swapPool_not: testgoerli_Bytes
  swapPool_gt: testgoerli_Bytes
  swapPool_lt: testgoerli_Bytes
  swapPool_gte: testgoerli_Bytes
  swapPool_lte: testgoerli_Bytes
  swapPool_in: [testgoerli_Bytes!]
  swapPool_not_in: [testgoerli_Bytes!]
  swapPool_contains: testgoerli_Bytes
  swapPool_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum testgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testgoerli__Block_ {
  """The hash of the block"""
  hash: testgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type testgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type mainnet_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: mainnet_Bytes!
  domain: BigInt
}

input mainnet_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: mainnet_Bytes
  receivedRoot_not: mainnet_Bytes
  receivedRoot_gt: mainnet_Bytes
  receivedRoot_lt: mainnet_Bytes
  receivedRoot_gte: mainnet_Bytes
  receivedRoot_lte: mainnet_Bytes
  receivedRoot_in: [mainnet_Bytes!]
  receivedRoot_not_in: [mainnet_Bytes!]
  receivedRoot_contains: mainnet_Bytes
  receivedRoot_not_contains: mainnet_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
}

type mainnet_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar mainnet_BigDecimal

input mainnet_BlockChangedFilter {
  number_gte: Int!
}

input mainnet_Block_height {
  hash: mainnet_Bytes
  number: Int
  number_gte: Int
}

type mainnet_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar mainnet_Bytes

type mainnet_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type mainnet_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

"""Defines the order direction, either ascending or descending"""
enum mainnet_OrderDirection {
  asc
  desc
}

type mainnet_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: mainnet_Bytes!
  rootManager: mainnet_Bytes!
  mirrorConnector: mainnet_Bytes!
}

input mainnet_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type mainnet_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: mainnet_Bytes!
  index: BigInt!
}

input mainnet_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: mainnet_Bytes
  receivedRoot_not: mainnet_Bytes
  receivedRoot_gt: mainnet_Bytes
  receivedRoot_lt: mainnet_Bytes
  receivedRoot_gte: mainnet_Bytes
  receivedRoot_lte: mainnet_Bytes
  receivedRoot_in: [mainnet_Bytes!]
  receivedRoot_not_in: [mainnet_Bytes!]
  receivedRoot_contains: mainnet_Bytes
  receivedRoot_not_contains: mainnet_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type mainnet_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [mainnet_Bytes!]
}

input mainnet_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [mainnet_Bytes!]
  connectors_not: [mainnet_Bytes!]
  connectors_contains: [mainnet_Bytes!]
  connectors_contains_nocase: [mainnet_Bytes!]
  connectors_not_contains: [mainnet_Bytes!]
  connectors_not_contains_nocase: [mainnet_Bytes!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type mainnet_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: mainnet_Bytes
  caller: mainnet_Bytes
  transactionHash: mainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mainnet_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_gt: mainnet_Bytes
  root_lt: mainnet_Bytes
  root_gte: mainnet_Bytes
  root_lte: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_gt: mainnet_Bytes
  caller_lt: mainnet_Bytes
  caller_gte: mainnet_Bytes
  caller_lte: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_gt: mainnet_Bytes
  transactionHash_lt: mainnet_Bytes
  transactionHash_gte: mainnet_Bytes
  transactionHash_lte: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mainnet_RootPropagated {
  id: ID!
  aggregate: mainnet_Bytes!
  domainsHash: mainnet_Bytes!
  count: BigInt!
}

input mainnet_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: mainnet_Bytes
  aggregate_not: mainnet_Bytes
  aggregate_gt: mainnet_Bytes
  aggregate_lt: mainnet_Bytes
  aggregate_gte: mainnet_Bytes
  aggregate_lte: mainnet_Bytes
  aggregate_in: [mainnet_Bytes!]
  aggregate_not_in: [mainnet_Bytes!]
  aggregate_contains: mainnet_Bytes
  aggregate_not_contains: mainnet_Bytes
  domainsHash: mainnet_Bytes
  domainsHash_not: mainnet_Bytes
  domainsHash_gt: mainnet_Bytes
  domainsHash_lt: mainnet_Bytes
  domainsHash_gte: mainnet_Bytes
  domainsHash_lte: mainnet_Bytes
  domainsHash_in: [mainnet_Bytes!]
  domainsHash_not_in: [mainnet_Bytes!]
  domainsHash_contains: mainnet_Bytes
  domainsHash_not_contains: mainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
}

type mainnet__Block_ {
  """The hash of the block"""
  hash: mainnet_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type mainnet__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: mainnet__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type staginggoerli_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: staginggoerli_Bytes!
  domain: BigInt
}

input staginggoerli_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: staginggoerli_Bytes
  receivedRoot_not: staginggoerli_Bytes
  receivedRoot_gt: staginggoerli_Bytes
  receivedRoot_lt: staginggoerli_Bytes
  receivedRoot_gte: staginggoerli_Bytes
  receivedRoot_lte: staginggoerli_Bytes
  receivedRoot_in: [staginggoerli_Bytes!]
  receivedRoot_not_in: [staginggoerli_Bytes!]
  receivedRoot_contains: staginggoerli_Bytes
  receivedRoot_not_contains: staginggoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
}

type staginggoerli_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerli_Bytes!
  rootManager: staginggoerli_Bytes!
  mirrorConnector: staginggoerli_Bytes!
}

input staginggoerli_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerli_Bytes
  amb_not: staginggoerli_Bytes
  amb_gt: staginggoerli_Bytes
  amb_lt: staginggoerli_Bytes
  amb_gte: staginggoerli_Bytes
  amb_lte: staginggoerli_Bytes
  amb_in: [staginggoerli_Bytes!]
  amb_not_in: [staginggoerli_Bytes!]
  amb_contains: staginggoerli_Bytes
  amb_not_contains: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  rootManager_not: staginggoerli_Bytes
  rootManager_gt: staginggoerli_Bytes
  rootManager_lt: staginggoerli_Bytes
  rootManager_gte: staginggoerli_Bytes
  rootManager_lte: staginggoerli_Bytes
  rootManager_in: [staginggoerli_Bytes!]
  rootManager_not_in: [staginggoerli_Bytes!]
  rootManager_contains: staginggoerli_Bytes
  rootManager_not_contains: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
  mirrorConnector_not: staginggoerli_Bytes
  mirrorConnector_gt: staginggoerli_Bytes
  mirrorConnector_lt: staginggoerli_Bytes
  mirrorConnector_gte: staginggoerli_Bytes
  mirrorConnector_lte: staginggoerli_Bytes
  mirrorConnector_in: [staginggoerli_Bytes!]
  mirrorConnector_not_in: [staginggoerli_Bytes!]
  mirrorConnector_contains: staginggoerli_Bytes
  mirrorConnector_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar staginggoerli_BigDecimal

input staginggoerli_BlockChangedFilter {
  number_gte: Int!
}

input staginggoerli_Block_height {
  hash: staginggoerli_Bytes
  number: Int
  number_gte: Int
}

type staginggoerli_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerli_Bytes!
  rootManager: staginggoerli_Bytes!
  mirrorConnector: staginggoerli_Bytes!
}

input staginggoerli_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerli_Bytes
  amb_not: staginggoerli_Bytes
  amb_gt: staginggoerli_Bytes
  amb_lt: staginggoerli_Bytes
  amb_gte: staginggoerli_Bytes
  amb_lte: staginggoerli_Bytes
  amb_in: [staginggoerli_Bytes!]
  amb_not_in: [staginggoerli_Bytes!]
  amb_contains: staginggoerli_Bytes
  amb_not_contains: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  rootManager_not: staginggoerli_Bytes
  rootManager_gt: staginggoerli_Bytes
  rootManager_lt: staginggoerli_Bytes
  rootManager_gte: staginggoerli_Bytes
  rootManager_lte: staginggoerli_Bytes
  rootManager_in: [staginggoerli_Bytes!]
  rootManager_not_in: [staginggoerli_Bytes!]
  rootManager_contains: staginggoerli_Bytes
  rootManager_not_contains: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
  mirrorConnector_not: staginggoerli_Bytes
  mirrorConnector_gt: staginggoerli_Bytes
  mirrorConnector_lt: staginggoerli_Bytes
  mirrorConnector_gte: staginggoerli_Bytes
  mirrorConnector_lte: staginggoerli_Bytes
  mirrorConnector_in: [staginggoerli_Bytes!]
  mirrorConnector_not_in: [staginggoerli_Bytes!]
  mirrorConnector_contains: staginggoerli_Bytes
  mirrorConnector_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar staginggoerli_Bytes

type staginggoerli_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerli_Bytes!
  rootManager: staginggoerli_Bytes!
  mirrorConnector: staginggoerli_Bytes!
}

input staginggoerli_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerli_Bytes
  amb_not: staginggoerli_Bytes
  amb_gt: staginggoerli_Bytes
  amb_lt: staginggoerli_Bytes
  amb_gte: staginggoerli_Bytes
  amb_lte: staginggoerli_Bytes
  amb_in: [staginggoerli_Bytes!]
  amb_not_in: [staginggoerli_Bytes!]
  amb_contains: staginggoerli_Bytes
  amb_not_contains: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  rootManager_not: staginggoerli_Bytes
  rootManager_gt: staginggoerli_Bytes
  rootManager_lt: staginggoerli_Bytes
  rootManager_gte: staginggoerli_Bytes
  rootManager_lte: staginggoerli_Bytes
  rootManager_in: [staginggoerli_Bytes!]
  rootManager_not_in: [staginggoerli_Bytes!]
  rootManager_contains: staginggoerli_Bytes
  rootManager_not_contains: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
  mirrorConnector_not: staginggoerli_Bytes
  mirrorConnector_gt: staginggoerli_Bytes
  mirrorConnector_lt: staginggoerli_Bytes
  mirrorConnector_gte: staginggoerli_Bytes
  mirrorConnector_lte: staginggoerli_Bytes
  mirrorConnector_in: [staginggoerli_Bytes!]
  mirrorConnector_not_in: [staginggoerli_Bytes!]
  mirrorConnector_contains: staginggoerli_Bytes
  mirrorConnector_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type staginggoerli_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerli_Bytes!
  rootManager: staginggoerli_Bytes!
  mirrorConnector: staginggoerli_Bytes!
}

input staginggoerli_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerli_Bytes
  amb_not: staginggoerli_Bytes
  amb_gt: staginggoerli_Bytes
  amb_lt: staginggoerli_Bytes
  amb_gte: staginggoerli_Bytes
  amb_lte: staginggoerli_Bytes
  amb_in: [staginggoerli_Bytes!]
  amb_not_in: [staginggoerli_Bytes!]
  amb_contains: staginggoerli_Bytes
  amb_not_contains: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  rootManager_not: staginggoerli_Bytes
  rootManager_gt: staginggoerli_Bytes
  rootManager_lt: staginggoerli_Bytes
  rootManager_gte: staginggoerli_Bytes
  rootManager_lte: staginggoerli_Bytes
  rootManager_in: [staginggoerli_Bytes!]
  rootManager_not_in: [staginggoerli_Bytes!]
  rootManager_contains: staginggoerli_Bytes
  rootManager_not_contains: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
  mirrorConnector_not: staginggoerli_Bytes
  mirrorConnector_gt: staginggoerli_Bytes
  mirrorConnector_lt: staginggoerli_Bytes
  mirrorConnector_gte: staginggoerli_Bytes
  mirrorConnector_lte: staginggoerli_Bytes
  mirrorConnector_in: [staginggoerli_Bytes!]
  mirrorConnector_not_in: [staginggoerli_Bytes!]
  mirrorConnector_contains: staginggoerli_Bytes
  mirrorConnector_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

"""Defines the order direction, either ascending or descending"""
enum staginggoerli_OrderDirection {
  asc
  desc
}

type staginggoerli_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerli_Bytes!
  rootManager: staginggoerli_Bytes!
  mirrorConnector: staginggoerli_Bytes!
}

input staginggoerli_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerli_Bytes
  amb_not: staginggoerli_Bytes
  amb_gt: staginggoerli_Bytes
  amb_lt: staginggoerli_Bytes
  amb_gte: staginggoerli_Bytes
  amb_lte: staginggoerli_Bytes
  amb_in: [staginggoerli_Bytes!]
  amb_not_in: [staginggoerli_Bytes!]
  amb_contains: staginggoerli_Bytes
  amb_not_contains: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  rootManager_not: staginggoerli_Bytes
  rootManager_gt: staginggoerli_Bytes
  rootManager_lt: staginggoerli_Bytes
  rootManager_gte: staginggoerli_Bytes
  rootManager_lte: staginggoerli_Bytes
  rootManager_in: [staginggoerli_Bytes!]
  rootManager_not_in: [staginggoerli_Bytes!]
  rootManager_contains: staginggoerli_Bytes
  rootManager_not_contains: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
  mirrorConnector_not: staginggoerli_Bytes
  mirrorConnector_gt: staginggoerli_Bytes
  mirrorConnector_lt: staginggoerli_Bytes
  mirrorConnector_gte: staginggoerli_Bytes
  mirrorConnector_lte: staginggoerli_Bytes
  mirrorConnector_in: [staginggoerli_Bytes!]
  mirrorConnector_not_in: [staginggoerli_Bytes!]
  mirrorConnector_contains: staginggoerli_Bytes
  mirrorConnector_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type staginggoerli_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: staginggoerli_Bytes!
  index: BigInt!
}

input staginggoerli_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: staginggoerli_Bytes
  receivedRoot_not: staginggoerli_Bytes
  receivedRoot_gt: staginggoerli_Bytes
  receivedRoot_lt: staginggoerli_Bytes
  receivedRoot_gte: staginggoerli_Bytes
  receivedRoot_lte: staginggoerli_Bytes
  receivedRoot_in: [staginggoerli_Bytes!]
  receivedRoot_not_in: [staginggoerli_Bytes!]
  receivedRoot_contains: staginggoerli_Bytes
  receivedRoot_not_contains: staginggoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type staginggoerli_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [staginggoerli_Bytes!]
}

input staginggoerli_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [staginggoerli_Bytes!]
  connectors_not: [staginggoerli_Bytes!]
  connectors_contains: [staginggoerli_Bytes!]
  connectors_contains_nocase: [staginggoerli_Bytes!]
  connectors_not_contains: [staginggoerli_Bytes!]
  connectors_not_contains_nocase: [staginggoerli_Bytes!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type staginggoerli_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input staginggoerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_gt: staginggoerli_Bytes
  root_lt: staginggoerli_Bytes
  root_gte: staginggoerli_Bytes
  root_lte: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_gt: staginggoerli_Bytes
  caller_lt: staginggoerli_Bytes
  caller_gte: staginggoerli_Bytes
  caller_lte: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_gt: staginggoerli_Bytes
  transactionHash_lt: staginggoerli_Bytes
  transactionHash_gte: staginggoerli_Bytes
  transactionHash_lte: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type staginggoerli_RootPropagated {
  id: ID!
  aggregate: staginggoerli_Bytes!
  domainsHash: staginggoerli_Bytes!
  count: BigInt!
}

input staginggoerli_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: staginggoerli_Bytes
  aggregate_not: staginggoerli_Bytes
  aggregate_gt: staginggoerli_Bytes
  aggregate_lt: staginggoerli_Bytes
  aggregate_gte: staginggoerli_Bytes
  aggregate_lte: staginggoerli_Bytes
  aggregate_in: [staginggoerli_Bytes!]
  aggregate_not_in: [staginggoerli_Bytes!]
  aggregate_contains: staginggoerli_Bytes
  aggregate_not_contains: staginggoerli_Bytes
  domainsHash: staginggoerli_Bytes
  domainsHash_not: staginggoerli_Bytes
  domainsHash_gt: staginggoerli_Bytes
  domainsHash_lt: staginggoerli_Bytes
  domainsHash_gte: staginggoerli_Bytes
  domainsHash_lte: staginggoerli_Bytes
  domainsHash_in: [staginggoerli_Bytes!]
  domainsHash_not_in: [staginggoerli_Bytes!]
  domainsHash_contains: staginggoerli_Bytes
  domainsHash_not_contains: staginggoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
}

type staginggoerli__Block_ {
  """The hash of the block"""
  hash: staginggoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type staginggoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: staginggoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar stagingoptimismgoerli_BigDecimal

input stagingoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input stagingoptimismgoerli_Block_height {
  hash: stagingoptimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar stagingoptimismgoerli_Bytes

"""Defines the order direction, either ascending or descending"""
enum stagingoptimismgoerli_OrderDirection {
  asc
  desc
}

type stagingoptimismgoerli_PooledToken {
  id: ID!
  asset: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: stagingoptimismgoerli_Bytes
  asset_not: stagingoptimismgoerli_Bytes
  asset_gt: stagingoptimismgoerli_Bytes
  asset_lt: stagingoptimismgoerli_Bytes
  asset_gte: stagingoptimismgoerli_Bytes
  asset_lte: stagingoptimismgoerli_Bytes
  asset_in: [stagingoptimismgoerli_Bytes!]
  asset_not_in: [stagingoptimismgoerli_Bytes!]
  asset_contains: stagingoptimismgoerli_Bytes
  asset_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_PooledToken_orderBy {
  id
  asset
}

type stagingoptimismgoerli_StableSwap {
  id: ID!
  isActive: Boolean
  key: stagingoptimismgoerli_Bytes!
  canonicalId: stagingoptimismgoerli_Bytes
  domain: BigInt
  swapPool: stagingoptimismgoerli_Bytes
  lpToken: stagingoptimismgoerli_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_PooledToken_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_PooledToken_filter): [stagingoptimismgoerli_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]!
  balances: [BigInt!]!
  adminFees: [BigInt!]!
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_StableSwapEvent_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_StableSwapEvent_filter): [stagingoptimismgoerli_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_StableSwapExchange_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_StableSwapExchange_filter): [stagingoptimismgoerli_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_SwapHourlyVolume_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_SwapHourlyVolume_filter): [stagingoptimismgoerli_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_SwapDailyVolume_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_SwapDailyVolume_filter): [stagingoptimismgoerli_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_SwapWeeklyVolume_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_SwapWeeklyVolume_filter): [stagingoptimismgoerli_SwapWeeklyVolume!]
}

type stagingoptimismgoerli_StableSwapAddLiquidityEvent implements stagingoptimismgoerli_StableSwapEvent {
  id: ID!
  stableSwap: stagingoptimismgoerli_StableSwap!
  provider: stagingoptimismgoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_StableSwap_filter
  provider: stagingoptimismgoerli_Bytes
  provider_not: stagingoptimismgoerli_Bytes
  provider_gt: stagingoptimismgoerli_Bytes
  provider_lt: stagingoptimismgoerli_Bytes
  provider_gte: stagingoptimismgoerli_Bytes
  provider_lte: stagingoptimismgoerli_Bytes
  provider_in: [stagingoptimismgoerli_Bytes!]
  provider_not_in: [stagingoptimismgoerli_Bytes!]
  provider_contains: stagingoptimismgoerli_Bytes
  provider_not_contains: stagingoptimismgoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingoptimismgoerli_Bytes
  transaction_not: stagingoptimismgoerli_Bytes
  transaction_gt: stagingoptimismgoerli_Bytes
  transaction_lt: stagingoptimismgoerli_Bytes
  transaction_gte: stagingoptimismgoerli_Bytes
  transaction_lte: stagingoptimismgoerli_Bytes
  transaction_in: [stagingoptimismgoerli_Bytes!]
  transaction_not_in: [stagingoptimismgoerli_Bytes!]
  transaction_contains: stagingoptimismgoerli_Bytes
  transaction_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface stagingoptimismgoerli_StableSwapEvent {
  id: ID!
  stableSwap: stagingoptimismgoerli_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingoptimismgoerli_Bytes
  transaction_not: stagingoptimismgoerli_Bytes
  transaction_gt: stagingoptimismgoerli_Bytes
  transaction_lt: stagingoptimismgoerli_Bytes
  transaction_gte: stagingoptimismgoerli_Bytes
  transaction_lte: stagingoptimismgoerli_Bytes
  transaction_in: [stagingoptimismgoerli_Bytes!]
  transaction_not_in: [stagingoptimismgoerli_Bytes!]
  transaction_contains: stagingoptimismgoerli_Bytes
  transaction_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type stagingoptimismgoerli_StableSwapExchange {
  id: ID!
  stableSwap: stagingoptimismgoerli_StableSwap!
  buyer: stagingoptimismgoerli_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_StableSwap_filter
  buyer: stagingoptimismgoerli_Bytes
  buyer_not: stagingoptimismgoerli_Bytes
  buyer_gt: stagingoptimismgoerli_Bytes
  buyer_lt: stagingoptimismgoerli_Bytes
  buyer_gte: stagingoptimismgoerli_Bytes
  buyer_lte: stagingoptimismgoerli_Bytes
  buyer_in: [stagingoptimismgoerli_Bytes!]
  buyer_not_in: [stagingoptimismgoerli_Bytes!]
  buyer_contains: stagingoptimismgoerli_Bytes
  buyer_not_contains: stagingoptimismgoerli_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingoptimismgoerli_Bytes
  transaction_not: stagingoptimismgoerli_Bytes
  transaction_gt: stagingoptimismgoerli_Bytes
  transaction_lt: stagingoptimismgoerli_Bytes
  transaction_gte: stagingoptimismgoerli_Bytes
  transaction_lte: stagingoptimismgoerli_Bytes
  transaction_in: [stagingoptimismgoerli_Bytes!]
  transaction_not_in: [stagingoptimismgoerli_Bytes!]
  transaction_contains: stagingoptimismgoerli_Bytes
  transaction_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type stagingoptimismgoerli_StableSwapRemoveLiquidityEvent implements stagingoptimismgoerli_StableSwapEvent {
  id: ID!
  stableSwap: stagingoptimismgoerli_StableSwap!
  provider: stagingoptimismgoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_StableSwap_filter
  provider: stagingoptimismgoerli_Bytes
  provider_not: stagingoptimismgoerli_Bytes
  provider_gt: stagingoptimismgoerli_Bytes
  provider_lt: stagingoptimismgoerli_Bytes
  provider_gte: stagingoptimismgoerli_Bytes
  provider_lte: stagingoptimismgoerli_Bytes
  provider_in: [stagingoptimismgoerli_Bytes!]
  provider_not_in: [stagingoptimismgoerli_Bytes!]
  provider_contains: stagingoptimismgoerli_Bytes
  provider_not_contains: stagingoptimismgoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingoptimismgoerli_Bytes
  transaction_not: stagingoptimismgoerli_Bytes
  transaction_gt: stagingoptimismgoerli_Bytes
  transaction_lt: stagingoptimismgoerli_Bytes
  transaction_gte: stagingoptimismgoerli_Bytes
  transaction_lte: stagingoptimismgoerli_Bytes
  transaction_in: [stagingoptimismgoerli_Bytes!]
  transaction_not_in: [stagingoptimismgoerli_Bytes!]
  transaction_contains: stagingoptimismgoerli_Bytes
  transaction_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input stagingoptimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: stagingoptimismgoerli_Bytes
  key_not: stagingoptimismgoerli_Bytes
  key_gt: stagingoptimismgoerli_Bytes
  key_lt: stagingoptimismgoerli_Bytes
  key_gte: stagingoptimismgoerli_Bytes
  key_lte: stagingoptimismgoerli_Bytes
  key_in: [stagingoptimismgoerli_Bytes!]
  key_not_in: [stagingoptimismgoerli_Bytes!]
  key_contains: stagingoptimismgoerli_Bytes
  key_not_contains: stagingoptimismgoerli_Bytes
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_gt: stagingoptimismgoerli_Bytes
  canonicalId_lt: stagingoptimismgoerli_Bytes
  canonicalId_gte: stagingoptimismgoerli_Bytes
  canonicalId_lte: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: stagingoptimismgoerli_Bytes
  swapPool_not: stagingoptimismgoerli_Bytes
  swapPool_gt: stagingoptimismgoerli_Bytes
  swapPool_lt: stagingoptimismgoerli_Bytes
  swapPool_gte: stagingoptimismgoerli_Bytes
  swapPool_lte: stagingoptimismgoerli_Bytes
  swapPool_in: [stagingoptimismgoerli_Bytes!]
  swapPool_not_in: [stagingoptimismgoerli_Bytes!]
  swapPool_contains: stagingoptimismgoerli_Bytes
  swapPool_not_contains: stagingoptimismgoerli_Bytes
  lpToken: stagingoptimismgoerli_Bytes
  lpToken_not: stagingoptimismgoerli_Bytes
  lpToken_gt: stagingoptimismgoerli_Bytes
  lpToken_lt: stagingoptimismgoerli_Bytes
  lpToken_gte: stagingoptimismgoerli_Bytes
  lpToken_lte: stagingoptimismgoerli_Bytes
  lpToken_in: [stagingoptimismgoerli_Bytes!]
  lpToken_not_in: [stagingoptimismgoerli_Bytes!]
  lpToken_contains: stagingoptimismgoerli_Bytes
  lpToken_not_contains: stagingoptimismgoerli_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: stagingoptimismgoerli_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: stagingoptimismgoerli_StableSwapEvent_filter
  exchanges_: stagingoptimismgoerli_StableSwapExchange_filter
  hourlyVolumes_: stagingoptimismgoerli_SwapHourlyVolume_filter
  dailyVolumes_: stagingoptimismgoerli_SwapDailyVolume_filter
  weeklyVolumes_: stagingoptimismgoerli_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type stagingoptimismgoerli_SwapDailyVolume implements stagingoptimismgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: stagingoptimismgoerli_StableSwap!
  timestamp: BigInt!
  volume: stagingoptimismgoerli_BigDecimal!
}

input stagingoptimismgoerli_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingoptimismgoerli_BigDecimal
  volume_not: stagingoptimismgoerli_BigDecimal
  volume_gt: stagingoptimismgoerli_BigDecimal
  volume_lt: stagingoptimismgoerli_BigDecimal
  volume_gte: stagingoptimismgoerli_BigDecimal
  volume_lte: stagingoptimismgoerli_BigDecimal
  volume_in: [stagingoptimismgoerli_BigDecimal!]
  volume_not_in: [stagingoptimismgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type stagingoptimismgoerli_SwapHourlyVolume implements stagingoptimismgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: stagingoptimismgoerli_StableSwap!
  timestamp: BigInt!
  volume: stagingoptimismgoerli_BigDecimal!
}

input stagingoptimismgoerli_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingoptimismgoerli_BigDecimal
  volume_not: stagingoptimismgoerli_BigDecimal
  volume_gt: stagingoptimismgoerli_BigDecimal
  volume_lt: stagingoptimismgoerli_BigDecimal
  volume_gte: stagingoptimismgoerli_BigDecimal
  volume_lte: stagingoptimismgoerli_BigDecimal
  volume_in: [stagingoptimismgoerli_BigDecimal!]
  volume_not_in: [stagingoptimismgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface stagingoptimismgoerli_SwapTradeVolume {
  stableSwap: stagingoptimismgoerli_StableSwap!
  timestamp: BigInt!
  volume: stagingoptimismgoerli_BigDecimal!
}

input stagingoptimismgoerli_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingoptimismgoerli_BigDecimal
  volume_not: stagingoptimismgoerli_BigDecimal
  volume_gt: stagingoptimismgoerli_BigDecimal
  volume_lt: stagingoptimismgoerli_BigDecimal
  volume_gte: stagingoptimismgoerli_BigDecimal
  volume_lte: stagingoptimismgoerli_BigDecimal
  volume_in: [stagingoptimismgoerli_BigDecimal!]
  volume_not_in: [stagingoptimismgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type stagingoptimismgoerli_SwapWeeklyVolume implements stagingoptimismgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: stagingoptimismgoerli_StableSwap!
  timestamp: BigInt!
  volume: stagingoptimismgoerli_BigDecimal!
}

input stagingoptimismgoerli_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingoptimismgoerli_BigDecimal
  volume_not: stagingoptimismgoerli_BigDecimal
  volume_gt: stagingoptimismgoerli_BigDecimal
  volume_lt: stagingoptimismgoerli_BigDecimal
  volume_gte: stagingoptimismgoerli_BigDecimal
  volume_lte: stagingoptimismgoerli_BigDecimal
  volume_in: [stagingoptimismgoerli_BigDecimal!]
  volume_not_in: [stagingoptimismgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type stagingoptimismgoerli_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input stagingoptimismgoerli_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type stagingoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: stagingoptimismgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type stagingoptimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: stagingoptimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar arbitrumgoerli_BigDecimal

input arbitrumgoerli_BlockChangedFilter {
  number_gte: Int!
}

input arbitrumgoerli_Block_height {
  hash: arbitrumgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar arbitrumgoerli_Bytes

"""Defines the order direction, either ascending or descending"""
enum arbitrumgoerli_OrderDirection {
  asc
  desc
}

type arbitrumgoerli_PooledToken {
  id: ID!
  asset: arbitrumgoerli_Bytes!
}

input arbitrumgoerli_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: arbitrumgoerli_Bytes
  asset_not: arbitrumgoerli_Bytes
  asset_gt: arbitrumgoerli_Bytes
  asset_lt: arbitrumgoerli_Bytes
  asset_gte: arbitrumgoerli_Bytes
  asset_lte: arbitrumgoerli_Bytes
  asset_in: [arbitrumgoerli_Bytes!]
  asset_not_in: [arbitrumgoerli_Bytes!]
  asset_contains: arbitrumgoerli_Bytes
  asset_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_PooledToken_orderBy {
  id
  asset
}

type arbitrumgoerli_StableSwap {
  id: ID!
  isActive: Boolean
  key: arbitrumgoerli_Bytes
  canonicalId: arbitrumgoerli_Bytes
  domain: BigInt
  swapPool: arbitrumgoerli_Bytes
  lpToken: arbitrumgoerli_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_PooledToken_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_PooledToken_filter): [arbitrumgoerli_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_StableSwapEvent_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_StableSwapEvent_filter): [arbitrumgoerli_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_StableSwapExchange_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_StableSwapExchange_filter): [arbitrumgoerli_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_SwapHourlyVolume_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_SwapHourlyVolume_filter): [arbitrumgoerli_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_SwapDailyVolume_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_SwapDailyVolume_filter): [arbitrumgoerli_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_SwapWeeklyVolume_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_SwapWeeklyVolume_filter): [arbitrumgoerli_SwapWeeklyVolume!]
}

type arbitrumgoerli_StableSwapAddLiquidityEvent implements arbitrumgoerli_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumgoerli_StableSwap!
  provider: arbitrumgoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumgoerli_Bytes!
}

input arbitrumgoerli_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  provider: arbitrumgoerli_Bytes
  provider_not: arbitrumgoerli_Bytes
  provider_gt: arbitrumgoerli_Bytes
  provider_lt: arbitrumgoerli_Bytes
  provider_gte: arbitrumgoerli_Bytes
  provider_lte: arbitrumgoerli_Bytes
  provider_in: [arbitrumgoerli_Bytes!]
  provider_not_in: [arbitrumgoerli_Bytes!]
  provider_contains: arbitrumgoerli_Bytes
  provider_not_contains: arbitrumgoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumgoerli_Bytes
  transaction_not: arbitrumgoerli_Bytes
  transaction_gt: arbitrumgoerli_Bytes
  transaction_lt: arbitrumgoerli_Bytes
  transaction_gte: arbitrumgoerli_Bytes
  transaction_lte: arbitrumgoerli_Bytes
  transaction_in: [arbitrumgoerli_Bytes!]
  transaction_not_in: [arbitrumgoerli_Bytes!]
  transaction_contains: arbitrumgoerli_Bytes
  transaction_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface arbitrumgoerli_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumgoerli_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumgoerli_Bytes!
}

input arbitrumgoerli_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumgoerli_Bytes
  transaction_not: arbitrumgoerli_Bytes
  transaction_gt: arbitrumgoerli_Bytes
  transaction_lt: arbitrumgoerli_Bytes
  transaction_gte: arbitrumgoerli_Bytes
  transaction_lte: arbitrumgoerli_Bytes
  transaction_in: [arbitrumgoerli_Bytes!]
  transaction_not_in: [arbitrumgoerli_Bytes!]
  transaction_contains: arbitrumgoerli_Bytes
  transaction_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type arbitrumgoerli_StableSwapExchange {
  id: ID!
  stableSwap: arbitrumgoerli_StableSwap!
  buyer: arbitrumgoerli_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumgoerli_Bytes!
}

input arbitrumgoerli_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  buyer: arbitrumgoerli_Bytes
  buyer_not: arbitrumgoerli_Bytes
  buyer_gt: arbitrumgoerli_Bytes
  buyer_lt: arbitrumgoerli_Bytes
  buyer_gte: arbitrumgoerli_Bytes
  buyer_lte: arbitrumgoerli_Bytes
  buyer_in: [arbitrumgoerli_Bytes!]
  buyer_not_in: [arbitrumgoerli_Bytes!]
  buyer_contains: arbitrumgoerli_Bytes
  buyer_not_contains: arbitrumgoerli_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumgoerli_Bytes
  transaction_not: arbitrumgoerli_Bytes
  transaction_gt: arbitrumgoerli_Bytes
  transaction_lt: arbitrumgoerli_Bytes
  transaction_gte: arbitrumgoerli_Bytes
  transaction_lte: arbitrumgoerli_Bytes
  transaction_in: [arbitrumgoerli_Bytes!]
  transaction_not_in: [arbitrumgoerli_Bytes!]
  transaction_contains: arbitrumgoerli_Bytes
  transaction_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type arbitrumgoerli_StableSwapRemoveLiquidityEvent implements arbitrumgoerli_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumgoerli_StableSwap!
  provider: arbitrumgoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumgoerli_Bytes!
}

input arbitrumgoerli_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  provider: arbitrumgoerli_Bytes
  provider_not: arbitrumgoerli_Bytes
  provider_gt: arbitrumgoerli_Bytes
  provider_lt: arbitrumgoerli_Bytes
  provider_gte: arbitrumgoerli_Bytes
  provider_lte: arbitrumgoerli_Bytes
  provider_in: [arbitrumgoerli_Bytes!]
  provider_not_in: [arbitrumgoerli_Bytes!]
  provider_contains: arbitrumgoerli_Bytes
  provider_not_contains: arbitrumgoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumgoerli_Bytes
  transaction_not: arbitrumgoerli_Bytes
  transaction_gt: arbitrumgoerli_Bytes
  transaction_lt: arbitrumgoerli_Bytes
  transaction_gte: arbitrumgoerli_Bytes
  transaction_lte: arbitrumgoerli_Bytes
  transaction_in: [arbitrumgoerli_Bytes!]
  transaction_not_in: [arbitrumgoerli_Bytes!]
  transaction_contains: arbitrumgoerli_Bytes
  transaction_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input arbitrumgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: arbitrumgoerli_Bytes
  key_not: arbitrumgoerli_Bytes
  key_gt: arbitrumgoerli_Bytes
  key_lt: arbitrumgoerli_Bytes
  key_gte: arbitrumgoerli_Bytes
  key_lte: arbitrumgoerli_Bytes
  key_in: [arbitrumgoerli_Bytes!]
  key_not_in: [arbitrumgoerli_Bytes!]
  key_contains: arbitrumgoerli_Bytes
  key_not_contains: arbitrumgoerli_Bytes
  canonicalId: arbitrumgoerli_Bytes
  canonicalId_not: arbitrumgoerli_Bytes
  canonicalId_gt: arbitrumgoerli_Bytes
  canonicalId_lt: arbitrumgoerli_Bytes
  canonicalId_gte: arbitrumgoerli_Bytes
  canonicalId_lte: arbitrumgoerli_Bytes
  canonicalId_in: [arbitrumgoerli_Bytes!]
  canonicalId_not_in: [arbitrumgoerli_Bytes!]
  canonicalId_contains: arbitrumgoerli_Bytes
  canonicalId_not_contains: arbitrumgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: arbitrumgoerli_Bytes
  swapPool_not: arbitrumgoerli_Bytes
  swapPool_gt: arbitrumgoerli_Bytes
  swapPool_lt: arbitrumgoerli_Bytes
  swapPool_gte: arbitrumgoerli_Bytes
  swapPool_lte: arbitrumgoerli_Bytes
  swapPool_in: [arbitrumgoerli_Bytes!]
  swapPool_not_in: [arbitrumgoerli_Bytes!]
  swapPool_contains: arbitrumgoerli_Bytes
  swapPool_not_contains: arbitrumgoerli_Bytes
  lpToken: arbitrumgoerli_Bytes
  lpToken_not: arbitrumgoerli_Bytes
  lpToken_gt: arbitrumgoerli_Bytes
  lpToken_lt: arbitrumgoerli_Bytes
  lpToken_gte: arbitrumgoerli_Bytes
  lpToken_lte: arbitrumgoerli_Bytes
  lpToken_in: [arbitrumgoerli_Bytes!]
  lpToken_not_in: [arbitrumgoerli_Bytes!]
  lpToken_contains: arbitrumgoerli_Bytes
  lpToken_not_contains: arbitrumgoerli_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: arbitrumgoerli_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: arbitrumgoerli_StableSwapEvent_filter
  exchanges_: arbitrumgoerli_StableSwapExchange_filter
  hourlyVolumes_: arbitrumgoerli_SwapHourlyVolume_filter
  dailyVolumes_: arbitrumgoerli_SwapDailyVolume_filter
  weeklyVolumes_: arbitrumgoerli_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type arbitrumgoerli_SwapDailyVolume implements arbitrumgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumgoerli_StableSwap!
  timestamp: BigInt!
  volume: arbitrumgoerli_BigDecimal!
}

input arbitrumgoerli_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumgoerli_BigDecimal
  volume_not: arbitrumgoerli_BigDecimal
  volume_gt: arbitrumgoerli_BigDecimal
  volume_lt: arbitrumgoerli_BigDecimal
  volume_gte: arbitrumgoerli_BigDecimal
  volume_lte: arbitrumgoerli_BigDecimal
  volume_in: [arbitrumgoerli_BigDecimal!]
  volume_not_in: [arbitrumgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type arbitrumgoerli_SwapHourlyVolume implements arbitrumgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumgoerli_StableSwap!
  timestamp: BigInt!
  volume: arbitrumgoerli_BigDecimal!
}

input arbitrumgoerli_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumgoerli_BigDecimal
  volume_not: arbitrumgoerli_BigDecimal
  volume_gt: arbitrumgoerli_BigDecimal
  volume_lt: arbitrumgoerli_BigDecimal
  volume_gte: arbitrumgoerli_BigDecimal
  volume_lte: arbitrumgoerli_BigDecimal
  volume_in: [arbitrumgoerli_BigDecimal!]
  volume_not_in: [arbitrumgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface arbitrumgoerli_SwapTradeVolume {
  stableSwap: arbitrumgoerli_StableSwap!
  timestamp: BigInt!
  volume: arbitrumgoerli_BigDecimal!
}

input arbitrumgoerli_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumgoerli_BigDecimal
  volume_not: arbitrumgoerli_BigDecimal
  volume_gt: arbitrumgoerli_BigDecimal
  volume_lt: arbitrumgoerli_BigDecimal
  volume_gte: arbitrumgoerli_BigDecimal
  volume_lte: arbitrumgoerli_BigDecimal
  volume_in: [arbitrumgoerli_BigDecimal!]
  volume_not_in: [arbitrumgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type arbitrumgoerli_SwapWeeklyVolume implements arbitrumgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumgoerli_StableSwap!
  timestamp: BigInt!
  volume: arbitrumgoerli_BigDecimal!
}

input arbitrumgoerli_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumgoerli_BigDecimal
  volume_not: arbitrumgoerli_BigDecimal
  volume_gt: arbitrumgoerli_BigDecimal
  volume_lt: arbitrumgoerli_BigDecimal
  volume_gte: arbitrumgoerli_BigDecimal
  volume_lte: arbitrumgoerli_BigDecimal
  volume_in: [arbitrumgoerli_BigDecimal!]
  volume_not_in: [arbitrumgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type arbitrumgoerli_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input arbitrumgoerli_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type arbitrumgoerli__Block_ {
  """The hash of the block"""
  hash: arbitrumgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type arbitrumgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: arbitrumgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar optimism_BigDecimal

input optimism_BlockChangedFilter {
  number_gte: Int!
}

input optimism_Block_height {
  hash: optimism_Bytes
  number: Int
  number_gte: Int
}

scalar optimism_Bytes

"""Defines the order direction, either ascending or descending"""
enum optimism_OrderDirection {
  asc
  desc
}

type optimism_PooledToken {
  id: ID!
  asset: optimism_Bytes!
}

input optimism_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: optimism_Bytes
  asset_not: optimism_Bytes
  asset_gt: optimism_Bytes
  asset_lt: optimism_Bytes
  asset_gte: optimism_Bytes
  asset_lte: optimism_Bytes
  asset_in: [optimism_Bytes!]
  asset_not_in: [optimism_Bytes!]
  asset_contains: optimism_Bytes
  asset_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_PooledToken_orderBy {
  id
  asset
}

type optimism_StableSwap {
  id: ID!
  isActive: Boolean
  key: optimism_Bytes
  canonicalId: optimism_Bytes
  domain: BigInt
  swapPool: optimism_Bytes
  lpToken: optimism_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: optimism_PooledToken_orderBy, orderDirection: optimism_OrderDirection, where: optimism_PooledToken_filter): [optimism_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: optimism_StableSwapEvent_orderBy, orderDirection: optimism_OrderDirection, where: optimism_StableSwapEvent_filter): [optimism_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: optimism_StableSwapExchange_orderBy, orderDirection: optimism_OrderDirection, where: optimism_StableSwapExchange_filter): [optimism_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: optimism_SwapHourlyVolume_orderBy, orderDirection: optimism_OrderDirection, where: optimism_SwapHourlyVolume_filter): [optimism_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: optimism_SwapDailyVolume_orderBy, orderDirection: optimism_OrderDirection, where: optimism_SwapDailyVolume_filter): [optimism_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: optimism_SwapWeeklyVolume_orderBy, orderDirection: optimism_OrderDirection, where: optimism_SwapWeeklyVolume_filter): [optimism_SwapWeeklyVolume!]
}

type optimism_StableSwapAddLiquidityEvent implements optimism_StableSwapEvent {
  id: ID!
  stableSwap: optimism_StableSwap!
  provider: optimism_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: optimism_Bytes!
}

input optimism_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  provider: optimism_Bytes
  provider_not: optimism_Bytes
  provider_gt: optimism_Bytes
  provider_lt: optimism_Bytes
  provider_gte: optimism_Bytes
  provider_lte: optimism_Bytes
  provider_in: [optimism_Bytes!]
  provider_not_in: [optimism_Bytes!]
  provider_contains: optimism_Bytes
  provider_not_contains: optimism_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: optimism_Bytes
  transaction_not: optimism_Bytes
  transaction_gt: optimism_Bytes
  transaction_lt: optimism_Bytes
  transaction_gte: optimism_Bytes
  transaction_lte: optimism_Bytes
  transaction_in: [optimism_Bytes!]
  transaction_not_in: [optimism_Bytes!]
  transaction_contains: optimism_Bytes
  transaction_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface optimism_StableSwapEvent {
  id: ID!
  stableSwap: optimism_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: optimism_Bytes!
}

input optimism_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: optimism_Bytes
  transaction_not: optimism_Bytes
  transaction_gt: optimism_Bytes
  transaction_lt: optimism_Bytes
  transaction_gte: optimism_Bytes
  transaction_lte: optimism_Bytes
  transaction_in: [optimism_Bytes!]
  transaction_not_in: [optimism_Bytes!]
  transaction_contains: optimism_Bytes
  transaction_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type optimism_StableSwapExchange {
  id: ID!
  stableSwap: optimism_StableSwap!
  buyer: optimism_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: optimism_Bytes!
}

input optimism_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  buyer: optimism_Bytes
  buyer_not: optimism_Bytes
  buyer_gt: optimism_Bytes
  buyer_lt: optimism_Bytes
  buyer_gte: optimism_Bytes
  buyer_lte: optimism_Bytes
  buyer_in: [optimism_Bytes!]
  buyer_not_in: [optimism_Bytes!]
  buyer_contains: optimism_Bytes
  buyer_not_contains: optimism_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: optimism_Bytes
  transaction_not: optimism_Bytes
  transaction_gt: optimism_Bytes
  transaction_lt: optimism_Bytes
  transaction_gte: optimism_Bytes
  transaction_lte: optimism_Bytes
  transaction_in: [optimism_Bytes!]
  transaction_not_in: [optimism_Bytes!]
  transaction_contains: optimism_Bytes
  transaction_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type optimism_StableSwapRemoveLiquidityEvent implements optimism_StableSwapEvent {
  id: ID!
  stableSwap: optimism_StableSwap!
  provider: optimism_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: optimism_Bytes!
}

input optimism_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  provider: optimism_Bytes
  provider_not: optimism_Bytes
  provider_gt: optimism_Bytes
  provider_lt: optimism_Bytes
  provider_gte: optimism_Bytes
  provider_lte: optimism_Bytes
  provider_in: [optimism_Bytes!]
  provider_not_in: [optimism_Bytes!]
  provider_contains: optimism_Bytes
  provider_not_contains: optimism_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: optimism_Bytes
  transaction_not: optimism_Bytes
  transaction_gt: optimism_Bytes
  transaction_lt: optimism_Bytes
  transaction_gte: optimism_Bytes
  transaction_lte: optimism_Bytes
  transaction_in: [optimism_Bytes!]
  transaction_not_in: [optimism_Bytes!]
  transaction_contains: optimism_Bytes
  transaction_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input optimism_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: optimism_Bytes
  key_not: optimism_Bytes
  key_gt: optimism_Bytes
  key_lt: optimism_Bytes
  key_gte: optimism_Bytes
  key_lte: optimism_Bytes
  key_in: [optimism_Bytes!]
  key_not_in: [optimism_Bytes!]
  key_contains: optimism_Bytes
  key_not_contains: optimism_Bytes
  canonicalId: optimism_Bytes
  canonicalId_not: optimism_Bytes
  canonicalId_gt: optimism_Bytes
  canonicalId_lt: optimism_Bytes
  canonicalId_gte: optimism_Bytes
  canonicalId_lte: optimism_Bytes
  canonicalId_in: [optimism_Bytes!]
  canonicalId_not_in: [optimism_Bytes!]
  canonicalId_contains: optimism_Bytes
  canonicalId_not_contains: optimism_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: optimism_Bytes
  swapPool_not: optimism_Bytes
  swapPool_gt: optimism_Bytes
  swapPool_lt: optimism_Bytes
  swapPool_gte: optimism_Bytes
  swapPool_lte: optimism_Bytes
  swapPool_in: [optimism_Bytes!]
  swapPool_not_in: [optimism_Bytes!]
  swapPool_contains: optimism_Bytes
  swapPool_not_contains: optimism_Bytes
  lpToken: optimism_Bytes
  lpToken_not: optimism_Bytes
  lpToken_gt: optimism_Bytes
  lpToken_lt: optimism_Bytes
  lpToken_gte: optimism_Bytes
  lpToken_lte: optimism_Bytes
  lpToken_in: [optimism_Bytes!]
  lpToken_not_in: [optimism_Bytes!]
  lpToken_contains: optimism_Bytes
  lpToken_not_contains: optimism_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: optimism_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: optimism_StableSwapEvent_filter
  exchanges_: optimism_StableSwapExchange_filter
  hourlyVolumes_: optimism_SwapHourlyVolume_filter
  dailyVolumes_: optimism_SwapDailyVolume_filter
  weeklyVolumes_: optimism_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type optimism_SwapDailyVolume implements optimism_SwapTradeVolume {
  id: ID!
  stableSwap: optimism_StableSwap!
  timestamp: BigInt!
  volume: optimism_BigDecimal!
}

input optimism_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: optimism_BigDecimal
  volume_not: optimism_BigDecimal
  volume_gt: optimism_BigDecimal
  volume_lt: optimism_BigDecimal
  volume_gte: optimism_BigDecimal
  volume_lte: optimism_BigDecimal
  volume_in: [optimism_BigDecimal!]
  volume_not_in: [optimism_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type optimism_SwapHourlyVolume implements optimism_SwapTradeVolume {
  id: ID!
  stableSwap: optimism_StableSwap!
  timestamp: BigInt!
  volume: optimism_BigDecimal!
}

input optimism_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: optimism_BigDecimal
  volume_not: optimism_BigDecimal
  volume_gt: optimism_BigDecimal
  volume_lt: optimism_BigDecimal
  volume_gte: optimism_BigDecimal
  volume_lte: optimism_BigDecimal
  volume_in: [optimism_BigDecimal!]
  volume_not_in: [optimism_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface optimism_SwapTradeVolume {
  stableSwap: optimism_StableSwap!
  timestamp: BigInt!
  volume: optimism_BigDecimal!
}

input optimism_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: optimism_BigDecimal
  volume_not: optimism_BigDecimal
  volume_gt: optimism_BigDecimal
  volume_lt: optimism_BigDecimal
  volume_gte: optimism_BigDecimal
  volume_lte: optimism_BigDecimal
  volume_in: [optimism_BigDecimal!]
  volume_not_in: [optimism_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type optimism_SwapWeeklyVolume implements optimism_SwapTradeVolume {
  id: ID!
  stableSwap: optimism_StableSwap!
  timestamp: BigInt!
  volume: optimism_BigDecimal!
}

input optimism_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: optimism_BigDecimal
  volume_not: optimism_BigDecimal
  volume_gt: optimism_BigDecimal
  volume_lt: optimism_BigDecimal
  volume_gte: optimism_BigDecimal
  volume_lte: optimism_BigDecimal
  volume_in: [optimism_BigDecimal!]
  volume_not_in: [optimism_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type optimism_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input optimism_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type optimism__Block_ {
  """The hash of the block"""
  hash: optimism_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type optimism__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: optimism__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type staginggoerli_PooledToken {
  id: ID!
  asset: staginggoerli_Bytes!
}

input staginggoerli_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: staginggoerli_Bytes
  asset_not: staginggoerli_Bytes
  asset_gt: staginggoerli_Bytes
  asset_lt: staginggoerli_Bytes
  asset_gte: staginggoerli_Bytes
  asset_lte: staginggoerli_Bytes
  asset_in: [staginggoerli_Bytes!]
  asset_not_in: [staginggoerli_Bytes!]
  asset_contains: staginggoerli_Bytes
  asset_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_PooledToken_orderBy {
  id
  asset
}

type staginggoerli_StableSwap {
  id: ID!
  isActive: Boolean
  key: staginggoerli_Bytes
  canonicalId: staginggoerli_Bytes
  domain: BigInt
  swapPool: staginggoerli_Bytes
  lpToken: staginggoerli_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_PooledToken_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_PooledToken_filter): [staginggoerli_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt
  lpTokenSupply: BigInt
  events(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_StableSwapEvent_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_StableSwapEvent_filter): [staginggoerli_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_StableSwapExchange_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_StableSwapExchange_filter): [staginggoerli_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_SwapHourlyVolume_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_SwapHourlyVolume_filter): [staginggoerli_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_SwapDailyVolume_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_SwapDailyVolume_filter): [staginggoerli_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_SwapWeeklyVolume_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_SwapWeeklyVolume_filter): [staginggoerli_SwapWeeklyVolume!]
}

type staginggoerli_StableSwapAddLiquidityEvent implements staginggoerli_StableSwapEvent {
  id: ID!
  stableSwap: staginggoerli_StableSwap!
  provider: staginggoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: staginggoerli_Bytes!
}

input staginggoerli_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: staginggoerli_StableSwap_filter
  provider: staginggoerli_Bytes
  provider_not: staginggoerli_Bytes
  provider_gt: staginggoerli_Bytes
  provider_lt: staginggoerli_Bytes
  provider_gte: staginggoerli_Bytes
  provider_lte: staginggoerli_Bytes
  provider_in: [staginggoerli_Bytes!]
  provider_not_in: [staginggoerli_Bytes!]
  provider_contains: staginggoerli_Bytes
  provider_not_contains: staginggoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: staginggoerli_Bytes
  transaction_not: staginggoerli_Bytes
  transaction_gt: staginggoerli_Bytes
  transaction_lt: staginggoerli_Bytes
  transaction_gte: staginggoerli_Bytes
  transaction_lte: staginggoerli_Bytes
  transaction_in: [staginggoerli_Bytes!]
  transaction_not_in: [staginggoerli_Bytes!]
  transaction_contains: staginggoerli_Bytes
  transaction_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface staginggoerli_StableSwapEvent {
  id: ID!
  stableSwap: staginggoerli_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: staginggoerli_Bytes!
}

input staginggoerli_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: staginggoerli_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: staginggoerli_Bytes
  transaction_not: staginggoerli_Bytes
  transaction_gt: staginggoerli_Bytes
  transaction_lt: staginggoerli_Bytes
  transaction_gte: staginggoerli_Bytes
  transaction_lte: staginggoerli_Bytes
  transaction_in: [staginggoerli_Bytes!]
  transaction_not_in: [staginggoerli_Bytes!]
  transaction_contains: staginggoerli_Bytes
  transaction_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type staginggoerli_StableSwapExchange {
  id: ID!
  stableSwap: staginggoerli_StableSwap!
  buyer: staginggoerli_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: staginggoerli_Bytes!
}

input staginggoerli_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: staginggoerli_StableSwap_filter
  buyer: staginggoerli_Bytes
  buyer_not: staginggoerli_Bytes
  buyer_gt: staginggoerli_Bytes
  buyer_lt: staginggoerli_Bytes
  buyer_gte: staginggoerli_Bytes
  buyer_lte: staginggoerli_Bytes
  buyer_in: [staginggoerli_Bytes!]
  buyer_not_in: [staginggoerli_Bytes!]
  buyer_contains: staginggoerli_Bytes
  buyer_not_contains: staginggoerli_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: staginggoerli_Bytes
  transaction_not: staginggoerli_Bytes
  transaction_gt: staginggoerli_Bytes
  transaction_lt: staginggoerli_Bytes
  transaction_gte: staginggoerli_Bytes
  transaction_lte: staginggoerli_Bytes
  transaction_in: [staginggoerli_Bytes!]
  transaction_not_in: [staginggoerli_Bytes!]
  transaction_contains: staginggoerli_Bytes
  transaction_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type staginggoerli_StableSwapRemoveLiquidityEvent implements staginggoerli_StableSwapEvent {
  id: ID!
  stableSwap: staginggoerli_StableSwap!
  provider: staginggoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: staginggoerli_Bytes!
}

input staginggoerli_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: staginggoerli_StableSwap_filter
  provider: staginggoerli_Bytes
  provider_not: staginggoerli_Bytes
  provider_gt: staginggoerli_Bytes
  provider_lt: staginggoerli_Bytes
  provider_gte: staginggoerli_Bytes
  provider_lte: staginggoerli_Bytes
  provider_in: [staginggoerli_Bytes!]
  provider_not_in: [staginggoerli_Bytes!]
  provider_contains: staginggoerli_Bytes
  provider_not_contains: staginggoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: staginggoerli_Bytes
  transaction_not: staginggoerli_Bytes
  transaction_gt: staginggoerli_Bytes
  transaction_lt: staginggoerli_Bytes
  transaction_gte: staginggoerli_Bytes
  transaction_lte: staginggoerli_Bytes
  transaction_in: [staginggoerli_Bytes!]
  transaction_not_in: [staginggoerli_Bytes!]
  transaction_contains: staginggoerli_Bytes
  transaction_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input staginggoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: staginggoerli_Bytes
  key_not: staginggoerli_Bytes
  key_gt: staginggoerli_Bytes
  key_lt: staginggoerli_Bytes
  key_gte: staginggoerli_Bytes
  key_lte: staginggoerli_Bytes
  key_in: [staginggoerli_Bytes!]
  key_not_in: [staginggoerli_Bytes!]
  key_contains: staginggoerli_Bytes
  key_not_contains: staginggoerli_Bytes
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_gt: staginggoerli_Bytes
  canonicalId_lt: staginggoerli_Bytes
  canonicalId_gte: staginggoerli_Bytes
  canonicalId_lte: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: staginggoerli_Bytes
  swapPool_not: staginggoerli_Bytes
  swapPool_gt: staginggoerli_Bytes
  swapPool_lt: staginggoerli_Bytes
  swapPool_gte: staginggoerli_Bytes
  swapPool_lte: staginggoerli_Bytes
  swapPool_in: [staginggoerli_Bytes!]
  swapPool_not_in: [staginggoerli_Bytes!]
  swapPool_contains: staginggoerli_Bytes
  swapPool_not_contains: staginggoerli_Bytes
  lpToken: staginggoerli_Bytes
  lpToken_not: staginggoerli_Bytes
  lpToken_gt: staginggoerli_Bytes
  lpToken_lt: staginggoerli_Bytes
  lpToken_gte: staginggoerli_Bytes
  lpToken_lte: staginggoerli_Bytes
  lpToken_in: [staginggoerli_Bytes!]
  lpToken_not_in: [staginggoerli_Bytes!]
  lpToken_contains: staginggoerli_Bytes
  lpToken_not_contains: staginggoerli_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: staginggoerli_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: staginggoerli_StableSwapEvent_filter
  exchanges_: staginggoerli_StableSwapExchange_filter
  hourlyVolumes_: staginggoerli_SwapHourlyVolume_filter
  dailyVolumes_: staginggoerli_SwapDailyVolume_filter
  weeklyVolumes_: staginggoerli_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type staginggoerli_SwapDailyVolume implements staginggoerli_SwapTradeVolume {
  id: ID!
  stableSwap: staginggoerli_StableSwap!
  timestamp: BigInt!
  volume: staginggoerli_BigDecimal!
}

input staginggoerli_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: staginggoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: staginggoerli_BigDecimal
  volume_not: staginggoerli_BigDecimal
  volume_gt: staginggoerli_BigDecimal
  volume_lt: staginggoerli_BigDecimal
  volume_gte: staginggoerli_BigDecimal
  volume_lte: staginggoerli_BigDecimal
  volume_in: [staginggoerli_BigDecimal!]
  volume_not_in: [staginggoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type staginggoerli_SwapHourlyVolume implements staginggoerli_SwapTradeVolume {
  id: ID!
  stableSwap: staginggoerli_StableSwap!
  timestamp: BigInt!
  volume: staginggoerli_BigDecimal!
}

input staginggoerli_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: staginggoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: staginggoerli_BigDecimal
  volume_not: staginggoerli_BigDecimal
  volume_gt: staginggoerli_BigDecimal
  volume_lt: staginggoerli_BigDecimal
  volume_gte: staginggoerli_BigDecimal
  volume_lte: staginggoerli_BigDecimal
  volume_in: [staginggoerli_BigDecimal!]
  volume_not_in: [staginggoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface staginggoerli_SwapTradeVolume {
  stableSwap: staginggoerli_StableSwap!
  timestamp: BigInt!
  volume: staginggoerli_BigDecimal!
}

input staginggoerli_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: staginggoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: staginggoerli_BigDecimal
  volume_not: staginggoerli_BigDecimal
  volume_gt: staginggoerli_BigDecimal
  volume_lt: staginggoerli_BigDecimal
  volume_gte: staginggoerli_BigDecimal
  volume_lte: staginggoerli_BigDecimal
  volume_in: [staginggoerli_BigDecimal!]
  volume_not_in: [staginggoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type staginggoerli_SwapWeeklyVolume implements staginggoerli_SwapTradeVolume {
  id: ID!
  stableSwap: staginggoerli_StableSwap!
  timestamp: BigInt!
  volume: staginggoerli_BigDecimal!
}

input staginggoerli_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: staginggoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: staginggoerli_BigDecimal
  volume_not: staginggoerli_BigDecimal
  volume_gt: staginggoerli_BigDecimal
  volume_lt: staginggoerli_BigDecimal
  volume_gte: staginggoerli_BigDecimal
  volume_lte: staginggoerli_BigDecimal
  volume_in: [staginggoerli_BigDecimal!]
  volume_not_in: [staginggoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type staginggoerli_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input staginggoerli_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

scalar stagingmumbai_BigDecimal

input stagingmumbai_BlockChangedFilter {
  number_gte: Int!
}

input stagingmumbai_Block_height {
  hash: stagingmumbai_Bytes
  number: Int
  number_gte: Int
}

scalar stagingmumbai_Bytes

"""Defines the order direction, either ascending or descending"""
enum stagingmumbai_OrderDirection {
  asc
  desc
}

type stagingmumbai_PooledToken {
  id: ID!
  asset: stagingmumbai_Bytes!
}

input stagingmumbai_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: stagingmumbai_Bytes
  asset_not: stagingmumbai_Bytes
  asset_gt: stagingmumbai_Bytes
  asset_lt: stagingmumbai_Bytes
  asset_gte: stagingmumbai_Bytes
  asset_lte: stagingmumbai_Bytes
  asset_in: [stagingmumbai_Bytes!]
  asset_not_in: [stagingmumbai_Bytes!]
  asset_contains: stagingmumbai_Bytes
  asset_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_PooledToken_orderBy {
  id
  asset
}

type stagingmumbai_StableSwap {
  id: ID!
  isActive: Boolean
  key: stagingmumbai_Bytes!
  canonicalId: stagingmumbai_Bytes
  domain: BigInt
  swapPool: stagingmumbai_Bytes
  lpToken: stagingmumbai_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_PooledToken_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_PooledToken_filter): [stagingmumbai_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]!
  balances: [BigInt!]!
  adminFees: [BigInt!]!
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_StableSwapEvent_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_StableSwapEvent_filter): [stagingmumbai_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_StableSwapExchange_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_StableSwapExchange_filter): [stagingmumbai_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_SwapHourlyVolume_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_SwapHourlyVolume_filter): [stagingmumbai_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_SwapDailyVolume_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_SwapDailyVolume_filter): [stagingmumbai_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_SwapWeeklyVolume_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_SwapWeeklyVolume_filter): [stagingmumbai_SwapWeeklyVolume!]
}

type stagingmumbai_StableSwapAddLiquidityEvent implements stagingmumbai_StableSwapEvent {
  id: ID!
  stableSwap: stagingmumbai_StableSwap!
  provider: stagingmumbai_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingmumbai_Bytes!
}

input stagingmumbai_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingmumbai_StableSwap_filter
  provider: stagingmumbai_Bytes
  provider_not: stagingmumbai_Bytes
  provider_gt: stagingmumbai_Bytes
  provider_lt: stagingmumbai_Bytes
  provider_gte: stagingmumbai_Bytes
  provider_lte: stagingmumbai_Bytes
  provider_in: [stagingmumbai_Bytes!]
  provider_not_in: [stagingmumbai_Bytes!]
  provider_contains: stagingmumbai_Bytes
  provider_not_contains: stagingmumbai_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingmumbai_Bytes
  transaction_not: stagingmumbai_Bytes
  transaction_gt: stagingmumbai_Bytes
  transaction_lt: stagingmumbai_Bytes
  transaction_gte: stagingmumbai_Bytes
  transaction_lte: stagingmumbai_Bytes
  transaction_in: [stagingmumbai_Bytes!]
  transaction_not_in: [stagingmumbai_Bytes!]
  transaction_contains: stagingmumbai_Bytes
  transaction_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface stagingmumbai_StableSwapEvent {
  id: ID!
  stableSwap: stagingmumbai_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingmumbai_Bytes!
}

input stagingmumbai_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingmumbai_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingmumbai_Bytes
  transaction_not: stagingmumbai_Bytes
  transaction_gt: stagingmumbai_Bytes
  transaction_lt: stagingmumbai_Bytes
  transaction_gte: stagingmumbai_Bytes
  transaction_lte: stagingmumbai_Bytes
  transaction_in: [stagingmumbai_Bytes!]
  transaction_not_in: [stagingmumbai_Bytes!]
  transaction_contains: stagingmumbai_Bytes
  transaction_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type stagingmumbai_StableSwapExchange {
  id: ID!
  stableSwap: stagingmumbai_StableSwap!
  buyer: stagingmumbai_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingmumbai_Bytes!
}

input stagingmumbai_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingmumbai_StableSwap_filter
  buyer: stagingmumbai_Bytes
  buyer_not: stagingmumbai_Bytes
  buyer_gt: stagingmumbai_Bytes
  buyer_lt: stagingmumbai_Bytes
  buyer_gte: stagingmumbai_Bytes
  buyer_lte: stagingmumbai_Bytes
  buyer_in: [stagingmumbai_Bytes!]
  buyer_not_in: [stagingmumbai_Bytes!]
  buyer_contains: stagingmumbai_Bytes
  buyer_not_contains: stagingmumbai_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingmumbai_Bytes
  transaction_not: stagingmumbai_Bytes
  transaction_gt: stagingmumbai_Bytes
  transaction_lt: stagingmumbai_Bytes
  transaction_gte: stagingmumbai_Bytes
  transaction_lte: stagingmumbai_Bytes
  transaction_in: [stagingmumbai_Bytes!]
  transaction_not_in: [stagingmumbai_Bytes!]
  transaction_contains: stagingmumbai_Bytes
  transaction_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type stagingmumbai_StableSwapRemoveLiquidityEvent implements stagingmumbai_StableSwapEvent {
  id: ID!
  stableSwap: stagingmumbai_StableSwap!
  provider: stagingmumbai_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingmumbai_Bytes!
}

input stagingmumbai_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingmumbai_StableSwap_filter
  provider: stagingmumbai_Bytes
  provider_not: stagingmumbai_Bytes
  provider_gt: stagingmumbai_Bytes
  provider_lt: stagingmumbai_Bytes
  provider_gte: stagingmumbai_Bytes
  provider_lte: stagingmumbai_Bytes
  provider_in: [stagingmumbai_Bytes!]
  provider_not_in: [stagingmumbai_Bytes!]
  provider_contains: stagingmumbai_Bytes
  provider_not_contains: stagingmumbai_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingmumbai_Bytes
  transaction_not: stagingmumbai_Bytes
  transaction_gt: stagingmumbai_Bytes
  transaction_lt: stagingmumbai_Bytes
  transaction_gte: stagingmumbai_Bytes
  transaction_lte: stagingmumbai_Bytes
  transaction_in: [stagingmumbai_Bytes!]
  transaction_not_in: [stagingmumbai_Bytes!]
  transaction_contains: stagingmumbai_Bytes
  transaction_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input stagingmumbai_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: stagingmumbai_Bytes
  key_not: stagingmumbai_Bytes
  key_gt: stagingmumbai_Bytes
  key_lt: stagingmumbai_Bytes
  key_gte: stagingmumbai_Bytes
  key_lte: stagingmumbai_Bytes
  key_in: [stagingmumbai_Bytes!]
  key_not_in: [stagingmumbai_Bytes!]
  key_contains: stagingmumbai_Bytes
  key_not_contains: stagingmumbai_Bytes
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_gt: stagingmumbai_Bytes
  canonicalId_lt: stagingmumbai_Bytes
  canonicalId_gte: stagingmumbai_Bytes
  canonicalId_lte: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: stagingmumbai_Bytes
  swapPool_not: stagingmumbai_Bytes
  swapPool_gt: stagingmumbai_Bytes
  swapPool_lt: stagingmumbai_Bytes
  swapPool_gte: stagingmumbai_Bytes
  swapPool_lte: stagingmumbai_Bytes
  swapPool_in: [stagingmumbai_Bytes!]
  swapPool_not_in: [stagingmumbai_Bytes!]
  swapPool_contains: stagingmumbai_Bytes
  swapPool_not_contains: stagingmumbai_Bytes
  lpToken: stagingmumbai_Bytes
  lpToken_not: stagingmumbai_Bytes
  lpToken_gt: stagingmumbai_Bytes
  lpToken_lt: stagingmumbai_Bytes
  lpToken_gte: stagingmumbai_Bytes
  lpToken_lte: stagingmumbai_Bytes
  lpToken_in: [stagingmumbai_Bytes!]
  lpToken_not_in: [stagingmumbai_Bytes!]
  lpToken_contains: stagingmumbai_Bytes
  lpToken_not_contains: stagingmumbai_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: stagingmumbai_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: stagingmumbai_StableSwapEvent_filter
  exchanges_: stagingmumbai_StableSwapExchange_filter
  hourlyVolumes_: stagingmumbai_SwapHourlyVolume_filter
  dailyVolumes_: stagingmumbai_SwapDailyVolume_filter
  weeklyVolumes_: stagingmumbai_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type stagingmumbai_SwapDailyVolume implements stagingmumbai_SwapTradeVolume {
  id: ID!
  stableSwap: stagingmumbai_StableSwap!
  timestamp: BigInt!
  volume: stagingmumbai_BigDecimal!
}

input stagingmumbai_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingmumbai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingmumbai_BigDecimal
  volume_not: stagingmumbai_BigDecimal
  volume_gt: stagingmumbai_BigDecimal
  volume_lt: stagingmumbai_BigDecimal
  volume_gte: stagingmumbai_BigDecimal
  volume_lte: stagingmumbai_BigDecimal
  volume_in: [stagingmumbai_BigDecimal!]
  volume_not_in: [stagingmumbai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type stagingmumbai_SwapHourlyVolume implements stagingmumbai_SwapTradeVolume {
  id: ID!
  stableSwap: stagingmumbai_StableSwap!
  timestamp: BigInt!
  volume: stagingmumbai_BigDecimal!
}

input stagingmumbai_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingmumbai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingmumbai_BigDecimal
  volume_not: stagingmumbai_BigDecimal
  volume_gt: stagingmumbai_BigDecimal
  volume_lt: stagingmumbai_BigDecimal
  volume_gte: stagingmumbai_BigDecimal
  volume_lte: stagingmumbai_BigDecimal
  volume_in: [stagingmumbai_BigDecimal!]
  volume_not_in: [stagingmumbai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface stagingmumbai_SwapTradeVolume {
  stableSwap: stagingmumbai_StableSwap!
  timestamp: BigInt!
  volume: stagingmumbai_BigDecimal!
}

input stagingmumbai_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingmumbai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingmumbai_BigDecimal
  volume_not: stagingmumbai_BigDecimal
  volume_gt: stagingmumbai_BigDecimal
  volume_lt: stagingmumbai_BigDecimal
  volume_gte: stagingmumbai_BigDecimal
  volume_lte: stagingmumbai_BigDecimal
  volume_in: [stagingmumbai_BigDecimal!]
  volume_not_in: [stagingmumbai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type stagingmumbai_SwapWeeklyVolume implements stagingmumbai_SwapTradeVolume {
  id: ID!
  stableSwap: stagingmumbai_StableSwap!
  timestamp: BigInt!
  volume: stagingmumbai_BigDecimal!
}

input stagingmumbai_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingmumbai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingmumbai_BigDecimal
  volume_not: stagingmumbai_BigDecimal
  volume_gt: stagingmumbai_BigDecimal
  volume_lt: stagingmumbai_BigDecimal
  volume_gte: stagingmumbai_BigDecimal
  volume_lte: stagingmumbai_BigDecimal
  volume_in: [stagingmumbai_BigDecimal!]
  volume_not_in: [stagingmumbai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type stagingmumbai_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input stagingmumbai_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type stagingmumbai__Block_ {
  """The hash of the block"""
  hash: stagingmumbai_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type stagingmumbai__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: stagingmumbai__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar bnb_BigDecimal

input bnb_BlockChangedFilter {
  number_gte: Int!
}

input bnb_Block_height {
  hash: bnb_Bytes
  number: Int
  number_gte: Int
}

scalar bnb_Bytes

"""Defines the order direction, either ascending or descending"""
enum bnb_OrderDirection {
  asc
  desc
}

type bnb_PooledToken {
  id: ID!
  asset: bnb_Bytes!
}

input bnb_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: bnb_Bytes
  asset_not: bnb_Bytes
  asset_gt: bnb_Bytes
  asset_lt: bnb_Bytes
  asset_gte: bnb_Bytes
  asset_lte: bnb_Bytes
  asset_in: [bnb_Bytes!]
  asset_not_in: [bnb_Bytes!]
  asset_contains: bnb_Bytes
  asset_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_PooledToken_orderBy {
  id
  asset
}

type bnb_StableSwap {
  id: ID!
  isActive: Boolean
  key: bnb_Bytes
  canonicalId: bnb_Bytes
  domain: BigInt
  swapPool: bnb_Bytes
  lpToken: bnb_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: bnb_PooledToken_orderBy, orderDirection: bnb_OrderDirection, where: bnb_PooledToken_filter): [bnb_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: bnb_StableSwapEvent_orderBy, orderDirection: bnb_OrderDirection, where: bnb_StableSwapEvent_filter): [bnb_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: bnb_StableSwapExchange_orderBy, orderDirection: bnb_OrderDirection, where: bnb_StableSwapExchange_filter): [bnb_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: bnb_SwapHourlyVolume_orderBy, orderDirection: bnb_OrderDirection, where: bnb_SwapHourlyVolume_filter): [bnb_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: bnb_SwapDailyVolume_orderBy, orderDirection: bnb_OrderDirection, where: bnb_SwapDailyVolume_filter): [bnb_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: bnb_SwapWeeklyVolume_orderBy, orderDirection: bnb_OrderDirection, where: bnb_SwapWeeklyVolume_filter): [bnb_SwapWeeklyVolume!]
}

type bnb_StableSwapAddLiquidityEvent implements bnb_StableSwapEvent {
  id: ID!
  stableSwap: bnb_StableSwap!
  provider: bnb_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: bnb_Bytes!
}

input bnb_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  provider: bnb_Bytes
  provider_not: bnb_Bytes
  provider_gt: bnb_Bytes
  provider_lt: bnb_Bytes
  provider_gte: bnb_Bytes
  provider_lte: bnb_Bytes
  provider_in: [bnb_Bytes!]
  provider_not_in: [bnb_Bytes!]
  provider_contains: bnb_Bytes
  provider_not_contains: bnb_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: bnb_Bytes
  transaction_not: bnb_Bytes
  transaction_gt: bnb_Bytes
  transaction_lt: bnb_Bytes
  transaction_gte: bnb_Bytes
  transaction_lte: bnb_Bytes
  transaction_in: [bnb_Bytes!]
  transaction_not_in: [bnb_Bytes!]
  transaction_contains: bnb_Bytes
  transaction_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface bnb_StableSwapEvent {
  id: ID!
  stableSwap: bnb_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: bnb_Bytes!
}

input bnb_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: bnb_Bytes
  transaction_not: bnb_Bytes
  transaction_gt: bnb_Bytes
  transaction_lt: bnb_Bytes
  transaction_gte: bnb_Bytes
  transaction_lte: bnb_Bytes
  transaction_in: [bnb_Bytes!]
  transaction_not_in: [bnb_Bytes!]
  transaction_contains: bnb_Bytes
  transaction_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type bnb_StableSwapExchange {
  id: ID!
  stableSwap: bnb_StableSwap!
  buyer: bnb_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: bnb_Bytes!
}

input bnb_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  buyer: bnb_Bytes
  buyer_not: bnb_Bytes
  buyer_gt: bnb_Bytes
  buyer_lt: bnb_Bytes
  buyer_gte: bnb_Bytes
  buyer_lte: bnb_Bytes
  buyer_in: [bnb_Bytes!]
  buyer_not_in: [bnb_Bytes!]
  buyer_contains: bnb_Bytes
  buyer_not_contains: bnb_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: bnb_Bytes
  transaction_not: bnb_Bytes
  transaction_gt: bnb_Bytes
  transaction_lt: bnb_Bytes
  transaction_gte: bnb_Bytes
  transaction_lte: bnb_Bytes
  transaction_in: [bnb_Bytes!]
  transaction_not_in: [bnb_Bytes!]
  transaction_contains: bnb_Bytes
  transaction_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type bnb_StableSwapRemoveLiquidityEvent implements bnb_StableSwapEvent {
  id: ID!
  stableSwap: bnb_StableSwap!
  provider: bnb_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: bnb_Bytes!
}

input bnb_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  provider: bnb_Bytes
  provider_not: bnb_Bytes
  provider_gt: bnb_Bytes
  provider_lt: bnb_Bytes
  provider_gte: bnb_Bytes
  provider_lte: bnb_Bytes
  provider_in: [bnb_Bytes!]
  provider_not_in: [bnb_Bytes!]
  provider_contains: bnb_Bytes
  provider_not_contains: bnb_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: bnb_Bytes
  transaction_not: bnb_Bytes
  transaction_gt: bnb_Bytes
  transaction_lt: bnb_Bytes
  transaction_gte: bnb_Bytes
  transaction_lte: bnb_Bytes
  transaction_in: [bnb_Bytes!]
  transaction_not_in: [bnb_Bytes!]
  transaction_contains: bnb_Bytes
  transaction_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input bnb_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: bnb_Bytes
  key_not: bnb_Bytes
  key_gt: bnb_Bytes
  key_lt: bnb_Bytes
  key_gte: bnb_Bytes
  key_lte: bnb_Bytes
  key_in: [bnb_Bytes!]
  key_not_in: [bnb_Bytes!]
  key_contains: bnb_Bytes
  key_not_contains: bnb_Bytes
  canonicalId: bnb_Bytes
  canonicalId_not: bnb_Bytes
  canonicalId_gt: bnb_Bytes
  canonicalId_lt: bnb_Bytes
  canonicalId_gte: bnb_Bytes
  canonicalId_lte: bnb_Bytes
  canonicalId_in: [bnb_Bytes!]
  canonicalId_not_in: [bnb_Bytes!]
  canonicalId_contains: bnb_Bytes
  canonicalId_not_contains: bnb_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: bnb_Bytes
  swapPool_not: bnb_Bytes
  swapPool_gt: bnb_Bytes
  swapPool_lt: bnb_Bytes
  swapPool_gte: bnb_Bytes
  swapPool_lte: bnb_Bytes
  swapPool_in: [bnb_Bytes!]
  swapPool_not_in: [bnb_Bytes!]
  swapPool_contains: bnb_Bytes
  swapPool_not_contains: bnb_Bytes
  lpToken: bnb_Bytes
  lpToken_not: bnb_Bytes
  lpToken_gt: bnb_Bytes
  lpToken_lt: bnb_Bytes
  lpToken_gte: bnb_Bytes
  lpToken_lte: bnb_Bytes
  lpToken_in: [bnb_Bytes!]
  lpToken_not_in: [bnb_Bytes!]
  lpToken_contains: bnb_Bytes
  lpToken_not_contains: bnb_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: bnb_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: bnb_StableSwapEvent_filter
  exchanges_: bnb_StableSwapExchange_filter
  hourlyVolumes_: bnb_SwapHourlyVolume_filter
  dailyVolumes_: bnb_SwapDailyVolume_filter
  weeklyVolumes_: bnb_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type bnb_SwapDailyVolume implements bnb_SwapTradeVolume {
  id: ID!
  stableSwap: bnb_StableSwap!
  timestamp: BigInt!
  volume: bnb_BigDecimal!
}

input bnb_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: bnb_BigDecimal
  volume_not: bnb_BigDecimal
  volume_gt: bnb_BigDecimal
  volume_lt: bnb_BigDecimal
  volume_gte: bnb_BigDecimal
  volume_lte: bnb_BigDecimal
  volume_in: [bnb_BigDecimal!]
  volume_not_in: [bnb_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type bnb_SwapHourlyVolume implements bnb_SwapTradeVolume {
  id: ID!
  stableSwap: bnb_StableSwap!
  timestamp: BigInt!
  volume: bnb_BigDecimal!
}

input bnb_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: bnb_BigDecimal
  volume_not: bnb_BigDecimal
  volume_gt: bnb_BigDecimal
  volume_lt: bnb_BigDecimal
  volume_gte: bnb_BigDecimal
  volume_lte: bnb_BigDecimal
  volume_in: [bnb_BigDecimal!]
  volume_not_in: [bnb_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface bnb_SwapTradeVolume {
  stableSwap: bnb_StableSwap!
  timestamp: BigInt!
  volume: bnb_BigDecimal!
}

input bnb_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: bnb_BigDecimal
  volume_not: bnb_BigDecimal
  volume_gt: bnb_BigDecimal
  volume_lt: bnb_BigDecimal
  volume_gte: bnb_BigDecimal
  volume_lte: bnb_BigDecimal
  volume_in: [bnb_BigDecimal!]
  volume_not_in: [bnb_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type bnb_SwapWeeklyVolume implements bnb_SwapTradeVolume {
  id: ID!
  stableSwap: bnb_StableSwap!
  timestamp: BigInt!
  volume: bnb_BigDecimal!
}

input bnb_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: bnb_BigDecimal
  volume_not: bnb_BigDecimal
  volume_gt: bnb_BigDecimal
  volume_lt: bnb_BigDecimal
  volume_gte: bnb_BigDecimal
  volume_lte: bnb_BigDecimal
  volume_in: [bnb_BigDecimal!]
  volume_not_in: [bnb_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type bnb_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input bnb_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type bnb__Block_ {
  """The hash of the block"""
  hash: bnb_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type bnb__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: bnb__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar mumbai_BigDecimal

input mumbai_BlockChangedFilter {
  number_gte: Int!
}

input mumbai_Block_height {
  hash: mumbai_Bytes
  number: Int
  number_gte: Int
}

scalar mumbai_Bytes

"""Defines the order direction, either ascending or descending"""
enum mumbai_OrderDirection {
  asc
  desc
}

type mumbai_PooledToken {
  id: ID!
  asset: mumbai_Bytes!
}

input mumbai_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: mumbai_Bytes
  asset_not: mumbai_Bytes
  asset_gt: mumbai_Bytes
  asset_lt: mumbai_Bytes
  asset_gte: mumbai_Bytes
  asset_lte: mumbai_Bytes
  asset_in: [mumbai_Bytes!]
  asset_not_in: [mumbai_Bytes!]
  asset_contains: mumbai_Bytes
  asset_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_PooledToken_orderBy {
  id
  asset
}

type mumbai_StableSwap {
  id: ID!
  isActive: Boolean
  key: mumbai_Bytes
  canonicalId: mumbai_Bytes
  domain: BigInt
  swapPool: mumbai_Bytes
  lpToken: mumbai_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: mumbai_PooledToken_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_PooledToken_filter): [mumbai_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: mumbai_StableSwapEvent_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_StableSwapEvent_filter): [mumbai_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: mumbai_StableSwapExchange_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_StableSwapExchange_filter): [mumbai_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: mumbai_SwapHourlyVolume_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_SwapHourlyVolume_filter): [mumbai_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: mumbai_SwapDailyVolume_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_SwapDailyVolume_filter): [mumbai_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: mumbai_SwapWeeklyVolume_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_SwapWeeklyVolume_filter): [mumbai_SwapWeeklyVolume!]
}

type mumbai_StableSwapAddLiquidityEvent implements mumbai_StableSwapEvent {
  id: ID!
  stableSwap: mumbai_StableSwap!
  provider: mumbai_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: mumbai_Bytes!
}

input mumbai_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  provider: mumbai_Bytes
  provider_not: mumbai_Bytes
  provider_gt: mumbai_Bytes
  provider_lt: mumbai_Bytes
  provider_gte: mumbai_Bytes
  provider_lte: mumbai_Bytes
  provider_in: [mumbai_Bytes!]
  provider_not_in: [mumbai_Bytes!]
  provider_contains: mumbai_Bytes
  provider_not_contains: mumbai_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: mumbai_Bytes
  transaction_not: mumbai_Bytes
  transaction_gt: mumbai_Bytes
  transaction_lt: mumbai_Bytes
  transaction_gte: mumbai_Bytes
  transaction_lte: mumbai_Bytes
  transaction_in: [mumbai_Bytes!]
  transaction_not_in: [mumbai_Bytes!]
  transaction_contains: mumbai_Bytes
  transaction_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface mumbai_StableSwapEvent {
  id: ID!
  stableSwap: mumbai_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: mumbai_Bytes!
}

input mumbai_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: mumbai_Bytes
  transaction_not: mumbai_Bytes
  transaction_gt: mumbai_Bytes
  transaction_lt: mumbai_Bytes
  transaction_gte: mumbai_Bytes
  transaction_lte: mumbai_Bytes
  transaction_in: [mumbai_Bytes!]
  transaction_not_in: [mumbai_Bytes!]
  transaction_contains: mumbai_Bytes
  transaction_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type mumbai_StableSwapExchange {
  id: ID!
  stableSwap: mumbai_StableSwap!
  buyer: mumbai_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: mumbai_Bytes!
}

input mumbai_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  buyer: mumbai_Bytes
  buyer_not: mumbai_Bytes
  buyer_gt: mumbai_Bytes
  buyer_lt: mumbai_Bytes
  buyer_gte: mumbai_Bytes
  buyer_lte: mumbai_Bytes
  buyer_in: [mumbai_Bytes!]
  buyer_not_in: [mumbai_Bytes!]
  buyer_contains: mumbai_Bytes
  buyer_not_contains: mumbai_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: mumbai_Bytes
  transaction_not: mumbai_Bytes
  transaction_gt: mumbai_Bytes
  transaction_lt: mumbai_Bytes
  transaction_gte: mumbai_Bytes
  transaction_lte: mumbai_Bytes
  transaction_in: [mumbai_Bytes!]
  transaction_not_in: [mumbai_Bytes!]
  transaction_contains: mumbai_Bytes
  transaction_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type mumbai_StableSwapRemoveLiquidityEvent implements mumbai_StableSwapEvent {
  id: ID!
  stableSwap: mumbai_StableSwap!
  provider: mumbai_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: mumbai_Bytes!
}

input mumbai_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  provider: mumbai_Bytes
  provider_not: mumbai_Bytes
  provider_gt: mumbai_Bytes
  provider_lt: mumbai_Bytes
  provider_gte: mumbai_Bytes
  provider_lte: mumbai_Bytes
  provider_in: [mumbai_Bytes!]
  provider_not_in: [mumbai_Bytes!]
  provider_contains: mumbai_Bytes
  provider_not_contains: mumbai_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: mumbai_Bytes
  transaction_not: mumbai_Bytes
  transaction_gt: mumbai_Bytes
  transaction_lt: mumbai_Bytes
  transaction_gte: mumbai_Bytes
  transaction_lte: mumbai_Bytes
  transaction_in: [mumbai_Bytes!]
  transaction_not_in: [mumbai_Bytes!]
  transaction_contains: mumbai_Bytes
  transaction_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input mumbai_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: mumbai_Bytes
  key_not: mumbai_Bytes
  key_gt: mumbai_Bytes
  key_lt: mumbai_Bytes
  key_gte: mumbai_Bytes
  key_lte: mumbai_Bytes
  key_in: [mumbai_Bytes!]
  key_not_in: [mumbai_Bytes!]
  key_contains: mumbai_Bytes
  key_not_contains: mumbai_Bytes
  canonicalId: mumbai_Bytes
  canonicalId_not: mumbai_Bytes
  canonicalId_gt: mumbai_Bytes
  canonicalId_lt: mumbai_Bytes
  canonicalId_gte: mumbai_Bytes
  canonicalId_lte: mumbai_Bytes
  canonicalId_in: [mumbai_Bytes!]
  canonicalId_not_in: [mumbai_Bytes!]
  canonicalId_contains: mumbai_Bytes
  canonicalId_not_contains: mumbai_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: mumbai_Bytes
  swapPool_not: mumbai_Bytes
  swapPool_gt: mumbai_Bytes
  swapPool_lt: mumbai_Bytes
  swapPool_gte: mumbai_Bytes
  swapPool_lte: mumbai_Bytes
  swapPool_in: [mumbai_Bytes!]
  swapPool_not_in: [mumbai_Bytes!]
  swapPool_contains: mumbai_Bytes
  swapPool_not_contains: mumbai_Bytes
  lpToken: mumbai_Bytes
  lpToken_not: mumbai_Bytes
  lpToken_gt: mumbai_Bytes
  lpToken_lt: mumbai_Bytes
  lpToken_gte: mumbai_Bytes
  lpToken_lte: mumbai_Bytes
  lpToken_in: [mumbai_Bytes!]
  lpToken_not_in: [mumbai_Bytes!]
  lpToken_contains: mumbai_Bytes
  lpToken_not_contains: mumbai_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: mumbai_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: mumbai_StableSwapEvent_filter
  exchanges_: mumbai_StableSwapExchange_filter
  hourlyVolumes_: mumbai_SwapHourlyVolume_filter
  dailyVolumes_: mumbai_SwapDailyVolume_filter
  weeklyVolumes_: mumbai_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type mumbai_SwapDailyVolume implements mumbai_SwapTradeVolume {
  id: ID!
  stableSwap: mumbai_StableSwap!
  timestamp: BigInt!
  volume: mumbai_BigDecimal!
}

input mumbai_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: mumbai_BigDecimal
  volume_not: mumbai_BigDecimal
  volume_gt: mumbai_BigDecimal
  volume_lt: mumbai_BigDecimal
  volume_gte: mumbai_BigDecimal
  volume_lte: mumbai_BigDecimal
  volume_in: [mumbai_BigDecimal!]
  volume_not_in: [mumbai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type mumbai_SwapHourlyVolume implements mumbai_SwapTradeVolume {
  id: ID!
  stableSwap: mumbai_StableSwap!
  timestamp: BigInt!
  volume: mumbai_BigDecimal!
}

input mumbai_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: mumbai_BigDecimal
  volume_not: mumbai_BigDecimal
  volume_gt: mumbai_BigDecimal
  volume_lt: mumbai_BigDecimal
  volume_gte: mumbai_BigDecimal
  volume_lte: mumbai_BigDecimal
  volume_in: [mumbai_BigDecimal!]
  volume_not_in: [mumbai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface mumbai_SwapTradeVolume {
  stableSwap: mumbai_StableSwap!
  timestamp: BigInt!
  volume: mumbai_BigDecimal!
}

input mumbai_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: mumbai_BigDecimal
  volume_not: mumbai_BigDecimal
  volume_gt: mumbai_BigDecimal
  volume_lt: mumbai_BigDecimal
  volume_gte: mumbai_BigDecimal
  volume_lte: mumbai_BigDecimal
  volume_in: [mumbai_BigDecimal!]
  volume_not_in: [mumbai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type mumbai_SwapWeeklyVolume implements mumbai_SwapTradeVolume {
  id: ID!
  stableSwap: mumbai_StableSwap!
  timestamp: BigInt!
  volume: mumbai_BigDecimal!
}

input mumbai_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: mumbai_BigDecimal
  volume_not: mumbai_BigDecimal
  volume_gt: mumbai_BigDecimal
  volume_lt: mumbai_BigDecimal
  volume_gte: mumbai_BigDecimal
  volume_lte: mumbai_BigDecimal
  volume_in: [mumbai_BigDecimal!]
  volume_not_in: [mumbai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type mumbai_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input mumbai_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type mumbai__Block_ {
  """The hash of the block"""
  hash: mumbai_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type mumbai__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: mumbai__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type goerli_StableSwapAddLiquidityEvent implements goerli_StableSwapEvent {
  id: ID!
  stableSwap: goerli_StableSwap!
  provider: goerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: goerli_Bytes!
}

input goerli_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  provider: goerli_Bytes
  provider_not: goerli_Bytes
  provider_gt: goerli_Bytes
  provider_lt: goerli_Bytes
  provider_gte: goerli_Bytes
  provider_lte: goerli_Bytes
  provider_in: [goerli_Bytes!]
  provider_not_in: [goerli_Bytes!]
  provider_contains: goerli_Bytes
  provider_not_contains: goerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: goerli_Bytes
  transaction_not: goerli_Bytes
  transaction_gt: goerli_Bytes
  transaction_lt: goerli_Bytes
  transaction_gte: goerli_Bytes
  transaction_lte: goerli_Bytes
  transaction_in: [goerli_Bytes!]
  transaction_not_in: [goerli_Bytes!]
  transaction_contains: goerli_Bytes
  transaction_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface goerli_StableSwapEvent {
  id: ID!
  stableSwap: goerli_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: goerli_Bytes!
}

input goerli_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: goerli_Bytes
  transaction_not: goerli_Bytes
  transaction_gt: goerli_Bytes
  transaction_lt: goerli_Bytes
  transaction_gte: goerli_Bytes
  transaction_lte: goerli_Bytes
  transaction_in: [goerli_Bytes!]
  transaction_not_in: [goerli_Bytes!]
  transaction_contains: goerli_Bytes
  transaction_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type goerli_StableSwapExchange {
  id: ID!
  stableSwap: goerli_StableSwap!
  buyer: goerli_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: goerli_Bytes!
}

input goerli_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  buyer: goerli_Bytes
  buyer_not: goerli_Bytes
  buyer_gt: goerli_Bytes
  buyer_lt: goerli_Bytes
  buyer_gte: goerli_Bytes
  buyer_lte: goerli_Bytes
  buyer_in: [goerli_Bytes!]
  buyer_not_in: [goerli_Bytes!]
  buyer_contains: goerli_Bytes
  buyer_not_contains: goerli_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: goerli_Bytes
  transaction_not: goerli_Bytes
  transaction_gt: goerli_Bytes
  transaction_lt: goerli_Bytes
  transaction_gte: goerli_Bytes
  transaction_lte: goerli_Bytes
  transaction_in: [goerli_Bytes!]
  transaction_not_in: [goerli_Bytes!]
  transaction_contains: goerli_Bytes
  transaction_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type goerli_StableSwapRemoveLiquidityEvent implements goerli_StableSwapEvent {
  id: ID!
  stableSwap: goerli_StableSwap!
  provider: goerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: goerli_Bytes!
}

input goerli_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  provider: goerli_Bytes
  provider_not: goerli_Bytes
  provider_gt: goerli_Bytes
  provider_lt: goerli_Bytes
  provider_gte: goerli_Bytes
  provider_lte: goerli_Bytes
  provider_in: [goerli_Bytes!]
  provider_not_in: [goerli_Bytes!]
  provider_contains: goerli_Bytes
  provider_not_contains: goerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: goerli_Bytes
  transaction_not: goerli_Bytes
  transaction_gt: goerli_Bytes
  transaction_lt: goerli_Bytes
  transaction_gte: goerli_Bytes
  transaction_lte: goerli_Bytes
  transaction_in: [goerli_Bytes!]
  transaction_not_in: [goerli_Bytes!]
  transaction_contains: goerli_Bytes
  transaction_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

type goerli_SwapDailyVolume implements goerli_SwapTradeVolume {
  id: ID!
  stableSwap: goerli_StableSwap!
  timestamp: BigInt!
  volume: goerli_BigDecimal!
}

input goerli_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: goerli_BigDecimal
  volume_not: goerli_BigDecimal
  volume_gt: goerli_BigDecimal
  volume_lt: goerli_BigDecimal
  volume_gte: goerli_BigDecimal
  volume_lte: goerli_BigDecimal
  volume_in: [goerli_BigDecimal!]
  volume_not_in: [goerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type goerli_SwapHourlyVolume implements goerli_SwapTradeVolume {
  id: ID!
  stableSwap: goerli_StableSwap!
  timestamp: BigInt!
  volume: goerli_BigDecimal!
}

input goerli_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: goerli_BigDecimal
  volume_not: goerli_BigDecimal
  volume_gt: goerli_BigDecimal
  volume_lt: goerli_BigDecimal
  volume_gte: goerli_BigDecimal
  volume_lte: goerli_BigDecimal
  volume_in: [goerli_BigDecimal!]
  volume_not_in: [goerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface goerli_SwapTradeVolume {
  stableSwap: goerli_StableSwap!
  timestamp: BigInt!
  volume: goerli_BigDecimal!
}

input goerli_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: goerli_BigDecimal
  volume_not: goerli_BigDecimal
  volume_gt: goerli_BigDecimal
  volume_lt: goerli_BigDecimal
  volume_gte: goerli_BigDecimal
  volume_lte: goerli_BigDecimal
  volume_in: [goerli_BigDecimal!]
  volume_not_in: [goerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type goerli_SwapWeeklyVolume implements goerli_SwapTradeVolume {
  id: ID!
  stableSwap: goerli_StableSwap!
  timestamp: BigInt!
  volume: goerli_BigDecimal!
}

input goerli_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: goerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: goerli_BigDecimal
  volume_not: goerli_BigDecimal
  volume_gt: goerli_BigDecimal
  volume_lt: goerli_BigDecimal
  volume_gte: goerli_BigDecimal
  volume_lte: goerli_BigDecimal
  volume_in: [goerli_BigDecimal!]
  volume_not_in: [goerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type goerli_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input goerli_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

scalar arbitrumone_BigDecimal

input arbitrumone_BlockChangedFilter {
  number_gte: Int!
}

input arbitrumone_Block_height {
  hash: arbitrumone_Bytes
  number: Int
  number_gte: Int
}

scalar arbitrumone_Bytes

"""Defines the order direction, either ascending or descending"""
enum arbitrumone_OrderDirection {
  asc
  desc
}

type arbitrumone_PooledToken {
  id: ID!
  asset: arbitrumone_Bytes!
}

input arbitrumone_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: arbitrumone_Bytes
  asset_not: arbitrumone_Bytes
  asset_gt: arbitrumone_Bytes
  asset_lt: arbitrumone_Bytes
  asset_gte: arbitrumone_Bytes
  asset_lte: arbitrumone_Bytes
  asset_in: [arbitrumone_Bytes!]
  asset_not_in: [arbitrumone_Bytes!]
  asset_contains: arbitrumone_Bytes
  asset_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_PooledToken_orderBy {
  id
  asset
}

type arbitrumone_StableSwap {
  id: ID!
  isActive: Boolean
  key: arbitrumone_Bytes
  canonicalId: arbitrumone_Bytes
  domain: BigInt
  swapPool: arbitrumone_Bytes
  lpToken: arbitrumone_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: arbitrumone_PooledToken_orderBy, orderDirection: arbitrumone_OrderDirection, where: arbitrumone_PooledToken_filter): [arbitrumone_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: arbitrumone_StableSwapEvent_orderBy, orderDirection: arbitrumone_OrderDirection, where: arbitrumone_StableSwapEvent_filter): [arbitrumone_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: arbitrumone_StableSwapExchange_orderBy, orderDirection: arbitrumone_OrderDirection, where: arbitrumone_StableSwapExchange_filter): [arbitrumone_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumone_SwapHourlyVolume_orderBy, orderDirection: arbitrumone_OrderDirection, where: arbitrumone_SwapHourlyVolume_filter): [arbitrumone_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumone_SwapDailyVolume_orderBy, orderDirection: arbitrumone_OrderDirection, where: arbitrumone_SwapDailyVolume_filter): [arbitrumone_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumone_SwapWeeklyVolume_orderBy, orderDirection: arbitrumone_OrderDirection, where: arbitrumone_SwapWeeklyVolume_filter): [arbitrumone_SwapWeeklyVolume!]
}

type arbitrumone_StableSwapAddLiquidityEvent implements arbitrumone_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumone_StableSwap!
  provider: arbitrumone_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumone_Bytes!
}

input arbitrumone_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  provider: arbitrumone_Bytes
  provider_not: arbitrumone_Bytes
  provider_gt: arbitrumone_Bytes
  provider_lt: arbitrumone_Bytes
  provider_gte: arbitrumone_Bytes
  provider_lte: arbitrumone_Bytes
  provider_in: [arbitrumone_Bytes!]
  provider_not_in: [arbitrumone_Bytes!]
  provider_contains: arbitrumone_Bytes
  provider_not_contains: arbitrumone_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumone_Bytes
  transaction_not: arbitrumone_Bytes
  transaction_gt: arbitrumone_Bytes
  transaction_lt: arbitrumone_Bytes
  transaction_gte: arbitrumone_Bytes
  transaction_lte: arbitrumone_Bytes
  transaction_in: [arbitrumone_Bytes!]
  transaction_not_in: [arbitrumone_Bytes!]
  transaction_contains: arbitrumone_Bytes
  transaction_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface arbitrumone_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumone_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumone_Bytes!
}

input arbitrumone_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumone_Bytes
  transaction_not: arbitrumone_Bytes
  transaction_gt: arbitrumone_Bytes
  transaction_lt: arbitrumone_Bytes
  transaction_gte: arbitrumone_Bytes
  transaction_lte: arbitrumone_Bytes
  transaction_in: [arbitrumone_Bytes!]
  transaction_not_in: [arbitrumone_Bytes!]
  transaction_contains: arbitrumone_Bytes
  transaction_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type arbitrumone_StableSwapExchange {
  id: ID!
  stableSwap: arbitrumone_StableSwap!
  buyer: arbitrumone_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumone_Bytes!
}

input arbitrumone_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  buyer: arbitrumone_Bytes
  buyer_not: arbitrumone_Bytes
  buyer_gt: arbitrumone_Bytes
  buyer_lt: arbitrumone_Bytes
  buyer_gte: arbitrumone_Bytes
  buyer_lte: arbitrumone_Bytes
  buyer_in: [arbitrumone_Bytes!]
  buyer_not_in: [arbitrumone_Bytes!]
  buyer_contains: arbitrumone_Bytes
  buyer_not_contains: arbitrumone_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumone_Bytes
  transaction_not: arbitrumone_Bytes
  transaction_gt: arbitrumone_Bytes
  transaction_lt: arbitrumone_Bytes
  transaction_gte: arbitrumone_Bytes
  transaction_lte: arbitrumone_Bytes
  transaction_in: [arbitrumone_Bytes!]
  transaction_not_in: [arbitrumone_Bytes!]
  transaction_contains: arbitrumone_Bytes
  transaction_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type arbitrumone_StableSwapRemoveLiquidityEvent implements arbitrumone_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumone_StableSwap!
  provider: arbitrumone_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumone_Bytes!
}

input arbitrumone_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  provider: arbitrumone_Bytes
  provider_not: arbitrumone_Bytes
  provider_gt: arbitrumone_Bytes
  provider_lt: arbitrumone_Bytes
  provider_gte: arbitrumone_Bytes
  provider_lte: arbitrumone_Bytes
  provider_in: [arbitrumone_Bytes!]
  provider_not_in: [arbitrumone_Bytes!]
  provider_contains: arbitrumone_Bytes
  provider_not_contains: arbitrumone_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumone_Bytes
  transaction_not: arbitrumone_Bytes
  transaction_gt: arbitrumone_Bytes
  transaction_lt: arbitrumone_Bytes
  transaction_gte: arbitrumone_Bytes
  transaction_lte: arbitrumone_Bytes
  transaction_in: [arbitrumone_Bytes!]
  transaction_not_in: [arbitrumone_Bytes!]
  transaction_contains: arbitrumone_Bytes
  transaction_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input arbitrumone_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: arbitrumone_Bytes
  key_not: arbitrumone_Bytes
  key_gt: arbitrumone_Bytes
  key_lt: arbitrumone_Bytes
  key_gte: arbitrumone_Bytes
  key_lte: arbitrumone_Bytes
  key_in: [arbitrumone_Bytes!]
  key_not_in: [arbitrumone_Bytes!]
  key_contains: arbitrumone_Bytes
  key_not_contains: arbitrumone_Bytes
  canonicalId: arbitrumone_Bytes
  canonicalId_not: arbitrumone_Bytes
  canonicalId_gt: arbitrumone_Bytes
  canonicalId_lt: arbitrumone_Bytes
  canonicalId_gte: arbitrumone_Bytes
  canonicalId_lte: arbitrumone_Bytes
  canonicalId_in: [arbitrumone_Bytes!]
  canonicalId_not_in: [arbitrumone_Bytes!]
  canonicalId_contains: arbitrumone_Bytes
  canonicalId_not_contains: arbitrumone_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: arbitrumone_Bytes
  swapPool_not: arbitrumone_Bytes
  swapPool_gt: arbitrumone_Bytes
  swapPool_lt: arbitrumone_Bytes
  swapPool_gte: arbitrumone_Bytes
  swapPool_lte: arbitrumone_Bytes
  swapPool_in: [arbitrumone_Bytes!]
  swapPool_not_in: [arbitrumone_Bytes!]
  swapPool_contains: arbitrumone_Bytes
  swapPool_not_contains: arbitrumone_Bytes
  lpToken: arbitrumone_Bytes
  lpToken_not: arbitrumone_Bytes
  lpToken_gt: arbitrumone_Bytes
  lpToken_lt: arbitrumone_Bytes
  lpToken_gte: arbitrumone_Bytes
  lpToken_lte: arbitrumone_Bytes
  lpToken_in: [arbitrumone_Bytes!]
  lpToken_not_in: [arbitrumone_Bytes!]
  lpToken_contains: arbitrumone_Bytes
  lpToken_not_contains: arbitrumone_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: arbitrumone_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: arbitrumone_StableSwapEvent_filter
  exchanges_: arbitrumone_StableSwapExchange_filter
  hourlyVolumes_: arbitrumone_SwapHourlyVolume_filter
  dailyVolumes_: arbitrumone_SwapDailyVolume_filter
  weeklyVolumes_: arbitrumone_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type arbitrumone_SwapDailyVolume implements arbitrumone_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumone_StableSwap!
  timestamp: BigInt!
  volume: arbitrumone_BigDecimal!
}

input arbitrumone_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumone_BigDecimal
  volume_not: arbitrumone_BigDecimal
  volume_gt: arbitrumone_BigDecimal
  volume_lt: arbitrumone_BigDecimal
  volume_gte: arbitrumone_BigDecimal
  volume_lte: arbitrumone_BigDecimal
  volume_in: [arbitrumone_BigDecimal!]
  volume_not_in: [arbitrumone_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type arbitrumone_SwapHourlyVolume implements arbitrumone_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumone_StableSwap!
  timestamp: BigInt!
  volume: arbitrumone_BigDecimal!
}

input arbitrumone_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumone_BigDecimal
  volume_not: arbitrumone_BigDecimal
  volume_gt: arbitrumone_BigDecimal
  volume_lt: arbitrumone_BigDecimal
  volume_gte: arbitrumone_BigDecimal
  volume_lte: arbitrumone_BigDecimal
  volume_in: [arbitrumone_BigDecimal!]
  volume_not_in: [arbitrumone_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface arbitrumone_SwapTradeVolume {
  stableSwap: arbitrumone_StableSwap!
  timestamp: BigInt!
  volume: arbitrumone_BigDecimal!
}

input arbitrumone_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumone_BigDecimal
  volume_not: arbitrumone_BigDecimal
  volume_gt: arbitrumone_BigDecimal
  volume_lt: arbitrumone_BigDecimal
  volume_gte: arbitrumone_BigDecimal
  volume_lte: arbitrumone_BigDecimal
  volume_in: [arbitrumone_BigDecimal!]
  volume_not_in: [arbitrumone_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type arbitrumone_SwapWeeklyVolume implements arbitrumone_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumone_StableSwap!
  timestamp: BigInt!
  volume: arbitrumone_BigDecimal!
}

input arbitrumone_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumone_BigDecimal
  volume_not: arbitrumone_BigDecimal
  volume_gt: arbitrumone_BigDecimal
  volume_lt: arbitrumone_BigDecimal
  volume_gte: arbitrumone_BigDecimal
  volume_lte: arbitrumone_BigDecimal
  volume_in: [arbitrumone_BigDecimal!]
  volume_not_in: [arbitrumone_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type arbitrumone_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input arbitrumone_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type arbitrumone__Block_ {
  """The hash of the block"""
  hash: arbitrumone_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type arbitrumone__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: arbitrumone__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar xdai_BigDecimal

input xdai_BlockChangedFilter {
  number_gte: Int!
}

input xdai_Block_height {
  hash: xdai_Bytes
  number: Int
  number_gte: Int
}

scalar xdai_Bytes

"""Defines the order direction, either ascending or descending"""
enum xdai_OrderDirection {
  asc
  desc
}

type xdai_PooledToken {
  id: ID!
  asset: xdai_Bytes!
}

input xdai_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: xdai_Bytes
  asset_not: xdai_Bytes
  asset_gt: xdai_Bytes
  asset_lt: xdai_Bytes
  asset_gte: xdai_Bytes
  asset_lte: xdai_Bytes
  asset_in: [xdai_Bytes!]
  asset_not_in: [xdai_Bytes!]
  asset_contains: xdai_Bytes
  asset_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_PooledToken_orderBy {
  id
  asset
}

type xdai_StableSwap {
  id: ID!
  isActive: Boolean
  key: xdai_Bytes
  canonicalId: xdai_Bytes
  domain: BigInt
  swapPool: xdai_Bytes
  lpToken: xdai_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: xdai_PooledToken_orderBy, orderDirection: xdai_OrderDirection, where: xdai_PooledToken_filter): [xdai_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: xdai_StableSwapEvent_orderBy, orderDirection: xdai_OrderDirection, where: xdai_StableSwapEvent_filter): [xdai_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: xdai_StableSwapExchange_orderBy, orderDirection: xdai_OrderDirection, where: xdai_StableSwapExchange_filter): [xdai_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: xdai_SwapHourlyVolume_orderBy, orderDirection: xdai_OrderDirection, where: xdai_SwapHourlyVolume_filter): [xdai_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: xdai_SwapDailyVolume_orderBy, orderDirection: xdai_OrderDirection, where: xdai_SwapDailyVolume_filter): [xdai_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: xdai_SwapWeeklyVolume_orderBy, orderDirection: xdai_OrderDirection, where: xdai_SwapWeeklyVolume_filter): [xdai_SwapWeeklyVolume!]
}

type xdai_StableSwapAddLiquidityEvent implements xdai_StableSwapEvent {
  id: ID!
  stableSwap: xdai_StableSwap!
  provider: xdai_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: xdai_Bytes!
}

input xdai_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  provider: xdai_Bytes
  provider_not: xdai_Bytes
  provider_gt: xdai_Bytes
  provider_lt: xdai_Bytes
  provider_gte: xdai_Bytes
  provider_lte: xdai_Bytes
  provider_in: [xdai_Bytes!]
  provider_not_in: [xdai_Bytes!]
  provider_contains: xdai_Bytes
  provider_not_contains: xdai_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: xdai_Bytes
  transaction_not: xdai_Bytes
  transaction_gt: xdai_Bytes
  transaction_lt: xdai_Bytes
  transaction_gte: xdai_Bytes
  transaction_lte: xdai_Bytes
  transaction_in: [xdai_Bytes!]
  transaction_not_in: [xdai_Bytes!]
  transaction_contains: xdai_Bytes
  transaction_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface xdai_StableSwapEvent {
  id: ID!
  stableSwap: xdai_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: xdai_Bytes!
}

input xdai_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: xdai_Bytes
  transaction_not: xdai_Bytes
  transaction_gt: xdai_Bytes
  transaction_lt: xdai_Bytes
  transaction_gte: xdai_Bytes
  transaction_lte: xdai_Bytes
  transaction_in: [xdai_Bytes!]
  transaction_not_in: [xdai_Bytes!]
  transaction_contains: xdai_Bytes
  transaction_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type xdai_StableSwapExchange {
  id: ID!
  stableSwap: xdai_StableSwap!
  buyer: xdai_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: xdai_Bytes!
}

input xdai_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  buyer: xdai_Bytes
  buyer_not: xdai_Bytes
  buyer_gt: xdai_Bytes
  buyer_lt: xdai_Bytes
  buyer_gte: xdai_Bytes
  buyer_lte: xdai_Bytes
  buyer_in: [xdai_Bytes!]
  buyer_not_in: [xdai_Bytes!]
  buyer_contains: xdai_Bytes
  buyer_not_contains: xdai_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: xdai_Bytes
  transaction_not: xdai_Bytes
  transaction_gt: xdai_Bytes
  transaction_lt: xdai_Bytes
  transaction_gte: xdai_Bytes
  transaction_lte: xdai_Bytes
  transaction_in: [xdai_Bytes!]
  transaction_not_in: [xdai_Bytes!]
  transaction_contains: xdai_Bytes
  transaction_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type xdai_StableSwapRemoveLiquidityEvent implements xdai_StableSwapEvent {
  id: ID!
  stableSwap: xdai_StableSwap!
  provider: xdai_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: xdai_Bytes!
}

input xdai_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  provider: xdai_Bytes
  provider_not: xdai_Bytes
  provider_gt: xdai_Bytes
  provider_lt: xdai_Bytes
  provider_gte: xdai_Bytes
  provider_lte: xdai_Bytes
  provider_in: [xdai_Bytes!]
  provider_not_in: [xdai_Bytes!]
  provider_contains: xdai_Bytes
  provider_not_contains: xdai_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: xdai_Bytes
  transaction_not: xdai_Bytes
  transaction_gt: xdai_Bytes
  transaction_lt: xdai_Bytes
  transaction_gte: xdai_Bytes
  transaction_lte: xdai_Bytes
  transaction_in: [xdai_Bytes!]
  transaction_not_in: [xdai_Bytes!]
  transaction_contains: xdai_Bytes
  transaction_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input xdai_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: xdai_Bytes
  key_not: xdai_Bytes
  key_gt: xdai_Bytes
  key_lt: xdai_Bytes
  key_gte: xdai_Bytes
  key_lte: xdai_Bytes
  key_in: [xdai_Bytes!]
  key_not_in: [xdai_Bytes!]
  key_contains: xdai_Bytes
  key_not_contains: xdai_Bytes
  canonicalId: xdai_Bytes
  canonicalId_not: xdai_Bytes
  canonicalId_gt: xdai_Bytes
  canonicalId_lt: xdai_Bytes
  canonicalId_gte: xdai_Bytes
  canonicalId_lte: xdai_Bytes
  canonicalId_in: [xdai_Bytes!]
  canonicalId_not_in: [xdai_Bytes!]
  canonicalId_contains: xdai_Bytes
  canonicalId_not_contains: xdai_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: xdai_Bytes
  swapPool_not: xdai_Bytes
  swapPool_gt: xdai_Bytes
  swapPool_lt: xdai_Bytes
  swapPool_gte: xdai_Bytes
  swapPool_lte: xdai_Bytes
  swapPool_in: [xdai_Bytes!]
  swapPool_not_in: [xdai_Bytes!]
  swapPool_contains: xdai_Bytes
  swapPool_not_contains: xdai_Bytes
  lpToken: xdai_Bytes
  lpToken_not: xdai_Bytes
  lpToken_gt: xdai_Bytes
  lpToken_lt: xdai_Bytes
  lpToken_gte: xdai_Bytes
  lpToken_lte: xdai_Bytes
  lpToken_in: [xdai_Bytes!]
  lpToken_not_in: [xdai_Bytes!]
  lpToken_contains: xdai_Bytes
  lpToken_not_contains: xdai_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: xdai_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: xdai_StableSwapEvent_filter
  exchanges_: xdai_StableSwapExchange_filter
  hourlyVolumes_: xdai_SwapHourlyVolume_filter
  dailyVolumes_: xdai_SwapDailyVolume_filter
  weeklyVolumes_: xdai_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type xdai_SwapDailyVolume implements xdai_SwapTradeVolume {
  id: ID!
  stableSwap: xdai_StableSwap!
  timestamp: BigInt!
  volume: xdai_BigDecimal!
}

input xdai_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: xdai_BigDecimal
  volume_not: xdai_BigDecimal
  volume_gt: xdai_BigDecimal
  volume_lt: xdai_BigDecimal
  volume_gte: xdai_BigDecimal
  volume_lte: xdai_BigDecimal
  volume_in: [xdai_BigDecimal!]
  volume_not_in: [xdai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type xdai_SwapHourlyVolume implements xdai_SwapTradeVolume {
  id: ID!
  stableSwap: xdai_StableSwap!
  timestamp: BigInt!
  volume: xdai_BigDecimal!
}

input xdai_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: xdai_BigDecimal
  volume_not: xdai_BigDecimal
  volume_gt: xdai_BigDecimal
  volume_lt: xdai_BigDecimal
  volume_gte: xdai_BigDecimal
  volume_lte: xdai_BigDecimal
  volume_in: [xdai_BigDecimal!]
  volume_not_in: [xdai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface xdai_SwapTradeVolume {
  stableSwap: xdai_StableSwap!
  timestamp: BigInt!
  volume: xdai_BigDecimal!
}

input xdai_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: xdai_BigDecimal
  volume_not: xdai_BigDecimal
  volume_gt: xdai_BigDecimal
  volume_lt: xdai_BigDecimal
  volume_gte: xdai_BigDecimal
  volume_lte: xdai_BigDecimal
  volume_in: [xdai_BigDecimal!]
  volume_not_in: [xdai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type xdai_SwapWeeklyVolume implements xdai_SwapTradeVolume {
  id: ID!
  stableSwap: xdai_StableSwap!
  timestamp: BigInt!
  volume: xdai_BigDecimal!
}

input xdai_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: xdai_BigDecimal
  volume_not: xdai_BigDecimal
  volume_gt: xdai_BigDecimal
  volume_lt: xdai_BigDecimal
  volume_gte: xdai_BigDecimal
  volume_lte: xdai_BigDecimal
  volume_in: [xdai_BigDecimal!]
  volume_not_in: [xdai_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type xdai_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input xdai_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type xdai__Block_ {
  """The hash of the block"""
  hash: xdai_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type xdai__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: xdai__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar stagingarbitrumgoerli_BigDecimal

input stagingarbitrumgoerli_BlockChangedFilter {
  number_gte: Int!
}

input stagingarbitrumgoerli_Block_height {
  hash: stagingarbitrumgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar stagingarbitrumgoerli_Bytes

"""Defines the order direction, either ascending or descending"""
enum stagingarbitrumgoerli_OrderDirection {
  asc
  desc
}

type stagingarbitrumgoerli_PooledToken {
  id: ID!
  asset: stagingarbitrumgoerli_Bytes!
}

input stagingarbitrumgoerli_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: stagingarbitrumgoerli_Bytes
  asset_not: stagingarbitrumgoerli_Bytes
  asset_gt: stagingarbitrumgoerli_Bytes
  asset_lt: stagingarbitrumgoerli_Bytes
  asset_gte: stagingarbitrumgoerli_Bytes
  asset_lte: stagingarbitrumgoerli_Bytes
  asset_in: [stagingarbitrumgoerli_Bytes!]
  asset_not_in: [stagingarbitrumgoerli_Bytes!]
  asset_contains: stagingarbitrumgoerli_Bytes
  asset_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_PooledToken_orderBy {
  id
  asset
}

type stagingarbitrumgoerli_StableSwap {
  id: ID!
  isActive: Boolean
  key: stagingarbitrumgoerli_Bytes!
  canonicalId: stagingarbitrumgoerli_Bytes
  domain: BigInt
  swapPool: stagingarbitrumgoerli_Bytes
  lpToken: stagingarbitrumgoerli_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: stagingarbitrumgoerli_PooledToken_orderBy, orderDirection: stagingarbitrumgoerli_OrderDirection, where: stagingarbitrumgoerli_PooledToken_filter): [stagingarbitrumgoerli_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]!
  balances: [BigInt!]!
  adminFees: [BigInt!]!
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: stagingarbitrumgoerli_StableSwapEvent_orderBy, orderDirection: stagingarbitrumgoerli_OrderDirection, where: stagingarbitrumgoerli_StableSwapEvent_filter): [stagingarbitrumgoerli_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: stagingarbitrumgoerli_StableSwapExchange_orderBy, orderDirection: stagingarbitrumgoerli_OrderDirection, where: stagingarbitrumgoerli_StableSwapExchange_filter): [stagingarbitrumgoerli_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingarbitrumgoerli_SwapHourlyVolume_orderBy, orderDirection: stagingarbitrumgoerli_OrderDirection, where: stagingarbitrumgoerli_SwapHourlyVolume_filter): [stagingarbitrumgoerli_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingarbitrumgoerli_SwapDailyVolume_orderBy, orderDirection: stagingarbitrumgoerli_OrderDirection, where: stagingarbitrumgoerli_SwapDailyVolume_filter): [stagingarbitrumgoerli_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingarbitrumgoerli_SwapWeeklyVolume_orderBy, orderDirection: stagingarbitrumgoerli_OrderDirection, where: stagingarbitrumgoerli_SwapWeeklyVolume_filter): [stagingarbitrumgoerli_SwapWeeklyVolume!]
}

type stagingarbitrumgoerli_StableSwapAddLiquidityEvent implements stagingarbitrumgoerli_StableSwapEvent {
  id: ID!
  stableSwap: stagingarbitrumgoerli_StableSwap!
  provider: stagingarbitrumgoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingarbitrumgoerli_Bytes!
}

input stagingarbitrumgoerli_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingarbitrumgoerli_StableSwap_filter
  provider: stagingarbitrumgoerli_Bytes
  provider_not: stagingarbitrumgoerli_Bytes
  provider_gt: stagingarbitrumgoerli_Bytes
  provider_lt: stagingarbitrumgoerli_Bytes
  provider_gte: stagingarbitrumgoerli_Bytes
  provider_lte: stagingarbitrumgoerli_Bytes
  provider_in: [stagingarbitrumgoerli_Bytes!]
  provider_not_in: [stagingarbitrumgoerli_Bytes!]
  provider_contains: stagingarbitrumgoerli_Bytes
  provider_not_contains: stagingarbitrumgoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingarbitrumgoerli_Bytes
  transaction_not: stagingarbitrumgoerli_Bytes
  transaction_gt: stagingarbitrumgoerli_Bytes
  transaction_lt: stagingarbitrumgoerli_Bytes
  transaction_gte: stagingarbitrumgoerli_Bytes
  transaction_lte: stagingarbitrumgoerli_Bytes
  transaction_in: [stagingarbitrumgoerli_Bytes!]
  transaction_not_in: [stagingarbitrumgoerli_Bytes!]
  transaction_contains: stagingarbitrumgoerli_Bytes
  transaction_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface stagingarbitrumgoerli_StableSwapEvent {
  id: ID!
  stableSwap: stagingarbitrumgoerli_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingarbitrumgoerli_Bytes!
}

input stagingarbitrumgoerli_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingarbitrumgoerli_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingarbitrumgoerli_Bytes
  transaction_not: stagingarbitrumgoerli_Bytes
  transaction_gt: stagingarbitrumgoerli_Bytes
  transaction_lt: stagingarbitrumgoerli_Bytes
  transaction_gte: stagingarbitrumgoerli_Bytes
  transaction_lte: stagingarbitrumgoerli_Bytes
  transaction_in: [stagingarbitrumgoerli_Bytes!]
  transaction_not_in: [stagingarbitrumgoerli_Bytes!]
  transaction_contains: stagingarbitrumgoerli_Bytes
  transaction_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type stagingarbitrumgoerli_StableSwapExchange {
  id: ID!
  stableSwap: stagingarbitrumgoerli_StableSwap!
  buyer: stagingarbitrumgoerli_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingarbitrumgoerli_Bytes!
}

input stagingarbitrumgoerli_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingarbitrumgoerli_StableSwap_filter
  buyer: stagingarbitrumgoerli_Bytes
  buyer_not: stagingarbitrumgoerli_Bytes
  buyer_gt: stagingarbitrumgoerli_Bytes
  buyer_lt: stagingarbitrumgoerli_Bytes
  buyer_gte: stagingarbitrumgoerli_Bytes
  buyer_lte: stagingarbitrumgoerli_Bytes
  buyer_in: [stagingarbitrumgoerli_Bytes!]
  buyer_not_in: [stagingarbitrumgoerli_Bytes!]
  buyer_contains: stagingarbitrumgoerli_Bytes
  buyer_not_contains: stagingarbitrumgoerli_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingarbitrumgoerli_Bytes
  transaction_not: stagingarbitrumgoerli_Bytes
  transaction_gt: stagingarbitrumgoerli_Bytes
  transaction_lt: stagingarbitrumgoerli_Bytes
  transaction_gte: stagingarbitrumgoerli_Bytes
  transaction_lte: stagingarbitrumgoerli_Bytes
  transaction_in: [stagingarbitrumgoerli_Bytes!]
  transaction_not_in: [stagingarbitrumgoerli_Bytes!]
  transaction_contains: stagingarbitrumgoerli_Bytes
  transaction_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent implements stagingarbitrumgoerli_StableSwapEvent {
  id: ID!
  stableSwap: stagingarbitrumgoerli_StableSwap!
  provider: stagingarbitrumgoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingarbitrumgoerli_Bytes!
}

input stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingarbitrumgoerli_StableSwap_filter
  provider: stagingarbitrumgoerli_Bytes
  provider_not: stagingarbitrumgoerli_Bytes
  provider_gt: stagingarbitrumgoerli_Bytes
  provider_lt: stagingarbitrumgoerli_Bytes
  provider_gte: stagingarbitrumgoerli_Bytes
  provider_lte: stagingarbitrumgoerli_Bytes
  provider_in: [stagingarbitrumgoerli_Bytes!]
  provider_not_in: [stagingarbitrumgoerli_Bytes!]
  provider_contains: stagingarbitrumgoerli_Bytes
  provider_not_contains: stagingarbitrumgoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingarbitrumgoerli_Bytes
  transaction_not: stagingarbitrumgoerli_Bytes
  transaction_gt: stagingarbitrumgoerli_Bytes
  transaction_lt: stagingarbitrumgoerli_Bytes
  transaction_gte: stagingarbitrumgoerli_Bytes
  transaction_lte: stagingarbitrumgoerli_Bytes
  transaction_in: [stagingarbitrumgoerli_Bytes!]
  transaction_not_in: [stagingarbitrumgoerli_Bytes!]
  transaction_contains: stagingarbitrumgoerli_Bytes
  transaction_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input stagingarbitrumgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: stagingarbitrumgoerli_Bytes
  key_not: stagingarbitrumgoerli_Bytes
  key_gt: stagingarbitrumgoerli_Bytes
  key_lt: stagingarbitrumgoerli_Bytes
  key_gte: stagingarbitrumgoerli_Bytes
  key_lte: stagingarbitrumgoerli_Bytes
  key_in: [stagingarbitrumgoerli_Bytes!]
  key_not_in: [stagingarbitrumgoerli_Bytes!]
  key_contains: stagingarbitrumgoerli_Bytes
  key_not_contains: stagingarbitrumgoerli_Bytes
  canonicalId: stagingarbitrumgoerli_Bytes
  canonicalId_not: stagingarbitrumgoerli_Bytes
  canonicalId_gt: stagingarbitrumgoerli_Bytes
  canonicalId_lt: stagingarbitrumgoerli_Bytes
  canonicalId_gte: stagingarbitrumgoerli_Bytes
  canonicalId_lte: stagingarbitrumgoerli_Bytes
  canonicalId_in: [stagingarbitrumgoerli_Bytes!]
  canonicalId_not_in: [stagingarbitrumgoerli_Bytes!]
  canonicalId_contains: stagingarbitrumgoerli_Bytes
  canonicalId_not_contains: stagingarbitrumgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: stagingarbitrumgoerli_Bytes
  swapPool_not: stagingarbitrumgoerli_Bytes
  swapPool_gt: stagingarbitrumgoerli_Bytes
  swapPool_lt: stagingarbitrumgoerli_Bytes
  swapPool_gte: stagingarbitrumgoerli_Bytes
  swapPool_lte: stagingarbitrumgoerli_Bytes
  swapPool_in: [stagingarbitrumgoerli_Bytes!]
  swapPool_not_in: [stagingarbitrumgoerli_Bytes!]
  swapPool_contains: stagingarbitrumgoerli_Bytes
  swapPool_not_contains: stagingarbitrumgoerli_Bytes
  lpToken: stagingarbitrumgoerli_Bytes
  lpToken_not: stagingarbitrumgoerli_Bytes
  lpToken_gt: stagingarbitrumgoerli_Bytes
  lpToken_lt: stagingarbitrumgoerli_Bytes
  lpToken_gte: stagingarbitrumgoerli_Bytes
  lpToken_lte: stagingarbitrumgoerli_Bytes
  lpToken_in: [stagingarbitrumgoerli_Bytes!]
  lpToken_not_in: [stagingarbitrumgoerli_Bytes!]
  lpToken_contains: stagingarbitrumgoerli_Bytes
  lpToken_not_contains: stagingarbitrumgoerli_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: stagingarbitrumgoerli_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: stagingarbitrumgoerli_StableSwapEvent_filter
  exchanges_: stagingarbitrumgoerli_StableSwapExchange_filter
  hourlyVolumes_: stagingarbitrumgoerli_SwapHourlyVolume_filter
  dailyVolumes_: stagingarbitrumgoerli_SwapDailyVolume_filter
  weeklyVolumes_: stagingarbitrumgoerli_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type stagingarbitrumgoerli_SwapDailyVolume implements stagingarbitrumgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: stagingarbitrumgoerli_StableSwap!
  timestamp: BigInt!
  volume: stagingarbitrumgoerli_BigDecimal!
}

input stagingarbitrumgoerli_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingarbitrumgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingarbitrumgoerli_BigDecimal
  volume_not: stagingarbitrumgoerli_BigDecimal
  volume_gt: stagingarbitrumgoerli_BigDecimal
  volume_lt: stagingarbitrumgoerli_BigDecimal
  volume_gte: stagingarbitrumgoerli_BigDecimal
  volume_lte: stagingarbitrumgoerli_BigDecimal
  volume_in: [stagingarbitrumgoerli_BigDecimal!]
  volume_not_in: [stagingarbitrumgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type stagingarbitrumgoerli_SwapHourlyVolume implements stagingarbitrumgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: stagingarbitrumgoerli_StableSwap!
  timestamp: BigInt!
  volume: stagingarbitrumgoerli_BigDecimal!
}

input stagingarbitrumgoerli_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingarbitrumgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingarbitrumgoerli_BigDecimal
  volume_not: stagingarbitrumgoerli_BigDecimal
  volume_gt: stagingarbitrumgoerli_BigDecimal
  volume_lt: stagingarbitrumgoerli_BigDecimal
  volume_gte: stagingarbitrumgoerli_BigDecimal
  volume_lte: stagingarbitrumgoerli_BigDecimal
  volume_in: [stagingarbitrumgoerli_BigDecimal!]
  volume_not_in: [stagingarbitrumgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface stagingarbitrumgoerli_SwapTradeVolume {
  stableSwap: stagingarbitrumgoerli_StableSwap!
  timestamp: BigInt!
  volume: stagingarbitrumgoerli_BigDecimal!
}

input stagingarbitrumgoerli_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingarbitrumgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingarbitrumgoerli_BigDecimal
  volume_not: stagingarbitrumgoerli_BigDecimal
  volume_gt: stagingarbitrumgoerli_BigDecimal
  volume_lt: stagingarbitrumgoerli_BigDecimal
  volume_gte: stagingarbitrumgoerli_BigDecimal
  volume_lte: stagingarbitrumgoerli_BigDecimal
  volume_in: [stagingarbitrumgoerli_BigDecimal!]
  volume_not_in: [stagingarbitrumgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type stagingarbitrumgoerli_SwapWeeklyVolume implements stagingarbitrumgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: stagingarbitrumgoerli_StableSwap!
  timestamp: BigInt!
  volume: stagingarbitrumgoerli_BigDecimal!
}

input stagingarbitrumgoerli_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingarbitrumgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingarbitrumgoerli_BigDecimal
  volume_not: stagingarbitrumgoerli_BigDecimal
  volume_gt: stagingarbitrumgoerli_BigDecimal
  volume_lt: stagingarbitrumgoerli_BigDecimal
  volume_gte: stagingarbitrumgoerli_BigDecimal
  volume_lte: stagingarbitrumgoerli_BigDecimal
  volume_in: [stagingarbitrumgoerli_BigDecimal!]
  volume_not_in: [stagingarbitrumgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type stagingarbitrumgoerli_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input stagingarbitrumgoerli_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type stagingarbitrumgoerli__Block_ {
  """The hash of the block"""
  hash: stagingarbitrumgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type stagingarbitrumgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: stagingarbitrumgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar polygon_BigDecimal

input polygon_BlockChangedFilter {
  number_gte: Int!
}

input polygon_Block_height {
  hash: polygon_Bytes
  number: Int
  number_gte: Int
}

scalar polygon_Bytes

"""Defines the order direction, either ascending or descending"""
enum polygon_OrderDirection {
  asc
  desc
}

type polygon_PooledToken {
  id: ID!
  asset: polygon_Bytes!
}

input polygon_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: polygon_Bytes
  asset_not: polygon_Bytes
  asset_gt: polygon_Bytes
  asset_lt: polygon_Bytes
  asset_gte: polygon_Bytes
  asset_lte: polygon_Bytes
  asset_in: [polygon_Bytes!]
  asset_not_in: [polygon_Bytes!]
  asset_contains: polygon_Bytes
  asset_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_PooledToken_orderBy {
  id
  asset
}

type polygon_StableSwap {
  id: ID!
  isActive: Boolean
  key: polygon_Bytes
  canonicalId: polygon_Bytes
  domain: BigInt
  swapPool: polygon_Bytes
  lpToken: polygon_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: polygon_PooledToken_orderBy, orderDirection: polygon_OrderDirection, where: polygon_PooledToken_filter): [polygon_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: polygon_StableSwapEvent_orderBy, orderDirection: polygon_OrderDirection, where: polygon_StableSwapEvent_filter): [polygon_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: polygon_StableSwapExchange_orderBy, orderDirection: polygon_OrderDirection, where: polygon_StableSwapExchange_filter): [polygon_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: polygon_SwapHourlyVolume_orderBy, orderDirection: polygon_OrderDirection, where: polygon_SwapHourlyVolume_filter): [polygon_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: polygon_SwapDailyVolume_orderBy, orderDirection: polygon_OrderDirection, where: polygon_SwapDailyVolume_filter): [polygon_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: polygon_SwapWeeklyVolume_orderBy, orderDirection: polygon_OrderDirection, where: polygon_SwapWeeklyVolume_filter): [polygon_SwapWeeklyVolume!]
}

type polygon_StableSwapAddLiquidityEvent implements polygon_StableSwapEvent {
  id: ID!
  stableSwap: polygon_StableSwap!
  provider: polygon_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: polygon_Bytes!
}

input polygon_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  provider: polygon_Bytes
  provider_not: polygon_Bytes
  provider_gt: polygon_Bytes
  provider_lt: polygon_Bytes
  provider_gte: polygon_Bytes
  provider_lte: polygon_Bytes
  provider_in: [polygon_Bytes!]
  provider_not_in: [polygon_Bytes!]
  provider_contains: polygon_Bytes
  provider_not_contains: polygon_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: polygon_Bytes
  transaction_not: polygon_Bytes
  transaction_gt: polygon_Bytes
  transaction_lt: polygon_Bytes
  transaction_gte: polygon_Bytes
  transaction_lte: polygon_Bytes
  transaction_in: [polygon_Bytes!]
  transaction_not_in: [polygon_Bytes!]
  transaction_contains: polygon_Bytes
  transaction_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface polygon_StableSwapEvent {
  id: ID!
  stableSwap: polygon_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: polygon_Bytes!
}

input polygon_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: polygon_Bytes
  transaction_not: polygon_Bytes
  transaction_gt: polygon_Bytes
  transaction_lt: polygon_Bytes
  transaction_gte: polygon_Bytes
  transaction_lte: polygon_Bytes
  transaction_in: [polygon_Bytes!]
  transaction_not_in: [polygon_Bytes!]
  transaction_contains: polygon_Bytes
  transaction_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type polygon_StableSwapExchange {
  id: ID!
  stableSwap: polygon_StableSwap!
  buyer: polygon_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: polygon_Bytes!
}

input polygon_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  buyer: polygon_Bytes
  buyer_not: polygon_Bytes
  buyer_gt: polygon_Bytes
  buyer_lt: polygon_Bytes
  buyer_gte: polygon_Bytes
  buyer_lte: polygon_Bytes
  buyer_in: [polygon_Bytes!]
  buyer_not_in: [polygon_Bytes!]
  buyer_contains: polygon_Bytes
  buyer_not_contains: polygon_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: polygon_Bytes
  transaction_not: polygon_Bytes
  transaction_gt: polygon_Bytes
  transaction_lt: polygon_Bytes
  transaction_gte: polygon_Bytes
  transaction_lte: polygon_Bytes
  transaction_in: [polygon_Bytes!]
  transaction_not_in: [polygon_Bytes!]
  transaction_contains: polygon_Bytes
  transaction_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type polygon_StableSwapRemoveLiquidityEvent implements polygon_StableSwapEvent {
  id: ID!
  stableSwap: polygon_StableSwap!
  provider: polygon_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: polygon_Bytes!
}

input polygon_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  provider: polygon_Bytes
  provider_not: polygon_Bytes
  provider_gt: polygon_Bytes
  provider_lt: polygon_Bytes
  provider_gte: polygon_Bytes
  provider_lte: polygon_Bytes
  provider_in: [polygon_Bytes!]
  provider_not_in: [polygon_Bytes!]
  provider_contains: polygon_Bytes
  provider_not_contains: polygon_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: polygon_Bytes
  transaction_not: polygon_Bytes
  transaction_gt: polygon_Bytes
  transaction_lt: polygon_Bytes
  transaction_gte: polygon_Bytes
  transaction_lte: polygon_Bytes
  transaction_in: [polygon_Bytes!]
  transaction_not_in: [polygon_Bytes!]
  transaction_contains: polygon_Bytes
  transaction_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input polygon_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: polygon_Bytes
  key_not: polygon_Bytes
  key_gt: polygon_Bytes
  key_lt: polygon_Bytes
  key_gte: polygon_Bytes
  key_lte: polygon_Bytes
  key_in: [polygon_Bytes!]
  key_not_in: [polygon_Bytes!]
  key_contains: polygon_Bytes
  key_not_contains: polygon_Bytes
  canonicalId: polygon_Bytes
  canonicalId_not: polygon_Bytes
  canonicalId_gt: polygon_Bytes
  canonicalId_lt: polygon_Bytes
  canonicalId_gte: polygon_Bytes
  canonicalId_lte: polygon_Bytes
  canonicalId_in: [polygon_Bytes!]
  canonicalId_not_in: [polygon_Bytes!]
  canonicalId_contains: polygon_Bytes
  canonicalId_not_contains: polygon_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: polygon_Bytes
  swapPool_not: polygon_Bytes
  swapPool_gt: polygon_Bytes
  swapPool_lt: polygon_Bytes
  swapPool_gte: polygon_Bytes
  swapPool_lte: polygon_Bytes
  swapPool_in: [polygon_Bytes!]
  swapPool_not_in: [polygon_Bytes!]
  swapPool_contains: polygon_Bytes
  swapPool_not_contains: polygon_Bytes
  lpToken: polygon_Bytes
  lpToken_not: polygon_Bytes
  lpToken_gt: polygon_Bytes
  lpToken_lt: polygon_Bytes
  lpToken_gte: polygon_Bytes
  lpToken_lte: polygon_Bytes
  lpToken_in: [polygon_Bytes!]
  lpToken_not_in: [polygon_Bytes!]
  lpToken_contains: polygon_Bytes
  lpToken_not_contains: polygon_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: polygon_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: polygon_StableSwapEvent_filter
  exchanges_: polygon_StableSwapExchange_filter
  hourlyVolumes_: polygon_SwapHourlyVolume_filter
  dailyVolumes_: polygon_SwapDailyVolume_filter
  weeklyVolumes_: polygon_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type polygon_SwapDailyVolume implements polygon_SwapTradeVolume {
  id: ID!
  stableSwap: polygon_StableSwap!
  timestamp: BigInt!
  volume: polygon_BigDecimal!
}

input polygon_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: polygon_BigDecimal
  volume_not: polygon_BigDecimal
  volume_gt: polygon_BigDecimal
  volume_lt: polygon_BigDecimal
  volume_gte: polygon_BigDecimal
  volume_lte: polygon_BigDecimal
  volume_in: [polygon_BigDecimal!]
  volume_not_in: [polygon_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type polygon_SwapHourlyVolume implements polygon_SwapTradeVolume {
  id: ID!
  stableSwap: polygon_StableSwap!
  timestamp: BigInt!
  volume: polygon_BigDecimal!
}

input polygon_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: polygon_BigDecimal
  volume_not: polygon_BigDecimal
  volume_gt: polygon_BigDecimal
  volume_lt: polygon_BigDecimal
  volume_gte: polygon_BigDecimal
  volume_lte: polygon_BigDecimal
  volume_in: [polygon_BigDecimal!]
  volume_not_in: [polygon_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface polygon_SwapTradeVolume {
  stableSwap: polygon_StableSwap!
  timestamp: BigInt!
  volume: polygon_BigDecimal!
}

input polygon_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: polygon_BigDecimal
  volume_not: polygon_BigDecimal
  volume_gt: polygon_BigDecimal
  volume_lt: polygon_BigDecimal
  volume_gte: polygon_BigDecimal
  volume_lte: polygon_BigDecimal
  volume_in: [polygon_BigDecimal!]
  volume_not_in: [polygon_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type polygon_SwapWeeklyVolume implements polygon_SwapTradeVolume {
  id: ID!
  stableSwap: polygon_StableSwap!
  timestamp: BigInt!
  volume: polygon_BigDecimal!
}

input polygon_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: polygon_BigDecimal
  volume_not: polygon_BigDecimal
  volume_gt: polygon_BigDecimal
  volume_lt: polygon_BigDecimal
  volume_gte: polygon_BigDecimal
  volume_lte: polygon_BigDecimal
  volume_in: [polygon_BigDecimal!]
  volume_not_in: [polygon_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type polygon_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input polygon_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type polygon__Block_ {
  """The hash of the block"""
  hash: polygon_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type polygon__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: polygon__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type testoptimismgoerli_Asset {
  id: ID!
  key: testoptimismgoerli_Bytes
  local: testoptimismgoerli_Bytes!
  adoptedAsset: testoptimismgoerli_Bytes!
  canonicalId: testoptimismgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type testoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testoptimismgoerli_Router!
  asset: testoptimismgoerli_Asset!
}

input testoptimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: testoptimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input testoptimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: testoptimismgoerli_Bytes
  key_not: testoptimismgoerli_Bytes
  key_gt: testoptimismgoerli_Bytes
  key_lt: testoptimismgoerli_Bytes
  key_gte: testoptimismgoerli_Bytes
  key_lte: testoptimismgoerli_Bytes
  key_in: [testoptimismgoerli_Bytes!]
  key_not_in: [testoptimismgoerli_Bytes!]
  key_contains: testoptimismgoerli_Bytes
  key_not_contains: testoptimismgoerli_Bytes
  local: testoptimismgoerli_Bytes
  local_not: testoptimismgoerli_Bytes
  local_gt: testoptimismgoerli_Bytes
  local_lt: testoptimismgoerli_Bytes
  local_gte: testoptimismgoerli_Bytes
  local_lte: testoptimismgoerli_Bytes
  local_in: [testoptimismgoerli_Bytes!]
  local_not_in: [testoptimismgoerli_Bytes!]
  local_contains: testoptimismgoerli_Bytes
  local_not_contains: testoptimismgoerli_Bytes
  adoptedAsset: testoptimismgoerli_Bytes
  adoptedAsset_not: testoptimismgoerli_Bytes
  adoptedAsset_gt: testoptimismgoerli_Bytes
  adoptedAsset_lt: testoptimismgoerli_Bytes
  adoptedAsset_gte: testoptimismgoerli_Bytes
  adoptedAsset_lte: testoptimismgoerli_Bytes
  adoptedAsset_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_contains: testoptimismgoerli_Bytes
  adoptedAsset_not_contains: testoptimismgoerli_Bytes
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_gt: testoptimismgoerli_Bytes
  canonicalId_lt: testoptimismgoerli_Bytes
  canonicalId_gte: testoptimismgoerli_Bytes
  canonicalId_lte: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar testoptimismgoerli_BigDecimal

input testoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testoptimismgoerli_Block_height {
  hash: testoptimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testoptimismgoerli_Bytes

type testoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_Router_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_Router_filter): [testoptimismgoerli_Router!]
  originSender: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testoptimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input testoptimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_gt: testoptimismgoerli_Bytes
  transferId_lt: testoptimismgoerli_Bytes
  transferId_gte: testoptimismgoerli_Bytes
  transferId_lte: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_gt: testoptimismgoerli_Bytes
  to_lt: testoptimismgoerli_Bytes
  to_gte: testoptimismgoerli_Bytes
  to_lte: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_gt: testoptimismgoerli_Bytes
  callData_lt: testoptimismgoerli_Bytes
  callData_gte: testoptimismgoerli_Bytes
  callData_lte: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_gt: testoptimismgoerli_Bytes
  agent_lt: testoptimismgoerli_Bytes
  agent_gte: testoptimismgoerli_Bytes
  agent_lte: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_gt: testoptimismgoerli_Bytes
  recovery_lt: testoptimismgoerli_Bytes
  recovery_gte: testoptimismgoerli_Bytes
  recovery_lte: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_gt: testoptimismgoerli_Bytes
  callback_lt: testoptimismgoerli_Bytes
  callback_gte: testoptimismgoerli_Bytes
  callback_lte: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: testoptimismgoerli_Router_filter
  originSender: testoptimismgoerli_Bytes
  originSender_not: testoptimismgoerli_Bytes
  originSender_gt: testoptimismgoerli_Bytes
  originSender_lt: testoptimismgoerli_Bytes
  originSender_gte: testoptimismgoerli_Bytes
  originSender_lte: testoptimismgoerli_Bytes
  originSender_in: [testoptimismgoerli_Bytes!]
  originSender_not_in: [testoptimismgoerli_Bytes!]
  originSender_contains: testoptimismgoerli_Bytes
  originSender_not_contains: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_gt: testoptimismgoerli_Bytes
  transactingAsset_lt: testoptimismgoerli_Bytes
  transactingAsset_gte: testoptimismgoerli_Bytes
  transactingAsset_lte: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: testoptimismgoerli_Bytes
  localAsset_not: testoptimismgoerli_Bytes
  localAsset_gt: testoptimismgoerli_Bytes
  localAsset_lt: testoptimismgoerli_Bytes
  localAsset_gte: testoptimismgoerli_Bytes
  localAsset_lte: testoptimismgoerli_Bytes
  localAsset_in: [testoptimismgoerli_Bytes!]
  localAsset_not_in: [testoptimismgoerli_Bytes!]
  localAsset_contains: testoptimismgoerli_Bytes
  localAsset_not_contains: testoptimismgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: testoptimismgoerli_Bytes
  executedCaller_not: testoptimismgoerli_Bytes
  executedCaller_gt: testoptimismgoerli_Bytes
  executedCaller_lt: testoptimismgoerli_Bytes
  executedCaller_gte: testoptimismgoerli_Bytes
  executedCaller_lte: testoptimismgoerli_Bytes
  executedCaller_in: [testoptimismgoerli_Bytes!]
  executedCaller_not_in: [testoptimismgoerli_Bytes!]
  executedCaller_contains: testoptimismgoerli_Bytes
  executedCaller_not_contains: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTransactionHash_not: testoptimismgoerli_Bytes
  executedTransactionHash_gt: testoptimismgoerli_Bytes
  executedTransactionHash_lt: testoptimismgoerli_Bytes
  executedTransactionHash_gte: testoptimismgoerli_Bytes
  executedTransactionHash_lte: testoptimismgoerli_Bytes
  executedTransactionHash_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_contains: testoptimismgoerli_Bytes
  executedTransactionHash_not_contains: testoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledCaller_not: testoptimismgoerli_Bytes
  reconciledCaller_gt: testoptimismgoerli_Bytes
  reconciledCaller_lt: testoptimismgoerli_Bytes
  reconciledCaller_gte: testoptimismgoerli_Bytes
  reconciledCaller_lte: testoptimismgoerli_Bytes
  reconciledCaller_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_contains: testoptimismgoerli_Bytes
  reconciledCaller_not_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTransactionHash_not: testoptimismgoerli_Bytes
  reconciledTransactionHash_gt: testoptimismgoerli_Bytes
  reconciledTransactionHash_lt: testoptimismgoerli_Bytes
  reconciledTransactionHash_gte: testoptimismgoerli_Bytes
  reconciledTransactionHash_lte: testoptimismgoerli_Bytes
  reconciledTransactionHash_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: testoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum testoptimismgoerli_OrderDirection {
  asc
  desc
}

type testoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  caller: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testoptimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_gt: testoptimismgoerli_Bytes
  transferId_lt: testoptimismgoerli_Bytes
  transferId_gte: testoptimismgoerli_Bytes
  transferId_lte: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_gt: testoptimismgoerli_Bytes
  to_lt: testoptimismgoerli_Bytes
  to_gte: testoptimismgoerli_Bytes
  to_lte: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_gt: testoptimismgoerli_Bytes
  callData_lt: testoptimismgoerli_Bytes
  callData_gte: testoptimismgoerli_Bytes
  callData_lte: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_gt: testoptimismgoerli_Bytes
  agent_lt: testoptimismgoerli_Bytes
  agent_gte: testoptimismgoerli_Bytes
  agent_lte: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_gt: testoptimismgoerli_Bytes
  recovery_lt: testoptimismgoerli_Bytes
  recovery_gte: testoptimismgoerli_Bytes
  recovery_lte: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_gt: testoptimismgoerli_Bytes
  callback_lt: testoptimismgoerli_Bytes
  callback_gte: testoptimismgoerli_Bytes
  callback_lte: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_gt: testoptimismgoerli_Bytes
  transactingAsset_lt: testoptimismgoerli_Bytes
  transactingAsset_gte: testoptimismgoerli_Bytes
  transactingAsset_lte: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAsset_not: testoptimismgoerli_Bytes
  bridgedAsset_gt: testoptimismgoerli_Bytes
  bridgedAsset_lt: testoptimismgoerli_Bytes
  bridgedAsset_gte: testoptimismgoerli_Bytes
  bridgedAsset_lte: testoptimismgoerli_Bytes
  bridgedAsset_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_not_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_contains: testoptimismgoerli_Bytes
  bridgedAsset_not_contains: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_gt: testoptimismgoerli_Bytes
  caller_lt: testoptimismgoerli_Bytes
  caller_gte: testoptimismgoerli_Bytes
  caller_lte: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  transactionHash_not: testoptimismgoerli_Bytes
  transactionHash_gt: testoptimismgoerli_Bytes
  transactionHash_lt: testoptimismgoerli_Bytes
  transactionHash_gte: testoptimismgoerli_Bytes
  transactionHash_lte: testoptimismgoerli_Bytes
  transactionHash_in: [testoptimismgoerli_Bytes!]
  transactionHash_not_in: [testoptimismgoerli_Bytes!]
  transactionHash_contains: testoptimismgoerli_Bytes
  transactionHash_not_contains: testoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type testoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testoptimismgoerli_Bytes
}

input testoptimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: testoptimismgoerli_Bytes
  relayer_not: testoptimismgoerli_Bytes
  relayer_gt: testoptimismgoerli_Bytes
  relayer_lt: testoptimismgoerli_Bytes
  relayer_gte: testoptimismgoerli_Bytes
  relayer_lte: testoptimismgoerli_Bytes
  relayer_in: [testoptimismgoerli_Bytes!]
  relayer_not_in: [testoptimismgoerli_Bytes!]
  relayer_contains: testoptimismgoerli_Bytes
  relayer_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type testoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_AssetBalance_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_AssetBalance_filter): [testoptimismgoerli_AssetBalance!]!
}

input testoptimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: testoptimismgoerli_Bytes
  owner_not: testoptimismgoerli_Bytes
  owner_gt: testoptimismgoerli_Bytes
  owner_lt: testoptimismgoerli_Bytes
  owner_gte: testoptimismgoerli_Bytes
  owner_lte: testoptimismgoerli_Bytes
  owner_in: [testoptimismgoerli_Bytes!]
  owner_not_in: [testoptimismgoerli_Bytes!]
  owner_contains: testoptimismgoerli_Bytes
  owner_not_contains: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  recipient_not: testoptimismgoerli_Bytes
  recipient_gt: testoptimismgoerli_Bytes
  recipient_lt: testoptimismgoerli_Bytes
  recipient_gte: testoptimismgoerli_Bytes
  recipient_lte: testoptimismgoerli_Bytes
  recipient_in: [testoptimismgoerli_Bytes!]
  recipient_not_in: [testoptimismgoerli_Bytes!]
  recipient_contains: testoptimismgoerli_Bytes
  recipient_not_contains: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedOwner_not: testoptimismgoerli_Bytes
  proposedOwner_gt: testoptimismgoerli_Bytes
  proposedOwner_lt: testoptimismgoerli_Bytes
  proposedOwner_gte: testoptimismgoerli_Bytes
  proposedOwner_lte: testoptimismgoerli_Bytes
  proposedOwner_in: [testoptimismgoerli_Bytes!]
  proposedOwner_not_in: [testoptimismgoerli_Bytes!]
  proposedOwner_contains: testoptimismgoerli_Bytes
  proposedOwner_not_contains: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: testoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type testoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_gt: testoptimismgoerli_Bytes
  caller_lt: testoptimismgoerli_Bytes
  caller_gte: testoptimismgoerli_Bytes
  caller_lte: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type testoptimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: testoptimismgoerli_Bytes
  sponsorVault_not: testoptimismgoerli_Bytes
  sponsorVault_gt: testoptimismgoerli_Bytes
  sponsorVault_lt: testoptimismgoerli_Bytes
  sponsorVault_gte: testoptimismgoerli_Bytes
  sponsorVault_lte: testoptimismgoerli_Bytes
  sponsorVault_in: [testoptimismgoerli_Bytes!]
  sponsorVault_not_in: [testoptimismgoerli_Bytes!]
  sponsorVault_contains: testoptimismgoerli_Bytes
  sponsorVault_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type testoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: testoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_gt: testoptimismgoerli_Bytes
  canonicalId_lt: testoptimismgoerli_Bytes
  canonicalId_gte: testoptimismgoerli_Bytes
  canonicalId_lte: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: testoptimismgoerli_Bytes
  swapPool_not: testoptimismgoerli_Bytes
  swapPool_gt: testoptimismgoerli_Bytes
  swapPool_lt: testoptimismgoerli_Bytes
  swapPool_gte: testoptimismgoerli_Bytes
  swapPool_lte: testoptimismgoerli_Bytes
  swapPool_in: [testoptimismgoerli_Bytes!]
  swapPool_not_in: [testoptimismgoerli_Bytes!]
  swapPool_contains: testoptimismgoerli_Bytes
  swapPool_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum testoptimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: testoptimismgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type testoptimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testoptimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

scalar optimismgoerli_BigDecimal

input optimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input optimismgoerli_Block_height {
  hash: optimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar optimismgoerli_Bytes

"""Defines the order direction, either ascending or descending"""
enum optimismgoerli_OrderDirection {
  asc
  desc
}

type optimismgoerli_PooledToken {
  id: ID!
  asset: optimismgoerli_Bytes!
}

input optimismgoerli_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: optimismgoerli_Bytes
  asset_not: optimismgoerli_Bytes
  asset_gt: optimismgoerli_Bytes
  asset_lt: optimismgoerli_Bytes
  asset_gte: optimismgoerli_Bytes
  asset_lte: optimismgoerli_Bytes
  asset_in: [optimismgoerli_Bytes!]
  asset_not_in: [optimismgoerli_Bytes!]
  asset_contains: optimismgoerli_Bytes
  asset_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_PooledToken_orderBy {
  id
  asset
}

type optimismgoerli_StableSwap {
  id: ID!
  isActive: Boolean
  key: optimismgoerli_Bytes
  canonicalId: optimismgoerli_Bytes
  domain: BigInt
  swapPool: optimismgoerli_Bytes
  lpToken: optimismgoerli_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_PooledToken_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_PooledToken_filter): [optimismgoerli_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_StableSwapEvent_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_StableSwapEvent_filter): [optimismgoerli_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_StableSwapExchange_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_StableSwapExchange_filter): [optimismgoerli_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_SwapHourlyVolume_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_SwapHourlyVolume_filter): [optimismgoerli_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_SwapDailyVolume_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_SwapDailyVolume_filter): [optimismgoerli_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_SwapWeeklyVolume_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_SwapWeeklyVolume_filter): [optimismgoerli_SwapWeeklyVolume!]
}

type optimismgoerli_StableSwapAddLiquidityEvent implements optimismgoerli_StableSwapEvent {
  id: ID!
  stableSwap: optimismgoerli_StableSwap!
  provider: optimismgoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: optimismgoerli_Bytes!
}

input optimismgoerli_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  provider: optimismgoerli_Bytes
  provider_not: optimismgoerli_Bytes
  provider_gt: optimismgoerli_Bytes
  provider_lt: optimismgoerli_Bytes
  provider_gte: optimismgoerli_Bytes
  provider_lte: optimismgoerli_Bytes
  provider_in: [optimismgoerli_Bytes!]
  provider_not_in: [optimismgoerli_Bytes!]
  provider_contains: optimismgoerli_Bytes
  provider_not_contains: optimismgoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: optimismgoerli_Bytes
  transaction_not: optimismgoerli_Bytes
  transaction_gt: optimismgoerli_Bytes
  transaction_lt: optimismgoerli_Bytes
  transaction_gte: optimismgoerli_Bytes
  transaction_lte: optimismgoerli_Bytes
  transaction_in: [optimismgoerli_Bytes!]
  transaction_not_in: [optimismgoerli_Bytes!]
  transaction_contains: optimismgoerli_Bytes
  transaction_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface optimismgoerli_StableSwapEvent {
  id: ID!
  stableSwap: optimismgoerli_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: optimismgoerli_Bytes!
}

input optimismgoerli_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: optimismgoerli_Bytes
  transaction_not: optimismgoerli_Bytes
  transaction_gt: optimismgoerli_Bytes
  transaction_lt: optimismgoerli_Bytes
  transaction_gte: optimismgoerli_Bytes
  transaction_lte: optimismgoerli_Bytes
  transaction_in: [optimismgoerli_Bytes!]
  transaction_not_in: [optimismgoerli_Bytes!]
  transaction_contains: optimismgoerli_Bytes
  transaction_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type optimismgoerli_StableSwapExchange {
  id: ID!
  stableSwap: optimismgoerli_StableSwap!
  buyer: optimismgoerli_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: optimismgoerli_Bytes!
}

input optimismgoerli_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  buyer: optimismgoerli_Bytes
  buyer_not: optimismgoerli_Bytes
  buyer_gt: optimismgoerli_Bytes
  buyer_lt: optimismgoerli_Bytes
  buyer_gte: optimismgoerli_Bytes
  buyer_lte: optimismgoerli_Bytes
  buyer_in: [optimismgoerli_Bytes!]
  buyer_not_in: [optimismgoerli_Bytes!]
  buyer_contains: optimismgoerli_Bytes
  buyer_not_contains: optimismgoerli_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: optimismgoerli_Bytes
  transaction_not: optimismgoerli_Bytes
  transaction_gt: optimismgoerli_Bytes
  transaction_lt: optimismgoerli_Bytes
  transaction_gte: optimismgoerli_Bytes
  transaction_lte: optimismgoerli_Bytes
  transaction_in: [optimismgoerli_Bytes!]
  transaction_not_in: [optimismgoerli_Bytes!]
  transaction_contains: optimismgoerli_Bytes
  transaction_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type optimismgoerli_StableSwapRemoveLiquidityEvent implements optimismgoerli_StableSwapEvent {
  id: ID!
  stableSwap: optimismgoerli_StableSwap!
  provider: optimismgoerli_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: optimismgoerli_Bytes!
}

input optimismgoerli_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  provider: optimismgoerli_Bytes
  provider_not: optimismgoerli_Bytes
  provider_gt: optimismgoerli_Bytes
  provider_lt: optimismgoerli_Bytes
  provider_gte: optimismgoerli_Bytes
  provider_lte: optimismgoerli_Bytes
  provider_in: [optimismgoerli_Bytes!]
  provider_not_in: [optimismgoerli_Bytes!]
  provider_contains: optimismgoerli_Bytes
  provider_not_contains: optimismgoerli_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: optimismgoerli_Bytes
  transaction_not: optimismgoerli_Bytes
  transaction_gt: optimismgoerli_Bytes
  transaction_lt: optimismgoerli_Bytes
  transaction_gte: optimismgoerli_Bytes
  transaction_lte: optimismgoerli_Bytes
  transaction_in: [optimismgoerli_Bytes!]
  transaction_not_in: [optimismgoerli_Bytes!]
  transaction_contains: optimismgoerli_Bytes
  transaction_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input optimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: optimismgoerli_Bytes
  key_not: optimismgoerli_Bytes
  key_gt: optimismgoerli_Bytes
  key_lt: optimismgoerli_Bytes
  key_gte: optimismgoerli_Bytes
  key_lte: optimismgoerli_Bytes
  key_in: [optimismgoerli_Bytes!]
  key_not_in: [optimismgoerli_Bytes!]
  key_contains: optimismgoerli_Bytes
  key_not_contains: optimismgoerli_Bytes
  canonicalId: optimismgoerli_Bytes
  canonicalId_not: optimismgoerli_Bytes
  canonicalId_gt: optimismgoerli_Bytes
  canonicalId_lt: optimismgoerli_Bytes
  canonicalId_gte: optimismgoerli_Bytes
  canonicalId_lte: optimismgoerli_Bytes
  canonicalId_in: [optimismgoerli_Bytes!]
  canonicalId_not_in: [optimismgoerli_Bytes!]
  canonicalId_contains: optimismgoerli_Bytes
  canonicalId_not_contains: optimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: optimismgoerli_Bytes
  swapPool_not: optimismgoerli_Bytes
  swapPool_gt: optimismgoerli_Bytes
  swapPool_lt: optimismgoerli_Bytes
  swapPool_gte: optimismgoerli_Bytes
  swapPool_lte: optimismgoerli_Bytes
  swapPool_in: [optimismgoerli_Bytes!]
  swapPool_not_in: [optimismgoerli_Bytes!]
  swapPool_contains: optimismgoerli_Bytes
  swapPool_not_contains: optimismgoerli_Bytes
  lpToken: optimismgoerli_Bytes
  lpToken_not: optimismgoerli_Bytes
  lpToken_gt: optimismgoerli_Bytes
  lpToken_lt: optimismgoerli_Bytes
  lpToken_gte: optimismgoerli_Bytes
  lpToken_lte: optimismgoerli_Bytes
  lpToken_in: [optimismgoerli_Bytes!]
  lpToken_not_in: [optimismgoerli_Bytes!]
  lpToken_contains: optimismgoerli_Bytes
  lpToken_not_contains: optimismgoerli_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: optimismgoerli_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: optimismgoerli_StableSwapEvent_filter
  exchanges_: optimismgoerli_StableSwapExchange_filter
  hourlyVolumes_: optimismgoerli_SwapHourlyVolume_filter
  dailyVolumes_: optimismgoerli_SwapDailyVolume_filter
  weeklyVolumes_: optimismgoerli_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type optimismgoerli_SwapDailyVolume implements optimismgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: optimismgoerli_StableSwap!
  timestamp: BigInt!
  volume: optimismgoerli_BigDecimal!
}

input optimismgoerli_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: optimismgoerli_BigDecimal
  volume_not: optimismgoerli_BigDecimal
  volume_gt: optimismgoerli_BigDecimal
  volume_lt: optimismgoerli_BigDecimal
  volume_gte: optimismgoerli_BigDecimal
  volume_lte: optimismgoerli_BigDecimal
  volume_in: [optimismgoerli_BigDecimal!]
  volume_not_in: [optimismgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type optimismgoerli_SwapHourlyVolume implements optimismgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: optimismgoerli_StableSwap!
  timestamp: BigInt!
  volume: optimismgoerli_BigDecimal!
}

input optimismgoerli_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: optimismgoerli_BigDecimal
  volume_not: optimismgoerli_BigDecimal
  volume_gt: optimismgoerli_BigDecimal
  volume_lt: optimismgoerli_BigDecimal
  volume_gte: optimismgoerli_BigDecimal
  volume_lte: optimismgoerli_BigDecimal
  volume_in: [optimismgoerli_BigDecimal!]
  volume_not_in: [optimismgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface optimismgoerli_SwapTradeVolume {
  stableSwap: optimismgoerli_StableSwap!
  timestamp: BigInt!
  volume: optimismgoerli_BigDecimal!
}

input optimismgoerli_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: optimismgoerli_BigDecimal
  volume_not: optimismgoerli_BigDecimal
  volume_gt: optimismgoerli_BigDecimal
  volume_lt: optimismgoerli_BigDecimal
  volume_gte: optimismgoerli_BigDecimal
  volume_lte: optimismgoerli_BigDecimal
  volume_in: [optimismgoerli_BigDecimal!]
  volume_not_in: [optimismgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type optimismgoerli_SwapWeeklyVolume implements optimismgoerli_SwapTradeVolume {
  id: ID!
  stableSwap: optimismgoerli_StableSwap!
  timestamp: BigInt!
  volume: optimismgoerli_BigDecimal!
}

input optimismgoerli_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: optimismgoerli_BigDecimal
  volume_not: optimismgoerli_BigDecimal
  volume_gt: optimismgoerli_BigDecimal
  volume_lt: optimismgoerli_BigDecimal
  volume_gte: optimismgoerli_BigDecimal
  volume_lte: optimismgoerli_BigDecimal
  volume_in: [optimismgoerli_BigDecimal!]
  volume_not_in: [optimismgoerli_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type optimismgoerli_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input optimismgoerli_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type optimismgoerli__Block_ {
  """The hash of the block"""
  hash: optimismgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type optimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: optimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type stagingoptimismgoerli_AggregateRoot {
  id: ID!
  root: stagingoptimismgoerli_Bytes!
  blockNumber: BigInt!
}

input stagingoptimismgoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_gt: stagingoptimismgoerli_Bytes
  root_lt: stagingoptimismgoerli_Bytes
  root_gte: stagingoptimismgoerli_Bytes
  root_lte: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type stagingoptimismgoerli_Asset {
  id: ID!
  key: stagingoptimismgoerli_Bytes
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: stagingoptimismgoerli_Bytes
  localAsset: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  status: stagingoptimismgoerli_AssetStatus
}

type stagingoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingoptimismgoerli_Router!
  asset: stagingoptimismgoerli_Asset!
  feesEarned: BigInt!
}

input stagingoptimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: stagingoptimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingoptimismgoerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

type stagingoptimismgoerli_AssetStatus {
  id: ID!
  status: Boolean
}

input stagingoptimismgoerli_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AssetStatus_orderBy {
  id
  status
}

input stagingoptimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: stagingoptimismgoerli_Bytes
  key_not: stagingoptimismgoerli_Bytes
  key_gt: stagingoptimismgoerli_Bytes
  key_lt: stagingoptimismgoerli_Bytes
  key_gte: stagingoptimismgoerli_Bytes
  key_lte: stagingoptimismgoerli_Bytes
  key_in: [stagingoptimismgoerli_Bytes!]
  key_not_in: [stagingoptimismgoerli_Bytes!]
  key_contains: stagingoptimismgoerli_Bytes
  key_not_contains: stagingoptimismgoerli_Bytes
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_gt: stagingoptimismgoerli_Bytes
  canonicalId_lt: stagingoptimismgoerli_Bytes
  canonicalId_gte: stagingoptimismgoerli_Bytes
  canonicalId_lte: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: stagingoptimismgoerli_Bytes
  adoptedAsset_not: stagingoptimismgoerli_Bytes
  adoptedAsset_gt: stagingoptimismgoerli_Bytes
  adoptedAsset_lt: stagingoptimismgoerli_Bytes
  adoptedAsset_gte: stagingoptimismgoerli_Bytes
  adoptedAsset_lte: stagingoptimismgoerli_Bytes
  adoptedAsset_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_contains: stagingoptimismgoerli_Bytes
  adoptedAsset_not_contains: stagingoptimismgoerli_Bytes
  localAsset: stagingoptimismgoerli_Bytes
  localAsset_not: stagingoptimismgoerli_Bytes
  localAsset_gt: stagingoptimismgoerli_Bytes
  localAsset_lt: stagingoptimismgoerli_Bytes
  localAsset_gte: stagingoptimismgoerli_Bytes
  localAsset_lte: stagingoptimismgoerli_Bytes
  localAsset_in: [stagingoptimismgoerli_Bytes!]
  localAsset_not_in: [stagingoptimismgoerli_Bytes!]
  localAsset_contains: stagingoptimismgoerli_Bytes
  localAsset_not_contains: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: stagingoptimismgoerli_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
}

type stagingoptimismgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: stagingoptimismgoerli_Bytes
  rootManager: stagingoptimismgoerli_Bytes
  mirrorConnector: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingoptimismgoerli_Bytes
  amb_not: stagingoptimismgoerli_Bytes
  amb_gt: stagingoptimismgoerli_Bytes
  amb_lt: stagingoptimismgoerli_Bytes
  amb_gte: stagingoptimismgoerli_Bytes
  amb_lte: stagingoptimismgoerli_Bytes
  amb_in: [stagingoptimismgoerli_Bytes!]
  amb_not_in: [stagingoptimismgoerli_Bytes!]
  amb_contains: stagingoptimismgoerli_Bytes
  amb_not_contains: stagingoptimismgoerli_Bytes
  rootManager: stagingoptimismgoerli_Bytes
  rootManager_not: stagingoptimismgoerli_Bytes
  rootManager_gt: stagingoptimismgoerli_Bytes
  rootManager_lt: stagingoptimismgoerli_Bytes
  rootManager_gte: stagingoptimismgoerli_Bytes
  rootManager_lte: stagingoptimismgoerli_Bytes
  rootManager_in: [stagingoptimismgoerli_Bytes!]
  rootManager_not_in: [stagingoptimismgoerli_Bytes!]
  rootManager_contains: stagingoptimismgoerli_Bytes
  rootManager_not_contains: stagingoptimismgoerli_Bytes
  mirrorConnector: stagingoptimismgoerli_Bytes
  mirrorConnector_not: stagingoptimismgoerli_Bytes
  mirrorConnector_gt: stagingoptimismgoerli_Bytes
  mirrorConnector_lt: stagingoptimismgoerli_Bytes
  mirrorConnector_gte: stagingoptimismgoerli_Bytes
  mirrorConnector_lte: stagingoptimismgoerli_Bytes
  mirrorConnector_in: [stagingoptimismgoerli_Bytes!]
  mirrorConnector_not_in: [stagingoptimismgoerli_Bytes!]
  mirrorConnector_contains: stagingoptimismgoerli_Bytes
  mirrorConnector_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  status: stagingoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_Router_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_Router_filter): [stagingoptimismgoerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingoptimismgoerli_Bytes
  delegate: stagingoptimismgoerli_Bytes
  receiveLocal: Boolean
  callData: stagingoptimismgoerli_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: stagingoptimismgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingoptimismgoerli_Bytes
  asset: stagingoptimismgoerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: stagingoptimismgoerli_Bytes
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_gt: stagingoptimismgoerli_Bytes
  transferId_lt: stagingoptimismgoerli_Bytes
  transferId_gte: stagingoptimismgoerli_Bytes
  transferId_lte: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: stagingoptimismgoerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_gt: stagingoptimismgoerli_Bytes
  to_lt: stagingoptimismgoerli_Bytes
  to_gte: stagingoptimismgoerli_Bytes
  to_lte: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  delegate: stagingoptimismgoerli_Bytes
  delegate_not: stagingoptimismgoerli_Bytes
  delegate_gt: stagingoptimismgoerli_Bytes
  delegate_lt: stagingoptimismgoerli_Bytes
  delegate_gte: stagingoptimismgoerli_Bytes
  delegate_lte: stagingoptimismgoerli_Bytes
  delegate_in: [stagingoptimismgoerli_Bytes!]
  delegate_not_in: [stagingoptimismgoerli_Bytes!]
  delegate_contains: stagingoptimismgoerli_Bytes
  delegate_not_contains: stagingoptimismgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_gt: stagingoptimismgoerli_Bytes
  callData_lt: stagingoptimismgoerli_Bytes
  callData_gte: stagingoptimismgoerli_Bytes
  callData_lte: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: stagingoptimismgoerli_Bytes
  originSender_not: stagingoptimismgoerli_Bytes
  originSender_gt: stagingoptimismgoerli_Bytes
  originSender_lt: stagingoptimismgoerli_Bytes
  originSender_gte: stagingoptimismgoerli_Bytes
  originSender_lte: stagingoptimismgoerli_Bytes
  originSender_in: [stagingoptimismgoerli_Bytes!]
  originSender_not_in: [stagingoptimismgoerli_Bytes!]
  originSender_contains: stagingoptimismgoerli_Bytes
  originSender_not_contains: stagingoptimismgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_gt: stagingoptimismgoerli_Bytes
  canonicalId_lt: stagingoptimismgoerli_Bytes
  canonicalId_gte: stagingoptimismgoerli_Bytes
  canonicalId_lte: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingoptimismgoerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: stagingoptimismgoerli_Bytes
  executedCaller_not: stagingoptimismgoerli_Bytes
  executedCaller_gt: stagingoptimismgoerli_Bytes
  executedCaller_lt: stagingoptimismgoerli_Bytes
  executedCaller_gte: stagingoptimismgoerli_Bytes
  executedCaller_lte: stagingoptimismgoerli_Bytes
  executedCaller_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_not_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_contains: stagingoptimismgoerli_Bytes
  executedCaller_not_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
  executedTransactionHash_not: stagingoptimismgoerli_Bytes
  executedTransactionHash_gt: stagingoptimismgoerli_Bytes
  executedTransactionHash_lt: stagingoptimismgoerli_Bytes
  executedTransactionHash_gte: stagingoptimismgoerli_Bytes
  executedTransactionHash_lte: stagingoptimismgoerli_Bytes
  executedTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash_not_contains: stagingoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: stagingoptimismgoerli_Bytes
  executedTxOrigin_not: stagingoptimismgoerli_Bytes
  executedTxOrigin_gt: stagingoptimismgoerli_Bytes
  executedTxOrigin_lt: stagingoptimismgoerli_Bytes
  executedTxOrigin_gte: stagingoptimismgoerli_Bytes
  executedTxOrigin_lte: stagingoptimismgoerli_Bytes
  executedTxOrigin_in: [stagingoptimismgoerli_Bytes!]
  executedTxOrigin_not_in: [stagingoptimismgoerli_Bytes!]
  executedTxOrigin_contains: stagingoptimismgoerli_Bytes
  executedTxOrigin_not_contains: stagingoptimismgoerli_Bytes
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledCaller_not: stagingoptimismgoerli_Bytes
  reconciledCaller_gt: stagingoptimismgoerli_Bytes
  reconciledCaller_lt: stagingoptimismgoerli_Bytes
  reconciledCaller_gte: stagingoptimismgoerli_Bytes
  reconciledCaller_lte: stagingoptimismgoerli_Bytes
  reconciledCaller_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_contains: stagingoptimismgoerli_Bytes
  reconciledCaller_not_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_gt: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_lt: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_gte: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_lte: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: stagingoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: stagingoptimismgoerli_Bytes
  reconciledTxOrigin_not: stagingoptimismgoerli_Bytes
  reconciledTxOrigin_gt: stagingoptimismgoerli_Bytes
  reconciledTxOrigin_lt: stagingoptimismgoerli_Bytes
  reconciledTxOrigin_gte: stagingoptimismgoerli_Bytes
  reconciledTxOrigin_lte: stagingoptimismgoerli_Bytes
  reconciledTxOrigin_in: [stagingoptimismgoerli_Bytes!]
  reconciledTxOrigin_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledTxOrigin_contains: stagingoptimismgoerli_Bytes
  reconciledTxOrigin_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type stagingoptimismgoerli_OriginMessage {
  id: ID!
  transferId: stagingoptimismgoerli_Bytes
  destinationDomain: BigInt
  leaf: stagingoptimismgoerli_Bytes
  index: BigInt
  message: stagingoptimismgoerli_Bytes
  root: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  rootCount: stagingoptimismgoerli_RootCount
}

input stagingoptimismgoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_gt: stagingoptimismgoerli_Bytes
  transferId_lt: stagingoptimismgoerli_Bytes
  transferId_gte: stagingoptimismgoerli_Bytes
  transferId_lte: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: stagingoptimismgoerli_Bytes
  leaf_not: stagingoptimismgoerli_Bytes
  leaf_gt: stagingoptimismgoerli_Bytes
  leaf_lt: stagingoptimismgoerli_Bytes
  leaf_gte: stagingoptimismgoerli_Bytes
  leaf_lte: stagingoptimismgoerli_Bytes
  leaf_in: [stagingoptimismgoerli_Bytes!]
  leaf_not_in: [stagingoptimismgoerli_Bytes!]
  leaf_contains: stagingoptimismgoerli_Bytes
  leaf_not_contains: stagingoptimismgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: stagingoptimismgoerli_Bytes
  message_not: stagingoptimismgoerli_Bytes
  message_gt: stagingoptimismgoerli_Bytes
  message_lt: stagingoptimismgoerli_Bytes
  message_gte: stagingoptimismgoerli_Bytes
  message_lte: stagingoptimismgoerli_Bytes
  message_in: [stagingoptimismgoerli_Bytes!]
  message_not_in: [stagingoptimismgoerli_Bytes!]
  message_contains: stagingoptimismgoerli_Bytes
  message_not_contains: stagingoptimismgoerli_Bytes
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_gt: stagingoptimismgoerli_Bytes
  root_lt: stagingoptimismgoerli_Bytes
  root_gte: stagingoptimismgoerli_Bytes
  root_lte: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_gt: stagingoptimismgoerli_Bytes
  transactionHash_lt: stagingoptimismgoerli_Bytes
  transactionHash_gte: stagingoptimismgoerli_Bytes
  transactionHash_lte: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: stagingoptimismgoerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type stagingoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  status: stagingoptimismgoerli_TransferStatus
  messageHash: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingoptimismgoerli_Bytes
  delegate: stagingoptimismgoerli_Bytes
  receiveLocal: Boolean
  callData: stagingoptimismgoerli_Bytes
  slippage: BigInt
  originSender: stagingoptimismgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingoptimismgoerli_Bytes
  asset: stagingoptimismgoerli_Asset
  message: stagingoptimismgoerli_OriginMessage
  relayerFee: BigInt
  bumpRelayerFeeCount: BigInt
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_gt: stagingoptimismgoerli_Bytes
  transferId_lt: stagingoptimismgoerli_Bytes
  transferId_gte: stagingoptimismgoerli_Bytes
  transferId_lte: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
  messageHash: stagingoptimismgoerli_Bytes
  messageHash_not: stagingoptimismgoerli_Bytes
  messageHash_gt: stagingoptimismgoerli_Bytes
  messageHash_lt: stagingoptimismgoerli_Bytes
  messageHash_gte: stagingoptimismgoerli_Bytes
  messageHash_lte: stagingoptimismgoerli_Bytes
  messageHash_in: [stagingoptimismgoerli_Bytes!]
  messageHash_not_in: [stagingoptimismgoerli_Bytes!]
  messageHash_contains: stagingoptimismgoerli_Bytes
  messageHash_not_contains: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_gt: stagingoptimismgoerli_Bytes
  to_lt: stagingoptimismgoerli_Bytes
  to_gte: stagingoptimismgoerli_Bytes
  to_lte: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  delegate: stagingoptimismgoerli_Bytes
  delegate_not: stagingoptimismgoerli_Bytes
  delegate_gt: stagingoptimismgoerli_Bytes
  delegate_lt: stagingoptimismgoerli_Bytes
  delegate_gte: stagingoptimismgoerli_Bytes
  delegate_lte: stagingoptimismgoerli_Bytes
  delegate_in: [stagingoptimismgoerli_Bytes!]
  delegate_not_in: [stagingoptimismgoerli_Bytes!]
  delegate_contains: stagingoptimismgoerli_Bytes
  delegate_not_contains: stagingoptimismgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_gt: stagingoptimismgoerli_Bytes
  callData_lt: stagingoptimismgoerli_Bytes
  callData_gte: stagingoptimismgoerli_Bytes
  callData_lte: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: stagingoptimismgoerli_Bytes
  originSender_not: stagingoptimismgoerli_Bytes
  originSender_gt: stagingoptimismgoerli_Bytes
  originSender_lt: stagingoptimismgoerli_Bytes
  originSender_gte: stagingoptimismgoerli_Bytes
  originSender_lte: stagingoptimismgoerli_Bytes
  originSender_in: [stagingoptimismgoerli_Bytes!]
  originSender_not_in: [stagingoptimismgoerli_Bytes!]
  originSender_contains: stagingoptimismgoerli_Bytes
  originSender_not_contains: stagingoptimismgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_gt: stagingoptimismgoerli_Bytes
  canonicalId_lt: stagingoptimismgoerli_Bytes
  canonicalId_gte: stagingoptimismgoerli_Bytes
  canonicalId_lte: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingoptimismgoerli_Asset_filter
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: stagingoptimismgoerli_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_gt: stagingoptimismgoerli_Bytes
  caller_lt: stagingoptimismgoerli_Bytes
  caller_gte: stagingoptimismgoerli_Bytes
  caller_lte: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_gt: stagingoptimismgoerli_Bytes
  transactionHash_lt: stagingoptimismgoerli_Bytes
  transactionHash_gte: stagingoptimismgoerli_Bytes
  transactionHash_lte: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: stagingoptimismgoerli_Bytes
  txOrigin_not: stagingoptimismgoerli_Bytes
  txOrigin_gt: stagingoptimismgoerli_Bytes
  txOrigin_lt: stagingoptimismgoerli_Bytes
  txOrigin_gte: stagingoptimismgoerli_Bytes
  txOrigin_lte: stagingoptimismgoerli_Bytes
  txOrigin_in: [stagingoptimismgoerli_Bytes!]
  txOrigin_not_in: [stagingoptimismgoerli_Bytes!]
  txOrigin_contains: stagingoptimismgoerli_Bytes
  txOrigin_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  message
  relayerFee
  bumpRelayerFeeCount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type stagingoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: stagingoptimismgoerli_Bytes
  relayer_not: stagingoptimismgoerli_Bytes
  relayer_gt: stagingoptimismgoerli_Bytes
  relayer_lt: stagingoptimismgoerli_Bytes
  relayer_gte: stagingoptimismgoerli_Bytes
  relayer_lte: stagingoptimismgoerli_Bytes
  relayer_in: [stagingoptimismgoerli_Bytes!]
  relayer_not_in: [stagingoptimismgoerli_Bytes!]
  relayer_contains: stagingoptimismgoerli_Bytes
  relayer_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type stagingoptimismgoerli_RootCount {
  id: ID!
  count: BigInt
}

input stagingoptimismgoerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_RootCount_orderBy {
  id
  count
}

type stagingoptimismgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: stagingoptimismgoerli_Bytes
  count: BigInt
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingoptimismgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_gt: stagingoptimismgoerli_Bytes
  root_lt: stagingoptimismgoerli_Bytes
  root_gte: stagingoptimismgoerli_Bytes
  root_lte: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_gt: stagingoptimismgoerli_Bytes
  caller_lt: stagingoptimismgoerli_Bytes
  caller_gte: stagingoptimismgoerli_Bytes
  caller_lte: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_gt: stagingoptimismgoerli_Bytes
  transactionHash_lt: stagingoptimismgoerli_Bytes
  transactionHash_gte: stagingoptimismgoerli_Bytes
  transactionHash_lte: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_AssetBalance_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_AssetBalance_filter): [stagingoptimismgoerli_AssetBalance!]!
}

input stagingoptimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: stagingoptimismgoerli_Bytes
  owner_not: stagingoptimismgoerli_Bytes
  owner_gt: stagingoptimismgoerli_Bytes
  owner_lt: stagingoptimismgoerli_Bytes
  owner_gte: stagingoptimismgoerli_Bytes
  owner_lte: stagingoptimismgoerli_Bytes
  owner_in: [stagingoptimismgoerli_Bytes!]
  owner_not_in: [stagingoptimismgoerli_Bytes!]
  owner_contains: stagingoptimismgoerli_Bytes
  owner_not_contains: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  recipient_not: stagingoptimismgoerli_Bytes
  recipient_gt: stagingoptimismgoerli_Bytes
  recipient_lt: stagingoptimismgoerli_Bytes
  recipient_gte: stagingoptimismgoerli_Bytes
  recipient_lte: stagingoptimismgoerli_Bytes
  recipient_in: [stagingoptimismgoerli_Bytes!]
  recipient_not_in: [stagingoptimismgoerli_Bytes!]
  recipient_contains: stagingoptimismgoerli_Bytes
  recipient_not_contains: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedOwner_not: stagingoptimismgoerli_Bytes
  proposedOwner_gt: stagingoptimismgoerli_Bytes
  proposedOwner_lt: stagingoptimismgoerli_Bytes
  proposedOwner_gte: stagingoptimismgoerli_Bytes
  proposedOwner_lte: stagingoptimismgoerli_Bytes
  proposedOwner_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_not_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_contains: stagingoptimismgoerli_Bytes
  proposedOwner_not_contains: stagingoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: stagingoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type stagingoptimismgoerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: stagingoptimismgoerli_Bytes
  sequencer_not: stagingoptimismgoerli_Bytes
  sequencer_gt: stagingoptimismgoerli_Bytes
  sequencer_lt: stagingoptimismgoerli_Bytes
  sequencer_gte: stagingoptimismgoerli_Bytes
  sequencer_lte: stagingoptimismgoerli_Bytes
  sequencer_in: [stagingoptimismgoerli_Bytes!]
  sequencer_not_in: [stagingoptimismgoerli_Bytes!]
  sequencer_contains: stagingoptimismgoerli_Bytes
  sequencer_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type stagingoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_gt: stagingoptimismgoerli_Bytes
  caller_lt: stagingoptimismgoerli_Bytes
  caller_gte: stagingoptimismgoerli_Bytes
  caller_lte: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

enum stagingoptimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type stagingmumbai_AggregateRoot {
  id: ID!
  root: stagingmumbai_Bytes!
  blockNumber: BigInt!
}

input stagingmumbai_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_gt: stagingmumbai_Bytes
  root_lt: stagingmumbai_Bytes
  root_gte: stagingmumbai_Bytes
  root_lte: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type stagingmumbai_Asset {
  id: ID!
  key: stagingmumbai_Bytes
  canonicalId: stagingmumbai_Bytes
  canonicalDomain: BigInt
  adoptedAsset: stagingmumbai_Bytes
  localAsset: stagingmumbai_Bytes
  blockNumber: BigInt
  status: stagingmumbai_AssetStatus
}

type stagingmumbai_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingmumbai_Router!
  asset: stagingmumbai_Asset!
  feesEarned: BigInt!
}

input stagingmumbai_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: stagingmumbai_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingmumbai_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

type stagingmumbai_AssetStatus {
  id: ID!
  status: Boolean
}

input stagingmumbai_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_AssetStatus_orderBy {
  id
  status
}

input stagingmumbai_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: stagingmumbai_Bytes
  key_not: stagingmumbai_Bytes
  key_gt: stagingmumbai_Bytes
  key_lt: stagingmumbai_Bytes
  key_gte: stagingmumbai_Bytes
  key_lte: stagingmumbai_Bytes
  key_in: [stagingmumbai_Bytes!]
  key_not_in: [stagingmumbai_Bytes!]
  key_contains: stagingmumbai_Bytes
  key_not_contains: stagingmumbai_Bytes
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_gt: stagingmumbai_Bytes
  canonicalId_lt: stagingmumbai_Bytes
  canonicalId_gte: stagingmumbai_Bytes
  canonicalId_lte: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: stagingmumbai_Bytes
  adoptedAsset_not: stagingmumbai_Bytes
  adoptedAsset_gt: stagingmumbai_Bytes
  adoptedAsset_lt: stagingmumbai_Bytes
  adoptedAsset_gte: stagingmumbai_Bytes
  adoptedAsset_lte: stagingmumbai_Bytes
  adoptedAsset_in: [stagingmumbai_Bytes!]
  adoptedAsset_not_in: [stagingmumbai_Bytes!]
  adoptedAsset_contains: stagingmumbai_Bytes
  adoptedAsset_not_contains: stagingmumbai_Bytes
  localAsset: stagingmumbai_Bytes
  localAsset_not: stagingmumbai_Bytes
  localAsset_gt: stagingmumbai_Bytes
  localAsset_lt: stagingmumbai_Bytes
  localAsset_gte: stagingmumbai_Bytes
  localAsset_lte: stagingmumbai_Bytes
  localAsset_in: [stagingmumbai_Bytes!]
  localAsset_not_in: [stagingmumbai_Bytes!]
  localAsset_contains: stagingmumbai_Bytes
  localAsset_not_contains: stagingmumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: stagingmumbai_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
}

type stagingmumbai_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: stagingmumbai_Bytes
  rootManager: stagingmumbai_Bytes
  mirrorConnector: stagingmumbai_Bytes
}

input stagingmumbai_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmumbai_Bytes
  amb_not: stagingmumbai_Bytes
  amb_gt: stagingmumbai_Bytes
  amb_lt: stagingmumbai_Bytes
  amb_gte: stagingmumbai_Bytes
  amb_lte: stagingmumbai_Bytes
  amb_in: [stagingmumbai_Bytes!]
  amb_not_in: [stagingmumbai_Bytes!]
  amb_contains: stagingmumbai_Bytes
  amb_not_contains: stagingmumbai_Bytes
  rootManager: stagingmumbai_Bytes
  rootManager_not: stagingmumbai_Bytes
  rootManager_gt: stagingmumbai_Bytes
  rootManager_lt: stagingmumbai_Bytes
  rootManager_gte: stagingmumbai_Bytes
  rootManager_lte: stagingmumbai_Bytes
  rootManager_in: [stagingmumbai_Bytes!]
  rootManager_not_in: [stagingmumbai_Bytes!]
  rootManager_contains: stagingmumbai_Bytes
  rootManager_not_contains: stagingmumbai_Bytes
  mirrorConnector: stagingmumbai_Bytes
  mirrorConnector_not: stagingmumbai_Bytes
  mirrorConnector_gt: stagingmumbai_Bytes
  mirrorConnector_lt: stagingmumbai_Bytes
  mirrorConnector_gte: stagingmumbai_Bytes
  mirrorConnector_lte: stagingmumbai_Bytes
  mirrorConnector_in: [stagingmumbai_Bytes!]
  mirrorConnector_not_in: [stagingmumbai_Bytes!]
  mirrorConnector_contains: stagingmumbai_Bytes
  mirrorConnector_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmumbai_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingmumbai_Bytes
  nonce: BigInt
  status: stagingmumbai_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_Router_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_Router_filter): [stagingmumbai_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingmumbai_Bytes
  delegate: stagingmumbai_Bytes
  receiveLocal: Boolean
  callData: stagingmumbai_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: stagingmumbai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingmumbai_Bytes
  asset: stagingmumbai_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: stagingmumbai_Bytes
  executedTransactionHash: stagingmumbai_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: stagingmumbai_Bytes
  reconciledCaller: stagingmumbai_Bytes
  reconciledTransactionHash: stagingmumbai_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: stagingmumbai_Bytes
}

input stagingmumbai_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_gt: stagingmumbai_Bytes
  transferId_lt: stagingmumbai_Bytes
  transferId_gte: stagingmumbai_Bytes
  transferId_lte: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingmumbai_TransferStatus
  status_not: stagingmumbai_TransferStatus
  status_in: [stagingmumbai_TransferStatus!]
  status_not_in: [stagingmumbai_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: stagingmumbai_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingmumbai_Bytes
  to_not: stagingmumbai_Bytes
  to_gt: stagingmumbai_Bytes
  to_lt: stagingmumbai_Bytes
  to_gte: stagingmumbai_Bytes
  to_lte: stagingmumbai_Bytes
  to_in: [stagingmumbai_Bytes!]
  to_not_in: [stagingmumbai_Bytes!]
  to_contains: stagingmumbai_Bytes
  to_not_contains: stagingmumbai_Bytes
  delegate: stagingmumbai_Bytes
  delegate_not: stagingmumbai_Bytes
  delegate_gt: stagingmumbai_Bytes
  delegate_lt: stagingmumbai_Bytes
  delegate_gte: stagingmumbai_Bytes
  delegate_lte: stagingmumbai_Bytes
  delegate_in: [stagingmumbai_Bytes!]
  delegate_not_in: [stagingmumbai_Bytes!]
  delegate_contains: stagingmumbai_Bytes
  delegate_not_contains: stagingmumbai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingmumbai_Bytes
  callData_not: stagingmumbai_Bytes
  callData_gt: stagingmumbai_Bytes
  callData_lt: stagingmumbai_Bytes
  callData_gte: stagingmumbai_Bytes
  callData_lte: stagingmumbai_Bytes
  callData_in: [stagingmumbai_Bytes!]
  callData_not_in: [stagingmumbai_Bytes!]
  callData_contains: stagingmumbai_Bytes
  callData_not_contains: stagingmumbai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: stagingmumbai_Bytes
  originSender_not: stagingmumbai_Bytes
  originSender_gt: stagingmumbai_Bytes
  originSender_lt: stagingmumbai_Bytes
  originSender_gte: stagingmumbai_Bytes
  originSender_lte: stagingmumbai_Bytes
  originSender_in: [stagingmumbai_Bytes!]
  originSender_not_in: [stagingmumbai_Bytes!]
  originSender_contains: stagingmumbai_Bytes
  originSender_not_contains: stagingmumbai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_gt: stagingmumbai_Bytes
  canonicalId_lt: stagingmumbai_Bytes
  canonicalId_gte: stagingmumbai_Bytes
  canonicalId_lte: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingmumbai_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: stagingmumbai_Bytes
  executedCaller_not: stagingmumbai_Bytes
  executedCaller_gt: stagingmumbai_Bytes
  executedCaller_lt: stagingmumbai_Bytes
  executedCaller_gte: stagingmumbai_Bytes
  executedCaller_lte: stagingmumbai_Bytes
  executedCaller_in: [stagingmumbai_Bytes!]
  executedCaller_not_in: [stagingmumbai_Bytes!]
  executedCaller_contains: stagingmumbai_Bytes
  executedCaller_not_contains: stagingmumbai_Bytes
  executedTransactionHash: stagingmumbai_Bytes
  executedTransactionHash_not: stagingmumbai_Bytes
  executedTransactionHash_gt: stagingmumbai_Bytes
  executedTransactionHash_lt: stagingmumbai_Bytes
  executedTransactionHash_gte: stagingmumbai_Bytes
  executedTransactionHash_lte: stagingmumbai_Bytes
  executedTransactionHash_in: [stagingmumbai_Bytes!]
  executedTransactionHash_not_in: [stagingmumbai_Bytes!]
  executedTransactionHash_contains: stagingmumbai_Bytes
  executedTransactionHash_not_contains: stagingmumbai_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: stagingmumbai_Bytes
  executedTxOrigin_not: stagingmumbai_Bytes
  executedTxOrigin_gt: stagingmumbai_Bytes
  executedTxOrigin_lt: stagingmumbai_Bytes
  executedTxOrigin_gte: stagingmumbai_Bytes
  executedTxOrigin_lte: stagingmumbai_Bytes
  executedTxOrigin_in: [stagingmumbai_Bytes!]
  executedTxOrigin_not_in: [stagingmumbai_Bytes!]
  executedTxOrigin_contains: stagingmumbai_Bytes
  executedTxOrigin_not_contains: stagingmumbai_Bytes
  reconciledCaller: stagingmumbai_Bytes
  reconciledCaller_not: stagingmumbai_Bytes
  reconciledCaller_gt: stagingmumbai_Bytes
  reconciledCaller_lt: stagingmumbai_Bytes
  reconciledCaller_gte: stagingmumbai_Bytes
  reconciledCaller_lte: stagingmumbai_Bytes
  reconciledCaller_in: [stagingmumbai_Bytes!]
  reconciledCaller_not_in: [stagingmumbai_Bytes!]
  reconciledCaller_contains: stagingmumbai_Bytes
  reconciledCaller_not_contains: stagingmumbai_Bytes
  reconciledTransactionHash: stagingmumbai_Bytes
  reconciledTransactionHash_not: stagingmumbai_Bytes
  reconciledTransactionHash_gt: stagingmumbai_Bytes
  reconciledTransactionHash_lt: stagingmumbai_Bytes
  reconciledTransactionHash_gte: stagingmumbai_Bytes
  reconciledTransactionHash_lte: stagingmumbai_Bytes
  reconciledTransactionHash_in: [stagingmumbai_Bytes!]
  reconciledTransactionHash_not_in: [stagingmumbai_Bytes!]
  reconciledTransactionHash_contains: stagingmumbai_Bytes
  reconciledTransactionHash_not_contains: stagingmumbai_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: stagingmumbai_Bytes
  reconciledTxOrigin_not: stagingmumbai_Bytes
  reconciledTxOrigin_gt: stagingmumbai_Bytes
  reconciledTxOrigin_lt: stagingmumbai_Bytes
  reconciledTxOrigin_gte: stagingmumbai_Bytes
  reconciledTxOrigin_lte: stagingmumbai_Bytes
  reconciledTxOrigin_in: [stagingmumbai_Bytes!]
  reconciledTxOrigin_not_in: [stagingmumbai_Bytes!]
  reconciledTxOrigin_contains: stagingmumbai_Bytes
  reconciledTxOrigin_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type stagingmumbai_OriginMessage {
  id: ID!
  transferId: stagingmumbai_Bytes
  destinationDomain: BigInt
  leaf: stagingmumbai_Bytes
  index: BigInt
  message: stagingmumbai_Bytes
  root: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  blockNumber: BigInt
  rootCount: stagingmumbai_RootCount
}

input stagingmumbai_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_gt: stagingmumbai_Bytes
  transferId_lt: stagingmumbai_Bytes
  transferId_gte: stagingmumbai_Bytes
  transferId_lte: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: stagingmumbai_Bytes
  leaf_not: stagingmumbai_Bytes
  leaf_gt: stagingmumbai_Bytes
  leaf_lt: stagingmumbai_Bytes
  leaf_gte: stagingmumbai_Bytes
  leaf_lte: stagingmumbai_Bytes
  leaf_in: [stagingmumbai_Bytes!]
  leaf_not_in: [stagingmumbai_Bytes!]
  leaf_contains: stagingmumbai_Bytes
  leaf_not_contains: stagingmumbai_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: stagingmumbai_Bytes
  message_not: stagingmumbai_Bytes
  message_gt: stagingmumbai_Bytes
  message_lt: stagingmumbai_Bytes
  message_gte: stagingmumbai_Bytes
  message_lte: stagingmumbai_Bytes
  message_in: [stagingmumbai_Bytes!]
  message_not_in: [stagingmumbai_Bytes!]
  message_contains: stagingmumbai_Bytes
  message_not_contains: stagingmumbai_Bytes
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_gt: stagingmumbai_Bytes
  root_lt: stagingmumbai_Bytes
  root_gte: stagingmumbai_Bytes
  root_lte: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_gt: stagingmumbai_Bytes
  transactionHash_lt: stagingmumbai_Bytes
  transactionHash_gte: stagingmumbai_Bytes
  transactionHash_lte: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: stagingmumbai_RootCount_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type stagingmumbai_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingmumbai_Bytes
  nonce: BigInt
  status: stagingmumbai_TransferStatus
  messageHash: stagingmumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingmumbai_Bytes
  delegate: stagingmumbai_Bytes
  receiveLocal: Boolean
  callData: stagingmumbai_Bytes
  slippage: BigInt
  originSender: stagingmumbai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingmumbai_Bytes
  asset: stagingmumbai_Asset
  message: stagingmumbai_OriginMessage
  relayerFee: BigInt
  bumpRelayerFeeCount: BigInt
  caller: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: stagingmumbai_Bytes
}

input stagingmumbai_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_gt: stagingmumbai_Bytes
  transferId_lt: stagingmumbai_Bytes
  transferId_gte: stagingmumbai_Bytes
  transferId_lte: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingmumbai_TransferStatus
  status_not: stagingmumbai_TransferStatus
  status_in: [stagingmumbai_TransferStatus!]
  status_not_in: [stagingmumbai_TransferStatus!]
  messageHash: stagingmumbai_Bytes
  messageHash_not: stagingmumbai_Bytes
  messageHash_gt: stagingmumbai_Bytes
  messageHash_lt: stagingmumbai_Bytes
  messageHash_gte: stagingmumbai_Bytes
  messageHash_lte: stagingmumbai_Bytes
  messageHash_in: [stagingmumbai_Bytes!]
  messageHash_not_in: [stagingmumbai_Bytes!]
  messageHash_contains: stagingmumbai_Bytes
  messageHash_not_contains: stagingmumbai_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingmumbai_Bytes
  to_not: stagingmumbai_Bytes
  to_gt: stagingmumbai_Bytes
  to_lt: stagingmumbai_Bytes
  to_gte: stagingmumbai_Bytes
  to_lte: stagingmumbai_Bytes
  to_in: [stagingmumbai_Bytes!]
  to_not_in: [stagingmumbai_Bytes!]
  to_contains: stagingmumbai_Bytes
  to_not_contains: stagingmumbai_Bytes
  delegate: stagingmumbai_Bytes
  delegate_not: stagingmumbai_Bytes
  delegate_gt: stagingmumbai_Bytes
  delegate_lt: stagingmumbai_Bytes
  delegate_gte: stagingmumbai_Bytes
  delegate_lte: stagingmumbai_Bytes
  delegate_in: [stagingmumbai_Bytes!]
  delegate_not_in: [stagingmumbai_Bytes!]
  delegate_contains: stagingmumbai_Bytes
  delegate_not_contains: stagingmumbai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingmumbai_Bytes
  callData_not: stagingmumbai_Bytes
  callData_gt: stagingmumbai_Bytes
  callData_lt: stagingmumbai_Bytes
  callData_gte: stagingmumbai_Bytes
  callData_lte: stagingmumbai_Bytes
  callData_in: [stagingmumbai_Bytes!]
  callData_not_in: [stagingmumbai_Bytes!]
  callData_contains: stagingmumbai_Bytes
  callData_not_contains: stagingmumbai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: stagingmumbai_Bytes
  originSender_not: stagingmumbai_Bytes
  originSender_gt: stagingmumbai_Bytes
  originSender_lt: stagingmumbai_Bytes
  originSender_gte: stagingmumbai_Bytes
  originSender_lte: stagingmumbai_Bytes
  originSender_in: [stagingmumbai_Bytes!]
  originSender_not_in: [stagingmumbai_Bytes!]
  originSender_contains: stagingmumbai_Bytes
  originSender_not_contains: stagingmumbai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_gt: stagingmumbai_Bytes
  canonicalId_lt: stagingmumbai_Bytes
  canonicalId_gte: stagingmumbai_Bytes
  canonicalId_lte: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingmumbai_Asset_filter
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: stagingmumbai_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_gt: stagingmumbai_Bytes
  caller_lt: stagingmumbai_Bytes
  caller_gte: stagingmumbai_Bytes
  caller_lte: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_gt: stagingmumbai_Bytes
  transactionHash_lt: stagingmumbai_Bytes
  transactionHash_gte: stagingmumbai_Bytes
  transactionHash_lte: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: stagingmumbai_Bytes
  txOrigin_not: stagingmumbai_Bytes
  txOrigin_gt: stagingmumbai_Bytes
  txOrigin_lt: stagingmumbai_Bytes
  txOrigin_gte: stagingmumbai_Bytes
  txOrigin_lte: stagingmumbai_Bytes
  txOrigin_in: [stagingmumbai_Bytes!]
  txOrigin_not_in: [stagingmumbai_Bytes!]
  txOrigin_contains: stagingmumbai_Bytes
  txOrigin_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  message
  relayerFee
  bumpRelayerFeeCount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type stagingmumbai_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingmumbai_Bytes
}

input stagingmumbai_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: stagingmumbai_Bytes
  relayer_not: stagingmumbai_Bytes
  relayer_gt: stagingmumbai_Bytes
  relayer_lt: stagingmumbai_Bytes
  relayer_gte: stagingmumbai_Bytes
  relayer_lte: stagingmumbai_Bytes
  relayer_in: [stagingmumbai_Bytes!]
  relayer_not_in: [stagingmumbai_Bytes!]
  relayer_contains: stagingmumbai_Bytes
  relayer_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Relayer_orderBy {
  id
  isActive
  relayer
}

type stagingmumbai_RootCount {
  id: ID!
  count: BigInt
}

input stagingmumbai_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_RootCount_orderBy {
  id
  count
}

type stagingmumbai_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: stagingmumbai_Bytes
  count: BigInt
  caller: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingmumbai_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_gt: stagingmumbai_Bytes
  root_lt: stagingmumbai_Bytes
  root_gte: stagingmumbai_Bytes
  root_lte: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_gt: stagingmumbai_Bytes
  caller_lt: stagingmumbai_Bytes
  caller_gte: stagingmumbai_Bytes
  caller_lte: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_gt: stagingmumbai_Bytes
  transactionHash_lt: stagingmumbai_Bytes
  transactionHash_gte: stagingmumbai_Bytes
  transactionHash_lte: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingmumbai_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingmumbai_Bytes
  recipient: stagingmumbai_Bytes
  proposedOwner: stagingmumbai_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_AssetBalance_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_AssetBalance_filter): [stagingmumbai_AssetBalance!]!
}

input stagingmumbai_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: stagingmumbai_Bytes
  owner_not: stagingmumbai_Bytes
  owner_gt: stagingmumbai_Bytes
  owner_lt: stagingmumbai_Bytes
  owner_gte: stagingmumbai_Bytes
  owner_lte: stagingmumbai_Bytes
  owner_in: [stagingmumbai_Bytes!]
  owner_not_in: [stagingmumbai_Bytes!]
  owner_contains: stagingmumbai_Bytes
  owner_not_contains: stagingmumbai_Bytes
  recipient: stagingmumbai_Bytes
  recipient_not: stagingmumbai_Bytes
  recipient_gt: stagingmumbai_Bytes
  recipient_lt: stagingmumbai_Bytes
  recipient_gte: stagingmumbai_Bytes
  recipient_lte: stagingmumbai_Bytes
  recipient_in: [stagingmumbai_Bytes!]
  recipient_not_in: [stagingmumbai_Bytes!]
  recipient_contains: stagingmumbai_Bytes
  recipient_not_contains: stagingmumbai_Bytes
  proposedOwner: stagingmumbai_Bytes
  proposedOwner_not: stagingmumbai_Bytes
  proposedOwner_gt: stagingmumbai_Bytes
  proposedOwner_lt: stagingmumbai_Bytes
  proposedOwner_gte: stagingmumbai_Bytes
  proposedOwner_lte: stagingmumbai_Bytes
  proposedOwner_in: [stagingmumbai_Bytes!]
  proposedOwner_not_in: [stagingmumbai_Bytes!]
  proposedOwner_contains: stagingmumbai_Bytes
  proposedOwner_not_contains: stagingmumbai_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: stagingmumbai_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type stagingmumbai_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: stagingmumbai_Bytes
}

input stagingmumbai_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: stagingmumbai_Bytes
  sequencer_not: stagingmumbai_Bytes
  sequencer_gt: stagingmumbai_Bytes
  sequencer_lt: stagingmumbai_Bytes
  sequencer_gte: stagingmumbai_Bytes
  sequencer_lte: stagingmumbai_Bytes
  sequencer_in: [stagingmumbai_Bytes!]
  sequencer_not_in: [stagingmumbai_Bytes!]
  sequencer_contains: stagingmumbai_Bytes
  sequencer_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type stagingmumbai_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingmumbai_Bytes!
}

input stagingmumbai_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_gt: stagingmumbai_Bytes
  caller_lt: stagingmumbai_Bytes
  caller_gte: stagingmumbai_Bytes
  caller_lte: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

enum stagingmumbai_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type stagingarbitrumgoerli_AggregateRoot {
  id: ID!
  root: stagingarbitrumgoerli_Bytes!
  blockNumber: BigInt!
}

input stagingarbitrumgoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: stagingarbitrumgoerli_Bytes
  root_not: stagingarbitrumgoerli_Bytes
  root_gt: stagingarbitrumgoerli_Bytes
  root_lt: stagingarbitrumgoerli_Bytes
  root_gte: stagingarbitrumgoerli_Bytes
  root_lte: stagingarbitrumgoerli_Bytes
  root_in: [stagingarbitrumgoerli_Bytes!]
  root_not_in: [stagingarbitrumgoerli_Bytes!]
  root_contains: stagingarbitrumgoerli_Bytes
  root_not_contains: stagingarbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type stagingarbitrumgoerli_Asset {
  id: ID!
  key: stagingarbitrumgoerli_Bytes
  canonicalId: stagingarbitrumgoerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: stagingarbitrumgoerli_Bytes
  localAsset: stagingarbitrumgoerli_Bytes
  blockNumber: BigInt
  status: stagingarbitrumgoerli_AssetStatus
}

type stagingarbitrumgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingarbitrumgoerli_Router!
  asset: stagingarbitrumgoerli_Asset!
  feesEarned: BigInt!
}

input stagingarbitrumgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: stagingarbitrumgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingarbitrumgoerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

type stagingarbitrumgoerli_AssetStatus {
  id: ID!
  status: Boolean
}

input stagingarbitrumgoerli_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_AssetStatus_orderBy {
  id
  status
}

input stagingarbitrumgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: stagingarbitrumgoerli_Bytes
  key_not: stagingarbitrumgoerli_Bytes
  key_gt: stagingarbitrumgoerli_Bytes
  key_lt: stagingarbitrumgoerli_Bytes
  key_gte: stagingarbitrumgoerli_Bytes
  key_lte: stagingarbitrumgoerli_Bytes
  key_in: [stagingarbitrumgoerli_Bytes!]
  key_not_in: [stagingarbitrumgoerli_Bytes!]
  key_contains: stagingarbitrumgoerli_Bytes
  key_not_contains: stagingarbitrumgoerli_Bytes
  canonicalId: stagingarbitrumgoerli_Bytes
  canonicalId_not: stagingarbitrumgoerli_Bytes
  canonicalId_gt: stagingarbitrumgoerli_Bytes
  canonicalId_lt: stagingarbitrumgoerli_Bytes
  canonicalId_gte: stagingarbitrumgoerli_Bytes
  canonicalId_lte: stagingarbitrumgoerli_Bytes
  canonicalId_in: [stagingarbitrumgoerli_Bytes!]
  canonicalId_not_in: [stagingarbitrumgoerli_Bytes!]
  canonicalId_contains: stagingarbitrumgoerli_Bytes
  canonicalId_not_contains: stagingarbitrumgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: stagingarbitrumgoerli_Bytes
  adoptedAsset_not: stagingarbitrumgoerli_Bytes
  adoptedAsset_gt: stagingarbitrumgoerli_Bytes
  adoptedAsset_lt: stagingarbitrumgoerli_Bytes
  adoptedAsset_gte: stagingarbitrumgoerli_Bytes
  adoptedAsset_lte: stagingarbitrumgoerli_Bytes
  adoptedAsset_in: [stagingarbitrumgoerli_Bytes!]
  adoptedAsset_not_in: [stagingarbitrumgoerli_Bytes!]
  adoptedAsset_contains: stagingarbitrumgoerli_Bytes
  adoptedAsset_not_contains: stagingarbitrumgoerli_Bytes
  localAsset: stagingarbitrumgoerli_Bytes
  localAsset_not: stagingarbitrumgoerli_Bytes
  localAsset_gt: stagingarbitrumgoerli_Bytes
  localAsset_lt: stagingarbitrumgoerli_Bytes
  localAsset_gte: stagingarbitrumgoerli_Bytes
  localAsset_lte: stagingarbitrumgoerli_Bytes
  localAsset_in: [stagingarbitrumgoerli_Bytes!]
  localAsset_not_in: [stagingarbitrumgoerli_Bytes!]
  localAsset_contains: stagingarbitrumgoerli_Bytes
  localAsset_not_contains: stagingarbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: stagingarbitrumgoerli_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
}

type stagingarbitrumgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: stagingarbitrumgoerli_Bytes
  rootManager: stagingarbitrumgoerli_Bytes
  mirrorConnector: stagingarbitrumgoerli_Bytes
}

input stagingarbitrumgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingarbitrumgoerli_Bytes
  amb_not: stagingarbitrumgoerli_Bytes
  amb_gt: stagingarbitrumgoerli_Bytes
  amb_lt: stagingarbitrumgoerli_Bytes
  amb_gte: stagingarbitrumgoerli_Bytes
  amb_lte: stagingarbitrumgoerli_Bytes
  amb_in: [stagingarbitrumgoerli_Bytes!]
  amb_not_in: [stagingarbitrumgoerli_Bytes!]
  amb_contains: stagingarbitrumgoerli_Bytes
  amb_not_contains: stagingarbitrumgoerli_Bytes
  rootManager: stagingarbitrumgoerli_Bytes
  rootManager_not: stagingarbitrumgoerli_Bytes
  rootManager_gt: stagingarbitrumgoerli_Bytes
  rootManager_lt: stagingarbitrumgoerli_Bytes
  rootManager_gte: stagingarbitrumgoerli_Bytes
  rootManager_lte: stagingarbitrumgoerli_Bytes
  rootManager_in: [stagingarbitrumgoerli_Bytes!]
  rootManager_not_in: [stagingarbitrumgoerli_Bytes!]
  rootManager_contains: stagingarbitrumgoerli_Bytes
  rootManager_not_contains: stagingarbitrumgoerli_Bytes
  mirrorConnector: stagingarbitrumgoerli_Bytes
  mirrorConnector_not: stagingarbitrumgoerli_Bytes
  mirrorConnector_gt: stagingarbitrumgoerli_Bytes
  mirrorConnector_lt: stagingarbitrumgoerli_Bytes
  mirrorConnector_gte: stagingarbitrumgoerli_Bytes
  mirrorConnector_lte: stagingarbitrumgoerli_Bytes
  mirrorConnector_in: [stagingarbitrumgoerli_Bytes!]
  mirrorConnector_not_in: [stagingarbitrumgoerli_Bytes!]
  mirrorConnector_contains: stagingarbitrumgoerli_Bytes
  mirrorConnector_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingarbitrumgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingarbitrumgoerli_Bytes
  nonce: BigInt
  status: stagingarbitrumgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingarbitrumgoerli_Router_orderBy, orderDirection: stagingarbitrumgoerli_OrderDirection, where: stagingarbitrumgoerli_Router_filter): [stagingarbitrumgoerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingarbitrumgoerli_Bytes
  delegate: stagingarbitrumgoerli_Bytes
  receiveLocal: Boolean
  callData: stagingarbitrumgoerli_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: stagingarbitrumgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingarbitrumgoerli_Bytes
  asset: stagingarbitrumgoerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: stagingarbitrumgoerli_Bytes
  executedTransactionHash: stagingarbitrumgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: stagingarbitrumgoerli_Bytes
  reconciledCaller: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash: stagingarbitrumgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: stagingarbitrumgoerli_Bytes
}

input stagingarbitrumgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingarbitrumgoerli_Bytes
  transferId_not: stagingarbitrumgoerli_Bytes
  transferId_gt: stagingarbitrumgoerli_Bytes
  transferId_lt: stagingarbitrumgoerli_Bytes
  transferId_gte: stagingarbitrumgoerli_Bytes
  transferId_lte: stagingarbitrumgoerli_Bytes
  transferId_in: [stagingarbitrumgoerli_Bytes!]
  transferId_not_in: [stagingarbitrumgoerli_Bytes!]
  transferId_contains: stagingarbitrumgoerli_Bytes
  transferId_not_contains: stagingarbitrumgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingarbitrumgoerli_TransferStatus
  status_not: stagingarbitrumgoerli_TransferStatus
  status_in: [stagingarbitrumgoerli_TransferStatus!]
  status_not_in: [stagingarbitrumgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: stagingarbitrumgoerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingarbitrumgoerli_Bytes
  to_not: stagingarbitrumgoerli_Bytes
  to_gt: stagingarbitrumgoerli_Bytes
  to_lt: stagingarbitrumgoerli_Bytes
  to_gte: stagingarbitrumgoerli_Bytes
  to_lte: stagingarbitrumgoerli_Bytes
  to_in: [stagingarbitrumgoerli_Bytes!]
  to_not_in: [stagingarbitrumgoerli_Bytes!]
  to_contains: stagingarbitrumgoerli_Bytes
  to_not_contains: stagingarbitrumgoerli_Bytes
  delegate: stagingarbitrumgoerli_Bytes
  delegate_not: stagingarbitrumgoerli_Bytes
  delegate_gt: stagingarbitrumgoerli_Bytes
  delegate_lt: stagingarbitrumgoerli_Bytes
  delegate_gte: stagingarbitrumgoerli_Bytes
  delegate_lte: stagingarbitrumgoerli_Bytes
  delegate_in: [stagingarbitrumgoerli_Bytes!]
  delegate_not_in: [stagingarbitrumgoerli_Bytes!]
  delegate_contains: stagingarbitrumgoerli_Bytes
  delegate_not_contains: stagingarbitrumgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingarbitrumgoerli_Bytes
  callData_not: stagingarbitrumgoerli_Bytes
  callData_gt: stagingarbitrumgoerli_Bytes
  callData_lt: stagingarbitrumgoerli_Bytes
  callData_gte: stagingarbitrumgoerli_Bytes
  callData_lte: stagingarbitrumgoerli_Bytes
  callData_in: [stagingarbitrumgoerli_Bytes!]
  callData_not_in: [stagingarbitrumgoerli_Bytes!]
  callData_contains: stagingarbitrumgoerli_Bytes
  callData_not_contains: stagingarbitrumgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: stagingarbitrumgoerli_Bytes
  originSender_not: stagingarbitrumgoerli_Bytes
  originSender_gt: stagingarbitrumgoerli_Bytes
  originSender_lt: stagingarbitrumgoerli_Bytes
  originSender_gte: stagingarbitrumgoerli_Bytes
  originSender_lte: stagingarbitrumgoerli_Bytes
  originSender_in: [stagingarbitrumgoerli_Bytes!]
  originSender_not_in: [stagingarbitrumgoerli_Bytes!]
  originSender_contains: stagingarbitrumgoerli_Bytes
  originSender_not_contains: stagingarbitrumgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingarbitrumgoerli_Bytes
  canonicalId_not: stagingarbitrumgoerli_Bytes
  canonicalId_gt: stagingarbitrumgoerli_Bytes
  canonicalId_lt: stagingarbitrumgoerli_Bytes
  canonicalId_gte: stagingarbitrumgoerli_Bytes
  canonicalId_lte: stagingarbitrumgoerli_Bytes
  canonicalId_in: [stagingarbitrumgoerli_Bytes!]
  canonicalId_not_in: [stagingarbitrumgoerli_Bytes!]
  canonicalId_contains: stagingarbitrumgoerli_Bytes
  canonicalId_not_contains: stagingarbitrumgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingarbitrumgoerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: stagingarbitrumgoerli_Bytes
  executedCaller_not: stagingarbitrumgoerli_Bytes
  executedCaller_gt: stagingarbitrumgoerli_Bytes
  executedCaller_lt: stagingarbitrumgoerli_Bytes
  executedCaller_gte: stagingarbitrumgoerli_Bytes
  executedCaller_lte: stagingarbitrumgoerli_Bytes
  executedCaller_in: [stagingarbitrumgoerli_Bytes!]
  executedCaller_not_in: [stagingarbitrumgoerli_Bytes!]
  executedCaller_contains: stagingarbitrumgoerli_Bytes
  executedCaller_not_contains: stagingarbitrumgoerli_Bytes
  executedTransactionHash: stagingarbitrumgoerli_Bytes
  executedTransactionHash_not: stagingarbitrumgoerli_Bytes
  executedTransactionHash_gt: stagingarbitrumgoerli_Bytes
  executedTransactionHash_lt: stagingarbitrumgoerli_Bytes
  executedTransactionHash_gte: stagingarbitrumgoerli_Bytes
  executedTransactionHash_lte: stagingarbitrumgoerli_Bytes
  executedTransactionHash_in: [stagingarbitrumgoerli_Bytes!]
  executedTransactionHash_not_in: [stagingarbitrumgoerli_Bytes!]
  executedTransactionHash_contains: stagingarbitrumgoerli_Bytes
  executedTransactionHash_not_contains: stagingarbitrumgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: stagingarbitrumgoerli_Bytes
  executedTxOrigin_not: stagingarbitrumgoerli_Bytes
  executedTxOrigin_gt: stagingarbitrumgoerli_Bytes
  executedTxOrigin_lt: stagingarbitrumgoerli_Bytes
  executedTxOrigin_gte: stagingarbitrumgoerli_Bytes
  executedTxOrigin_lte: stagingarbitrumgoerli_Bytes
  executedTxOrigin_in: [stagingarbitrumgoerli_Bytes!]
  executedTxOrigin_not_in: [stagingarbitrumgoerli_Bytes!]
  executedTxOrigin_contains: stagingarbitrumgoerli_Bytes
  executedTxOrigin_not_contains: stagingarbitrumgoerli_Bytes
  reconciledCaller: stagingarbitrumgoerli_Bytes
  reconciledCaller_not: stagingarbitrumgoerli_Bytes
  reconciledCaller_gt: stagingarbitrumgoerli_Bytes
  reconciledCaller_lt: stagingarbitrumgoerli_Bytes
  reconciledCaller_gte: stagingarbitrumgoerli_Bytes
  reconciledCaller_lte: stagingarbitrumgoerli_Bytes
  reconciledCaller_in: [stagingarbitrumgoerli_Bytes!]
  reconciledCaller_not_in: [stagingarbitrumgoerli_Bytes!]
  reconciledCaller_contains: stagingarbitrumgoerli_Bytes
  reconciledCaller_not_contains: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash_not: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash_gt: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash_lt: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash_gte: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash_lte: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash_in: [stagingarbitrumgoerli_Bytes!]
  reconciledTransactionHash_not_in: [stagingarbitrumgoerli_Bytes!]
  reconciledTransactionHash_contains: stagingarbitrumgoerli_Bytes
  reconciledTransactionHash_not_contains: stagingarbitrumgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: stagingarbitrumgoerli_Bytes
  reconciledTxOrigin_not: stagingarbitrumgoerli_Bytes
  reconciledTxOrigin_gt: stagingarbitrumgoerli_Bytes
  reconciledTxOrigin_lt: stagingarbitrumgoerli_Bytes
  reconciledTxOrigin_gte: stagingarbitrumgoerli_Bytes
  reconciledTxOrigin_lte: stagingarbitrumgoerli_Bytes
  reconciledTxOrigin_in: [stagingarbitrumgoerli_Bytes!]
  reconciledTxOrigin_not_in: [stagingarbitrumgoerli_Bytes!]
  reconciledTxOrigin_contains: stagingarbitrumgoerli_Bytes
  reconciledTxOrigin_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type stagingarbitrumgoerli_OriginMessage {
  id: ID!
  transferId: stagingarbitrumgoerli_Bytes
  destinationDomain: BigInt
  leaf: stagingarbitrumgoerli_Bytes
  index: BigInt
  message: stagingarbitrumgoerli_Bytes
  root: stagingarbitrumgoerli_Bytes
  transactionHash: stagingarbitrumgoerli_Bytes
  blockNumber: BigInt
  rootCount: stagingarbitrumgoerli_RootCount
}

input stagingarbitrumgoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: stagingarbitrumgoerli_Bytes
  transferId_not: stagingarbitrumgoerli_Bytes
  transferId_gt: stagingarbitrumgoerli_Bytes
  transferId_lt: stagingarbitrumgoerli_Bytes
  transferId_gte: stagingarbitrumgoerli_Bytes
  transferId_lte: stagingarbitrumgoerli_Bytes
  transferId_in: [stagingarbitrumgoerli_Bytes!]
  transferId_not_in: [stagingarbitrumgoerli_Bytes!]
  transferId_contains: stagingarbitrumgoerli_Bytes
  transferId_not_contains: stagingarbitrumgoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: stagingarbitrumgoerli_Bytes
  leaf_not: stagingarbitrumgoerli_Bytes
  leaf_gt: stagingarbitrumgoerli_Bytes
  leaf_lt: stagingarbitrumgoerli_Bytes
  leaf_gte: stagingarbitrumgoerli_Bytes
  leaf_lte: stagingarbitrumgoerli_Bytes
  leaf_in: [stagingarbitrumgoerli_Bytes!]
  leaf_not_in: [stagingarbitrumgoerli_Bytes!]
  leaf_contains: stagingarbitrumgoerli_Bytes
  leaf_not_contains: stagingarbitrumgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: stagingarbitrumgoerli_Bytes
  message_not: stagingarbitrumgoerli_Bytes
  message_gt: stagingarbitrumgoerli_Bytes
  message_lt: stagingarbitrumgoerli_Bytes
  message_gte: stagingarbitrumgoerli_Bytes
  message_lte: stagingarbitrumgoerli_Bytes
  message_in: [stagingarbitrumgoerli_Bytes!]
  message_not_in: [stagingarbitrumgoerli_Bytes!]
  message_contains: stagingarbitrumgoerli_Bytes
  message_not_contains: stagingarbitrumgoerli_Bytes
  root: stagingarbitrumgoerli_Bytes
  root_not: stagingarbitrumgoerli_Bytes
  root_gt: stagingarbitrumgoerli_Bytes
  root_lt: stagingarbitrumgoerli_Bytes
  root_gte: stagingarbitrumgoerli_Bytes
  root_lte: stagingarbitrumgoerli_Bytes
  root_in: [stagingarbitrumgoerli_Bytes!]
  root_not_in: [stagingarbitrumgoerli_Bytes!]
  root_contains: stagingarbitrumgoerli_Bytes
  root_not_contains: stagingarbitrumgoerli_Bytes
  transactionHash: stagingarbitrumgoerli_Bytes
  transactionHash_not: stagingarbitrumgoerli_Bytes
  transactionHash_gt: stagingarbitrumgoerli_Bytes
  transactionHash_lt: stagingarbitrumgoerli_Bytes
  transactionHash_gte: stagingarbitrumgoerli_Bytes
  transactionHash_lte: stagingarbitrumgoerli_Bytes
  transactionHash_in: [stagingarbitrumgoerli_Bytes!]
  transactionHash_not_in: [stagingarbitrumgoerli_Bytes!]
  transactionHash_contains: stagingarbitrumgoerli_Bytes
  transactionHash_not_contains: stagingarbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: stagingarbitrumgoerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type stagingarbitrumgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingarbitrumgoerli_Bytes
  nonce: BigInt
  status: stagingarbitrumgoerli_TransferStatus
  messageHash: stagingarbitrumgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: stagingarbitrumgoerli_Bytes
  delegate: stagingarbitrumgoerli_Bytes
  receiveLocal: Boolean
  callData: stagingarbitrumgoerli_Bytes
  slippage: BigInt
  originSender: stagingarbitrumgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: stagingarbitrumgoerli_Bytes
  asset: stagingarbitrumgoerli_Asset
  message: stagingarbitrumgoerli_OriginMessage
  relayerFee: BigInt
  bumpRelayerFeeCount: BigInt
  caller: stagingarbitrumgoerli_Bytes
  transactionHash: stagingarbitrumgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: stagingarbitrumgoerli_Bytes
}

input stagingarbitrumgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingarbitrumgoerli_Bytes
  transferId_not: stagingarbitrumgoerli_Bytes
  transferId_gt: stagingarbitrumgoerli_Bytes
  transferId_lt: stagingarbitrumgoerli_Bytes
  transferId_gte: stagingarbitrumgoerli_Bytes
  transferId_lte: stagingarbitrumgoerli_Bytes
  transferId_in: [stagingarbitrumgoerli_Bytes!]
  transferId_not_in: [stagingarbitrumgoerli_Bytes!]
  transferId_contains: stagingarbitrumgoerli_Bytes
  transferId_not_contains: stagingarbitrumgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: stagingarbitrumgoerli_TransferStatus
  status_not: stagingarbitrumgoerli_TransferStatus
  status_in: [stagingarbitrumgoerli_TransferStatus!]
  status_not_in: [stagingarbitrumgoerli_TransferStatus!]
  messageHash: stagingarbitrumgoerli_Bytes
  messageHash_not: stagingarbitrumgoerli_Bytes
  messageHash_gt: stagingarbitrumgoerli_Bytes
  messageHash_lt: stagingarbitrumgoerli_Bytes
  messageHash_gte: stagingarbitrumgoerli_Bytes
  messageHash_lte: stagingarbitrumgoerli_Bytes
  messageHash_in: [stagingarbitrumgoerli_Bytes!]
  messageHash_not_in: [stagingarbitrumgoerli_Bytes!]
  messageHash_contains: stagingarbitrumgoerli_Bytes
  messageHash_not_contains: stagingarbitrumgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: stagingarbitrumgoerli_Bytes
  to_not: stagingarbitrumgoerli_Bytes
  to_gt: stagingarbitrumgoerli_Bytes
  to_lt: stagingarbitrumgoerli_Bytes
  to_gte: stagingarbitrumgoerli_Bytes
  to_lte: stagingarbitrumgoerli_Bytes
  to_in: [stagingarbitrumgoerli_Bytes!]
  to_not_in: [stagingarbitrumgoerli_Bytes!]
  to_contains: stagingarbitrumgoerli_Bytes
  to_not_contains: stagingarbitrumgoerli_Bytes
  delegate: stagingarbitrumgoerli_Bytes
  delegate_not: stagingarbitrumgoerli_Bytes
  delegate_gt: stagingarbitrumgoerli_Bytes
  delegate_lt: stagingarbitrumgoerli_Bytes
  delegate_gte: stagingarbitrumgoerli_Bytes
  delegate_lte: stagingarbitrumgoerli_Bytes
  delegate_in: [stagingarbitrumgoerli_Bytes!]
  delegate_not_in: [stagingarbitrumgoerli_Bytes!]
  delegate_contains: stagingarbitrumgoerli_Bytes
  delegate_not_contains: stagingarbitrumgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: stagingarbitrumgoerli_Bytes
  callData_not: stagingarbitrumgoerli_Bytes
  callData_gt: stagingarbitrumgoerli_Bytes
  callData_lt: stagingarbitrumgoerli_Bytes
  callData_gte: stagingarbitrumgoerli_Bytes
  callData_lte: stagingarbitrumgoerli_Bytes
  callData_in: [stagingarbitrumgoerli_Bytes!]
  callData_not_in: [stagingarbitrumgoerli_Bytes!]
  callData_contains: stagingarbitrumgoerli_Bytes
  callData_not_contains: stagingarbitrumgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: stagingarbitrumgoerli_Bytes
  originSender_not: stagingarbitrumgoerli_Bytes
  originSender_gt: stagingarbitrumgoerli_Bytes
  originSender_lt: stagingarbitrumgoerli_Bytes
  originSender_gte: stagingarbitrumgoerli_Bytes
  originSender_lte: stagingarbitrumgoerli_Bytes
  originSender_in: [stagingarbitrumgoerli_Bytes!]
  originSender_not_in: [stagingarbitrumgoerli_Bytes!]
  originSender_contains: stagingarbitrumgoerli_Bytes
  originSender_not_contains: stagingarbitrumgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: stagingarbitrumgoerli_Bytes
  canonicalId_not: stagingarbitrumgoerli_Bytes
  canonicalId_gt: stagingarbitrumgoerli_Bytes
  canonicalId_lt: stagingarbitrumgoerli_Bytes
  canonicalId_gte: stagingarbitrumgoerli_Bytes
  canonicalId_lte: stagingarbitrumgoerli_Bytes
  canonicalId_in: [stagingarbitrumgoerli_Bytes!]
  canonicalId_not_in: [stagingarbitrumgoerli_Bytes!]
  canonicalId_contains: stagingarbitrumgoerli_Bytes
  canonicalId_not_contains: stagingarbitrumgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: stagingarbitrumgoerli_Asset_filter
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: stagingarbitrumgoerli_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  caller: stagingarbitrumgoerli_Bytes
  caller_not: stagingarbitrumgoerli_Bytes
  caller_gt: stagingarbitrumgoerli_Bytes
  caller_lt: stagingarbitrumgoerli_Bytes
  caller_gte: stagingarbitrumgoerli_Bytes
  caller_lte: stagingarbitrumgoerli_Bytes
  caller_in: [stagingarbitrumgoerli_Bytes!]
  caller_not_in: [stagingarbitrumgoerli_Bytes!]
  caller_contains: stagingarbitrumgoerli_Bytes
  caller_not_contains: stagingarbitrumgoerli_Bytes
  transactionHash: stagingarbitrumgoerli_Bytes
  transactionHash_not: stagingarbitrumgoerli_Bytes
  transactionHash_gt: stagingarbitrumgoerli_Bytes
  transactionHash_lt: stagingarbitrumgoerli_Bytes
  transactionHash_gte: stagingarbitrumgoerli_Bytes
  transactionHash_lte: stagingarbitrumgoerli_Bytes
  transactionHash_in: [stagingarbitrumgoerli_Bytes!]
  transactionHash_not_in: [stagingarbitrumgoerli_Bytes!]
  transactionHash_contains: stagingarbitrumgoerli_Bytes
  transactionHash_not_contains: stagingarbitrumgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: stagingarbitrumgoerli_Bytes
  txOrigin_not: stagingarbitrumgoerli_Bytes
  txOrigin_gt: stagingarbitrumgoerli_Bytes
  txOrigin_lt: stagingarbitrumgoerli_Bytes
  txOrigin_gte: stagingarbitrumgoerli_Bytes
  txOrigin_lte: stagingarbitrumgoerli_Bytes
  txOrigin_in: [stagingarbitrumgoerli_Bytes!]
  txOrigin_not_in: [stagingarbitrumgoerli_Bytes!]
  txOrigin_contains: stagingarbitrumgoerli_Bytes
  txOrigin_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  message
  relayerFee
  bumpRelayerFeeCount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type stagingarbitrumgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingarbitrumgoerli_Bytes
}

input stagingarbitrumgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: stagingarbitrumgoerli_Bytes
  relayer_not: stagingarbitrumgoerli_Bytes
  relayer_gt: stagingarbitrumgoerli_Bytes
  relayer_lt: stagingarbitrumgoerli_Bytes
  relayer_gte: stagingarbitrumgoerli_Bytes
  relayer_lte: stagingarbitrumgoerli_Bytes
  relayer_in: [stagingarbitrumgoerli_Bytes!]
  relayer_not_in: [stagingarbitrumgoerli_Bytes!]
  relayer_contains: stagingarbitrumgoerli_Bytes
  relayer_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type stagingarbitrumgoerli_RootCount {
  id: ID!
  count: BigInt
}

input stagingarbitrumgoerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_RootCount_orderBy {
  id
  count
}

type stagingarbitrumgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: stagingarbitrumgoerli_Bytes
  count: BigInt
  caller: stagingarbitrumgoerli_Bytes
  transactionHash: stagingarbitrumgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingarbitrumgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: stagingarbitrumgoerli_Bytes
  root_not: stagingarbitrumgoerli_Bytes
  root_gt: stagingarbitrumgoerli_Bytes
  root_lt: stagingarbitrumgoerli_Bytes
  root_gte: stagingarbitrumgoerli_Bytes
  root_lte: stagingarbitrumgoerli_Bytes
  root_in: [stagingarbitrumgoerli_Bytes!]
  root_not_in: [stagingarbitrumgoerli_Bytes!]
  root_contains: stagingarbitrumgoerli_Bytes
  root_not_contains: stagingarbitrumgoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: stagingarbitrumgoerli_Bytes
  caller_not: stagingarbitrumgoerli_Bytes
  caller_gt: stagingarbitrumgoerli_Bytes
  caller_lt: stagingarbitrumgoerli_Bytes
  caller_gte: stagingarbitrumgoerli_Bytes
  caller_lte: stagingarbitrumgoerli_Bytes
  caller_in: [stagingarbitrumgoerli_Bytes!]
  caller_not_in: [stagingarbitrumgoerli_Bytes!]
  caller_contains: stagingarbitrumgoerli_Bytes
  caller_not_contains: stagingarbitrumgoerli_Bytes
  transactionHash: stagingarbitrumgoerli_Bytes
  transactionHash_not: stagingarbitrumgoerli_Bytes
  transactionHash_gt: stagingarbitrumgoerli_Bytes
  transactionHash_lt: stagingarbitrumgoerli_Bytes
  transactionHash_gte: stagingarbitrumgoerli_Bytes
  transactionHash_lte: stagingarbitrumgoerli_Bytes
  transactionHash_in: [stagingarbitrumgoerli_Bytes!]
  transactionHash_not_in: [stagingarbitrumgoerli_Bytes!]
  transactionHash_contains: stagingarbitrumgoerli_Bytes
  transactionHash_not_contains: stagingarbitrumgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingarbitrumgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingarbitrumgoerli_Bytes
  recipient: stagingarbitrumgoerli_Bytes
  proposedOwner: stagingarbitrumgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingarbitrumgoerli_AssetBalance_orderBy, orderDirection: stagingarbitrumgoerli_OrderDirection, where: stagingarbitrumgoerli_AssetBalance_filter): [stagingarbitrumgoerli_AssetBalance!]!
}

input stagingarbitrumgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: stagingarbitrumgoerli_Bytes
  owner_not: stagingarbitrumgoerli_Bytes
  owner_gt: stagingarbitrumgoerli_Bytes
  owner_lt: stagingarbitrumgoerli_Bytes
  owner_gte: stagingarbitrumgoerli_Bytes
  owner_lte: stagingarbitrumgoerli_Bytes
  owner_in: [stagingarbitrumgoerli_Bytes!]
  owner_not_in: [stagingarbitrumgoerli_Bytes!]
  owner_contains: stagingarbitrumgoerli_Bytes
  owner_not_contains: stagingarbitrumgoerli_Bytes
  recipient: stagingarbitrumgoerli_Bytes
  recipient_not: stagingarbitrumgoerli_Bytes
  recipient_gt: stagingarbitrumgoerli_Bytes
  recipient_lt: stagingarbitrumgoerli_Bytes
  recipient_gte: stagingarbitrumgoerli_Bytes
  recipient_lte: stagingarbitrumgoerli_Bytes
  recipient_in: [stagingarbitrumgoerli_Bytes!]
  recipient_not_in: [stagingarbitrumgoerli_Bytes!]
  recipient_contains: stagingarbitrumgoerli_Bytes
  recipient_not_contains: stagingarbitrumgoerli_Bytes
  proposedOwner: stagingarbitrumgoerli_Bytes
  proposedOwner_not: stagingarbitrumgoerli_Bytes
  proposedOwner_gt: stagingarbitrumgoerli_Bytes
  proposedOwner_lt: stagingarbitrumgoerli_Bytes
  proposedOwner_gte: stagingarbitrumgoerli_Bytes
  proposedOwner_lte: stagingarbitrumgoerli_Bytes
  proposedOwner_in: [stagingarbitrumgoerli_Bytes!]
  proposedOwner_not_in: [stagingarbitrumgoerli_Bytes!]
  proposedOwner_contains: stagingarbitrumgoerli_Bytes
  proposedOwner_not_contains: stagingarbitrumgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: stagingarbitrumgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type stagingarbitrumgoerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: stagingarbitrumgoerli_Bytes
}

input stagingarbitrumgoerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: stagingarbitrumgoerli_Bytes
  sequencer_not: stagingarbitrumgoerli_Bytes
  sequencer_gt: stagingarbitrumgoerli_Bytes
  sequencer_lt: stagingarbitrumgoerli_Bytes
  sequencer_gte: stagingarbitrumgoerli_Bytes
  sequencer_lte: stagingarbitrumgoerli_Bytes
  sequencer_in: [stagingarbitrumgoerli_Bytes!]
  sequencer_not_in: [stagingarbitrumgoerli_Bytes!]
  sequencer_contains: stagingarbitrumgoerli_Bytes
  sequencer_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type stagingarbitrumgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingarbitrumgoerli_Bytes!
}

input stagingarbitrumgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: stagingarbitrumgoerli_Bytes
  caller_not: stagingarbitrumgoerli_Bytes
  caller_gt: stagingarbitrumgoerli_Bytes
  caller_lt: stagingarbitrumgoerli_Bytes
  caller_gte: stagingarbitrumgoerli_Bytes
  caller_lte: stagingarbitrumgoerli_Bytes
  caller_in: [stagingarbitrumgoerli_Bytes!]
  caller_not_in: [stagingarbitrumgoerli_Bytes!]
  caller_contains: stagingarbitrumgoerli_Bytes
  caller_not_contains: stagingarbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingarbitrumgoerli_BlockChangedFilter
}

enum stagingarbitrumgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

enum stagingarbitrumgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type arbitrumone_AggregateRoot {
  id: ID!
  root: arbitrumone_Bytes!
  blockNumber: BigInt!
}

input arbitrumone_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: arbitrumone_Bytes
  root_not: arbitrumone_Bytes
  root_gt: arbitrumone_Bytes
  root_lt: arbitrumone_Bytes
  root_gte: arbitrumone_Bytes
  root_lte: arbitrumone_Bytes
  root_in: [arbitrumone_Bytes!]
  root_not_in: [arbitrumone_Bytes!]
  root_contains: arbitrumone_Bytes
  root_not_contains: arbitrumone_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type arbitrumone_Asset {
  id: ID!
  key: arbitrumone_Bytes
  canonicalId: arbitrumone_Bytes
  canonicalDomain: BigInt
  adoptedAsset: arbitrumone_Bytes
  localAsset: arbitrumone_Bytes
  blockNumber: BigInt
}

type arbitrumone_AssetBalance {
  id: ID!
  amount: BigInt!
  router: arbitrumone_Router!
  asset: arbitrumone_Asset!
  feesEarned: BigInt!
}

input arbitrumone_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: arbitrumone_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumone_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input arbitrumone_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: arbitrumone_Bytes
  key_not: arbitrumone_Bytes
  key_gt: arbitrumone_Bytes
  key_lt: arbitrumone_Bytes
  key_gte: arbitrumone_Bytes
  key_lte: arbitrumone_Bytes
  key_in: [arbitrumone_Bytes!]
  key_not_in: [arbitrumone_Bytes!]
  key_contains: arbitrumone_Bytes
  key_not_contains: arbitrumone_Bytes
  canonicalId: arbitrumone_Bytes
  canonicalId_not: arbitrumone_Bytes
  canonicalId_gt: arbitrumone_Bytes
  canonicalId_lt: arbitrumone_Bytes
  canonicalId_gte: arbitrumone_Bytes
  canonicalId_lte: arbitrumone_Bytes
  canonicalId_in: [arbitrumone_Bytes!]
  canonicalId_not_in: [arbitrumone_Bytes!]
  canonicalId_contains: arbitrumone_Bytes
  canonicalId_not_contains: arbitrumone_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: arbitrumone_Bytes
  adoptedAsset_not: arbitrumone_Bytes
  adoptedAsset_gt: arbitrumone_Bytes
  adoptedAsset_lt: arbitrumone_Bytes
  adoptedAsset_gte: arbitrumone_Bytes
  adoptedAsset_lte: arbitrumone_Bytes
  adoptedAsset_in: [arbitrumone_Bytes!]
  adoptedAsset_not_in: [arbitrumone_Bytes!]
  adoptedAsset_contains: arbitrumone_Bytes
  adoptedAsset_not_contains: arbitrumone_Bytes
  localAsset: arbitrumone_Bytes
  localAsset_not: arbitrumone_Bytes
  localAsset_gt: arbitrumone_Bytes
  localAsset_lt: arbitrumone_Bytes
  localAsset_gte: arbitrumone_Bytes
  localAsset_lte: arbitrumone_Bytes
  localAsset_in: [arbitrumone_Bytes!]
  localAsset_not_in: [arbitrumone_Bytes!]
  localAsset_contains: arbitrumone_Bytes
  localAsset_not_contains: arbitrumone_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type arbitrumone_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: arbitrumone_Bytes
  rootManager: arbitrumone_Bytes
  mirrorConnector: arbitrumone_Bytes
}

input arbitrumone_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: arbitrumone_Bytes
  amb_not: arbitrumone_Bytes
  amb_gt: arbitrumone_Bytes
  amb_lt: arbitrumone_Bytes
  amb_gte: arbitrumone_Bytes
  amb_lte: arbitrumone_Bytes
  amb_in: [arbitrumone_Bytes!]
  amb_not_in: [arbitrumone_Bytes!]
  amb_contains: arbitrumone_Bytes
  amb_not_contains: arbitrumone_Bytes
  rootManager: arbitrumone_Bytes
  rootManager_not: arbitrumone_Bytes
  rootManager_gt: arbitrumone_Bytes
  rootManager_lt: arbitrumone_Bytes
  rootManager_gte: arbitrumone_Bytes
  rootManager_lte: arbitrumone_Bytes
  rootManager_in: [arbitrumone_Bytes!]
  rootManager_not_in: [arbitrumone_Bytes!]
  rootManager_contains: arbitrumone_Bytes
  rootManager_not_contains: arbitrumone_Bytes
  mirrorConnector: arbitrumone_Bytes
  mirrorConnector_not: arbitrumone_Bytes
  mirrorConnector_gt: arbitrumone_Bytes
  mirrorConnector_lt: arbitrumone_Bytes
  mirrorConnector_gte: arbitrumone_Bytes
  mirrorConnector_lte: arbitrumone_Bytes
  mirrorConnector_in: [arbitrumone_Bytes!]
  mirrorConnector_not_in: [arbitrumone_Bytes!]
  mirrorConnector_contains: arbitrumone_Bytes
  mirrorConnector_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type arbitrumone_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: arbitrumone_Bytes
  nonce: BigInt
  status: arbitrumone_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: arbitrumone_Router_orderBy, orderDirection: arbitrumone_OrderDirection, where: arbitrumone_Router_filter): [arbitrumone_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: arbitrumone_Bytes
  delegate: arbitrumone_Bytes
  receiveLocal: Boolean
  callData: arbitrumone_Bytes
  slippage: BigInt
  originSender: arbitrumone_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: arbitrumone_Bytes
  asset: arbitrumone_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: arbitrumone_Bytes
  executedTransactionHash: arbitrumone_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: arbitrumone_Bytes
  reconciledCaller: arbitrumone_Bytes
  reconciledTransactionHash: arbitrumone_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: arbitrumone_Bytes
}

input arbitrumone_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: arbitrumone_Bytes
  transferId_not: arbitrumone_Bytes
  transferId_gt: arbitrumone_Bytes
  transferId_lt: arbitrumone_Bytes
  transferId_gte: arbitrumone_Bytes
  transferId_lte: arbitrumone_Bytes
  transferId_in: [arbitrumone_Bytes!]
  transferId_not_in: [arbitrumone_Bytes!]
  transferId_contains: arbitrumone_Bytes
  transferId_not_contains: arbitrumone_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: arbitrumone_TransferStatus
  status_not: arbitrumone_TransferStatus
  status_in: [arbitrumone_TransferStatus!]
  status_not_in: [arbitrumone_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: arbitrumone_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: arbitrumone_Bytes
  to_not: arbitrumone_Bytes
  to_gt: arbitrumone_Bytes
  to_lt: arbitrumone_Bytes
  to_gte: arbitrumone_Bytes
  to_lte: arbitrumone_Bytes
  to_in: [arbitrumone_Bytes!]
  to_not_in: [arbitrumone_Bytes!]
  to_contains: arbitrumone_Bytes
  to_not_contains: arbitrumone_Bytes
  delegate: arbitrumone_Bytes
  delegate_not: arbitrumone_Bytes
  delegate_gt: arbitrumone_Bytes
  delegate_lt: arbitrumone_Bytes
  delegate_gte: arbitrumone_Bytes
  delegate_lte: arbitrumone_Bytes
  delegate_in: [arbitrumone_Bytes!]
  delegate_not_in: [arbitrumone_Bytes!]
  delegate_contains: arbitrumone_Bytes
  delegate_not_contains: arbitrumone_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: arbitrumone_Bytes
  callData_not: arbitrumone_Bytes
  callData_gt: arbitrumone_Bytes
  callData_lt: arbitrumone_Bytes
  callData_gte: arbitrumone_Bytes
  callData_lte: arbitrumone_Bytes
  callData_in: [arbitrumone_Bytes!]
  callData_not_in: [arbitrumone_Bytes!]
  callData_contains: arbitrumone_Bytes
  callData_not_contains: arbitrumone_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: arbitrumone_Bytes
  originSender_not: arbitrumone_Bytes
  originSender_gt: arbitrumone_Bytes
  originSender_lt: arbitrumone_Bytes
  originSender_gte: arbitrumone_Bytes
  originSender_lte: arbitrumone_Bytes
  originSender_in: [arbitrumone_Bytes!]
  originSender_not_in: [arbitrumone_Bytes!]
  originSender_contains: arbitrumone_Bytes
  originSender_not_contains: arbitrumone_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: arbitrumone_Bytes
  canonicalId_not: arbitrumone_Bytes
  canonicalId_gt: arbitrumone_Bytes
  canonicalId_lt: arbitrumone_Bytes
  canonicalId_gte: arbitrumone_Bytes
  canonicalId_lte: arbitrumone_Bytes
  canonicalId_in: [arbitrumone_Bytes!]
  canonicalId_not_in: [arbitrumone_Bytes!]
  canonicalId_contains: arbitrumone_Bytes
  canonicalId_not_contains: arbitrumone_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumone_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: arbitrumone_Bytes
  executedCaller_not: arbitrumone_Bytes
  executedCaller_gt: arbitrumone_Bytes
  executedCaller_lt: arbitrumone_Bytes
  executedCaller_gte: arbitrumone_Bytes
  executedCaller_lte: arbitrumone_Bytes
  executedCaller_in: [arbitrumone_Bytes!]
  executedCaller_not_in: [arbitrumone_Bytes!]
  executedCaller_contains: arbitrumone_Bytes
  executedCaller_not_contains: arbitrumone_Bytes
  executedTransactionHash: arbitrumone_Bytes
  executedTransactionHash_not: arbitrumone_Bytes
  executedTransactionHash_gt: arbitrumone_Bytes
  executedTransactionHash_lt: arbitrumone_Bytes
  executedTransactionHash_gte: arbitrumone_Bytes
  executedTransactionHash_lte: arbitrumone_Bytes
  executedTransactionHash_in: [arbitrumone_Bytes!]
  executedTransactionHash_not_in: [arbitrumone_Bytes!]
  executedTransactionHash_contains: arbitrumone_Bytes
  executedTransactionHash_not_contains: arbitrumone_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: arbitrumone_Bytes
  executedTxOrigin_not: arbitrumone_Bytes
  executedTxOrigin_gt: arbitrumone_Bytes
  executedTxOrigin_lt: arbitrumone_Bytes
  executedTxOrigin_gte: arbitrumone_Bytes
  executedTxOrigin_lte: arbitrumone_Bytes
  executedTxOrigin_in: [arbitrumone_Bytes!]
  executedTxOrigin_not_in: [arbitrumone_Bytes!]
  executedTxOrigin_contains: arbitrumone_Bytes
  executedTxOrigin_not_contains: arbitrumone_Bytes
  reconciledCaller: arbitrumone_Bytes
  reconciledCaller_not: arbitrumone_Bytes
  reconciledCaller_gt: arbitrumone_Bytes
  reconciledCaller_lt: arbitrumone_Bytes
  reconciledCaller_gte: arbitrumone_Bytes
  reconciledCaller_lte: arbitrumone_Bytes
  reconciledCaller_in: [arbitrumone_Bytes!]
  reconciledCaller_not_in: [arbitrumone_Bytes!]
  reconciledCaller_contains: arbitrumone_Bytes
  reconciledCaller_not_contains: arbitrumone_Bytes
  reconciledTransactionHash: arbitrumone_Bytes
  reconciledTransactionHash_not: arbitrumone_Bytes
  reconciledTransactionHash_gt: arbitrumone_Bytes
  reconciledTransactionHash_lt: arbitrumone_Bytes
  reconciledTransactionHash_gte: arbitrumone_Bytes
  reconciledTransactionHash_lte: arbitrumone_Bytes
  reconciledTransactionHash_in: [arbitrumone_Bytes!]
  reconciledTransactionHash_not_in: [arbitrumone_Bytes!]
  reconciledTransactionHash_contains: arbitrumone_Bytes
  reconciledTransactionHash_not_contains: arbitrumone_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: arbitrumone_Bytes
  reconciledTxOrigin_not: arbitrumone_Bytes
  reconciledTxOrigin_gt: arbitrumone_Bytes
  reconciledTxOrigin_lt: arbitrumone_Bytes
  reconciledTxOrigin_gte: arbitrumone_Bytes
  reconciledTxOrigin_lte: arbitrumone_Bytes
  reconciledTxOrigin_in: [arbitrumone_Bytes!]
  reconciledTxOrigin_not_in: [arbitrumone_Bytes!]
  reconciledTxOrigin_contains: arbitrumone_Bytes
  reconciledTxOrigin_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type arbitrumone_OriginMessage {
  id: ID!
  transferId: arbitrumone_Bytes
  destinationDomain: BigInt
  leaf: arbitrumone_Bytes
  index: BigInt
  message: arbitrumone_Bytes
  root: arbitrumone_Bytes
  transactionHash: arbitrumone_Bytes
  blockNumber: BigInt
  rootCount: arbitrumone_RootCount
}

input arbitrumone_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: arbitrumone_Bytes
  transferId_not: arbitrumone_Bytes
  transferId_gt: arbitrumone_Bytes
  transferId_lt: arbitrumone_Bytes
  transferId_gte: arbitrumone_Bytes
  transferId_lte: arbitrumone_Bytes
  transferId_in: [arbitrumone_Bytes!]
  transferId_not_in: [arbitrumone_Bytes!]
  transferId_contains: arbitrumone_Bytes
  transferId_not_contains: arbitrumone_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: arbitrumone_Bytes
  leaf_not: arbitrumone_Bytes
  leaf_gt: arbitrumone_Bytes
  leaf_lt: arbitrumone_Bytes
  leaf_gte: arbitrumone_Bytes
  leaf_lte: arbitrumone_Bytes
  leaf_in: [arbitrumone_Bytes!]
  leaf_not_in: [arbitrumone_Bytes!]
  leaf_contains: arbitrumone_Bytes
  leaf_not_contains: arbitrumone_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: arbitrumone_Bytes
  message_not: arbitrumone_Bytes
  message_gt: arbitrumone_Bytes
  message_lt: arbitrumone_Bytes
  message_gte: arbitrumone_Bytes
  message_lte: arbitrumone_Bytes
  message_in: [arbitrumone_Bytes!]
  message_not_in: [arbitrumone_Bytes!]
  message_contains: arbitrumone_Bytes
  message_not_contains: arbitrumone_Bytes
  root: arbitrumone_Bytes
  root_not: arbitrumone_Bytes
  root_gt: arbitrumone_Bytes
  root_lt: arbitrumone_Bytes
  root_gte: arbitrumone_Bytes
  root_lte: arbitrumone_Bytes
  root_in: [arbitrumone_Bytes!]
  root_not_in: [arbitrumone_Bytes!]
  root_contains: arbitrumone_Bytes
  root_not_contains: arbitrumone_Bytes
  transactionHash: arbitrumone_Bytes
  transactionHash_not: arbitrumone_Bytes
  transactionHash_gt: arbitrumone_Bytes
  transactionHash_lt: arbitrumone_Bytes
  transactionHash_gte: arbitrumone_Bytes
  transactionHash_lte: arbitrumone_Bytes
  transactionHash_in: [arbitrumone_Bytes!]
  transactionHash_not_in: [arbitrumone_Bytes!]
  transactionHash_contains: arbitrumone_Bytes
  transactionHash_not_contains: arbitrumone_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: arbitrumone_RootCount_filter
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type arbitrumone_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: arbitrumone_Bytes
  nonce: BigInt
  status: arbitrumone_TransferStatus
  messageHash: arbitrumone_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: arbitrumone_Bytes
  delegate: arbitrumone_Bytes
  receiveLocal: Boolean
  callData: arbitrumone_Bytes
  slippage: BigInt
  originSender: arbitrumone_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: arbitrumone_Bytes
  asset: arbitrumone_Asset
  transacting: arbitrumone_Bytes
  message: arbitrumone_OriginMessage
  relayerFee: BigInt
  caller: arbitrumone_Bytes
  transactionHash: arbitrumone_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: arbitrumone_Bytes
}

input arbitrumone_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: arbitrumone_Bytes
  transferId_not: arbitrumone_Bytes
  transferId_gt: arbitrumone_Bytes
  transferId_lt: arbitrumone_Bytes
  transferId_gte: arbitrumone_Bytes
  transferId_lte: arbitrumone_Bytes
  transferId_in: [arbitrumone_Bytes!]
  transferId_not_in: [arbitrumone_Bytes!]
  transferId_contains: arbitrumone_Bytes
  transferId_not_contains: arbitrumone_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: arbitrumone_TransferStatus
  status_not: arbitrumone_TransferStatus
  status_in: [arbitrumone_TransferStatus!]
  status_not_in: [arbitrumone_TransferStatus!]
  messageHash: arbitrumone_Bytes
  messageHash_not: arbitrumone_Bytes
  messageHash_gt: arbitrumone_Bytes
  messageHash_lt: arbitrumone_Bytes
  messageHash_gte: arbitrumone_Bytes
  messageHash_lte: arbitrumone_Bytes
  messageHash_in: [arbitrumone_Bytes!]
  messageHash_not_in: [arbitrumone_Bytes!]
  messageHash_contains: arbitrumone_Bytes
  messageHash_not_contains: arbitrumone_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: arbitrumone_Bytes
  to_not: arbitrumone_Bytes
  to_gt: arbitrumone_Bytes
  to_lt: arbitrumone_Bytes
  to_gte: arbitrumone_Bytes
  to_lte: arbitrumone_Bytes
  to_in: [arbitrumone_Bytes!]
  to_not_in: [arbitrumone_Bytes!]
  to_contains: arbitrumone_Bytes
  to_not_contains: arbitrumone_Bytes
  delegate: arbitrumone_Bytes
  delegate_not: arbitrumone_Bytes
  delegate_gt: arbitrumone_Bytes
  delegate_lt: arbitrumone_Bytes
  delegate_gte: arbitrumone_Bytes
  delegate_lte: arbitrumone_Bytes
  delegate_in: [arbitrumone_Bytes!]
  delegate_not_in: [arbitrumone_Bytes!]
  delegate_contains: arbitrumone_Bytes
  delegate_not_contains: arbitrumone_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: arbitrumone_Bytes
  callData_not: arbitrumone_Bytes
  callData_gt: arbitrumone_Bytes
  callData_lt: arbitrumone_Bytes
  callData_gte: arbitrumone_Bytes
  callData_lte: arbitrumone_Bytes
  callData_in: [arbitrumone_Bytes!]
  callData_not_in: [arbitrumone_Bytes!]
  callData_contains: arbitrumone_Bytes
  callData_not_contains: arbitrumone_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: arbitrumone_Bytes
  originSender_not: arbitrumone_Bytes
  originSender_gt: arbitrumone_Bytes
  originSender_lt: arbitrumone_Bytes
  originSender_gte: arbitrumone_Bytes
  originSender_lte: arbitrumone_Bytes
  originSender_in: [arbitrumone_Bytes!]
  originSender_not_in: [arbitrumone_Bytes!]
  originSender_contains: arbitrumone_Bytes
  originSender_not_contains: arbitrumone_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: arbitrumone_Bytes
  canonicalId_not: arbitrumone_Bytes
  canonicalId_gt: arbitrumone_Bytes
  canonicalId_lt: arbitrumone_Bytes
  canonicalId_gte: arbitrumone_Bytes
  canonicalId_lte: arbitrumone_Bytes
  canonicalId_in: [arbitrumone_Bytes!]
  canonicalId_not_in: [arbitrumone_Bytes!]
  canonicalId_contains: arbitrumone_Bytes
  canonicalId_not_contains: arbitrumone_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumone_Asset_filter
  transacting: arbitrumone_Bytes
  transacting_not: arbitrumone_Bytes
  transacting_gt: arbitrumone_Bytes
  transacting_lt: arbitrumone_Bytes
  transacting_gte: arbitrumone_Bytes
  transacting_lte: arbitrumone_Bytes
  transacting_in: [arbitrumone_Bytes!]
  transacting_not_in: [arbitrumone_Bytes!]
  transacting_contains: arbitrumone_Bytes
  transacting_not_contains: arbitrumone_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: arbitrumone_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: arbitrumone_Bytes
  caller_not: arbitrumone_Bytes
  caller_gt: arbitrumone_Bytes
  caller_lt: arbitrumone_Bytes
  caller_gte: arbitrumone_Bytes
  caller_lte: arbitrumone_Bytes
  caller_in: [arbitrumone_Bytes!]
  caller_not_in: [arbitrumone_Bytes!]
  caller_contains: arbitrumone_Bytes
  caller_not_contains: arbitrumone_Bytes
  transactionHash: arbitrumone_Bytes
  transactionHash_not: arbitrumone_Bytes
  transactionHash_gt: arbitrumone_Bytes
  transactionHash_lt: arbitrumone_Bytes
  transactionHash_gte: arbitrumone_Bytes
  transactionHash_lte: arbitrumone_Bytes
  transactionHash_in: [arbitrumone_Bytes!]
  transactionHash_not_in: [arbitrumone_Bytes!]
  transactionHash_contains: arbitrumone_Bytes
  transactionHash_not_contains: arbitrumone_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: arbitrumone_Bytes
  txOrigin_not: arbitrumone_Bytes
  txOrigin_gt: arbitrumone_Bytes
  txOrigin_lt: arbitrumone_Bytes
  txOrigin_gte: arbitrumone_Bytes
  txOrigin_lte: arbitrumone_Bytes
  txOrigin_in: [arbitrumone_Bytes!]
  txOrigin_not_in: [arbitrumone_Bytes!]
  txOrigin_contains: arbitrumone_Bytes
  txOrigin_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type arbitrumone_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: arbitrumone_Bytes
}

input arbitrumone_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: arbitrumone_Bytes
  relayer_not: arbitrumone_Bytes
  relayer_gt: arbitrumone_Bytes
  relayer_lt: arbitrumone_Bytes
  relayer_gte: arbitrumone_Bytes
  relayer_lte: arbitrumone_Bytes
  relayer_in: [arbitrumone_Bytes!]
  relayer_not_in: [arbitrumone_Bytes!]
  relayer_contains: arbitrumone_Bytes
  relayer_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_Relayer_orderBy {
  id
  isActive
  relayer
}

type arbitrumone_RootCount {
  id: ID!
  count: BigInt
}

input arbitrumone_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_RootCount_orderBy {
  id
  count
}

type arbitrumone_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: arbitrumone_Bytes
  count: BigInt
  caller: arbitrumone_Bytes
  transactionHash: arbitrumone_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input arbitrumone_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: arbitrumone_Bytes
  root_not: arbitrumone_Bytes
  root_gt: arbitrumone_Bytes
  root_lt: arbitrumone_Bytes
  root_gte: arbitrumone_Bytes
  root_lte: arbitrumone_Bytes
  root_in: [arbitrumone_Bytes!]
  root_not_in: [arbitrumone_Bytes!]
  root_contains: arbitrumone_Bytes
  root_not_contains: arbitrumone_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: arbitrumone_Bytes
  caller_not: arbitrumone_Bytes
  caller_gt: arbitrumone_Bytes
  caller_lt: arbitrumone_Bytes
  caller_gte: arbitrumone_Bytes
  caller_lte: arbitrumone_Bytes
  caller_in: [arbitrumone_Bytes!]
  caller_not_in: [arbitrumone_Bytes!]
  caller_contains: arbitrumone_Bytes
  caller_not_contains: arbitrumone_Bytes
  transactionHash: arbitrumone_Bytes
  transactionHash_not: arbitrumone_Bytes
  transactionHash_gt: arbitrumone_Bytes
  transactionHash_lt: arbitrumone_Bytes
  transactionHash_gte: arbitrumone_Bytes
  transactionHash_lte: arbitrumone_Bytes
  transactionHash_in: [arbitrumone_Bytes!]
  transactionHash_not_in: [arbitrumone_Bytes!]
  transactionHash_contains: arbitrumone_Bytes
  transactionHash_not_contains: arbitrumone_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type arbitrumone_Router {
  id: ID!
  isActive: Boolean!
  owner: arbitrumone_Bytes
  recipient: arbitrumone_Bytes
  proposedOwner: arbitrumone_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: arbitrumone_AssetBalance_orderBy, orderDirection: arbitrumone_OrderDirection, where: arbitrumone_AssetBalance_filter): [arbitrumone_AssetBalance!]!
}

input arbitrumone_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: arbitrumone_Bytes
  owner_not: arbitrumone_Bytes
  owner_gt: arbitrumone_Bytes
  owner_lt: arbitrumone_Bytes
  owner_gte: arbitrumone_Bytes
  owner_lte: arbitrumone_Bytes
  owner_in: [arbitrumone_Bytes!]
  owner_not_in: [arbitrumone_Bytes!]
  owner_contains: arbitrumone_Bytes
  owner_not_contains: arbitrumone_Bytes
  recipient: arbitrumone_Bytes
  recipient_not: arbitrumone_Bytes
  recipient_gt: arbitrumone_Bytes
  recipient_lt: arbitrumone_Bytes
  recipient_gte: arbitrumone_Bytes
  recipient_lte: arbitrumone_Bytes
  recipient_in: [arbitrumone_Bytes!]
  recipient_not_in: [arbitrumone_Bytes!]
  recipient_contains: arbitrumone_Bytes
  recipient_not_contains: arbitrumone_Bytes
  proposedOwner: arbitrumone_Bytes
  proposedOwner_not: arbitrumone_Bytes
  proposedOwner_gt: arbitrumone_Bytes
  proposedOwner_lt: arbitrumone_Bytes
  proposedOwner_gte: arbitrumone_Bytes
  proposedOwner_lte: arbitrumone_Bytes
  proposedOwner_in: [arbitrumone_Bytes!]
  proposedOwner_not_in: [arbitrumone_Bytes!]
  proposedOwner_contains: arbitrumone_Bytes
  proposedOwner_not_contains: arbitrumone_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: arbitrumone_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type arbitrumone_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: arbitrumone_Bytes
}

input arbitrumone_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: arbitrumone_Bytes
  sequencer_not: arbitrumone_Bytes
  sequencer_gt: arbitrumone_Bytes
  sequencer_lt: arbitrumone_Bytes
  sequencer_gte: arbitrumone_Bytes
  sequencer_lte: arbitrumone_Bytes
  sequencer_in: [arbitrumone_Bytes!]
  sequencer_not_in: [arbitrumone_Bytes!]
  sequencer_contains: arbitrumone_Bytes
  sequencer_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type arbitrumone_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: arbitrumone_Bytes!
}

input arbitrumone_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: arbitrumone_Bytes
  caller_not: arbitrumone_Bytes
  caller_gt: arbitrumone_Bytes
  caller_lt: arbitrumone_Bytes
  caller_gte: arbitrumone_Bytes
  caller_lte: arbitrumone_Bytes
  caller_in: [arbitrumone_Bytes!]
  caller_not_in: [arbitrumone_Bytes!]
  caller_contains: arbitrumone_Bytes
  caller_not_contains: arbitrumone_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type arbitrumone_StableSwapLiquidity {
  id: ID!
  provider: arbitrumone_Bytes!
  stableSwap: arbitrumone_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input arbitrumone_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: arbitrumone_Bytes
  provider_not: arbitrumone_Bytes
  provider_gt: arbitrumone_Bytes
  provider_lt: arbitrumone_Bytes
  provider_gte: arbitrumone_Bytes
  provider_lte: arbitrumone_Bytes
  provider_in: [arbitrumone_Bytes!]
  provider_not_in: [arbitrumone_Bytes!]
  provider_contains: arbitrumone_Bytes
  provider_not_contains: arbitrumone_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumone_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

type arbitrumone_TransferRelayerFee {
  id: ID!
  transferId: arbitrumone_Bytes!
  fee: BigInt
}

input arbitrumone_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: arbitrumone_Bytes
  transferId_not: arbitrumone_Bytes
  transferId_gt: arbitrumone_Bytes
  transferId_lt: arbitrumone_Bytes
  transferId_gte: arbitrumone_Bytes
  transferId_lte: arbitrumone_Bytes
  transferId_in: [arbitrumone_Bytes!]
  transferId_not_in: [arbitrumone_Bytes!]
  transferId_contains: arbitrumone_Bytes
  transferId_not_contains: arbitrumone_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumone_BlockChangedFilter
}

enum arbitrumone_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum arbitrumone_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type optimism_AggregateRoot {
  id: ID!
  root: optimism_Bytes!
  blockNumber: BigInt!
}

input optimism_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: optimism_Bytes
  root_not: optimism_Bytes
  root_gt: optimism_Bytes
  root_lt: optimism_Bytes
  root_gte: optimism_Bytes
  root_lte: optimism_Bytes
  root_in: [optimism_Bytes!]
  root_not_in: [optimism_Bytes!]
  root_contains: optimism_Bytes
  root_not_contains: optimism_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type optimism_Asset {
  id: ID!
  key: optimism_Bytes
  canonicalId: optimism_Bytes
  canonicalDomain: BigInt
  adoptedAsset: optimism_Bytes
  localAsset: optimism_Bytes
  blockNumber: BigInt
}

type optimism_AssetBalance {
  id: ID!
  amount: BigInt!
  router: optimism_Router!
  asset: optimism_Asset!
  feesEarned: BigInt!
}

input optimism_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: optimism_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: optimism_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input optimism_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: optimism_Bytes
  key_not: optimism_Bytes
  key_gt: optimism_Bytes
  key_lt: optimism_Bytes
  key_gte: optimism_Bytes
  key_lte: optimism_Bytes
  key_in: [optimism_Bytes!]
  key_not_in: [optimism_Bytes!]
  key_contains: optimism_Bytes
  key_not_contains: optimism_Bytes
  canonicalId: optimism_Bytes
  canonicalId_not: optimism_Bytes
  canonicalId_gt: optimism_Bytes
  canonicalId_lt: optimism_Bytes
  canonicalId_gte: optimism_Bytes
  canonicalId_lte: optimism_Bytes
  canonicalId_in: [optimism_Bytes!]
  canonicalId_not_in: [optimism_Bytes!]
  canonicalId_contains: optimism_Bytes
  canonicalId_not_contains: optimism_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: optimism_Bytes
  adoptedAsset_not: optimism_Bytes
  adoptedAsset_gt: optimism_Bytes
  adoptedAsset_lt: optimism_Bytes
  adoptedAsset_gte: optimism_Bytes
  adoptedAsset_lte: optimism_Bytes
  adoptedAsset_in: [optimism_Bytes!]
  adoptedAsset_not_in: [optimism_Bytes!]
  adoptedAsset_contains: optimism_Bytes
  adoptedAsset_not_contains: optimism_Bytes
  localAsset: optimism_Bytes
  localAsset_not: optimism_Bytes
  localAsset_gt: optimism_Bytes
  localAsset_lt: optimism_Bytes
  localAsset_gte: optimism_Bytes
  localAsset_lte: optimism_Bytes
  localAsset_in: [optimism_Bytes!]
  localAsset_not_in: [optimism_Bytes!]
  localAsset_contains: optimism_Bytes
  localAsset_not_contains: optimism_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type optimism_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: optimism_Bytes
  rootManager: optimism_Bytes
  mirrorConnector: optimism_Bytes
}

input optimism_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: optimism_Bytes
  amb_not: optimism_Bytes
  amb_gt: optimism_Bytes
  amb_lt: optimism_Bytes
  amb_gte: optimism_Bytes
  amb_lte: optimism_Bytes
  amb_in: [optimism_Bytes!]
  amb_not_in: [optimism_Bytes!]
  amb_contains: optimism_Bytes
  amb_not_contains: optimism_Bytes
  rootManager: optimism_Bytes
  rootManager_not: optimism_Bytes
  rootManager_gt: optimism_Bytes
  rootManager_lt: optimism_Bytes
  rootManager_gte: optimism_Bytes
  rootManager_lte: optimism_Bytes
  rootManager_in: [optimism_Bytes!]
  rootManager_not_in: [optimism_Bytes!]
  rootManager_contains: optimism_Bytes
  rootManager_not_contains: optimism_Bytes
  mirrorConnector: optimism_Bytes
  mirrorConnector_not: optimism_Bytes
  mirrorConnector_gt: optimism_Bytes
  mirrorConnector_lt: optimism_Bytes
  mirrorConnector_gte: optimism_Bytes
  mirrorConnector_lte: optimism_Bytes
  mirrorConnector_in: [optimism_Bytes!]
  mirrorConnector_not_in: [optimism_Bytes!]
  mirrorConnector_contains: optimism_Bytes
  mirrorConnector_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type optimism_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: optimism_Bytes
  nonce: BigInt
  status: optimism_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: optimism_Router_orderBy, orderDirection: optimism_OrderDirection, where: optimism_Router_filter): [optimism_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: optimism_Bytes
  delegate: optimism_Bytes
  receiveLocal: Boolean
  callData: optimism_Bytes
  slippage: BigInt
  originSender: optimism_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: optimism_Bytes
  asset: optimism_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: optimism_Bytes
  executedTransactionHash: optimism_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: optimism_Bytes
  reconciledCaller: optimism_Bytes
  reconciledTransactionHash: optimism_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: optimism_Bytes
}

input optimism_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: optimism_Bytes
  transferId_not: optimism_Bytes
  transferId_gt: optimism_Bytes
  transferId_lt: optimism_Bytes
  transferId_gte: optimism_Bytes
  transferId_lte: optimism_Bytes
  transferId_in: [optimism_Bytes!]
  transferId_not_in: [optimism_Bytes!]
  transferId_contains: optimism_Bytes
  transferId_not_contains: optimism_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: optimism_TransferStatus
  status_not: optimism_TransferStatus
  status_in: [optimism_TransferStatus!]
  status_not_in: [optimism_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: optimism_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: optimism_Bytes
  to_not: optimism_Bytes
  to_gt: optimism_Bytes
  to_lt: optimism_Bytes
  to_gte: optimism_Bytes
  to_lte: optimism_Bytes
  to_in: [optimism_Bytes!]
  to_not_in: [optimism_Bytes!]
  to_contains: optimism_Bytes
  to_not_contains: optimism_Bytes
  delegate: optimism_Bytes
  delegate_not: optimism_Bytes
  delegate_gt: optimism_Bytes
  delegate_lt: optimism_Bytes
  delegate_gte: optimism_Bytes
  delegate_lte: optimism_Bytes
  delegate_in: [optimism_Bytes!]
  delegate_not_in: [optimism_Bytes!]
  delegate_contains: optimism_Bytes
  delegate_not_contains: optimism_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: optimism_Bytes
  callData_not: optimism_Bytes
  callData_gt: optimism_Bytes
  callData_lt: optimism_Bytes
  callData_gte: optimism_Bytes
  callData_lte: optimism_Bytes
  callData_in: [optimism_Bytes!]
  callData_not_in: [optimism_Bytes!]
  callData_contains: optimism_Bytes
  callData_not_contains: optimism_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: optimism_Bytes
  originSender_not: optimism_Bytes
  originSender_gt: optimism_Bytes
  originSender_lt: optimism_Bytes
  originSender_gte: optimism_Bytes
  originSender_lte: optimism_Bytes
  originSender_in: [optimism_Bytes!]
  originSender_not_in: [optimism_Bytes!]
  originSender_contains: optimism_Bytes
  originSender_not_contains: optimism_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: optimism_Bytes
  canonicalId_not: optimism_Bytes
  canonicalId_gt: optimism_Bytes
  canonicalId_lt: optimism_Bytes
  canonicalId_gte: optimism_Bytes
  canonicalId_lte: optimism_Bytes
  canonicalId_in: [optimism_Bytes!]
  canonicalId_not_in: [optimism_Bytes!]
  canonicalId_contains: optimism_Bytes
  canonicalId_not_contains: optimism_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: optimism_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: optimism_Bytes
  executedCaller_not: optimism_Bytes
  executedCaller_gt: optimism_Bytes
  executedCaller_lt: optimism_Bytes
  executedCaller_gte: optimism_Bytes
  executedCaller_lte: optimism_Bytes
  executedCaller_in: [optimism_Bytes!]
  executedCaller_not_in: [optimism_Bytes!]
  executedCaller_contains: optimism_Bytes
  executedCaller_not_contains: optimism_Bytes
  executedTransactionHash: optimism_Bytes
  executedTransactionHash_not: optimism_Bytes
  executedTransactionHash_gt: optimism_Bytes
  executedTransactionHash_lt: optimism_Bytes
  executedTransactionHash_gte: optimism_Bytes
  executedTransactionHash_lte: optimism_Bytes
  executedTransactionHash_in: [optimism_Bytes!]
  executedTransactionHash_not_in: [optimism_Bytes!]
  executedTransactionHash_contains: optimism_Bytes
  executedTransactionHash_not_contains: optimism_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: optimism_Bytes
  executedTxOrigin_not: optimism_Bytes
  executedTxOrigin_gt: optimism_Bytes
  executedTxOrigin_lt: optimism_Bytes
  executedTxOrigin_gte: optimism_Bytes
  executedTxOrigin_lte: optimism_Bytes
  executedTxOrigin_in: [optimism_Bytes!]
  executedTxOrigin_not_in: [optimism_Bytes!]
  executedTxOrigin_contains: optimism_Bytes
  executedTxOrigin_not_contains: optimism_Bytes
  reconciledCaller: optimism_Bytes
  reconciledCaller_not: optimism_Bytes
  reconciledCaller_gt: optimism_Bytes
  reconciledCaller_lt: optimism_Bytes
  reconciledCaller_gte: optimism_Bytes
  reconciledCaller_lte: optimism_Bytes
  reconciledCaller_in: [optimism_Bytes!]
  reconciledCaller_not_in: [optimism_Bytes!]
  reconciledCaller_contains: optimism_Bytes
  reconciledCaller_not_contains: optimism_Bytes
  reconciledTransactionHash: optimism_Bytes
  reconciledTransactionHash_not: optimism_Bytes
  reconciledTransactionHash_gt: optimism_Bytes
  reconciledTransactionHash_lt: optimism_Bytes
  reconciledTransactionHash_gte: optimism_Bytes
  reconciledTransactionHash_lte: optimism_Bytes
  reconciledTransactionHash_in: [optimism_Bytes!]
  reconciledTransactionHash_not_in: [optimism_Bytes!]
  reconciledTransactionHash_contains: optimism_Bytes
  reconciledTransactionHash_not_contains: optimism_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: optimism_Bytes
  reconciledTxOrigin_not: optimism_Bytes
  reconciledTxOrigin_gt: optimism_Bytes
  reconciledTxOrigin_lt: optimism_Bytes
  reconciledTxOrigin_gte: optimism_Bytes
  reconciledTxOrigin_lte: optimism_Bytes
  reconciledTxOrigin_in: [optimism_Bytes!]
  reconciledTxOrigin_not_in: [optimism_Bytes!]
  reconciledTxOrigin_contains: optimism_Bytes
  reconciledTxOrigin_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type optimism_OriginMessage {
  id: ID!
  transferId: optimism_Bytes
  destinationDomain: BigInt
  leaf: optimism_Bytes
  index: BigInt
  message: optimism_Bytes
  root: optimism_Bytes
  transactionHash: optimism_Bytes
  blockNumber: BigInt
  rootCount: optimism_RootCount
}

input optimism_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: optimism_Bytes
  transferId_not: optimism_Bytes
  transferId_gt: optimism_Bytes
  transferId_lt: optimism_Bytes
  transferId_gte: optimism_Bytes
  transferId_lte: optimism_Bytes
  transferId_in: [optimism_Bytes!]
  transferId_not_in: [optimism_Bytes!]
  transferId_contains: optimism_Bytes
  transferId_not_contains: optimism_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: optimism_Bytes
  leaf_not: optimism_Bytes
  leaf_gt: optimism_Bytes
  leaf_lt: optimism_Bytes
  leaf_gte: optimism_Bytes
  leaf_lte: optimism_Bytes
  leaf_in: [optimism_Bytes!]
  leaf_not_in: [optimism_Bytes!]
  leaf_contains: optimism_Bytes
  leaf_not_contains: optimism_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: optimism_Bytes
  message_not: optimism_Bytes
  message_gt: optimism_Bytes
  message_lt: optimism_Bytes
  message_gte: optimism_Bytes
  message_lte: optimism_Bytes
  message_in: [optimism_Bytes!]
  message_not_in: [optimism_Bytes!]
  message_contains: optimism_Bytes
  message_not_contains: optimism_Bytes
  root: optimism_Bytes
  root_not: optimism_Bytes
  root_gt: optimism_Bytes
  root_lt: optimism_Bytes
  root_gte: optimism_Bytes
  root_lte: optimism_Bytes
  root_in: [optimism_Bytes!]
  root_not_in: [optimism_Bytes!]
  root_contains: optimism_Bytes
  root_not_contains: optimism_Bytes
  transactionHash: optimism_Bytes
  transactionHash_not: optimism_Bytes
  transactionHash_gt: optimism_Bytes
  transactionHash_lt: optimism_Bytes
  transactionHash_gte: optimism_Bytes
  transactionHash_lte: optimism_Bytes
  transactionHash_in: [optimism_Bytes!]
  transactionHash_not_in: [optimism_Bytes!]
  transactionHash_contains: optimism_Bytes
  transactionHash_not_contains: optimism_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: optimism_RootCount_filter
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type optimism_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: optimism_Bytes
  nonce: BigInt
  status: optimism_TransferStatus
  messageHash: optimism_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: optimism_Bytes
  delegate: optimism_Bytes
  receiveLocal: Boolean
  callData: optimism_Bytes
  slippage: BigInt
  originSender: optimism_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: optimism_Bytes
  asset: optimism_Asset
  transacting: optimism_Bytes
  message: optimism_OriginMessage
  relayerFee: BigInt
  caller: optimism_Bytes
  transactionHash: optimism_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: optimism_Bytes
}

input optimism_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: optimism_Bytes
  transferId_not: optimism_Bytes
  transferId_gt: optimism_Bytes
  transferId_lt: optimism_Bytes
  transferId_gte: optimism_Bytes
  transferId_lte: optimism_Bytes
  transferId_in: [optimism_Bytes!]
  transferId_not_in: [optimism_Bytes!]
  transferId_contains: optimism_Bytes
  transferId_not_contains: optimism_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: optimism_TransferStatus
  status_not: optimism_TransferStatus
  status_in: [optimism_TransferStatus!]
  status_not_in: [optimism_TransferStatus!]
  messageHash: optimism_Bytes
  messageHash_not: optimism_Bytes
  messageHash_gt: optimism_Bytes
  messageHash_lt: optimism_Bytes
  messageHash_gte: optimism_Bytes
  messageHash_lte: optimism_Bytes
  messageHash_in: [optimism_Bytes!]
  messageHash_not_in: [optimism_Bytes!]
  messageHash_contains: optimism_Bytes
  messageHash_not_contains: optimism_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: optimism_Bytes
  to_not: optimism_Bytes
  to_gt: optimism_Bytes
  to_lt: optimism_Bytes
  to_gte: optimism_Bytes
  to_lte: optimism_Bytes
  to_in: [optimism_Bytes!]
  to_not_in: [optimism_Bytes!]
  to_contains: optimism_Bytes
  to_not_contains: optimism_Bytes
  delegate: optimism_Bytes
  delegate_not: optimism_Bytes
  delegate_gt: optimism_Bytes
  delegate_lt: optimism_Bytes
  delegate_gte: optimism_Bytes
  delegate_lte: optimism_Bytes
  delegate_in: [optimism_Bytes!]
  delegate_not_in: [optimism_Bytes!]
  delegate_contains: optimism_Bytes
  delegate_not_contains: optimism_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: optimism_Bytes
  callData_not: optimism_Bytes
  callData_gt: optimism_Bytes
  callData_lt: optimism_Bytes
  callData_gte: optimism_Bytes
  callData_lte: optimism_Bytes
  callData_in: [optimism_Bytes!]
  callData_not_in: [optimism_Bytes!]
  callData_contains: optimism_Bytes
  callData_not_contains: optimism_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: optimism_Bytes
  originSender_not: optimism_Bytes
  originSender_gt: optimism_Bytes
  originSender_lt: optimism_Bytes
  originSender_gte: optimism_Bytes
  originSender_lte: optimism_Bytes
  originSender_in: [optimism_Bytes!]
  originSender_not_in: [optimism_Bytes!]
  originSender_contains: optimism_Bytes
  originSender_not_contains: optimism_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: optimism_Bytes
  canonicalId_not: optimism_Bytes
  canonicalId_gt: optimism_Bytes
  canonicalId_lt: optimism_Bytes
  canonicalId_gte: optimism_Bytes
  canonicalId_lte: optimism_Bytes
  canonicalId_in: [optimism_Bytes!]
  canonicalId_not_in: [optimism_Bytes!]
  canonicalId_contains: optimism_Bytes
  canonicalId_not_contains: optimism_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: optimism_Asset_filter
  transacting: optimism_Bytes
  transacting_not: optimism_Bytes
  transacting_gt: optimism_Bytes
  transacting_lt: optimism_Bytes
  transacting_gte: optimism_Bytes
  transacting_lte: optimism_Bytes
  transacting_in: [optimism_Bytes!]
  transacting_not_in: [optimism_Bytes!]
  transacting_contains: optimism_Bytes
  transacting_not_contains: optimism_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: optimism_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: optimism_Bytes
  caller_not: optimism_Bytes
  caller_gt: optimism_Bytes
  caller_lt: optimism_Bytes
  caller_gte: optimism_Bytes
  caller_lte: optimism_Bytes
  caller_in: [optimism_Bytes!]
  caller_not_in: [optimism_Bytes!]
  caller_contains: optimism_Bytes
  caller_not_contains: optimism_Bytes
  transactionHash: optimism_Bytes
  transactionHash_not: optimism_Bytes
  transactionHash_gt: optimism_Bytes
  transactionHash_lt: optimism_Bytes
  transactionHash_gte: optimism_Bytes
  transactionHash_lte: optimism_Bytes
  transactionHash_in: [optimism_Bytes!]
  transactionHash_not_in: [optimism_Bytes!]
  transactionHash_contains: optimism_Bytes
  transactionHash_not_contains: optimism_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: optimism_Bytes
  txOrigin_not: optimism_Bytes
  txOrigin_gt: optimism_Bytes
  txOrigin_lt: optimism_Bytes
  txOrigin_gte: optimism_Bytes
  txOrigin_lte: optimism_Bytes
  txOrigin_in: [optimism_Bytes!]
  txOrigin_not_in: [optimism_Bytes!]
  txOrigin_contains: optimism_Bytes
  txOrigin_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type optimism_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: optimism_Bytes
}

input optimism_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: optimism_Bytes
  relayer_not: optimism_Bytes
  relayer_gt: optimism_Bytes
  relayer_lt: optimism_Bytes
  relayer_gte: optimism_Bytes
  relayer_lte: optimism_Bytes
  relayer_in: [optimism_Bytes!]
  relayer_not_in: [optimism_Bytes!]
  relayer_contains: optimism_Bytes
  relayer_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_Relayer_orderBy {
  id
  isActive
  relayer
}

type optimism_RootCount {
  id: ID!
  count: BigInt
}

input optimism_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_RootCount_orderBy {
  id
  count
}

type optimism_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: optimism_Bytes
  count: BigInt
  caller: optimism_Bytes
  transactionHash: optimism_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimism_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: optimism_Bytes
  root_not: optimism_Bytes
  root_gt: optimism_Bytes
  root_lt: optimism_Bytes
  root_gte: optimism_Bytes
  root_lte: optimism_Bytes
  root_in: [optimism_Bytes!]
  root_not_in: [optimism_Bytes!]
  root_contains: optimism_Bytes
  root_not_contains: optimism_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: optimism_Bytes
  caller_not: optimism_Bytes
  caller_gt: optimism_Bytes
  caller_lt: optimism_Bytes
  caller_gte: optimism_Bytes
  caller_lte: optimism_Bytes
  caller_in: [optimism_Bytes!]
  caller_not_in: [optimism_Bytes!]
  caller_contains: optimism_Bytes
  caller_not_contains: optimism_Bytes
  transactionHash: optimism_Bytes
  transactionHash_not: optimism_Bytes
  transactionHash_gt: optimism_Bytes
  transactionHash_lt: optimism_Bytes
  transactionHash_gte: optimism_Bytes
  transactionHash_lte: optimism_Bytes
  transactionHash_in: [optimism_Bytes!]
  transactionHash_not_in: [optimism_Bytes!]
  transactionHash_contains: optimism_Bytes
  transactionHash_not_contains: optimism_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type optimism_Router {
  id: ID!
  isActive: Boolean!
  owner: optimism_Bytes
  recipient: optimism_Bytes
  proposedOwner: optimism_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: optimism_AssetBalance_orderBy, orderDirection: optimism_OrderDirection, where: optimism_AssetBalance_filter): [optimism_AssetBalance!]!
}

input optimism_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: optimism_Bytes
  owner_not: optimism_Bytes
  owner_gt: optimism_Bytes
  owner_lt: optimism_Bytes
  owner_gte: optimism_Bytes
  owner_lte: optimism_Bytes
  owner_in: [optimism_Bytes!]
  owner_not_in: [optimism_Bytes!]
  owner_contains: optimism_Bytes
  owner_not_contains: optimism_Bytes
  recipient: optimism_Bytes
  recipient_not: optimism_Bytes
  recipient_gt: optimism_Bytes
  recipient_lt: optimism_Bytes
  recipient_gte: optimism_Bytes
  recipient_lte: optimism_Bytes
  recipient_in: [optimism_Bytes!]
  recipient_not_in: [optimism_Bytes!]
  recipient_contains: optimism_Bytes
  recipient_not_contains: optimism_Bytes
  proposedOwner: optimism_Bytes
  proposedOwner_not: optimism_Bytes
  proposedOwner_gt: optimism_Bytes
  proposedOwner_lt: optimism_Bytes
  proposedOwner_gte: optimism_Bytes
  proposedOwner_lte: optimism_Bytes
  proposedOwner_in: [optimism_Bytes!]
  proposedOwner_not_in: [optimism_Bytes!]
  proposedOwner_contains: optimism_Bytes
  proposedOwner_not_contains: optimism_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: optimism_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type optimism_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: optimism_Bytes
}

input optimism_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: optimism_Bytes
  sequencer_not: optimism_Bytes
  sequencer_gt: optimism_Bytes
  sequencer_lt: optimism_Bytes
  sequencer_gte: optimism_Bytes
  sequencer_lte: optimism_Bytes
  sequencer_in: [optimism_Bytes!]
  sequencer_not_in: [optimism_Bytes!]
  sequencer_contains: optimism_Bytes
  sequencer_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type optimism_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: optimism_Bytes!
}

input optimism_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: optimism_Bytes
  caller_not: optimism_Bytes
  caller_gt: optimism_Bytes
  caller_lt: optimism_Bytes
  caller_gte: optimism_Bytes
  caller_lte: optimism_Bytes
  caller_in: [optimism_Bytes!]
  caller_not_in: [optimism_Bytes!]
  caller_contains: optimism_Bytes
  caller_not_contains: optimism_Bytes
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type optimism_StableSwapLiquidity {
  id: ID!
  provider: optimism_Bytes!
  stableSwap: optimism_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input optimism_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: optimism_Bytes
  provider_not: optimism_Bytes
  provider_gt: optimism_Bytes
  provider_lt: optimism_Bytes
  provider_gte: optimism_Bytes
  provider_lte: optimism_Bytes
  provider_in: [optimism_Bytes!]
  provider_not_in: [optimism_Bytes!]
  provider_contains: optimism_Bytes
  provider_not_contains: optimism_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimism_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

type optimism_TransferRelayerFee {
  id: ID!
  transferId: optimism_Bytes!
  fee: BigInt
}

input optimism_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: optimism_Bytes
  transferId_not: optimism_Bytes
  transferId_gt: optimism_Bytes
  transferId_lt: optimism_Bytes
  transferId_gte: optimism_Bytes
  transferId_lte: optimism_Bytes
  transferId_in: [optimism_Bytes!]
  transferId_not_in: [optimism_Bytes!]
  transferId_contains: optimism_Bytes
  transferId_not_contains: optimism_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimism_BlockChangedFilter
}

enum optimism_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum optimism_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type bnb_AggregateRoot {
  id: ID!
  root: bnb_Bytes!
  blockNumber: BigInt!
}

input bnb_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: bnb_Bytes
  root_not: bnb_Bytes
  root_gt: bnb_Bytes
  root_lt: bnb_Bytes
  root_gte: bnb_Bytes
  root_lte: bnb_Bytes
  root_in: [bnb_Bytes!]
  root_not_in: [bnb_Bytes!]
  root_contains: bnb_Bytes
  root_not_contains: bnb_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type bnb_Asset {
  id: ID!
  key: bnb_Bytes
  canonicalId: bnb_Bytes
  canonicalDomain: BigInt
  adoptedAsset: bnb_Bytes
  localAsset: bnb_Bytes
  blockNumber: BigInt
}

type bnb_AssetBalance {
  id: ID!
  amount: BigInt!
  router: bnb_Router!
  asset: bnb_Asset!
  feesEarned: BigInt!
}

input bnb_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: bnb_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: bnb_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input bnb_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: bnb_Bytes
  key_not: bnb_Bytes
  key_gt: bnb_Bytes
  key_lt: bnb_Bytes
  key_gte: bnb_Bytes
  key_lte: bnb_Bytes
  key_in: [bnb_Bytes!]
  key_not_in: [bnb_Bytes!]
  key_contains: bnb_Bytes
  key_not_contains: bnb_Bytes
  canonicalId: bnb_Bytes
  canonicalId_not: bnb_Bytes
  canonicalId_gt: bnb_Bytes
  canonicalId_lt: bnb_Bytes
  canonicalId_gte: bnb_Bytes
  canonicalId_lte: bnb_Bytes
  canonicalId_in: [bnb_Bytes!]
  canonicalId_not_in: [bnb_Bytes!]
  canonicalId_contains: bnb_Bytes
  canonicalId_not_contains: bnb_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: bnb_Bytes
  adoptedAsset_not: bnb_Bytes
  adoptedAsset_gt: bnb_Bytes
  adoptedAsset_lt: bnb_Bytes
  adoptedAsset_gte: bnb_Bytes
  adoptedAsset_lte: bnb_Bytes
  adoptedAsset_in: [bnb_Bytes!]
  adoptedAsset_not_in: [bnb_Bytes!]
  adoptedAsset_contains: bnb_Bytes
  adoptedAsset_not_contains: bnb_Bytes
  localAsset: bnb_Bytes
  localAsset_not: bnb_Bytes
  localAsset_gt: bnb_Bytes
  localAsset_lt: bnb_Bytes
  localAsset_gte: bnb_Bytes
  localAsset_lte: bnb_Bytes
  localAsset_in: [bnb_Bytes!]
  localAsset_not_in: [bnb_Bytes!]
  localAsset_contains: bnb_Bytes
  localAsset_not_contains: bnb_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type bnb_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: bnb_Bytes
  rootManager: bnb_Bytes
  mirrorConnector: bnb_Bytes
}

input bnb_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: bnb_Bytes
  amb_not: bnb_Bytes
  amb_gt: bnb_Bytes
  amb_lt: bnb_Bytes
  amb_gte: bnb_Bytes
  amb_lte: bnb_Bytes
  amb_in: [bnb_Bytes!]
  amb_not_in: [bnb_Bytes!]
  amb_contains: bnb_Bytes
  amb_not_contains: bnb_Bytes
  rootManager: bnb_Bytes
  rootManager_not: bnb_Bytes
  rootManager_gt: bnb_Bytes
  rootManager_lt: bnb_Bytes
  rootManager_gte: bnb_Bytes
  rootManager_lte: bnb_Bytes
  rootManager_in: [bnb_Bytes!]
  rootManager_not_in: [bnb_Bytes!]
  rootManager_contains: bnb_Bytes
  rootManager_not_contains: bnb_Bytes
  mirrorConnector: bnb_Bytes
  mirrorConnector_not: bnb_Bytes
  mirrorConnector_gt: bnb_Bytes
  mirrorConnector_lt: bnb_Bytes
  mirrorConnector_gte: bnb_Bytes
  mirrorConnector_lte: bnb_Bytes
  mirrorConnector_in: [bnb_Bytes!]
  mirrorConnector_not_in: [bnb_Bytes!]
  mirrorConnector_contains: bnb_Bytes
  mirrorConnector_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type bnb_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: bnb_Bytes
  nonce: BigInt
  status: bnb_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: bnb_Router_orderBy, orderDirection: bnb_OrderDirection, where: bnb_Router_filter): [bnb_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: bnb_Bytes
  delegate: bnb_Bytes
  receiveLocal: Boolean
  callData: bnb_Bytes
  slippage: BigInt
  originSender: bnb_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: bnb_Bytes
  asset: bnb_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: bnb_Bytes
  executedTransactionHash: bnb_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: bnb_Bytes
  reconciledCaller: bnb_Bytes
  reconciledTransactionHash: bnb_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: bnb_Bytes
}

input bnb_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: bnb_Bytes
  transferId_not: bnb_Bytes
  transferId_gt: bnb_Bytes
  transferId_lt: bnb_Bytes
  transferId_gte: bnb_Bytes
  transferId_lte: bnb_Bytes
  transferId_in: [bnb_Bytes!]
  transferId_not_in: [bnb_Bytes!]
  transferId_contains: bnb_Bytes
  transferId_not_contains: bnb_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: bnb_TransferStatus
  status_not: bnb_TransferStatus
  status_in: [bnb_TransferStatus!]
  status_not_in: [bnb_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: bnb_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: bnb_Bytes
  to_not: bnb_Bytes
  to_gt: bnb_Bytes
  to_lt: bnb_Bytes
  to_gte: bnb_Bytes
  to_lte: bnb_Bytes
  to_in: [bnb_Bytes!]
  to_not_in: [bnb_Bytes!]
  to_contains: bnb_Bytes
  to_not_contains: bnb_Bytes
  delegate: bnb_Bytes
  delegate_not: bnb_Bytes
  delegate_gt: bnb_Bytes
  delegate_lt: bnb_Bytes
  delegate_gte: bnb_Bytes
  delegate_lte: bnb_Bytes
  delegate_in: [bnb_Bytes!]
  delegate_not_in: [bnb_Bytes!]
  delegate_contains: bnb_Bytes
  delegate_not_contains: bnb_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: bnb_Bytes
  callData_not: bnb_Bytes
  callData_gt: bnb_Bytes
  callData_lt: bnb_Bytes
  callData_gte: bnb_Bytes
  callData_lte: bnb_Bytes
  callData_in: [bnb_Bytes!]
  callData_not_in: [bnb_Bytes!]
  callData_contains: bnb_Bytes
  callData_not_contains: bnb_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: bnb_Bytes
  originSender_not: bnb_Bytes
  originSender_gt: bnb_Bytes
  originSender_lt: bnb_Bytes
  originSender_gte: bnb_Bytes
  originSender_lte: bnb_Bytes
  originSender_in: [bnb_Bytes!]
  originSender_not_in: [bnb_Bytes!]
  originSender_contains: bnb_Bytes
  originSender_not_contains: bnb_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: bnb_Bytes
  canonicalId_not: bnb_Bytes
  canonicalId_gt: bnb_Bytes
  canonicalId_lt: bnb_Bytes
  canonicalId_gte: bnb_Bytes
  canonicalId_lte: bnb_Bytes
  canonicalId_in: [bnb_Bytes!]
  canonicalId_not_in: [bnb_Bytes!]
  canonicalId_contains: bnb_Bytes
  canonicalId_not_contains: bnb_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: bnb_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: bnb_Bytes
  executedCaller_not: bnb_Bytes
  executedCaller_gt: bnb_Bytes
  executedCaller_lt: bnb_Bytes
  executedCaller_gte: bnb_Bytes
  executedCaller_lte: bnb_Bytes
  executedCaller_in: [bnb_Bytes!]
  executedCaller_not_in: [bnb_Bytes!]
  executedCaller_contains: bnb_Bytes
  executedCaller_not_contains: bnb_Bytes
  executedTransactionHash: bnb_Bytes
  executedTransactionHash_not: bnb_Bytes
  executedTransactionHash_gt: bnb_Bytes
  executedTransactionHash_lt: bnb_Bytes
  executedTransactionHash_gte: bnb_Bytes
  executedTransactionHash_lte: bnb_Bytes
  executedTransactionHash_in: [bnb_Bytes!]
  executedTransactionHash_not_in: [bnb_Bytes!]
  executedTransactionHash_contains: bnb_Bytes
  executedTransactionHash_not_contains: bnb_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: bnb_Bytes
  executedTxOrigin_not: bnb_Bytes
  executedTxOrigin_gt: bnb_Bytes
  executedTxOrigin_lt: bnb_Bytes
  executedTxOrigin_gte: bnb_Bytes
  executedTxOrigin_lte: bnb_Bytes
  executedTxOrigin_in: [bnb_Bytes!]
  executedTxOrigin_not_in: [bnb_Bytes!]
  executedTxOrigin_contains: bnb_Bytes
  executedTxOrigin_not_contains: bnb_Bytes
  reconciledCaller: bnb_Bytes
  reconciledCaller_not: bnb_Bytes
  reconciledCaller_gt: bnb_Bytes
  reconciledCaller_lt: bnb_Bytes
  reconciledCaller_gte: bnb_Bytes
  reconciledCaller_lte: bnb_Bytes
  reconciledCaller_in: [bnb_Bytes!]
  reconciledCaller_not_in: [bnb_Bytes!]
  reconciledCaller_contains: bnb_Bytes
  reconciledCaller_not_contains: bnb_Bytes
  reconciledTransactionHash: bnb_Bytes
  reconciledTransactionHash_not: bnb_Bytes
  reconciledTransactionHash_gt: bnb_Bytes
  reconciledTransactionHash_lt: bnb_Bytes
  reconciledTransactionHash_gte: bnb_Bytes
  reconciledTransactionHash_lte: bnb_Bytes
  reconciledTransactionHash_in: [bnb_Bytes!]
  reconciledTransactionHash_not_in: [bnb_Bytes!]
  reconciledTransactionHash_contains: bnb_Bytes
  reconciledTransactionHash_not_contains: bnb_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: bnb_Bytes
  reconciledTxOrigin_not: bnb_Bytes
  reconciledTxOrigin_gt: bnb_Bytes
  reconciledTxOrigin_lt: bnb_Bytes
  reconciledTxOrigin_gte: bnb_Bytes
  reconciledTxOrigin_lte: bnb_Bytes
  reconciledTxOrigin_in: [bnb_Bytes!]
  reconciledTxOrigin_not_in: [bnb_Bytes!]
  reconciledTxOrigin_contains: bnb_Bytes
  reconciledTxOrigin_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type bnb_OriginMessage {
  id: ID!
  transferId: bnb_Bytes
  destinationDomain: BigInt
  leaf: bnb_Bytes
  index: BigInt
  message: bnb_Bytes
  root: bnb_Bytes
  transactionHash: bnb_Bytes
  blockNumber: BigInt
  rootCount: bnb_RootCount
}

input bnb_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: bnb_Bytes
  transferId_not: bnb_Bytes
  transferId_gt: bnb_Bytes
  transferId_lt: bnb_Bytes
  transferId_gte: bnb_Bytes
  transferId_lte: bnb_Bytes
  transferId_in: [bnb_Bytes!]
  transferId_not_in: [bnb_Bytes!]
  transferId_contains: bnb_Bytes
  transferId_not_contains: bnb_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: bnb_Bytes
  leaf_not: bnb_Bytes
  leaf_gt: bnb_Bytes
  leaf_lt: bnb_Bytes
  leaf_gte: bnb_Bytes
  leaf_lte: bnb_Bytes
  leaf_in: [bnb_Bytes!]
  leaf_not_in: [bnb_Bytes!]
  leaf_contains: bnb_Bytes
  leaf_not_contains: bnb_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: bnb_Bytes
  message_not: bnb_Bytes
  message_gt: bnb_Bytes
  message_lt: bnb_Bytes
  message_gte: bnb_Bytes
  message_lte: bnb_Bytes
  message_in: [bnb_Bytes!]
  message_not_in: [bnb_Bytes!]
  message_contains: bnb_Bytes
  message_not_contains: bnb_Bytes
  root: bnb_Bytes
  root_not: bnb_Bytes
  root_gt: bnb_Bytes
  root_lt: bnb_Bytes
  root_gte: bnb_Bytes
  root_lte: bnb_Bytes
  root_in: [bnb_Bytes!]
  root_not_in: [bnb_Bytes!]
  root_contains: bnb_Bytes
  root_not_contains: bnb_Bytes
  transactionHash: bnb_Bytes
  transactionHash_not: bnb_Bytes
  transactionHash_gt: bnb_Bytes
  transactionHash_lt: bnb_Bytes
  transactionHash_gte: bnb_Bytes
  transactionHash_lte: bnb_Bytes
  transactionHash_in: [bnb_Bytes!]
  transactionHash_not_in: [bnb_Bytes!]
  transactionHash_contains: bnb_Bytes
  transactionHash_not_contains: bnb_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: bnb_RootCount_filter
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type bnb_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: bnb_Bytes
  nonce: BigInt
  status: bnb_TransferStatus
  messageHash: bnb_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: bnb_Bytes
  delegate: bnb_Bytes
  receiveLocal: Boolean
  callData: bnb_Bytes
  slippage: BigInt
  originSender: bnb_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: bnb_Bytes
  asset: bnb_Asset
  transacting: bnb_Bytes
  message: bnb_OriginMessage
  relayerFee: BigInt
  caller: bnb_Bytes
  transactionHash: bnb_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: bnb_Bytes
}

input bnb_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: bnb_Bytes
  transferId_not: bnb_Bytes
  transferId_gt: bnb_Bytes
  transferId_lt: bnb_Bytes
  transferId_gte: bnb_Bytes
  transferId_lte: bnb_Bytes
  transferId_in: [bnb_Bytes!]
  transferId_not_in: [bnb_Bytes!]
  transferId_contains: bnb_Bytes
  transferId_not_contains: bnb_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: bnb_TransferStatus
  status_not: bnb_TransferStatus
  status_in: [bnb_TransferStatus!]
  status_not_in: [bnb_TransferStatus!]
  messageHash: bnb_Bytes
  messageHash_not: bnb_Bytes
  messageHash_gt: bnb_Bytes
  messageHash_lt: bnb_Bytes
  messageHash_gte: bnb_Bytes
  messageHash_lte: bnb_Bytes
  messageHash_in: [bnb_Bytes!]
  messageHash_not_in: [bnb_Bytes!]
  messageHash_contains: bnb_Bytes
  messageHash_not_contains: bnb_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: bnb_Bytes
  to_not: bnb_Bytes
  to_gt: bnb_Bytes
  to_lt: bnb_Bytes
  to_gte: bnb_Bytes
  to_lte: bnb_Bytes
  to_in: [bnb_Bytes!]
  to_not_in: [bnb_Bytes!]
  to_contains: bnb_Bytes
  to_not_contains: bnb_Bytes
  delegate: bnb_Bytes
  delegate_not: bnb_Bytes
  delegate_gt: bnb_Bytes
  delegate_lt: bnb_Bytes
  delegate_gte: bnb_Bytes
  delegate_lte: bnb_Bytes
  delegate_in: [bnb_Bytes!]
  delegate_not_in: [bnb_Bytes!]
  delegate_contains: bnb_Bytes
  delegate_not_contains: bnb_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: bnb_Bytes
  callData_not: bnb_Bytes
  callData_gt: bnb_Bytes
  callData_lt: bnb_Bytes
  callData_gte: bnb_Bytes
  callData_lte: bnb_Bytes
  callData_in: [bnb_Bytes!]
  callData_not_in: [bnb_Bytes!]
  callData_contains: bnb_Bytes
  callData_not_contains: bnb_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: bnb_Bytes
  originSender_not: bnb_Bytes
  originSender_gt: bnb_Bytes
  originSender_lt: bnb_Bytes
  originSender_gte: bnb_Bytes
  originSender_lte: bnb_Bytes
  originSender_in: [bnb_Bytes!]
  originSender_not_in: [bnb_Bytes!]
  originSender_contains: bnb_Bytes
  originSender_not_contains: bnb_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: bnb_Bytes
  canonicalId_not: bnb_Bytes
  canonicalId_gt: bnb_Bytes
  canonicalId_lt: bnb_Bytes
  canonicalId_gte: bnb_Bytes
  canonicalId_lte: bnb_Bytes
  canonicalId_in: [bnb_Bytes!]
  canonicalId_not_in: [bnb_Bytes!]
  canonicalId_contains: bnb_Bytes
  canonicalId_not_contains: bnb_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: bnb_Asset_filter
  transacting: bnb_Bytes
  transacting_not: bnb_Bytes
  transacting_gt: bnb_Bytes
  transacting_lt: bnb_Bytes
  transacting_gte: bnb_Bytes
  transacting_lte: bnb_Bytes
  transacting_in: [bnb_Bytes!]
  transacting_not_in: [bnb_Bytes!]
  transacting_contains: bnb_Bytes
  transacting_not_contains: bnb_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: bnb_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: bnb_Bytes
  caller_not: bnb_Bytes
  caller_gt: bnb_Bytes
  caller_lt: bnb_Bytes
  caller_gte: bnb_Bytes
  caller_lte: bnb_Bytes
  caller_in: [bnb_Bytes!]
  caller_not_in: [bnb_Bytes!]
  caller_contains: bnb_Bytes
  caller_not_contains: bnb_Bytes
  transactionHash: bnb_Bytes
  transactionHash_not: bnb_Bytes
  transactionHash_gt: bnb_Bytes
  transactionHash_lt: bnb_Bytes
  transactionHash_gte: bnb_Bytes
  transactionHash_lte: bnb_Bytes
  transactionHash_in: [bnb_Bytes!]
  transactionHash_not_in: [bnb_Bytes!]
  transactionHash_contains: bnb_Bytes
  transactionHash_not_contains: bnb_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: bnb_Bytes
  txOrigin_not: bnb_Bytes
  txOrigin_gt: bnb_Bytes
  txOrigin_lt: bnb_Bytes
  txOrigin_gte: bnb_Bytes
  txOrigin_lte: bnb_Bytes
  txOrigin_in: [bnb_Bytes!]
  txOrigin_not_in: [bnb_Bytes!]
  txOrigin_contains: bnb_Bytes
  txOrigin_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type bnb_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: bnb_Bytes
}

input bnb_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: bnb_Bytes
  relayer_not: bnb_Bytes
  relayer_gt: bnb_Bytes
  relayer_lt: bnb_Bytes
  relayer_gte: bnb_Bytes
  relayer_lte: bnb_Bytes
  relayer_in: [bnb_Bytes!]
  relayer_not_in: [bnb_Bytes!]
  relayer_contains: bnb_Bytes
  relayer_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_Relayer_orderBy {
  id
  isActive
  relayer
}

type bnb_RootCount {
  id: ID!
  count: BigInt
}

input bnb_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_RootCount_orderBy {
  id
  count
}

type bnb_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: bnb_Bytes
  count: BigInt
  caller: bnb_Bytes
  transactionHash: bnb_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input bnb_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: bnb_Bytes
  root_not: bnb_Bytes
  root_gt: bnb_Bytes
  root_lt: bnb_Bytes
  root_gte: bnb_Bytes
  root_lte: bnb_Bytes
  root_in: [bnb_Bytes!]
  root_not_in: [bnb_Bytes!]
  root_contains: bnb_Bytes
  root_not_contains: bnb_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: bnb_Bytes
  caller_not: bnb_Bytes
  caller_gt: bnb_Bytes
  caller_lt: bnb_Bytes
  caller_gte: bnb_Bytes
  caller_lte: bnb_Bytes
  caller_in: [bnb_Bytes!]
  caller_not_in: [bnb_Bytes!]
  caller_contains: bnb_Bytes
  caller_not_contains: bnb_Bytes
  transactionHash: bnb_Bytes
  transactionHash_not: bnb_Bytes
  transactionHash_gt: bnb_Bytes
  transactionHash_lt: bnb_Bytes
  transactionHash_gte: bnb_Bytes
  transactionHash_lte: bnb_Bytes
  transactionHash_in: [bnb_Bytes!]
  transactionHash_not_in: [bnb_Bytes!]
  transactionHash_contains: bnb_Bytes
  transactionHash_not_contains: bnb_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type bnb_Router {
  id: ID!
  isActive: Boolean!
  owner: bnb_Bytes
  recipient: bnb_Bytes
  proposedOwner: bnb_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: bnb_AssetBalance_orderBy, orderDirection: bnb_OrderDirection, where: bnb_AssetBalance_filter): [bnb_AssetBalance!]!
}

input bnb_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: bnb_Bytes
  owner_not: bnb_Bytes
  owner_gt: bnb_Bytes
  owner_lt: bnb_Bytes
  owner_gte: bnb_Bytes
  owner_lte: bnb_Bytes
  owner_in: [bnb_Bytes!]
  owner_not_in: [bnb_Bytes!]
  owner_contains: bnb_Bytes
  owner_not_contains: bnb_Bytes
  recipient: bnb_Bytes
  recipient_not: bnb_Bytes
  recipient_gt: bnb_Bytes
  recipient_lt: bnb_Bytes
  recipient_gte: bnb_Bytes
  recipient_lte: bnb_Bytes
  recipient_in: [bnb_Bytes!]
  recipient_not_in: [bnb_Bytes!]
  recipient_contains: bnb_Bytes
  recipient_not_contains: bnb_Bytes
  proposedOwner: bnb_Bytes
  proposedOwner_not: bnb_Bytes
  proposedOwner_gt: bnb_Bytes
  proposedOwner_lt: bnb_Bytes
  proposedOwner_gte: bnb_Bytes
  proposedOwner_lte: bnb_Bytes
  proposedOwner_in: [bnb_Bytes!]
  proposedOwner_not_in: [bnb_Bytes!]
  proposedOwner_contains: bnb_Bytes
  proposedOwner_not_contains: bnb_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: bnb_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type bnb_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: bnb_Bytes
}

input bnb_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: bnb_Bytes
  sequencer_not: bnb_Bytes
  sequencer_gt: bnb_Bytes
  sequencer_lt: bnb_Bytes
  sequencer_gte: bnb_Bytes
  sequencer_lte: bnb_Bytes
  sequencer_in: [bnb_Bytes!]
  sequencer_not_in: [bnb_Bytes!]
  sequencer_contains: bnb_Bytes
  sequencer_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type bnb_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: bnb_Bytes!
}

input bnb_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: bnb_Bytes
  caller_not: bnb_Bytes
  caller_gt: bnb_Bytes
  caller_lt: bnb_Bytes
  caller_gte: bnb_Bytes
  caller_lte: bnb_Bytes
  caller_in: [bnb_Bytes!]
  caller_not_in: [bnb_Bytes!]
  caller_contains: bnb_Bytes
  caller_not_contains: bnb_Bytes
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type bnb_StableSwapLiquidity {
  id: ID!
  provider: bnb_Bytes!
  stableSwap: bnb_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input bnb_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: bnb_Bytes
  provider_not: bnb_Bytes
  provider_gt: bnb_Bytes
  provider_lt: bnb_Bytes
  provider_gte: bnb_Bytes
  provider_lte: bnb_Bytes
  provider_in: [bnb_Bytes!]
  provider_not_in: [bnb_Bytes!]
  provider_contains: bnb_Bytes
  provider_not_contains: bnb_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: bnb_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

type bnb_TransferRelayerFee {
  id: ID!
  transferId: bnb_Bytes!
  fee: BigInt
}

input bnb_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: bnb_Bytes
  transferId_not: bnb_Bytes
  transferId_gt: bnb_Bytes
  transferId_lt: bnb_Bytes
  transferId_gte: bnb_Bytes
  transferId_lte: bnb_Bytes
  transferId_in: [bnb_Bytes!]
  transferId_not_in: [bnb_Bytes!]
  transferId_contains: bnb_Bytes
  transferId_not_contains: bnb_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: bnb_BlockChangedFilter
}

enum bnb_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum bnb_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type mumbai_AggregateRoot {
  id: ID!
  root: mumbai_Bytes!
  blockNumber: BigInt!
}

input mumbai_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: mumbai_Bytes
  root_not: mumbai_Bytes
  root_gt: mumbai_Bytes
  root_lt: mumbai_Bytes
  root_gte: mumbai_Bytes
  root_lte: mumbai_Bytes
  root_in: [mumbai_Bytes!]
  root_not_in: [mumbai_Bytes!]
  root_contains: mumbai_Bytes
  root_not_contains: mumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type mumbai_Asset {
  id: ID!
  key: mumbai_Bytes
  canonicalId: mumbai_Bytes
  canonicalDomain: BigInt
  adoptedAsset: mumbai_Bytes
  localAsset: mumbai_Bytes
  blockNumber: BigInt
}

type mumbai_AssetBalance {
  id: ID!
  amount: BigInt!
  router: mumbai_Router!
  asset: mumbai_Asset!
  feesEarned: BigInt!
}

input mumbai_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mumbai_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mumbai_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input mumbai_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: mumbai_Bytes
  key_not: mumbai_Bytes
  key_gt: mumbai_Bytes
  key_lt: mumbai_Bytes
  key_gte: mumbai_Bytes
  key_lte: mumbai_Bytes
  key_in: [mumbai_Bytes!]
  key_not_in: [mumbai_Bytes!]
  key_contains: mumbai_Bytes
  key_not_contains: mumbai_Bytes
  canonicalId: mumbai_Bytes
  canonicalId_not: mumbai_Bytes
  canonicalId_gt: mumbai_Bytes
  canonicalId_lt: mumbai_Bytes
  canonicalId_gte: mumbai_Bytes
  canonicalId_lte: mumbai_Bytes
  canonicalId_in: [mumbai_Bytes!]
  canonicalId_not_in: [mumbai_Bytes!]
  canonicalId_contains: mumbai_Bytes
  canonicalId_not_contains: mumbai_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: mumbai_Bytes
  adoptedAsset_not: mumbai_Bytes
  adoptedAsset_gt: mumbai_Bytes
  adoptedAsset_lt: mumbai_Bytes
  adoptedAsset_gte: mumbai_Bytes
  adoptedAsset_lte: mumbai_Bytes
  adoptedAsset_in: [mumbai_Bytes!]
  adoptedAsset_not_in: [mumbai_Bytes!]
  adoptedAsset_contains: mumbai_Bytes
  adoptedAsset_not_contains: mumbai_Bytes
  localAsset: mumbai_Bytes
  localAsset_not: mumbai_Bytes
  localAsset_gt: mumbai_Bytes
  localAsset_lt: mumbai_Bytes
  localAsset_gte: mumbai_Bytes
  localAsset_lte: mumbai_Bytes
  localAsset_in: [mumbai_Bytes!]
  localAsset_not_in: [mumbai_Bytes!]
  localAsset_contains: mumbai_Bytes
  localAsset_not_contains: mumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type mumbai_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: mumbai_Bytes
  rootManager: mumbai_Bytes
  mirrorConnector: mumbai_Bytes
}

input mumbai_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mumbai_Bytes
  amb_not: mumbai_Bytes
  amb_gt: mumbai_Bytes
  amb_lt: mumbai_Bytes
  amb_gte: mumbai_Bytes
  amb_lte: mumbai_Bytes
  amb_in: [mumbai_Bytes!]
  amb_not_in: [mumbai_Bytes!]
  amb_contains: mumbai_Bytes
  amb_not_contains: mumbai_Bytes
  rootManager: mumbai_Bytes
  rootManager_not: mumbai_Bytes
  rootManager_gt: mumbai_Bytes
  rootManager_lt: mumbai_Bytes
  rootManager_gte: mumbai_Bytes
  rootManager_lte: mumbai_Bytes
  rootManager_in: [mumbai_Bytes!]
  rootManager_not_in: [mumbai_Bytes!]
  rootManager_contains: mumbai_Bytes
  rootManager_not_contains: mumbai_Bytes
  mirrorConnector: mumbai_Bytes
  mirrorConnector_not: mumbai_Bytes
  mirrorConnector_gt: mumbai_Bytes
  mirrorConnector_lt: mumbai_Bytes
  mirrorConnector_gte: mumbai_Bytes
  mirrorConnector_lte: mumbai_Bytes
  mirrorConnector_in: [mumbai_Bytes!]
  mirrorConnector_not_in: [mumbai_Bytes!]
  mirrorConnector_contains: mumbai_Bytes
  mirrorConnector_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type mumbai_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: mumbai_Bytes
  nonce: BigInt
  status: mumbai_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: mumbai_Router_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_Router_filter): [mumbai_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: mumbai_Bytes
  delegate: mumbai_Bytes
  receiveLocal: Boolean
  callData: mumbai_Bytes
  slippage: BigInt
  originSender: mumbai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: mumbai_Bytes
  asset: mumbai_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: mumbai_Bytes
  executedTransactionHash: mumbai_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: mumbai_Bytes
  reconciledCaller: mumbai_Bytes
  reconciledTransactionHash: mumbai_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: mumbai_Bytes
}

input mumbai_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_gt: mumbai_Bytes
  transferId_lt: mumbai_Bytes
  transferId_gte: mumbai_Bytes
  transferId_lte: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: mumbai_TransferStatus
  status_not: mumbai_TransferStatus
  status_in: [mumbai_TransferStatus!]
  status_not_in: [mumbai_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: mumbai_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: mumbai_Bytes
  to_not: mumbai_Bytes
  to_gt: mumbai_Bytes
  to_lt: mumbai_Bytes
  to_gte: mumbai_Bytes
  to_lte: mumbai_Bytes
  to_in: [mumbai_Bytes!]
  to_not_in: [mumbai_Bytes!]
  to_contains: mumbai_Bytes
  to_not_contains: mumbai_Bytes
  delegate: mumbai_Bytes
  delegate_not: mumbai_Bytes
  delegate_gt: mumbai_Bytes
  delegate_lt: mumbai_Bytes
  delegate_gte: mumbai_Bytes
  delegate_lte: mumbai_Bytes
  delegate_in: [mumbai_Bytes!]
  delegate_not_in: [mumbai_Bytes!]
  delegate_contains: mumbai_Bytes
  delegate_not_contains: mumbai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: mumbai_Bytes
  callData_not: mumbai_Bytes
  callData_gt: mumbai_Bytes
  callData_lt: mumbai_Bytes
  callData_gte: mumbai_Bytes
  callData_lte: mumbai_Bytes
  callData_in: [mumbai_Bytes!]
  callData_not_in: [mumbai_Bytes!]
  callData_contains: mumbai_Bytes
  callData_not_contains: mumbai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: mumbai_Bytes
  originSender_not: mumbai_Bytes
  originSender_gt: mumbai_Bytes
  originSender_lt: mumbai_Bytes
  originSender_gte: mumbai_Bytes
  originSender_lte: mumbai_Bytes
  originSender_in: [mumbai_Bytes!]
  originSender_not_in: [mumbai_Bytes!]
  originSender_contains: mumbai_Bytes
  originSender_not_contains: mumbai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: mumbai_Bytes
  canonicalId_not: mumbai_Bytes
  canonicalId_gt: mumbai_Bytes
  canonicalId_lt: mumbai_Bytes
  canonicalId_gte: mumbai_Bytes
  canonicalId_lte: mumbai_Bytes
  canonicalId_in: [mumbai_Bytes!]
  canonicalId_not_in: [mumbai_Bytes!]
  canonicalId_contains: mumbai_Bytes
  canonicalId_not_contains: mumbai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mumbai_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: mumbai_Bytes
  executedCaller_not: mumbai_Bytes
  executedCaller_gt: mumbai_Bytes
  executedCaller_lt: mumbai_Bytes
  executedCaller_gte: mumbai_Bytes
  executedCaller_lte: mumbai_Bytes
  executedCaller_in: [mumbai_Bytes!]
  executedCaller_not_in: [mumbai_Bytes!]
  executedCaller_contains: mumbai_Bytes
  executedCaller_not_contains: mumbai_Bytes
  executedTransactionHash: mumbai_Bytes
  executedTransactionHash_not: mumbai_Bytes
  executedTransactionHash_gt: mumbai_Bytes
  executedTransactionHash_lt: mumbai_Bytes
  executedTransactionHash_gte: mumbai_Bytes
  executedTransactionHash_lte: mumbai_Bytes
  executedTransactionHash_in: [mumbai_Bytes!]
  executedTransactionHash_not_in: [mumbai_Bytes!]
  executedTransactionHash_contains: mumbai_Bytes
  executedTransactionHash_not_contains: mumbai_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: mumbai_Bytes
  executedTxOrigin_not: mumbai_Bytes
  executedTxOrigin_gt: mumbai_Bytes
  executedTxOrigin_lt: mumbai_Bytes
  executedTxOrigin_gte: mumbai_Bytes
  executedTxOrigin_lte: mumbai_Bytes
  executedTxOrigin_in: [mumbai_Bytes!]
  executedTxOrigin_not_in: [mumbai_Bytes!]
  executedTxOrigin_contains: mumbai_Bytes
  executedTxOrigin_not_contains: mumbai_Bytes
  reconciledCaller: mumbai_Bytes
  reconciledCaller_not: mumbai_Bytes
  reconciledCaller_gt: mumbai_Bytes
  reconciledCaller_lt: mumbai_Bytes
  reconciledCaller_gte: mumbai_Bytes
  reconciledCaller_lte: mumbai_Bytes
  reconciledCaller_in: [mumbai_Bytes!]
  reconciledCaller_not_in: [mumbai_Bytes!]
  reconciledCaller_contains: mumbai_Bytes
  reconciledCaller_not_contains: mumbai_Bytes
  reconciledTransactionHash: mumbai_Bytes
  reconciledTransactionHash_not: mumbai_Bytes
  reconciledTransactionHash_gt: mumbai_Bytes
  reconciledTransactionHash_lt: mumbai_Bytes
  reconciledTransactionHash_gte: mumbai_Bytes
  reconciledTransactionHash_lte: mumbai_Bytes
  reconciledTransactionHash_in: [mumbai_Bytes!]
  reconciledTransactionHash_not_in: [mumbai_Bytes!]
  reconciledTransactionHash_contains: mumbai_Bytes
  reconciledTransactionHash_not_contains: mumbai_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: mumbai_Bytes
  reconciledTxOrigin_not: mumbai_Bytes
  reconciledTxOrigin_gt: mumbai_Bytes
  reconciledTxOrigin_lt: mumbai_Bytes
  reconciledTxOrigin_gte: mumbai_Bytes
  reconciledTxOrigin_lte: mumbai_Bytes
  reconciledTxOrigin_in: [mumbai_Bytes!]
  reconciledTxOrigin_not_in: [mumbai_Bytes!]
  reconciledTxOrigin_contains: mumbai_Bytes
  reconciledTxOrigin_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type mumbai_OriginMessage {
  id: ID!
  transferId: mumbai_Bytes
  destinationDomain: BigInt
  leaf: mumbai_Bytes
  index: BigInt
  message: mumbai_Bytes
  root: mumbai_Bytes
  transactionHash: mumbai_Bytes
  blockNumber: BigInt
  rootCount: mumbai_RootCount
}

input mumbai_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_gt: mumbai_Bytes
  transferId_lt: mumbai_Bytes
  transferId_gte: mumbai_Bytes
  transferId_lte: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: mumbai_Bytes
  leaf_not: mumbai_Bytes
  leaf_gt: mumbai_Bytes
  leaf_lt: mumbai_Bytes
  leaf_gte: mumbai_Bytes
  leaf_lte: mumbai_Bytes
  leaf_in: [mumbai_Bytes!]
  leaf_not_in: [mumbai_Bytes!]
  leaf_contains: mumbai_Bytes
  leaf_not_contains: mumbai_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: mumbai_Bytes
  message_not: mumbai_Bytes
  message_gt: mumbai_Bytes
  message_lt: mumbai_Bytes
  message_gte: mumbai_Bytes
  message_lte: mumbai_Bytes
  message_in: [mumbai_Bytes!]
  message_not_in: [mumbai_Bytes!]
  message_contains: mumbai_Bytes
  message_not_contains: mumbai_Bytes
  root: mumbai_Bytes
  root_not: mumbai_Bytes
  root_gt: mumbai_Bytes
  root_lt: mumbai_Bytes
  root_gte: mumbai_Bytes
  root_lte: mumbai_Bytes
  root_in: [mumbai_Bytes!]
  root_not_in: [mumbai_Bytes!]
  root_contains: mumbai_Bytes
  root_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_gt: mumbai_Bytes
  transactionHash_lt: mumbai_Bytes
  transactionHash_gte: mumbai_Bytes
  transactionHash_lte: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: mumbai_RootCount_filter
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type mumbai_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: mumbai_Bytes
  nonce: BigInt
  status: mumbai_TransferStatus
  messageHash: mumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: mumbai_Bytes
  delegate: mumbai_Bytes
  receiveLocal: Boolean
  callData: mumbai_Bytes
  slippage: BigInt
  originSender: mumbai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: mumbai_Bytes
  asset: mumbai_Asset
  transacting: mumbai_Bytes
  message: mumbai_OriginMessage
  relayerFee: BigInt
  caller: mumbai_Bytes
  transactionHash: mumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: mumbai_Bytes
}

input mumbai_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_gt: mumbai_Bytes
  transferId_lt: mumbai_Bytes
  transferId_gte: mumbai_Bytes
  transferId_lte: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: mumbai_TransferStatus
  status_not: mumbai_TransferStatus
  status_in: [mumbai_TransferStatus!]
  status_not_in: [mumbai_TransferStatus!]
  messageHash: mumbai_Bytes
  messageHash_not: mumbai_Bytes
  messageHash_gt: mumbai_Bytes
  messageHash_lt: mumbai_Bytes
  messageHash_gte: mumbai_Bytes
  messageHash_lte: mumbai_Bytes
  messageHash_in: [mumbai_Bytes!]
  messageHash_not_in: [mumbai_Bytes!]
  messageHash_contains: mumbai_Bytes
  messageHash_not_contains: mumbai_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: mumbai_Bytes
  to_not: mumbai_Bytes
  to_gt: mumbai_Bytes
  to_lt: mumbai_Bytes
  to_gte: mumbai_Bytes
  to_lte: mumbai_Bytes
  to_in: [mumbai_Bytes!]
  to_not_in: [mumbai_Bytes!]
  to_contains: mumbai_Bytes
  to_not_contains: mumbai_Bytes
  delegate: mumbai_Bytes
  delegate_not: mumbai_Bytes
  delegate_gt: mumbai_Bytes
  delegate_lt: mumbai_Bytes
  delegate_gte: mumbai_Bytes
  delegate_lte: mumbai_Bytes
  delegate_in: [mumbai_Bytes!]
  delegate_not_in: [mumbai_Bytes!]
  delegate_contains: mumbai_Bytes
  delegate_not_contains: mumbai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: mumbai_Bytes
  callData_not: mumbai_Bytes
  callData_gt: mumbai_Bytes
  callData_lt: mumbai_Bytes
  callData_gte: mumbai_Bytes
  callData_lte: mumbai_Bytes
  callData_in: [mumbai_Bytes!]
  callData_not_in: [mumbai_Bytes!]
  callData_contains: mumbai_Bytes
  callData_not_contains: mumbai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: mumbai_Bytes
  originSender_not: mumbai_Bytes
  originSender_gt: mumbai_Bytes
  originSender_lt: mumbai_Bytes
  originSender_gte: mumbai_Bytes
  originSender_lte: mumbai_Bytes
  originSender_in: [mumbai_Bytes!]
  originSender_not_in: [mumbai_Bytes!]
  originSender_contains: mumbai_Bytes
  originSender_not_contains: mumbai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: mumbai_Bytes
  canonicalId_not: mumbai_Bytes
  canonicalId_gt: mumbai_Bytes
  canonicalId_lt: mumbai_Bytes
  canonicalId_gte: mumbai_Bytes
  canonicalId_lte: mumbai_Bytes
  canonicalId_in: [mumbai_Bytes!]
  canonicalId_not_in: [mumbai_Bytes!]
  canonicalId_contains: mumbai_Bytes
  canonicalId_not_contains: mumbai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mumbai_Asset_filter
  transacting: mumbai_Bytes
  transacting_not: mumbai_Bytes
  transacting_gt: mumbai_Bytes
  transacting_lt: mumbai_Bytes
  transacting_gte: mumbai_Bytes
  transacting_lte: mumbai_Bytes
  transacting_in: [mumbai_Bytes!]
  transacting_not_in: [mumbai_Bytes!]
  transacting_contains: mumbai_Bytes
  transacting_not_contains: mumbai_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: mumbai_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_gt: mumbai_Bytes
  caller_lt: mumbai_Bytes
  caller_gte: mumbai_Bytes
  caller_lte: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_gt: mumbai_Bytes
  transactionHash_lt: mumbai_Bytes
  transactionHash_gte: mumbai_Bytes
  transactionHash_lte: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: mumbai_Bytes
  txOrigin_not: mumbai_Bytes
  txOrigin_gt: mumbai_Bytes
  txOrigin_lt: mumbai_Bytes
  txOrigin_gte: mumbai_Bytes
  txOrigin_lte: mumbai_Bytes
  txOrigin_in: [mumbai_Bytes!]
  txOrigin_not_in: [mumbai_Bytes!]
  txOrigin_contains: mumbai_Bytes
  txOrigin_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type mumbai_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: mumbai_Bytes
}

input mumbai_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: mumbai_Bytes
  relayer_not: mumbai_Bytes
  relayer_gt: mumbai_Bytes
  relayer_lt: mumbai_Bytes
  relayer_gte: mumbai_Bytes
  relayer_lte: mumbai_Bytes
  relayer_in: [mumbai_Bytes!]
  relayer_not_in: [mumbai_Bytes!]
  relayer_contains: mumbai_Bytes
  relayer_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Relayer_orderBy {
  id
  isActive
  relayer
}

type mumbai_RootCount {
  id: ID!
  count: BigInt
}

input mumbai_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_RootCount_orderBy {
  id
  count
}

type mumbai_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: mumbai_Bytes
  count: BigInt
  caller: mumbai_Bytes
  transactionHash: mumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mumbai_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: mumbai_Bytes
  root_not: mumbai_Bytes
  root_gt: mumbai_Bytes
  root_lt: mumbai_Bytes
  root_gte: mumbai_Bytes
  root_lte: mumbai_Bytes
  root_in: [mumbai_Bytes!]
  root_not_in: [mumbai_Bytes!]
  root_contains: mumbai_Bytes
  root_not_contains: mumbai_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_gt: mumbai_Bytes
  caller_lt: mumbai_Bytes
  caller_gte: mumbai_Bytes
  caller_lte: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_gt: mumbai_Bytes
  transactionHash_lt: mumbai_Bytes
  transactionHash_gte: mumbai_Bytes
  transactionHash_lte: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mumbai_Router {
  id: ID!
  isActive: Boolean!
  owner: mumbai_Bytes
  recipient: mumbai_Bytes
  proposedOwner: mumbai_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: mumbai_AssetBalance_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_AssetBalance_filter): [mumbai_AssetBalance!]!
}

input mumbai_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: mumbai_Bytes
  owner_not: mumbai_Bytes
  owner_gt: mumbai_Bytes
  owner_lt: mumbai_Bytes
  owner_gte: mumbai_Bytes
  owner_lte: mumbai_Bytes
  owner_in: [mumbai_Bytes!]
  owner_not_in: [mumbai_Bytes!]
  owner_contains: mumbai_Bytes
  owner_not_contains: mumbai_Bytes
  recipient: mumbai_Bytes
  recipient_not: mumbai_Bytes
  recipient_gt: mumbai_Bytes
  recipient_lt: mumbai_Bytes
  recipient_gte: mumbai_Bytes
  recipient_lte: mumbai_Bytes
  recipient_in: [mumbai_Bytes!]
  recipient_not_in: [mumbai_Bytes!]
  recipient_contains: mumbai_Bytes
  recipient_not_contains: mumbai_Bytes
  proposedOwner: mumbai_Bytes
  proposedOwner_not: mumbai_Bytes
  proposedOwner_gt: mumbai_Bytes
  proposedOwner_lt: mumbai_Bytes
  proposedOwner_gte: mumbai_Bytes
  proposedOwner_lte: mumbai_Bytes
  proposedOwner_in: [mumbai_Bytes!]
  proposedOwner_not_in: [mumbai_Bytes!]
  proposedOwner_contains: mumbai_Bytes
  proposedOwner_not_contains: mumbai_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: mumbai_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type mumbai_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: mumbai_Bytes
}

input mumbai_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: mumbai_Bytes
  sequencer_not: mumbai_Bytes
  sequencer_gt: mumbai_Bytes
  sequencer_lt: mumbai_Bytes
  sequencer_gte: mumbai_Bytes
  sequencer_lte: mumbai_Bytes
  sequencer_in: [mumbai_Bytes!]
  sequencer_not_in: [mumbai_Bytes!]
  sequencer_contains: mumbai_Bytes
  sequencer_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type mumbai_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: mumbai_Bytes!
}

input mumbai_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_gt: mumbai_Bytes
  caller_lt: mumbai_Bytes
  caller_gte: mumbai_Bytes
  caller_lte: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type mumbai_StableSwapLiquidity {
  id: ID!
  provider: mumbai_Bytes!
  stableSwap: mumbai_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input mumbai_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: mumbai_Bytes
  provider_not: mumbai_Bytes
  provider_gt: mumbai_Bytes
  provider_lt: mumbai_Bytes
  provider_gte: mumbai_Bytes
  provider_lte: mumbai_Bytes
  provider_in: [mumbai_Bytes!]
  provider_not_in: [mumbai_Bytes!]
  provider_contains: mumbai_Bytes
  provider_not_contains: mumbai_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mumbai_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

type mumbai_TransferRelayerFee {
  id: ID!
  transferId: mumbai_Bytes!
  fee: BigInt
}

input mumbai_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_gt: mumbai_Bytes
  transferId_lt: mumbai_Bytes
  transferId_gte: mumbai_Bytes
  transferId_lte: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum mumbai_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type mainnet_AggregateRoot {
  id: ID!
  root: mainnet_Bytes!
  blockNumber: BigInt!
}

input mainnet_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_gt: mainnet_Bytes
  root_lt: mainnet_Bytes
  root_gte: mainnet_Bytes
  root_lte: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type mainnet_Asset {
  id: ID!
  key: mainnet_Bytes
  canonicalId: mainnet_Bytes
  canonicalDomain: BigInt
  adoptedAsset: mainnet_Bytes
  localAsset: mainnet_Bytes
  blockNumber: BigInt
}

type mainnet_AssetBalance {
  id: ID!
  amount: BigInt!
  router: mainnet_Router!
  asset: mainnet_Asset!
  feesEarned: BigInt!
}

input mainnet_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mainnet_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mainnet_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input mainnet_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: mainnet_Bytes
  key_not: mainnet_Bytes
  key_gt: mainnet_Bytes
  key_lt: mainnet_Bytes
  key_gte: mainnet_Bytes
  key_lte: mainnet_Bytes
  key_in: [mainnet_Bytes!]
  key_not_in: [mainnet_Bytes!]
  key_contains: mainnet_Bytes
  key_not_contains: mainnet_Bytes
  canonicalId: mainnet_Bytes
  canonicalId_not: mainnet_Bytes
  canonicalId_gt: mainnet_Bytes
  canonicalId_lt: mainnet_Bytes
  canonicalId_gte: mainnet_Bytes
  canonicalId_lte: mainnet_Bytes
  canonicalId_in: [mainnet_Bytes!]
  canonicalId_not_in: [mainnet_Bytes!]
  canonicalId_contains: mainnet_Bytes
  canonicalId_not_contains: mainnet_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: mainnet_Bytes
  adoptedAsset_not: mainnet_Bytes
  adoptedAsset_gt: mainnet_Bytes
  adoptedAsset_lt: mainnet_Bytes
  adoptedAsset_gte: mainnet_Bytes
  adoptedAsset_lte: mainnet_Bytes
  adoptedAsset_in: [mainnet_Bytes!]
  adoptedAsset_not_in: [mainnet_Bytes!]
  adoptedAsset_contains: mainnet_Bytes
  adoptedAsset_not_contains: mainnet_Bytes
  localAsset: mainnet_Bytes
  localAsset_not: mainnet_Bytes
  localAsset_gt: mainnet_Bytes
  localAsset_lt: mainnet_Bytes
  localAsset_gte: mainnet_Bytes
  localAsset_lte: mainnet_Bytes
  localAsset_in: [mainnet_Bytes!]
  localAsset_not_in: [mainnet_Bytes!]
  localAsset_contains: mainnet_Bytes
  localAsset_not_contains: mainnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type mainnet_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: mainnet_Bytes
  rootManager: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
}

input mainnet_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_gt: mainnet_Bytes
  amb_lt: mainnet_Bytes
  amb_gte: mainnet_Bytes
  amb_lte: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_gt: mainnet_Bytes
  rootManager_lt: mainnet_Bytes
  rootManager_gte: mainnet_Bytes
  rootManager_lte: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_gt: mainnet_Bytes
  mirrorConnector_lt: mainnet_Bytes
  mirrorConnector_gte: mainnet_Bytes
  mirrorConnector_lte: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type mainnet_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: mainnet_Bytes
  nonce: BigInt
  status: mainnet_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: mainnet_Router_orderBy, orderDirection: mainnet_OrderDirection, where: mainnet_Router_filter): [mainnet_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: mainnet_Bytes
  delegate: mainnet_Bytes
  receiveLocal: Boolean
  callData: mainnet_Bytes
  slippage: BigInt
  originSender: mainnet_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: mainnet_Bytes
  asset: mainnet_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: mainnet_Bytes
  executedTransactionHash: mainnet_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: mainnet_Bytes
  reconciledCaller: mainnet_Bytes
  reconciledTransactionHash: mainnet_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: mainnet_Bytes
}

input mainnet_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mainnet_Bytes
  transferId_not: mainnet_Bytes
  transferId_gt: mainnet_Bytes
  transferId_lt: mainnet_Bytes
  transferId_gte: mainnet_Bytes
  transferId_lte: mainnet_Bytes
  transferId_in: [mainnet_Bytes!]
  transferId_not_in: [mainnet_Bytes!]
  transferId_contains: mainnet_Bytes
  transferId_not_contains: mainnet_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: mainnet_TransferStatus
  status_not: mainnet_TransferStatus
  status_in: [mainnet_TransferStatus!]
  status_not_in: [mainnet_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: mainnet_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: mainnet_Bytes
  to_not: mainnet_Bytes
  to_gt: mainnet_Bytes
  to_lt: mainnet_Bytes
  to_gte: mainnet_Bytes
  to_lte: mainnet_Bytes
  to_in: [mainnet_Bytes!]
  to_not_in: [mainnet_Bytes!]
  to_contains: mainnet_Bytes
  to_not_contains: mainnet_Bytes
  delegate: mainnet_Bytes
  delegate_not: mainnet_Bytes
  delegate_gt: mainnet_Bytes
  delegate_lt: mainnet_Bytes
  delegate_gte: mainnet_Bytes
  delegate_lte: mainnet_Bytes
  delegate_in: [mainnet_Bytes!]
  delegate_not_in: [mainnet_Bytes!]
  delegate_contains: mainnet_Bytes
  delegate_not_contains: mainnet_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: mainnet_Bytes
  callData_not: mainnet_Bytes
  callData_gt: mainnet_Bytes
  callData_lt: mainnet_Bytes
  callData_gte: mainnet_Bytes
  callData_lte: mainnet_Bytes
  callData_in: [mainnet_Bytes!]
  callData_not_in: [mainnet_Bytes!]
  callData_contains: mainnet_Bytes
  callData_not_contains: mainnet_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: mainnet_Bytes
  originSender_not: mainnet_Bytes
  originSender_gt: mainnet_Bytes
  originSender_lt: mainnet_Bytes
  originSender_gte: mainnet_Bytes
  originSender_lte: mainnet_Bytes
  originSender_in: [mainnet_Bytes!]
  originSender_not_in: [mainnet_Bytes!]
  originSender_contains: mainnet_Bytes
  originSender_not_contains: mainnet_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: mainnet_Bytes
  canonicalId_not: mainnet_Bytes
  canonicalId_gt: mainnet_Bytes
  canonicalId_lt: mainnet_Bytes
  canonicalId_gte: mainnet_Bytes
  canonicalId_lte: mainnet_Bytes
  canonicalId_in: [mainnet_Bytes!]
  canonicalId_not_in: [mainnet_Bytes!]
  canonicalId_contains: mainnet_Bytes
  canonicalId_not_contains: mainnet_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mainnet_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: mainnet_Bytes
  executedCaller_not: mainnet_Bytes
  executedCaller_gt: mainnet_Bytes
  executedCaller_lt: mainnet_Bytes
  executedCaller_gte: mainnet_Bytes
  executedCaller_lte: mainnet_Bytes
  executedCaller_in: [mainnet_Bytes!]
  executedCaller_not_in: [mainnet_Bytes!]
  executedCaller_contains: mainnet_Bytes
  executedCaller_not_contains: mainnet_Bytes
  executedTransactionHash: mainnet_Bytes
  executedTransactionHash_not: mainnet_Bytes
  executedTransactionHash_gt: mainnet_Bytes
  executedTransactionHash_lt: mainnet_Bytes
  executedTransactionHash_gte: mainnet_Bytes
  executedTransactionHash_lte: mainnet_Bytes
  executedTransactionHash_in: [mainnet_Bytes!]
  executedTransactionHash_not_in: [mainnet_Bytes!]
  executedTransactionHash_contains: mainnet_Bytes
  executedTransactionHash_not_contains: mainnet_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: mainnet_Bytes
  executedTxOrigin_not: mainnet_Bytes
  executedTxOrigin_gt: mainnet_Bytes
  executedTxOrigin_lt: mainnet_Bytes
  executedTxOrigin_gte: mainnet_Bytes
  executedTxOrigin_lte: mainnet_Bytes
  executedTxOrigin_in: [mainnet_Bytes!]
  executedTxOrigin_not_in: [mainnet_Bytes!]
  executedTxOrigin_contains: mainnet_Bytes
  executedTxOrigin_not_contains: mainnet_Bytes
  reconciledCaller: mainnet_Bytes
  reconciledCaller_not: mainnet_Bytes
  reconciledCaller_gt: mainnet_Bytes
  reconciledCaller_lt: mainnet_Bytes
  reconciledCaller_gte: mainnet_Bytes
  reconciledCaller_lte: mainnet_Bytes
  reconciledCaller_in: [mainnet_Bytes!]
  reconciledCaller_not_in: [mainnet_Bytes!]
  reconciledCaller_contains: mainnet_Bytes
  reconciledCaller_not_contains: mainnet_Bytes
  reconciledTransactionHash: mainnet_Bytes
  reconciledTransactionHash_not: mainnet_Bytes
  reconciledTransactionHash_gt: mainnet_Bytes
  reconciledTransactionHash_lt: mainnet_Bytes
  reconciledTransactionHash_gte: mainnet_Bytes
  reconciledTransactionHash_lte: mainnet_Bytes
  reconciledTransactionHash_in: [mainnet_Bytes!]
  reconciledTransactionHash_not_in: [mainnet_Bytes!]
  reconciledTransactionHash_contains: mainnet_Bytes
  reconciledTransactionHash_not_contains: mainnet_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: mainnet_Bytes
  reconciledTxOrigin_not: mainnet_Bytes
  reconciledTxOrigin_gt: mainnet_Bytes
  reconciledTxOrigin_lt: mainnet_Bytes
  reconciledTxOrigin_gte: mainnet_Bytes
  reconciledTxOrigin_lte: mainnet_Bytes
  reconciledTxOrigin_in: [mainnet_Bytes!]
  reconciledTxOrigin_not_in: [mainnet_Bytes!]
  reconciledTxOrigin_contains: mainnet_Bytes
  reconciledTxOrigin_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type mainnet_OriginMessage {
  id: ID!
  transferId: mainnet_Bytes
  destinationDomain: BigInt
  leaf: mainnet_Bytes
  index: BigInt
  message: mainnet_Bytes
  root: mainnet_Bytes
  transactionHash: mainnet_Bytes
  blockNumber: BigInt
  rootCount: mainnet_RootCount
}

input mainnet_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: mainnet_Bytes
  transferId_not: mainnet_Bytes
  transferId_gt: mainnet_Bytes
  transferId_lt: mainnet_Bytes
  transferId_gte: mainnet_Bytes
  transferId_lte: mainnet_Bytes
  transferId_in: [mainnet_Bytes!]
  transferId_not_in: [mainnet_Bytes!]
  transferId_contains: mainnet_Bytes
  transferId_not_contains: mainnet_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: mainnet_Bytes
  leaf_not: mainnet_Bytes
  leaf_gt: mainnet_Bytes
  leaf_lt: mainnet_Bytes
  leaf_gte: mainnet_Bytes
  leaf_lte: mainnet_Bytes
  leaf_in: [mainnet_Bytes!]
  leaf_not_in: [mainnet_Bytes!]
  leaf_contains: mainnet_Bytes
  leaf_not_contains: mainnet_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: mainnet_Bytes
  message_not: mainnet_Bytes
  message_gt: mainnet_Bytes
  message_lt: mainnet_Bytes
  message_gte: mainnet_Bytes
  message_lte: mainnet_Bytes
  message_in: [mainnet_Bytes!]
  message_not_in: [mainnet_Bytes!]
  message_contains: mainnet_Bytes
  message_not_contains: mainnet_Bytes
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_gt: mainnet_Bytes
  root_lt: mainnet_Bytes
  root_gte: mainnet_Bytes
  root_lte: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_gt: mainnet_Bytes
  transactionHash_lt: mainnet_Bytes
  transactionHash_gte: mainnet_Bytes
  transactionHash_lte: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: mainnet_RootCount_filter
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type mainnet_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: mainnet_Bytes
  nonce: BigInt
  status: mainnet_TransferStatus
  messageHash: mainnet_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: mainnet_Bytes
  delegate: mainnet_Bytes
  receiveLocal: Boolean
  callData: mainnet_Bytes
  slippage: BigInt
  originSender: mainnet_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: mainnet_Bytes
  asset: mainnet_Asset
  transacting: mainnet_Bytes
  message: mainnet_OriginMessage
  relayerFee: BigInt
  caller: mainnet_Bytes
  transactionHash: mainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: mainnet_Bytes
}

input mainnet_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mainnet_Bytes
  transferId_not: mainnet_Bytes
  transferId_gt: mainnet_Bytes
  transferId_lt: mainnet_Bytes
  transferId_gte: mainnet_Bytes
  transferId_lte: mainnet_Bytes
  transferId_in: [mainnet_Bytes!]
  transferId_not_in: [mainnet_Bytes!]
  transferId_contains: mainnet_Bytes
  transferId_not_contains: mainnet_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: mainnet_TransferStatus
  status_not: mainnet_TransferStatus
  status_in: [mainnet_TransferStatus!]
  status_not_in: [mainnet_TransferStatus!]
  messageHash: mainnet_Bytes
  messageHash_not: mainnet_Bytes
  messageHash_gt: mainnet_Bytes
  messageHash_lt: mainnet_Bytes
  messageHash_gte: mainnet_Bytes
  messageHash_lte: mainnet_Bytes
  messageHash_in: [mainnet_Bytes!]
  messageHash_not_in: [mainnet_Bytes!]
  messageHash_contains: mainnet_Bytes
  messageHash_not_contains: mainnet_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: mainnet_Bytes
  to_not: mainnet_Bytes
  to_gt: mainnet_Bytes
  to_lt: mainnet_Bytes
  to_gte: mainnet_Bytes
  to_lte: mainnet_Bytes
  to_in: [mainnet_Bytes!]
  to_not_in: [mainnet_Bytes!]
  to_contains: mainnet_Bytes
  to_not_contains: mainnet_Bytes
  delegate: mainnet_Bytes
  delegate_not: mainnet_Bytes
  delegate_gt: mainnet_Bytes
  delegate_lt: mainnet_Bytes
  delegate_gte: mainnet_Bytes
  delegate_lte: mainnet_Bytes
  delegate_in: [mainnet_Bytes!]
  delegate_not_in: [mainnet_Bytes!]
  delegate_contains: mainnet_Bytes
  delegate_not_contains: mainnet_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: mainnet_Bytes
  callData_not: mainnet_Bytes
  callData_gt: mainnet_Bytes
  callData_lt: mainnet_Bytes
  callData_gte: mainnet_Bytes
  callData_lte: mainnet_Bytes
  callData_in: [mainnet_Bytes!]
  callData_not_in: [mainnet_Bytes!]
  callData_contains: mainnet_Bytes
  callData_not_contains: mainnet_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: mainnet_Bytes
  originSender_not: mainnet_Bytes
  originSender_gt: mainnet_Bytes
  originSender_lt: mainnet_Bytes
  originSender_gte: mainnet_Bytes
  originSender_lte: mainnet_Bytes
  originSender_in: [mainnet_Bytes!]
  originSender_not_in: [mainnet_Bytes!]
  originSender_contains: mainnet_Bytes
  originSender_not_contains: mainnet_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: mainnet_Bytes
  canonicalId_not: mainnet_Bytes
  canonicalId_gt: mainnet_Bytes
  canonicalId_lt: mainnet_Bytes
  canonicalId_gte: mainnet_Bytes
  canonicalId_lte: mainnet_Bytes
  canonicalId_in: [mainnet_Bytes!]
  canonicalId_not_in: [mainnet_Bytes!]
  canonicalId_contains: mainnet_Bytes
  canonicalId_not_contains: mainnet_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mainnet_Asset_filter
  transacting: mainnet_Bytes
  transacting_not: mainnet_Bytes
  transacting_gt: mainnet_Bytes
  transacting_lt: mainnet_Bytes
  transacting_gte: mainnet_Bytes
  transacting_lte: mainnet_Bytes
  transacting_in: [mainnet_Bytes!]
  transacting_not_in: [mainnet_Bytes!]
  transacting_contains: mainnet_Bytes
  transacting_not_contains: mainnet_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: mainnet_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_gt: mainnet_Bytes
  caller_lt: mainnet_Bytes
  caller_gte: mainnet_Bytes
  caller_lte: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_gt: mainnet_Bytes
  transactionHash_lt: mainnet_Bytes
  transactionHash_gte: mainnet_Bytes
  transactionHash_lte: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: mainnet_Bytes
  txOrigin_not: mainnet_Bytes
  txOrigin_gt: mainnet_Bytes
  txOrigin_lt: mainnet_Bytes
  txOrigin_gte: mainnet_Bytes
  txOrigin_lte: mainnet_Bytes
  txOrigin_in: [mainnet_Bytes!]
  txOrigin_not_in: [mainnet_Bytes!]
  txOrigin_contains: mainnet_Bytes
  txOrigin_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type mainnet_PooledToken {
  id: ID!
  asset: mainnet_Bytes!
}

input mainnet_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: mainnet_Bytes
  asset_not: mainnet_Bytes
  asset_gt: mainnet_Bytes
  asset_lt: mainnet_Bytes
  asset_gte: mainnet_Bytes
  asset_lte: mainnet_Bytes
  asset_in: [mainnet_Bytes!]
  asset_not_in: [mainnet_Bytes!]
  asset_contains: mainnet_Bytes
  asset_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_PooledToken_orderBy {
  id
  asset
}

type mainnet_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: mainnet_Bytes
}

input mainnet_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: mainnet_Bytes
  relayer_not: mainnet_Bytes
  relayer_gt: mainnet_Bytes
  relayer_lt: mainnet_Bytes
  relayer_gte: mainnet_Bytes
  relayer_lte: mainnet_Bytes
  relayer_in: [mainnet_Bytes!]
  relayer_not_in: [mainnet_Bytes!]
  relayer_contains: mainnet_Bytes
  relayer_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Relayer_orderBy {
  id
  isActive
  relayer
}

type mainnet_RootCount {
  id: ID!
  count: BigInt
}

input mainnet_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RootCount_orderBy {
  id
  count
}

type mainnet_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: mainnet_Bytes
  count: BigInt
  caller: mainnet_Bytes
  transactionHash: mainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mainnet_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_gt: mainnet_Bytes
  root_lt: mainnet_Bytes
  root_gte: mainnet_Bytes
  root_lte: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_gt: mainnet_Bytes
  caller_lt: mainnet_Bytes
  caller_gte: mainnet_Bytes
  caller_lte: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_gt: mainnet_Bytes
  transactionHash_lt: mainnet_Bytes
  transactionHash_gte: mainnet_Bytes
  transactionHash_lte: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mainnet_Router {
  id: ID!
  isActive: Boolean!
  owner: mainnet_Bytes
  recipient: mainnet_Bytes
  proposedOwner: mainnet_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: mainnet_AssetBalance_orderBy, orderDirection: mainnet_OrderDirection, where: mainnet_AssetBalance_filter): [mainnet_AssetBalance!]!
}

input mainnet_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: mainnet_Bytes
  owner_not: mainnet_Bytes
  owner_gt: mainnet_Bytes
  owner_lt: mainnet_Bytes
  owner_gte: mainnet_Bytes
  owner_lte: mainnet_Bytes
  owner_in: [mainnet_Bytes!]
  owner_not_in: [mainnet_Bytes!]
  owner_contains: mainnet_Bytes
  owner_not_contains: mainnet_Bytes
  recipient: mainnet_Bytes
  recipient_not: mainnet_Bytes
  recipient_gt: mainnet_Bytes
  recipient_lt: mainnet_Bytes
  recipient_gte: mainnet_Bytes
  recipient_lte: mainnet_Bytes
  recipient_in: [mainnet_Bytes!]
  recipient_not_in: [mainnet_Bytes!]
  recipient_contains: mainnet_Bytes
  recipient_not_contains: mainnet_Bytes
  proposedOwner: mainnet_Bytes
  proposedOwner_not: mainnet_Bytes
  proposedOwner_gt: mainnet_Bytes
  proposedOwner_lt: mainnet_Bytes
  proposedOwner_gte: mainnet_Bytes
  proposedOwner_lte: mainnet_Bytes
  proposedOwner_in: [mainnet_Bytes!]
  proposedOwner_not_in: [mainnet_Bytes!]
  proposedOwner_contains: mainnet_Bytes
  proposedOwner_not_contains: mainnet_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: mainnet_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type mainnet_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: mainnet_Bytes
}

input mainnet_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: mainnet_Bytes
  sequencer_not: mainnet_Bytes
  sequencer_gt: mainnet_Bytes
  sequencer_lt: mainnet_Bytes
  sequencer_gte: mainnet_Bytes
  sequencer_lte: mainnet_Bytes
  sequencer_in: [mainnet_Bytes!]
  sequencer_not_in: [mainnet_Bytes!]
  sequencer_contains: mainnet_Bytes
  sequencer_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type mainnet_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: mainnet_Bytes!
}

input mainnet_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_gt: mainnet_Bytes
  caller_lt: mainnet_Bytes
  caller_gte: mainnet_Bytes
  caller_lte: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type mainnet_StableSwap {
  id: ID!
  isActive: Boolean
  key: mainnet_Bytes
  canonicalId: mainnet_Bytes
  domain: BigInt
  swapPool: mainnet_Bytes
  lpToken: mainnet_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: mainnet_PooledToken_orderBy, orderDirection: mainnet_OrderDirection, where: mainnet_PooledToken_filter): [mainnet_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
}

type mainnet_StableSwapLiquidity {
  id: ID!
  provider: mainnet_Bytes!
  stableSwap: mainnet_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input mainnet_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: mainnet_Bytes
  provider_not: mainnet_Bytes
  provider_gt: mainnet_Bytes
  provider_lt: mainnet_Bytes
  provider_gte: mainnet_Bytes
  provider_lte: mainnet_Bytes
  provider_in: [mainnet_Bytes!]
  provider_not_in: [mainnet_Bytes!]
  provider_contains: mainnet_Bytes
  provider_not_contains: mainnet_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: mainnet_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

input mainnet_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: mainnet_Bytes
  key_not: mainnet_Bytes
  key_gt: mainnet_Bytes
  key_lt: mainnet_Bytes
  key_gte: mainnet_Bytes
  key_lte: mainnet_Bytes
  key_in: [mainnet_Bytes!]
  key_not_in: [mainnet_Bytes!]
  key_contains: mainnet_Bytes
  key_not_contains: mainnet_Bytes
  canonicalId: mainnet_Bytes
  canonicalId_not: mainnet_Bytes
  canonicalId_gt: mainnet_Bytes
  canonicalId_lt: mainnet_Bytes
  canonicalId_gte: mainnet_Bytes
  canonicalId_lte: mainnet_Bytes
  canonicalId_in: [mainnet_Bytes!]
  canonicalId_not_in: [mainnet_Bytes!]
  canonicalId_contains: mainnet_Bytes
  canonicalId_not_contains: mainnet_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: mainnet_Bytes
  swapPool_not: mainnet_Bytes
  swapPool_gt: mainnet_Bytes
  swapPool_lt: mainnet_Bytes
  swapPool_gte: mainnet_Bytes
  swapPool_lte: mainnet_Bytes
  swapPool_in: [mainnet_Bytes!]
  swapPool_not_in: [mainnet_Bytes!]
  swapPool_contains: mainnet_Bytes
  swapPool_not_contains: mainnet_Bytes
  lpToken: mainnet_Bytes
  lpToken_not: mainnet_Bytes
  lpToken_gt: mainnet_Bytes
  lpToken_lt: mainnet_Bytes
  lpToken_gte: mainnet_Bytes
  lpToken_lte: mainnet_Bytes
  lpToken_in: [mainnet_Bytes!]
  lpToken_not_in: [mainnet_Bytes!]
  lpToken_contains: mainnet_Bytes
  lpToken_not_contains: mainnet_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: mainnet_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
}

type mainnet_TransferRelayerFee {
  id: ID!
  transferId: mainnet_Bytes!
  fee: BigInt
}

input mainnet_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: mainnet_Bytes
  transferId_not: mainnet_Bytes
  transferId_gt: mainnet_Bytes
  transferId_lt: mainnet_Bytes
  transferId_gte: mainnet_Bytes
  transferId_lte: mainnet_Bytes
  transferId_in: [mainnet_Bytes!]
  transferId_not_in: [mainnet_Bytes!]
  transferId_contains: mainnet_Bytes
  transferId_not_contains: mainnet_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum mainnet_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type arbitrumgoerli_AggregateRoot {
  id: ID!
  root: arbitrumgoerli_Bytes!
  blockNumber: BigInt!
}

input arbitrumgoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: arbitrumgoerli_Bytes
  root_not: arbitrumgoerli_Bytes
  root_gt: arbitrumgoerli_Bytes
  root_lt: arbitrumgoerli_Bytes
  root_gte: arbitrumgoerli_Bytes
  root_lte: arbitrumgoerli_Bytes
  root_in: [arbitrumgoerli_Bytes!]
  root_not_in: [arbitrumgoerli_Bytes!]
  root_contains: arbitrumgoerli_Bytes
  root_not_contains: arbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type arbitrumgoerli_Asset {
  id: ID!
  key: arbitrumgoerli_Bytes
  canonicalId: arbitrumgoerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: arbitrumgoerli_Bytes
  localAsset: arbitrumgoerli_Bytes
  blockNumber: BigInt
}

type arbitrumgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: arbitrumgoerli_Router!
  asset: arbitrumgoerli_Asset!
  feesEarned: BigInt!
}

input arbitrumgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: arbitrumgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumgoerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input arbitrumgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: arbitrumgoerli_Bytes
  key_not: arbitrumgoerli_Bytes
  key_gt: arbitrumgoerli_Bytes
  key_lt: arbitrumgoerli_Bytes
  key_gte: arbitrumgoerli_Bytes
  key_lte: arbitrumgoerli_Bytes
  key_in: [arbitrumgoerli_Bytes!]
  key_not_in: [arbitrumgoerli_Bytes!]
  key_contains: arbitrumgoerli_Bytes
  key_not_contains: arbitrumgoerli_Bytes
  canonicalId: arbitrumgoerli_Bytes
  canonicalId_not: arbitrumgoerli_Bytes
  canonicalId_gt: arbitrumgoerli_Bytes
  canonicalId_lt: arbitrumgoerli_Bytes
  canonicalId_gte: arbitrumgoerli_Bytes
  canonicalId_lte: arbitrumgoerli_Bytes
  canonicalId_in: [arbitrumgoerli_Bytes!]
  canonicalId_not_in: [arbitrumgoerli_Bytes!]
  canonicalId_contains: arbitrumgoerli_Bytes
  canonicalId_not_contains: arbitrumgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: arbitrumgoerli_Bytes
  adoptedAsset_not: arbitrumgoerli_Bytes
  adoptedAsset_gt: arbitrumgoerli_Bytes
  adoptedAsset_lt: arbitrumgoerli_Bytes
  adoptedAsset_gte: arbitrumgoerli_Bytes
  adoptedAsset_lte: arbitrumgoerli_Bytes
  adoptedAsset_in: [arbitrumgoerli_Bytes!]
  adoptedAsset_not_in: [arbitrumgoerli_Bytes!]
  adoptedAsset_contains: arbitrumgoerli_Bytes
  adoptedAsset_not_contains: arbitrumgoerli_Bytes
  localAsset: arbitrumgoerli_Bytes
  localAsset_not: arbitrumgoerli_Bytes
  localAsset_gt: arbitrumgoerli_Bytes
  localAsset_lt: arbitrumgoerli_Bytes
  localAsset_gte: arbitrumgoerli_Bytes
  localAsset_lte: arbitrumgoerli_Bytes
  localAsset_in: [arbitrumgoerli_Bytes!]
  localAsset_not_in: [arbitrumgoerli_Bytes!]
  localAsset_contains: arbitrumgoerli_Bytes
  localAsset_not_contains: arbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type arbitrumgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: arbitrumgoerli_Bytes
  rootManager: arbitrumgoerli_Bytes
  mirrorConnector: arbitrumgoerli_Bytes
}

input arbitrumgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: arbitrumgoerli_Bytes
  amb_not: arbitrumgoerli_Bytes
  amb_gt: arbitrumgoerli_Bytes
  amb_lt: arbitrumgoerli_Bytes
  amb_gte: arbitrumgoerli_Bytes
  amb_lte: arbitrumgoerli_Bytes
  amb_in: [arbitrumgoerli_Bytes!]
  amb_not_in: [arbitrumgoerli_Bytes!]
  amb_contains: arbitrumgoerli_Bytes
  amb_not_contains: arbitrumgoerli_Bytes
  rootManager: arbitrumgoerli_Bytes
  rootManager_not: arbitrumgoerli_Bytes
  rootManager_gt: arbitrumgoerli_Bytes
  rootManager_lt: arbitrumgoerli_Bytes
  rootManager_gte: arbitrumgoerli_Bytes
  rootManager_lte: arbitrumgoerli_Bytes
  rootManager_in: [arbitrumgoerli_Bytes!]
  rootManager_not_in: [arbitrumgoerli_Bytes!]
  rootManager_contains: arbitrumgoerli_Bytes
  rootManager_not_contains: arbitrumgoerli_Bytes
  mirrorConnector: arbitrumgoerli_Bytes
  mirrorConnector_not: arbitrumgoerli_Bytes
  mirrorConnector_gt: arbitrumgoerli_Bytes
  mirrorConnector_lt: arbitrumgoerli_Bytes
  mirrorConnector_gte: arbitrumgoerli_Bytes
  mirrorConnector_lte: arbitrumgoerli_Bytes
  mirrorConnector_in: [arbitrumgoerli_Bytes!]
  mirrorConnector_not_in: [arbitrumgoerli_Bytes!]
  mirrorConnector_contains: arbitrumgoerli_Bytes
  mirrorConnector_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type arbitrumgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: arbitrumgoerli_Bytes
  nonce: BigInt
  status: arbitrumgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_Router_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_Router_filter): [arbitrumgoerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: arbitrumgoerli_Bytes
  delegate: arbitrumgoerli_Bytes
  receiveLocal: Boolean
  callData: arbitrumgoerli_Bytes
  slippage: BigInt
  originSender: arbitrumgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: arbitrumgoerli_Bytes
  asset: arbitrumgoerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: arbitrumgoerli_Bytes
  executedTransactionHash: arbitrumgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: arbitrumgoerli_Bytes
  reconciledCaller: arbitrumgoerli_Bytes
  reconciledTransactionHash: arbitrumgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: arbitrumgoerli_Bytes
}

input arbitrumgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: arbitrumgoerli_Bytes
  transferId_not: arbitrumgoerli_Bytes
  transferId_gt: arbitrumgoerli_Bytes
  transferId_lt: arbitrumgoerli_Bytes
  transferId_gte: arbitrumgoerli_Bytes
  transferId_lte: arbitrumgoerli_Bytes
  transferId_in: [arbitrumgoerli_Bytes!]
  transferId_not_in: [arbitrumgoerli_Bytes!]
  transferId_contains: arbitrumgoerli_Bytes
  transferId_not_contains: arbitrumgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: arbitrumgoerli_TransferStatus
  status_not: arbitrumgoerli_TransferStatus
  status_in: [arbitrumgoerli_TransferStatus!]
  status_not_in: [arbitrumgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: arbitrumgoerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: arbitrumgoerli_Bytes
  to_not: arbitrumgoerli_Bytes
  to_gt: arbitrumgoerli_Bytes
  to_lt: arbitrumgoerli_Bytes
  to_gte: arbitrumgoerli_Bytes
  to_lte: arbitrumgoerli_Bytes
  to_in: [arbitrumgoerli_Bytes!]
  to_not_in: [arbitrumgoerli_Bytes!]
  to_contains: arbitrumgoerli_Bytes
  to_not_contains: arbitrumgoerli_Bytes
  delegate: arbitrumgoerli_Bytes
  delegate_not: arbitrumgoerli_Bytes
  delegate_gt: arbitrumgoerli_Bytes
  delegate_lt: arbitrumgoerli_Bytes
  delegate_gte: arbitrumgoerli_Bytes
  delegate_lte: arbitrumgoerli_Bytes
  delegate_in: [arbitrumgoerli_Bytes!]
  delegate_not_in: [arbitrumgoerli_Bytes!]
  delegate_contains: arbitrumgoerli_Bytes
  delegate_not_contains: arbitrumgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: arbitrumgoerli_Bytes
  callData_not: arbitrumgoerli_Bytes
  callData_gt: arbitrumgoerli_Bytes
  callData_lt: arbitrumgoerli_Bytes
  callData_gte: arbitrumgoerli_Bytes
  callData_lte: arbitrumgoerli_Bytes
  callData_in: [arbitrumgoerli_Bytes!]
  callData_not_in: [arbitrumgoerli_Bytes!]
  callData_contains: arbitrumgoerli_Bytes
  callData_not_contains: arbitrumgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: arbitrumgoerli_Bytes
  originSender_not: arbitrumgoerli_Bytes
  originSender_gt: arbitrumgoerli_Bytes
  originSender_lt: arbitrumgoerli_Bytes
  originSender_gte: arbitrumgoerli_Bytes
  originSender_lte: arbitrumgoerli_Bytes
  originSender_in: [arbitrumgoerli_Bytes!]
  originSender_not_in: [arbitrumgoerli_Bytes!]
  originSender_contains: arbitrumgoerli_Bytes
  originSender_not_contains: arbitrumgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: arbitrumgoerli_Bytes
  canonicalId_not: arbitrumgoerli_Bytes
  canonicalId_gt: arbitrumgoerli_Bytes
  canonicalId_lt: arbitrumgoerli_Bytes
  canonicalId_gte: arbitrumgoerli_Bytes
  canonicalId_lte: arbitrumgoerli_Bytes
  canonicalId_in: [arbitrumgoerli_Bytes!]
  canonicalId_not_in: [arbitrumgoerli_Bytes!]
  canonicalId_contains: arbitrumgoerli_Bytes
  canonicalId_not_contains: arbitrumgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumgoerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: arbitrumgoerli_Bytes
  executedCaller_not: arbitrumgoerli_Bytes
  executedCaller_gt: arbitrumgoerli_Bytes
  executedCaller_lt: arbitrumgoerli_Bytes
  executedCaller_gte: arbitrumgoerli_Bytes
  executedCaller_lte: arbitrumgoerli_Bytes
  executedCaller_in: [arbitrumgoerli_Bytes!]
  executedCaller_not_in: [arbitrumgoerli_Bytes!]
  executedCaller_contains: arbitrumgoerli_Bytes
  executedCaller_not_contains: arbitrumgoerli_Bytes
  executedTransactionHash: arbitrumgoerli_Bytes
  executedTransactionHash_not: arbitrumgoerli_Bytes
  executedTransactionHash_gt: arbitrumgoerli_Bytes
  executedTransactionHash_lt: arbitrumgoerli_Bytes
  executedTransactionHash_gte: arbitrumgoerli_Bytes
  executedTransactionHash_lte: arbitrumgoerli_Bytes
  executedTransactionHash_in: [arbitrumgoerli_Bytes!]
  executedTransactionHash_not_in: [arbitrumgoerli_Bytes!]
  executedTransactionHash_contains: arbitrumgoerli_Bytes
  executedTransactionHash_not_contains: arbitrumgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: arbitrumgoerli_Bytes
  executedTxOrigin_not: arbitrumgoerli_Bytes
  executedTxOrigin_gt: arbitrumgoerli_Bytes
  executedTxOrigin_lt: arbitrumgoerli_Bytes
  executedTxOrigin_gte: arbitrumgoerli_Bytes
  executedTxOrigin_lte: arbitrumgoerli_Bytes
  executedTxOrigin_in: [arbitrumgoerli_Bytes!]
  executedTxOrigin_not_in: [arbitrumgoerli_Bytes!]
  executedTxOrigin_contains: arbitrumgoerli_Bytes
  executedTxOrigin_not_contains: arbitrumgoerli_Bytes
  reconciledCaller: arbitrumgoerli_Bytes
  reconciledCaller_not: arbitrumgoerli_Bytes
  reconciledCaller_gt: arbitrumgoerli_Bytes
  reconciledCaller_lt: arbitrumgoerli_Bytes
  reconciledCaller_gte: arbitrumgoerli_Bytes
  reconciledCaller_lte: arbitrumgoerli_Bytes
  reconciledCaller_in: [arbitrumgoerli_Bytes!]
  reconciledCaller_not_in: [arbitrumgoerli_Bytes!]
  reconciledCaller_contains: arbitrumgoerli_Bytes
  reconciledCaller_not_contains: arbitrumgoerli_Bytes
  reconciledTransactionHash: arbitrumgoerli_Bytes
  reconciledTransactionHash_not: arbitrumgoerli_Bytes
  reconciledTransactionHash_gt: arbitrumgoerli_Bytes
  reconciledTransactionHash_lt: arbitrumgoerli_Bytes
  reconciledTransactionHash_gte: arbitrumgoerli_Bytes
  reconciledTransactionHash_lte: arbitrumgoerli_Bytes
  reconciledTransactionHash_in: [arbitrumgoerli_Bytes!]
  reconciledTransactionHash_not_in: [arbitrumgoerli_Bytes!]
  reconciledTransactionHash_contains: arbitrumgoerli_Bytes
  reconciledTransactionHash_not_contains: arbitrumgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: arbitrumgoerli_Bytes
  reconciledTxOrigin_not: arbitrumgoerli_Bytes
  reconciledTxOrigin_gt: arbitrumgoerli_Bytes
  reconciledTxOrigin_lt: arbitrumgoerli_Bytes
  reconciledTxOrigin_gte: arbitrumgoerli_Bytes
  reconciledTxOrigin_lte: arbitrumgoerli_Bytes
  reconciledTxOrigin_in: [arbitrumgoerli_Bytes!]
  reconciledTxOrigin_not_in: [arbitrumgoerli_Bytes!]
  reconciledTxOrigin_contains: arbitrumgoerli_Bytes
  reconciledTxOrigin_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type arbitrumgoerli_OriginMessage {
  id: ID!
  transferId: arbitrumgoerli_Bytes
  destinationDomain: BigInt
  leaf: arbitrumgoerli_Bytes
  index: BigInt
  message: arbitrumgoerli_Bytes
  root: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  blockNumber: BigInt
  rootCount: arbitrumgoerli_RootCount
}

input arbitrumgoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: arbitrumgoerli_Bytes
  transferId_not: arbitrumgoerli_Bytes
  transferId_gt: arbitrumgoerli_Bytes
  transferId_lt: arbitrumgoerli_Bytes
  transferId_gte: arbitrumgoerli_Bytes
  transferId_lte: arbitrumgoerli_Bytes
  transferId_in: [arbitrumgoerli_Bytes!]
  transferId_not_in: [arbitrumgoerli_Bytes!]
  transferId_contains: arbitrumgoerli_Bytes
  transferId_not_contains: arbitrumgoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: arbitrumgoerli_Bytes
  leaf_not: arbitrumgoerli_Bytes
  leaf_gt: arbitrumgoerli_Bytes
  leaf_lt: arbitrumgoerli_Bytes
  leaf_gte: arbitrumgoerli_Bytes
  leaf_lte: arbitrumgoerli_Bytes
  leaf_in: [arbitrumgoerli_Bytes!]
  leaf_not_in: [arbitrumgoerli_Bytes!]
  leaf_contains: arbitrumgoerli_Bytes
  leaf_not_contains: arbitrumgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: arbitrumgoerli_Bytes
  message_not: arbitrumgoerli_Bytes
  message_gt: arbitrumgoerli_Bytes
  message_lt: arbitrumgoerli_Bytes
  message_gte: arbitrumgoerli_Bytes
  message_lte: arbitrumgoerli_Bytes
  message_in: [arbitrumgoerli_Bytes!]
  message_not_in: [arbitrumgoerli_Bytes!]
  message_contains: arbitrumgoerli_Bytes
  message_not_contains: arbitrumgoerli_Bytes
  root: arbitrumgoerli_Bytes
  root_not: arbitrumgoerli_Bytes
  root_gt: arbitrumgoerli_Bytes
  root_lt: arbitrumgoerli_Bytes
  root_gte: arbitrumgoerli_Bytes
  root_lte: arbitrumgoerli_Bytes
  root_in: [arbitrumgoerli_Bytes!]
  root_not_in: [arbitrumgoerli_Bytes!]
  root_contains: arbitrumgoerli_Bytes
  root_not_contains: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  transactionHash_not: arbitrumgoerli_Bytes
  transactionHash_gt: arbitrumgoerli_Bytes
  transactionHash_lt: arbitrumgoerli_Bytes
  transactionHash_gte: arbitrumgoerli_Bytes
  transactionHash_lte: arbitrumgoerli_Bytes
  transactionHash_in: [arbitrumgoerli_Bytes!]
  transactionHash_not_in: [arbitrumgoerli_Bytes!]
  transactionHash_contains: arbitrumgoerli_Bytes
  transactionHash_not_contains: arbitrumgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: arbitrumgoerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type arbitrumgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: arbitrumgoerli_Bytes
  nonce: BigInt
  status: arbitrumgoerli_TransferStatus
  messageHash: arbitrumgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: arbitrumgoerli_Bytes
  delegate: arbitrumgoerli_Bytes
  receiveLocal: Boolean
  callData: arbitrumgoerli_Bytes
  slippage: BigInt
  originSender: arbitrumgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: arbitrumgoerli_Bytes
  asset: arbitrumgoerli_Asset
  transacting: arbitrumgoerli_Bytes
  message: arbitrumgoerli_OriginMessage
  relayerFee: BigInt
  caller: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: arbitrumgoerli_Bytes
}

input arbitrumgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: arbitrumgoerli_Bytes
  transferId_not: arbitrumgoerli_Bytes
  transferId_gt: arbitrumgoerli_Bytes
  transferId_lt: arbitrumgoerli_Bytes
  transferId_gte: arbitrumgoerli_Bytes
  transferId_lte: arbitrumgoerli_Bytes
  transferId_in: [arbitrumgoerli_Bytes!]
  transferId_not_in: [arbitrumgoerli_Bytes!]
  transferId_contains: arbitrumgoerli_Bytes
  transferId_not_contains: arbitrumgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: arbitrumgoerli_TransferStatus
  status_not: arbitrumgoerli_TransferStatus
  status_in: [arbitrumgoerli_TransferStatus!]
  status_not_in: [arbitrumgoerli_TransferStatus!]
  messageHash: arbitrumgoerli_Bytes
  messageHash_not: arbitrumgoerli_Bytes
  messageHash_gt: arbitrumgoerli_Bytes
  messageHash_lt: arbitrumgoerli_Bytes
  messageHash_gte: arbitrumgoerli_Bytes
  messageHash_lte: arbitrumgoerli_Bytes
  messageHash_in: [arbitrumgoerli_Bytes!]
  messageHash_not_in: [arbitrumgoerli_Bytes!]
  messageHash_contains: arbitrumgoerli_Bytes
  messageHash_not_contains: arbitrumgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: arbitrumgoerli_Bytes
  to_not: arbitrumgoerli_Bytes
  to_gt: arbitrumgoerli_Bytes
  to_lt: arbitrumgoerli_Bytes
  to_gte: arbitrumgoerli_Bytes
  to_lte: arbitrumgoerli_Bytes
  to_in: [arbitrumgoerli_Bytes!]
  to_not_in: [arbitrumgoerli_Bytes!]
  to_contains: arbitrumgoerli_Bytes
  to_not_contains: arbitrumgoerli_Bytes
  delegate: arbitrumgoerli_Bytes
  delegate_not: arbitrumgoerli_Bytes
  delegate_gt: arbitrumgoerli_Bytes
  delegate_lt: arbitrumgoerli_Bytes
  delegate_gte: arbitrumgoerli_Bytes
  delegate_lte: arbitrumgoerli_Bytes
  delegate_in: [arbitrumgoerli_Bytes!]
  delegate_not_in: [arbitrumgoerli_Bytes!]
  delegate_contains: arbitrumgoerli_Bytes
  delegate_not_contains: arbitrumgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: arbitrumgoerli_Bytes
  callData_not: arbitrumgoerli_Bytes
  callData_gt: arbitrumgoerli_Bytes
  callData_lt: arbitrumgoerli_Bytes
  callData_gte: arbitrumgoerli_Bytes
  callData_lte: arbitrumgoerli_Bytes
  callData_in: [arbitrumgoerli_Bytes!]
  callData_not_in: [arbitrumgoerli_Bytes!]
  callData_contains: arbitrumgoerli_Bytes
  callData_not_contains: arbitrumgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: arbitrumgoerli_Bytes
  originSender_not: arbitrumgoerli_Bytes
  originSender_gt: arbitrumgoerli_Bytes
  originSender_lt: arbitrumgoerli_Bytes
  originSender_gte: arbitrumgoerli_Bytes
  originSender_lte: arbitrumgoerli_Bytes
  originSender_in: [arbitrumgoerli_Bytes!]
  originSender_not_in: [arbitrumgoerli_Bytes!]
  originSender_contains: arbitrumgoerli_Bytes
  originSender_not_contains: arbitrumgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: arbitrumgoerli_Bytes
  canonicalId_not: arbitrumgoerli_Bytes
  canonicalId_gt: arbitrumgoerli_Bytes
  canonicalId_lt: arbitrumgoerli_Bytes
  canonicalId_gte: arbitrumgoerli_Bytes
  canonicalId_lte: arbitrumgoerli_Bytes
  canonicalId_in: [arbitrumgoerli_Bytes!]
  canonicalId_not_in: [arbitrumgoerli_Bytes!]
  canonicalId_contains: arbitrumgoerli_Bytes
  canonicalId_not_contains: arbitrumgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: arbitrumgoerli_Asset_filter
  transacting: arbitrumgoerli_Bytes
  transacting_not: arbitrumgoerli_Bytes
  transacting_gt: arbitrumgoerli_Bytes
  transacting_lt: arbitrumgoerli_Bytes
  transacting_gte: arbitrumgoerli_Bytes
  transacting_lte: arbitrumgoerli_Bytes
  transacting_in: [arbitrumgoerli_Bytes!]
  transacting_not_in: [arbitrumgoerli_Bytes!]
  transacting_contains: arbitrumgoerli_Bytes
  transacting_not_contains: arbitrumgoerli_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: arbitrumgoerli_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: arbitrumgoerli_Bytes
  caller_not: arbitrumgoerli_Bytes
  caller_gt: arbitrumgoerli_Bytes
  caller_lt: arbitrumgoerli_Bytes
  caller_gte: arbitrumgoerli_Bytes
  caller_lte: arbitrumgoerli_Bytes
  caller_in: [arbitrumgoerli_Bytes!]
  caller_not_in: [arbitrumgoerli_Bytes!]
  caller_contains: arbitrumgoerli_Bytes
  caller_not_contains: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  transactionHash_not: arbitrumgoerli_Bytes
  transactionHash_gt: arbitrumgoerli_Bytes
  transactionHash_lt: arbitrumgoerli_Bytes
  transactionHash_gte: arbitrumgoerli_Bytes
  transactionHash_lte: arbitrumgoerli_Bytes
  transactionHash_in: [arbitrumgoerli_Bytes!]
  transactionHash_not_in: [arbitrumgoerli_Bytes!]
  transactionHash_contains: arbitrumgoerli_Bytes
  transactionHash_not_contains: arbitrumgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: arbitrumgoerli_Bytes
  txOrigin_not: arbitrumgoerli_Bytes
  txOrigin_gt: arbitrumgoerli_Bytes
  txOrigin_lt: arbitrumgoerli_Bytes
  txOrigin_gte: arbitrumgoerli_Bytes
  txOrigin_lte: arbitrumgoerli_Bytes
  txOrigin_in: [arbitrumgoerli_Bytes!]
  txOrigin_not_in: [arbitrumgoerli_Bytes!]
  txOrigin_contains: arbitrumgoerli_Bytes
  txOrigin_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type arbitrumgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: arbitrumgoerli_Bytes
}

input arbitrumgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: arbitrumgoerli_Bytes
  relayer_not: arbitrumgoerli_Bytes
  relayer_gt: arbitrumgoerli_Bytes
  relayer_lt: arbitrumgoerli_Bytes
  relayer_gte: arbitrumgoerli_Bytes
  relayer_lte: arbitrumgoerli_Bytes
  relayer_in: [arbitrumgoerli_Bytes!]
  relayer_not_in: [arbitrumgoerli_Bytes!]
  relayer_contains: arbitrumgoerli_Bytes
  relayer_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type arbitrumgoerli_RootCount {
  id: ID!
  count: BigInt
}

input arbitrumgoerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_RootCount_orderBy {
  id
  count
}

type arbitrumgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: arbitrumgoerli_Bytes
  count: BigInt
  caller: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input arbitrumgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: arbitrumgoerli_Bytes
  root_not: arbitrumgoerli_Bytes
  root_gt: arbitrumgoerli_Bytes
  root_lt: arbitrumgoerli_Bytes
  root_gte: arbitrumgoerli_Bytes
  root_lte: arbitrumgoerli_Bytes
  root_in: [arbitrumgoerli_Bytes!]
  root_not_in: [arbitrumgoerli_Bytes!]
  root_contains: arbitrumgoerli_Bytes
  root_not_contains: arbitrumgoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: arbitrumgoerli_Bytes
  caller_not: arbitrumgoerli_Bytes
  caller_gt: arbitrumgoerli_Bytes
  caller_lt: arbitrumgoerli_Bytes
  caller_gte: arbitrumgoerli_Bytes
  caller_lte: arbitrumgoerli_Bytes
  caller_in: [arbitrumgoerli_Bytes!]
  caller_not_in: [arbitrumgoerli_Bytes!]
  caller_contains: arbitrumgoerli_Bytes
  caller_not_contains: arbitrumgoerli_Bytes
  transactionHash: arbitrumgoerli_Bytes
  transactionHash_not: arbitrumgoerli_Bytes
  transactionHash_gt: arbitrumgoerli_Bytes
  transactionHash_lt: arbitrumgoerli_Bytes
  transactionHash_gte: arbitrumgoerli_Bytes
  transactionHash_lte: arbitrumgoerli_Bytes
  transactionHash_in: [arbitrumgoerli_Bytes!]
  transactionHash_not_in: [arbitrumgoerli_Bytes!]
  transactionHash_contains: arbitrumgoerli_Bytes
  transactionHash_not_contains: arbitrumgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type arbitrumgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: arbitrumgoerli_Bytes
  recipient: arbitrumgoerli_Bytes
  proposedOwner: arbitrumgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: arbitrumgoerli_AssetBalance_orderBy, orderDirection: arbitrumgoerli_OrderDirection, where: arbitrumgoerli_AssetBalance_filter): [arbitrumgoerli_AssetBalance!]!
}

input arbitrumgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: arbitrumgoerli_Bytes
  owner_not: arbitrumgoerli_Bytes
  owner_gt: arbitrumgoerli_Bytes
  owner_lt: arbitrumgoerli_Bytes
  owner_gte: arbitrumgoerli_Bytes
  owner_lte: arbitrumgoerli_Bytes
  owner_in: [arbitrumgoerli_Bytes!]
  owner_not_in: [arbitrumgoerli_Bytes!]
  owner_contains: arbitrumgoerli_Bytes
  owner_not_contains: arbitrumgoerli_Bytes
  recipient: arbitrumgoerli_Bytes
  recipient_not: arbitrumgoerli_Bytes
  recipient_gt: arbitrumgoerli_Bytes
  recipient_lt: arbitrumgoerli_Bytes
  recipient_gte: arbitrumgoerli_Bytes
  recipient_lte: arbitrumgoerli_Bytes
  recipient_in: [arbitrumgoerli_Bytes!]
  recipient_not_in: [arbitrumgoerli_Bytes!]
  recipient_contains: arbitrumgoerli_Bytes
  recipient_not_contains: arbitrumgoerli_Bytes
  proposedOwner: arbitrumgoerli_Bytes
  proposedOwner_not: arbitrumgoerli_Bytes
  proposedOwner_gt: arbitrumgoerli_Bytes
  proposedOwner_lt: arbitrumgoerli_Bytes
  proposedOwner_gte: arbitrumgoerli_Bytes
  proposedOwner_lte: arbitrumgoerli_Bytes
  proposedOwner_in: [arbitrumgoerli_Bytes!]
  proposedOwner_not_in: [arbitrumgoerli_Bytes!]
  proposedOwner_contains: arbitrumgoerli_Bytes
  proposedOwner_not_contains: arbitrumgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: arbitrumgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type arbitrumgoerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: arbitrumgoerli_Bytes
}

input arbitrumgoerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: arbitrumgoerli_Bytes
  sequencer_not: arbitrumgoerli_Bytes
  sequencer_gt: arbitrumgoerli_Bytes
  sequencer_lt: arbitrumgoerli_Bytes
  sequencer_gte: arbitrumgoerli_Bytes
  sequencer_lte: arbitrumgoerli_Bytes
  sequencer_in: [arbitrumgoerli_Bytes!]
  sequencer_not_in: [arbitrumgoerli_Bytes!]
  sequencer_contains: arbitrumgoerli_Bytes
  sequencer_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type arbitrumgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: arbitrumgoerli_Bytes!
}

input arbitrumgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: arbitrumgoerli_Bytes
  caller_not: arbitrumgoerli_Bytes
  caller_gt: arbitrumgoerli_Bytes
  caller_lt: arbitrumgoerli_Bytes
  caller_gte: arbitrumgoerli_Bytes
  caller_lte: arbitrumgoerli_Bytes
  caller_in: [arbitrumgoerli_Bytes!]
  caller_not_in: [arbitrumgoerli_Bytes!]
  caller_contains: arbitrumgoerli_Bytes
  caller_not_contains: arbitrumgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type arbitrumgoerli_StableSwapLiquidity {
  id: ID!
  provider: arbitrumgoerli_Bytes!
  stableSwap: arbitrumgoerli_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input arbitrumgoerli_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: arbitrumgoerli_Bytes
  provider_not: arbitrumgoerli_Bytes
  provider_gt: arbitrumgoerli_Bytes
  provider_lt: arbitrumgoerli_Bytes
  provider_gte: arbitrumgoerli_Bytes
  provider_lte: arbitrumgoerli_Bytes
  provider_in: [arbitrumgoerli_Bytes!]
  provider_not_in: [arbitrumgoerli_Bytes!]
  provider_contains: arbitrumgoerli_Bytes
  provider_not_contains: arbitrumgoerli_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumgoerli_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

type arbitrumgoerli_TransferRelayerFee {
  id: ID!
  transferId: arbitrumgoerli_Bytes!
  fee: BigInt
}

input arbitrumgoerli_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: arbitrumgoerli_Bytes
  transferId_not: arbitrumgoerli_Bytes
  transferId_gt: arbitrumgoerli_Bytes
  transferId_lt: arbitrumgoerli_Bytes
  transferId_gte: arbitrumgoerli_Bytes
  transferId_lte: arbitrumgoerli_Bytes
  transferId_in: [arbitrumgoerli_Bytes!]
  transferId_not_in: [arbitrumgoerli_Bytes!]
  transferId_contains: arbitrumgoerli_Bytes
  transferId_not_contains: arbitrumgoerli_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumgoerli_BlockChangedFilter
}

enum arbitrumgoerli_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum arbitrumgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type polygon_AggregateRoot {
  id: ID!
  root: polygon_Bytes!
  blockNumber: BigInt!
}

input polygon_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: polygon_Bytes
  root_not: polygon_Bytes
  root_gt: polygon_Bytes
  root_lt: polygon_Bytes
  root_gte: polygon_Bytes
  root_lte: polygon_Bytes
  root_in: [polygon_Bytes!]
  root_not_in: [polygon_Bytes!]
  root_contains: polygon_Bytes
  root_not_contains: polygon_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type polygon_Asset {
  id: ID!
  key: polygon_Bytes
  canonicalId: polygon_Bytes
  canonicalDomain: BigInt
  adoptedAsset: polygon_Bytes
  localAsset: polygon_Bytes
  blockNumber: BigInt
}

type polygon_AssetBalance {
  id: ID!
  amount: BigInt!
  router: polygon_Router!
  asset: polygon_Asset!
  feesEarned: BigInt!
}

input polygon_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: polygon_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: polygon_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input polygon_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: polygon_Bytes
  key_not: polygon_Bytes
  key_gt: polygon_Bytes
  key_lt: polygon_Bytes
  key_gte: polygon_Bytes
  key_lte: polygon_Bytes
  key_in: [polygon_Bytes!]
  key_not_in: [polygon_Bytes!]
  key_contains: polygon_Bytes
  key_not_contains: polygon_Bytes
  canonicalId: polygon_Bytes
  canonicalId_not: polygon_Bytes
  canonicalId_gt: polygon_Bytes
  canonicalId_lt: polygon_Bytes
  canonicalId_gte: polygon_Bytes
  canonicalId_lte: polygon_Bytes
  canonicalId_in: [polygon_Bytes!]
  canonicalId_not_in: [polygon_Bytes!]
  canonicalId_contains: polygon_Bytes
  canonicalId_not_contains: polygon_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: polygon_Bytes
  adoptedAsset_not: polygon_Bytes
  adoptedAsset_gt: polygon_Bytes
  adoptedAsset_lt: polygon_Bytes
  adoptedAsset_gte: polygon_Bytes
  adoptedAsset_lte: polygon_Bytes
  adoptedAsset_in: [polygon_Bytes!]
  adoptedAsset_not_in: [polygon_Bytes!]
  adoptedAsset_contains: polygon_Bytes
  adoptedAsset_not_contains: polygon_Bytes
  localAsset: polygon_Bytes
  localAsset_not: polygon_Bytes
  localAsset_gt: polygon_Bytes
  localAsset_lt: polygon_Bytes
  localAsset_gte: polygon_Bytes
  localAsset_lte: polygon_Bytes
  localAsset_in: [polygon_Bytes!]
  localAsset_not_in: [polygon_Bytes!]
  localAsset_contains: polygon_Bytes
  localAsset_not_contains: polygon_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type polygon_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: polygon_Bytes
  rootManager: polygon_Bytes
  mirrorConnector: polygon_Bytes
}

input polygon_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: polygon_Bytes
  amb_not: polygon_Bytes
  amb_gt: polygon_Bytes
  amb_lt: polygon_Bytes
  amb_gte: polygon_Bytes
  amb_lte: polygon_Bytes
  amb_in: [polygon_Bytes!]
  amb_not_in: [polygon_Bytes!]
  amb_contains: polygon_Bytes
  amb_not_contains: polygon_Bytes
  rootManager: polygon_Bytes
  rootManager_not: polygon_Bytes
  rootManager_gt: polygon_Bytes
  rootManager_lt: polygon_Bytes
  rootManager_gte: polygon_Bytes
  rootManager_lte: polygon_Bytes
  rootManager_in: [polygon_Bytes!]
  rootManager_not_in: [polygon_Bytes!]
  rootManager_contains: polygon_Bytes
  rootManager_not_contains: polygon_Bytes
  mirrorConnector: polygon_Bytes
  mirrorConnector_not: polygon_Bytes
  mirrorConnector_gt: polygon_Bytes
  mirrorConnector_lt: polygon_Bytes
  mirrorConnector_gte: polygon_Bytes
  mirrorConnector_lte: polygon_Bytes
  mirrorConnector_in: [polygon_Bytes!]
  mirrorConnector_not_in: [polygon_Bytes!]
  mirrorConnector_contains: polygon_Bytes
  mirrorConnector_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type polygon_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: polygon_Bytes
  nonce: BigInt
  status: polygon_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: polygon_Router_orderBy, orderDirection: polygon_OrderDirection, where: polygon_Router_filter): [polygon_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: polygon_Bytes
  delegate: polygon_Bytes
  receiveLocal: Boolean
  callData: polygon_Bytes
  slippage: BigInt
  originSender: polygon_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: polygon_Bytes
  asset: polygon_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: polygon_Bytes
  executedTransactionHash: polygon_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: polygon_Bytes
  reconciledCaller: polygon_Bytes
  reconciledTransactionHash: polygon_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: polygon_Bytes
}

input polygon_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: polygon_Bytes
  transferId_not: polygon_Bytes
  transferId_gt: polygon_Bytes
  transferId_lt: polygon_Bytes
  transferId_gte: polygon_Bytes
  transferId_lte: polygon_Bytes
  transferId_in: [polygon_Bytes!]
  transferId_not_in: [polygon_Bytes!]
  transferId_contains: polygon_Bytes
  transferId_not_contains: polygon_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: polygon_TransferStatus
  status_not: polygon_TransferStatus
  status_in: [polygon_TransferStatus!]
  status_not_in: [polygon_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: polygon_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: polygon_Bytes
  to_not: polygon_Bytes
  to_gt: polygon_Bytes
  to_lt: polygon_Bytes
  to_gte: polygon_Bytes
  to_lte: polygon_Bytes
  to_in: [polygon_Bytes!]
  to_not_in: [polygon_Bytes!]
  to_contains: polygon_Bytes
  to_not_contains: polygon_Bytes
  delegate: polygon_Bytes
  delegate_not: polygon_Bytes
  delegate_gt: polygon_Bytes
  delegate_lt: polygon_Bytes
  delegate_gte: polygon_Bytes
  delegate_lte: polygon_Bytes
  delegate_in: [polygon_Bytes!]
  delegate_not_in: [polygon_Bytes!]
  delegate_contains: polygon_Bytes
  delegate_not_contains: polygon_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: polygon_Bytes
  callData_not: polygon_Bytes
  callData_gt: polygon_Bytes
  callData_lt: polygon_Bytes
  callData_gte: polygon_Bytes
  callData_lte: polygon_Bytes
  callData_in: [polygon_Bytes!]
  callData_not_in: [polygon_Bytes!]
  callData_contains: polygon_Bytes
  callData_not_contains: polygon_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: polygon_Bytes
  originSender_not: polygon_Bytes
  originSender_gt: polygon_Bytes
  originSender_lt: polygon_Bytes
  originSender_gte: polygon_Bytes
  originSender_lte: polygon_Bytes
  originSender_in: [polygon_Bytes!]
  originSender_not_in: [polygon_Bytes!]
  originSender_contains: polygon_Bytes
  originSender_not_contains: polygon_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: polygon_Bytes
  canonicalId_not: polygon_Bytes
  canonicalId_gt: polygon_Bytes
  canonicalId_lt: polygon_Bytes
  canonicalId_gte: polygon_Bytes
  canonicalId_lte: polygon_Bytes
  canonicalId_in: [polygon_Bytes!]
  canonicalId_not_in: [polygon_Bytes!]
  canonicalId_contains: polygon_Bytes
  canonicalId_not_contains: polygon_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: polygon_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: polygon_Bytes
  executedCaller_not: polygon_Bytes
  executedCaller_gt: polygon_Bytes
  executedCaller_lt: polygon_Bytes
  executedCaller_gte: polygon_Bytes
  executedCaller_lte: polygon_Bytes
  executedCaller_in: [polygon_Bytes!]
  executedCaller_not_in: [polygon_Bytes!]
  executedCaller_contains: polygon_Bytes
  executedCaller_not_contains: polygon_Bytes
  executedTransactionHash: polygon_Bytes
  executedTransactionHash_not: polygon_Bytes
  executedTransactionHash_gt: polygon_Bytes
  executedTransactionHash_lt: polygon_Bytes
  executedTransactionHash_gte: polygon_Bytes
  executedTransactionHash_lte: polygon_Bytes
  executedTransactionHash_in: [polygon_Bytes!]
  executedTransactionHash_not_in: [polygon_Bytes!]
  executedTransactionHash_contains: polygon_Bytes
  executedTransactionHash_not_contains: polygon_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: polygon_Bytes
  executedTxOrigin_not: polygon_Bytes
  executedTxOrigin_gt: polygon_Bytes
  executedTxOrigin_lt: polygon_Bytes
  executedTxOrigin_gte: polygon_Bytes
  executedTxOrigin_lte: polygon_Bytes
  executedTxOrigin_in: [polygon_Bytes!]
  executedTxOrigin_not_in: [polygon_Bytes!]
  executedTxOrigin_contains: polygon_Bytes
  executedTxOrigin_not_contains: polygon_Bytes
  reconciledCaller: polygon_Bytes
  reconciledCaller_not: polygon_Bytes
  reconciledCaller_gt: polygon_Bytes
  reconciledCaller_lt: polygon_Bytes
  reconciledCaller_gte: polygon_Bytes
  reconciledCaller_lte: polygon_Bytes
  reconciledCaller_in: [polygon_Bytes!]
  reconciledCaller_not_in: [polygon_Bytes!]
  reconciledCaller_contains: polygon_Bytes
  reconciledCaller_not_contains: polygon_Bytes
  reconciledTransactionHash: polygon_Bytes
  reconciledTransactionHash_not: polygon_Bytes
  reconciledTransactionHash_gt: polygon_Bytes
  reconciledTransactionHash_lt: polygon_Bytes
  reconciledTransactionHash_gte: polygon_Bytes
  reconciledTransactionHash_lte: polygon_Bytes
  reconciledTransactionHash_in: [polygon_Bytes!]
  reconciledTransactionHash_not_in: [polygon_Bytes!]
  reconciledTransactionHash_contains: polygon_Bytes
  reconciledTransactionHash_not_contains: polygon_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: polygon_Bytes
  reconciledTxOrigin_not: polygon_Bytes
  reconciledTxOrigin_gt: polygon_Bytes
  reconciledTxOrigin_lt: polygon_Bytes
  reconciledTxOrigin_gte: polygon_Bytes
  reconciledTxOrigin_lte: polygon_Bytes
  reconciledTxOrigin_in: [polygon_Bytes!]
  reconciledTxOrigin_not_in: [polygon_Bytes!]
  reconciledTxOrigin_contains: polygon_Bytes
  reconciledTxOrigin_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type polygon_OriginMessage {
  id: ID!
  transferId: polygon_Bytes
  destinationDomain: BigInt
  leaf: polygon_Bytes
  index: BigInt
  message: polygon_Bytes
  root: polygon_Bytes
  transactionHash: polygon_Bytes
  blockNumber: BigInt
  rootCount: polygon_RootCount
}

input polygon_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: polygon_Bytes
  transferId_not: polygon_Bytes
  transferId_gt: polygon_Bytes
  transferId_lt: polygon_Bytes
  transferId_gte: polygon_Bytes
  transferId_lte: polygon_Bytes
  transferId_in: [polygon_Bytes!]
  transferId_not_in: [polygon_Bytes!]
  transferId_contains: polygon_Bytes
  transferId_not_contains: polygon_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: polygon_Bytes
  leaf_not: polygon_Bytes
  leaf_gt: polygon_Bytes
  leaf_lt: polygon_Bytes
  leaf_gte: polygon_Bytes
  leaf_lte: polygon_Bytes
  leaf_in: [polygon_Bytes!]
  leaf_not_in: [polygon_Bytes!]
  leaf_contains: polygon_Bytes
  leaf_not_contains: polygon_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: polygon_Bytes
  message_not: polygon_Bytes
  message_gt: polygon_Bytes
  message_lt: polygon_Bytes
  message_gte: polygon_Bytes
  message_lte: polygon_Bytes
  message_in: [polygon_Bytes!]
  message_not_in: [polygon_Bytes!]
  message_contains: polygon_Bytes
  message_not_contains: polygon_Bytes
  root: polygon_Bytes
  root_not: polygon_Bytes
  root_gt: polygon_Bytes
  root_lt: polygon_Bytes
  root_gte: polygon_Bytes
  root_lte: polygon_Bytes
  root_in: [polygon_Bytes!]
  root_not_in: [polygon_Bytes!]
  root_contains: polygon_Bytes
  root_not_contains: polygon_Bytes
  transactionHash: polygon_Bytes
  transactionHash_not: polygon_Bytes
  transactionHash_gt: polygon_Bytes
  transactionHash_lt: polygon_Bytes
  transactionHash_gte: polygon_Bytes
  transactionHash_lte: polygon_Bytes
  transactionHash_in: [polygon_Bytes!]
  transactionHash_not_in: [polygon_Bytes!]
  transactionHash_contains: polygon_Bytes
  transactionHash_not_contains: polygon_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: polygon_RootCount_filter
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type polygon_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: polygon_Bytes
  nonce: BigInt
  status: polygon_TransferStatus
  messageHash: polygon_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: polygon_Bytes
  delegate: polygon_Bytes
  receiveLocal: Boolean
  callData: polygon_Bytes
  slippage: BigInt
  originSender: polygon_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: polygon_Bytes
  asset: polygon_Asset
  transacting: polygon_Bytes
  message: polygon_OriginMessage
  relayerFee: BigInt
  caller: polygon_Bytes
  transactionHash: polygon_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: polygon_Bytes
}

input polygon_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: polygon_Bytes
  transferId_not: polygon_Bytes
  transferId_gt: polygon_Bytes
  transferId_lt: polygon_Bytes
  transferId_gte: polygon_Bytes
  transferId_lte: polygon_Bytes
  transferId_in: [polygon_Bytes!]
  transferId_not_in: [polygon_Bytes!]
  transferId_contains: polygon_Bytes
  transferId_not_contains: polygon_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: polygon_TransferStatus
  status_not: polygon_TransferStatus
  status_in: [polygon_TransferStatus!]
  status_not_in: [polygon_TransferStatus!]
  messageHash: polygon_Bytes
  messageHash_not: polygon_Bytes
  messageHash_gt: polygon_Bytes
  messageHash_lt: polygon_Bytes
  messageHash_gte: polygon_Bytes
  messageHash_lte: polygon_Bytes
  messageHash_in: [polygon_Bytes!]
  messageHash_not_in: [polygon_Bytes!]
  messageHash_contains: polygon_Bytes
  messageHash_not_contains: polygon_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: polygon_Bytes
  to_not: polygon_Bytes
  to_gt: polygon_Bytes
  to_lt: polygon_Bytes
  to_gte: polygon_Bytes
  to_lte: polygon_Bytes
  to_in: [polygon_Bytes!]
  to_not_in: [polygon_Bytes!]
  to_contains: polygon_Bytes
  to_not_contains: polygon_Bytes
  delegate: polygon_Bytes
  delegate_not: polygon_Bytes
  delegate_gt: polygon_Bytes
  delegate_lt: polygon_Bytes
  delegate_gte: polygon_Bytes
  delegate_lte: polygon_Bytes
  delegate_in: [polygon_Bytes!]
  delegate_not_in: [polygon_Bytes!]
  delegate_contains: polygon_Bytes
  delegate_not_contains: polygon_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: polygon_Bytes
  callData_not: polygon_Bytes
  callData_gt: polygon_Bytes
  callData_lt: polygon_Bytes
  callData_gte: polygon_Bytes
  callData_lte: polygon_Bytes
  callData_in: [polygon_Bytes!]
  callData_not_in: [polygon_Bytes!]
  callData_contains: polygon_Bytes
  callData_not_contains: polygon_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: polygon_Bytes
  originSender_not: polygon_Bytes
  originSender_gt: polygon_Bytes
  originSender_lt: polygon_Bytes
  originSender_gte: polygon_Bytes
  originSender_lte: polygon_Bytes
  originSender_in: [polygon_Bytes!]
  originSender_not_in: [polygon_Bytes!]
  originSender_contains: polygon_Bytes
  originSender_not_contains: polygon_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: polygon_Bytes
  canonicalId_not: polygon_Bytes
  canonicalId_gt: polygon_Bytes
  canonicalId_lt: polygon_Bytes
  canonicalId_gte: polygon_Bytes
  canonicalId_lte: polygon_Bytes
  canonicalId_in: [polygon_Bytes!]
  canonicalId_not_in: [polygon_Bytes!]
  canonicalId_contains: polygon_Bytes
  canonicalId_not_contains: polygon_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: polygon_Asset_filter
  transacting: polygon_Bytes
  transacting_not: polygon_Bytes
  transacting_gt: polygon_Bytes
  transacting_lt: polygon_Bytes
  transacting_gte: polygon_Bytes
  transacting_lte: polygon_Bytes
  transacting_in: [polygon_Bytes!]
  transacting_not_in: [polygon_Bytes!]
  transacting_contains: polygon_Bytes
  transacting_not_contains: polygon_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: polygon_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: polygon_Bytes
  caller_not: polygon_Bytes
  caller_gt: polygon_Bytes
  caller_lt: polygon_Bytes
  caller_gte: polygon_Bytes
  caller_lte: polygon_Bytes
  caller_in: [polygon_Bytes!]
  caller_not_in: [polygon_Bytes!]
  caller_contains: polygon_Bytes
  caller_not_contains: polygon_Bytes
  transactionHash: polygon_Bytes
  transactionHash_not: polygon_Bytes
  transactionHash_gt: polygon_Bytes
  transactionHash_lt: polygon_Bytes
  transactionHash_gte: polygon_Bytes
  transactionHash_lte: polygon_Bytes
  transactionHash_in: [polygon_Bytes!]
  transactionHash_not_in: [polygon_Bytes!]
  transactionHash_contains: polygon_Bytes
  transactionHash_not_contains: polygon_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: polygon_Bytes
  txOrigin_not: polygon_Bytes
  txOrigin_gt: polygon_Bytes
  txOrigin_lt: polygon_Bytes
  txOrigin_gte: polygon_Bytes
  txOrigin_lte: polygon_Bytes
  txOrigin_in: [polygon_Bytes!]
  txOrigin_not_in: [polygon_Bytes!]
  txOrigin_contains: polygon_Bytes
  txOrigin_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type polygon_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: polygon_Bytes
}

input polygon_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: polygon_Bytes
  relayer_not: polygon_Bytes
  relayer_gt: polygon_Bytes
  relayer_lt: polygon_Bytes
  relayer_gte: polygon_Bytes
  relayer_lte: polygon_Bytes
  relayer_in: [polygon_Bytes!]
  relayer_not_in: [polygon_Bytes!]
  relayer_contains: polygon_Bytes
  relayer_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_Relayer_orderBy {
  id
  isActive
  relayer
}

type polygon_RootCount {
  id: ID!
  count: BigInt
}

input polygon_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_RootCount_orderBy {
  id
  count
}

type polygon_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: polygon_Bytes
  count: BigInt
  caller: polygon_Bytes
  transactionHash: polygon_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input polygon_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: polygon_Bytes
  root_not: polygon_Bytes
  root_gt: polygon_Bytes
  root_lt: polygon_Bytes
  root_gte: polygon_Bytes
  root_lte: polygon_Bytes
  root_in: [polygon_Bytes!]
  root_not_in: [polygon_Bytes!]
  root_contains: polygon_Bytes
  root_not_contains: polygon_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: polygon_Bytes
  caller_not: polygon_Bytes
  caller_gt: polygon_Bytes
  caller_lt: polygon_Bytes
  caller_gte: polygon_Bytes
  caller_lte: polygon_Bytes
  caller_in: [polygon_Bytes!]
  caller_not_in: [polygon_Bytes!]
  caller_contains: polygon_Bytes
  caller_not_contains: polygon_Bytes
  transactionHash: polygon_Bytes
  transactionHash_not: polygon_Bytes
  transactionHash_gt: polygon_Bytes
  transactionHash_lt: polygon_Bytes
  transactionHash_gte: polygon_Bytes
  transactionHash_lte: polygon_Bytes
  transactionHash_in: [polygon_Bytes!]
  transactionHash_not_in: [polygon_Bytes!]
  transactionHash_contains: polygon_Bytes
  transactionHash_not_contains: polygon_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type polygon_Router {
  id: ID!
  isActive: Boolean!
  owner: polygon_Bytes
  recipient: polygon_Bytes
  proposedOwner: polygon_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: polygon_AssetBalance_orderBy, orderDirection: polygon_OrderDirection, where: polygon_AssetBalance_filter): [polygon_AssetBalance!]!
}

input polygon_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: polygon_Bytes
  owner_not: polygon_Bytes
  owner_gt: polygon_Bytes
  owner_lt: polygon_Bytes
  owner_gte: polygon_Bytes
  owner_lte: polygon_Bytes
  owner_in: [polygon_Bytes!]
  owner_not_in: [polygon_Bytes!]
  owner_contains: polygon_Bytes
  owner_not_contains: polygon_Bytes
  recipient: polygon_Bytes
  recipient_not: polygon_Bytes
  recipient_gt: polygon_Bytes
  recipient_lt: polygon_Bytes
  recipient_gte: polygon_Bytes
  recipient_lte: polygon_Bytes
  recipient_in: [polygon_Bytes!]
  recipient_not_in: [polygon_Bytes!]
  recipient_contains: polygon_Bytes
  recipient_not_contains: polygon_Bytes
  proposedOwner: polygon_Bytes
  proposedOwner_not: polygon_Bytes
  proposedOwner_gt: polygon_Bytes
  proposedOwner_lt: polygon_Bytes
  proposedOwner_gte: polygon_Bytes
  proposedOwner_lte: polygon_Bytes
  proposedOwner_in: [polygon_Bytes!]
  proposedOwner_not_in: [polygon_Bytes!]
  proposedOwner_contains: polygon_Bytes
  proposedOwner_not_contains: polygon_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: polygon_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type polygon_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: polygon_Bytes
}

input polygon_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: polygon_Bytes
  sequencer_not: polygon_Bytes
  sequencer_gt: polygon_Bytes
  sequencer_lt: polygon_Bytes
  sequencer_gte: polygon_Bytes
  sequencer_lte: polygon_Bytes
  sequencer_in: [polygon_Bytes!]
  sequencer_not_in: [polygon_Bytes!]
  sequencer_contains: polygon_Bytes
  sequencer_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type polygon_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: polygon_Bytes!
}

input polygon_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: polygon_Bytes
  caller_not: polygon_Bytes
  caller_gt: polygon_Bytes
  caller_lt: polygon_Bytes
  caller_gte: polygon_Bytes
  caller_lte: polygon_Bytes
  caller_in: [polygon_Bytes!]
  caller_not_in: [polygon_Bytes!]
  caller_contains: polygon_Bytes
  caller_not_contains: polygon_Bytes
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type polygon_StableSwapLiquidity {
  id: ID!
  provider: polygon_Bytes!
  stableSwap: polygon_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input polygon_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: polygon_Bytes
  provider_not: polygon_Bytes
  provider_gt: polygon_Bytes
  provider_lt: polygon_Bytes
  provider_gte: polygon_Bytes
  provider_lte: polygon_Bytes
  provider_in: [polygon_Bytes!]
  provider_not_in: [polygon_Bytes!]
  provider_contains: polygon_Bytes
  provider_not_contains: polygon_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: polygon_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

type polygon_TransferRelayerFee {
  id: ID!
  transferId: polygon_Bytes!
  fee: BigInt
}

input polygon_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: polygon_Bytes
  transferId_not: polygon_Bytes
  transferId_gt: polygon_Bytes
  transferId_lt: polygon_Bytes
  transferId_gte: polygon_Bytes
  transferId_lte: polygon_Bytes
  transferId_in: [polygon_Bytes!]
  transferId_not_in: [polygon_Bytes!]
  transferId_contains: polygon_Bytes
  transferId_not_contains: polygon_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: polygon_BlockChangedFilter
}

enum polygon_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum polygon_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type optimismgoerli_AggregateRoot {
  id: ID!
  root: optimismgoerli_Bytes!
  blockNumber: BigInt!
}

input optimismgoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_gt: optimismgoerli_Bytes
  root_lt: optimismgoerli_Bytes
  root_gte: optimismgoerli_Bytes
  root_lte: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type optimismgoerli_Asset {
  id: ID!
  key: optimismgoerli_Bytes
  canonicalId: optimismgoerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: optimismgoerli_Bytes
  localAsset: optimismgoerli_Bytes
  blockNumber: BigInt
}

type optimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: optimismgoerli_Router!
  asset: optimismgoerli_Asset!
  feesEarned: BigInt!
}

input optimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: optimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: optimismgoerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input optimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: optimismgoerli_Bytes
  key_not: optimismgoerli_Bytes
  key_gt: optimismgoerli_Bytes
  key_lt: optimismgoerli_Bytes
  key_gte: optimismgoerli_Bytes
  key_lte: optimismgoerli_Bytes
  key_in: [optimismgoerli_Bytes!]
  key_not_in: [optimismgoerli_Bytes!]
  key_contains: optimismgoerli_Bytes
  key_not_contains: optimismgoerli_Bytes
  canonicalId: optimismgoerli_Bytes
  canonicalId_not: optimismgoerli_Bytes
  canonicalId_gt: optimismgoerli_Bytes
  canonicalId_lt: optimismgoerli_Bytes
  canonicalId_gte: optimismgoerli_Bytes
  canonicalId_lte: optimismgoerli_Bytes
  canonicalId_in: [optimismgoerli_Bytes!]
  canonicalId_not_in: [optimismgoerli_Bytes!]
  canonicalId_contains: optimismgoerli_Bytes
  canonicalId_not_contains: optimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: optimismgoerli_Bytes
  adoptedAsset_not: optimismgoerli_Bytes
  adoptedAsset_gt: optimismgoerli_Bytes
  adoptedAsset_lt: optimismgoerli_Bytes
  adoptedAsset_gte: optimismgoerli_Bytes
  adoptedAsset_lte: optimismgoerli_Bytes
  adoptedAsset_in: [optimismgoerli_Bytes!]
  adoptedAsset_not_in: [optimismgoerli_Bytes!]
  adoptedAsset_contains: optimismgoerli_Bytes
  adoptedAsset_not_contains: optimismgoerli_Bytes
  localAsset: optimismgoerli_Bytes
  localAsset_not: optimismgoerli_Bytes
  localAsset_gt: optimismgoerli_Bytes
  localAsset_lt: optimismgoerli_Bytes
  localAsset_gte: optimismgoerli_Bytes
  localAsset_lte: optimismgoerli_Bytes
  localAsset_in: [optimismgoerli_Bytes!]
  localAsset_not_in: [optimismgoerli_Bytes!]
  localAsset_contains: optimismgoerli_Bytes
  localAsset_not_contains: optimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type optimismgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: optimismgoerli_Bytes
  rootManager: optimismgoerli_Bytes
  mirrorConnector: optimismgoerli_Bytes
}

input optimismgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: optimismgoerli_Bytes
  amb_not: optimismgoerli_Bytes
  amb_gt: optimismgoerli_Bytes
  amb_lt: optimismgoerli_Bytes
  amb_gte: optimismgoerli_Bytes
  amb_lte: optimismgoerli_Bytes
  amb_in: [optimismgoerli_Bytes!]
  amb_not_in: [optimismgoerli_Bytes!]
  amb_contains: optimismgoerli_Bytes
  amb_not_contains: optimismgoerli_Bytes
  rootManager: optimismgoerli_Bytes
  rootManager_not: optimismgoerli_Bytes
  rootManager_gt: optimismgoerli_Bytes
  rootManager_lt: optimismgoerli_Bytes
  rootManager_gte: optimismgoerli_Bytes
  rootManager_lte: optimismgoerli_Bytes
  rootManager_in: [optimismgoerli_Bytes!]
  rootManager_not_in: [optimismgoerli_Bytes!]
  rootManager_contains: optimismgoerli_Bytes
  rootManager_not_contains: optimismgoerli_Bytes
  mirrorConnector: optimismgoerli_Bytes
  mirrorConnector_not: optimismgoerli_Bytes
  mirrorConnector_gt: optimismgoerli_Bytes
  mirrorConnector_lt: optimismgoerli_Bytes
  mirrorConnector_gte: optimismgoerli_Bytes
  mirrorConnector_lte: optimismgoerli_Bytes
  mirrorConnector_in: [optimismgoerli_Bytes!]
  mirrorConnector_not_in: [optimismgoerli_Bytes!]
  mirrorConnector_contains: optimismgoerli_Bytes
  mirrorConnector_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type optimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: optimismgoerli_Bytes
  nonce: BigInt
  status: optimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_Router_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_Router_filter): [optimismgoerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: optimismgoerli_Bytes
  delegate: optimismgoerli_Bytes
  receiveLocal: Boolean
  callData: optimismgoerli_Bytes
  slippage: BigInt
  originSender: optimismgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: optimismgoerli_Bytes
  asset: optimismgoerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: optimismgoerli_Bytes
  executedTransactionHash: optimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: optimismgoerli_Bytes
  reconciledCaller: optimismgoerli_Bytes
  reconciledTransactionHash: optimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: optimismgoerli_Bytes
}

input optimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_gt: optimismgoerli_Bytes
  transferId_lt: optimismgoerli_Bytes
  transferId_gte: optimismgoerli_Bytes
  transferId_lte: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: optimismgoerli_TransferStatus
  status_not: optimismgoerli_TransferStatus
  status_in: [optimismgoerli_TransferStatus!]
  status_not_in: [optimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: optimismgoerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: optimismgoerli_Bytes
  to_not: optimismgoerli_Bytes
  to_gt: optimismgoerli_Bytes
  to_lt: optimismgoerli_Bytes
  to_gte: optimismgoerli_Bytes
  to_lte: optimismgoerli_Bytes
  to_in: [optimismgoerli_Bytes!]
  to_not_in: [optimismgoerli_Bytes!]
  to_contains: optimismgoerli_Bytes
  to_not_contains: optimismgoerli_Bytes
  delegate: optimismgoerli_Bytes
  delegate_not: optimismgoerli_Bytes
  delegate_gt: optimismgoerli_Bytes
  delegate_lt: optimismgoerli_Bytes
  delegate_gte: optimismgoerli_Bytes
  delegate_lte: optimismgoerli_Bytes
  delegate_in: [optimismgoerli_Bytes!]
  delegate_not_in: [optimismgoerli_Bytes!]
  delegate_contains: optimismgoerli_Bytes
  delegate_not_contains: optimismgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: optimismgoerli_Bytes
  callData_not: optimismgoerli_Bytes
  callData_gt: optimismgoerli_Bytes
  callData_lt: optimismgoerli_Bytes
  callData_gte: optimismgoerli_Bytes
  callData_lte: optimismgoerli_Bytes
  callData_in: [optimismgoerli_Bytes!]
  callData_not_in: [optimismgoerli_Bytes!]
  callData_contains: optimismgoerli_Bytes
  callData_not_contains: optimismgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: optimismgoerli_Bytes
  originSender_not: optimismgoerli_Bytes
  originSender_gt: optimismgoerli_Bytes
  originSender_lt: optimismgoerli_Bytes
  originSender_gte: optimismgoerli_Bytes
  originSender_lte: optimismgoerli_Bytes
  originSender_in: [optimismgoerli_Bytes!]
  originSender_not_in: [optimismgoerli_Bytes!]
  originSender_contains: optimismgoerli_Bytes
  originSender_not_contains: optimismgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: optimismgoerli_Bytes
  canonicalId_not: optimismgoerli_Bytes
  canonicalId_gt: optimismgoerli_Bytes
  canonicalId_lt: optimismgoerli_Bytes
  canonicalId_gte: optimismgoerli_Bytes
  canonicalId_lte: optimismgoerli_Bytes
  canonicalId_in: [optimismgoerli_Bytes!]
  canonicalId_not_in: [optimismgoerli_Bytes!]
  canonicalId_contains: optimismgoerli_Bytes
  canonicalId_not_contains: optimismgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: optimismgoerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: optimismgoerli_Bytes
  executedCaller_not: optimismgoerli_Bytes
  executedCaller_gt: optimismgoerli_Bytes
  executedCaller_lt: optimismgoerli_Bytes
  executedCaller_gte: optimismgoerli_Bytes
  executedCaller_lte: optimismgoerli_Bytes
  executedCaller_in: [optimismgoerli_Bytes!]
  executedCaller_not_in: [optimismgoerli_Bytes!]
  executedCaller_contains: optimismgoerli_Bytes
  executedCaller_not_contains: optimismgoerli_Bytes
  executedTransactionHash: optimismgoerli_Bytes
  executedTransactionHash_not: optimismgoerli_Bytes
  executedTransactionHash_gt: optimismgoerli_Bytes
  executedTransactionHash_lt: optimismgoerli_Bytes
  executedTransactionHash_gte: optimismgoerli_Bytes
  executedTransactionHash_lte: optimismgoerli_Bytes
  executedTransactionHash_in: [optimismgoerli_Bytes!]
  executedTransactionHash_not_in: [optimismgoerli_Bytes!]
  executedTransactionHash_contains: optimismgoerli_Bytes
  executedTransactionHash_not_contains: optimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: optimismgoerli_Bytes
  executedTxOrigin_not: optimismgoerli_Bytes
  executedTxOrigin_gt: optimismgoerli_Bytes
  executedTxOrigin_lt: optimismgoerli_Bytes
  executedTxOrigin_gte: optimismgoerli_Bytes
  executedTxOrigin_lte: optimismgoerli_Bytes
  executedTxOrigin_in: [optimismgoerli_Bytes!]
  executedTxOrigin_not_in: [optimismgoerli_Bytes!]
  executedTxOrigin_contains: optimismgoerli_Bytes
  executedTxOrigin_not_contains: optimismgoerli_Bytes
  reconciledCaller: optimismgoerli_Bytes
  reconciledCaller_not: optimismgoerli_Bytes
  reconciledCaller_gt: optimismgoerli_Bytes
  reconciledCaller_lt: optimismgoerli_Bytes
  reconciledCaller_gte: optimismgoerli_Bytes
  reconciledCaller_lte: optimismgoerli_Bytes
  reconciledCaller_in: [optimismgoerli_Bytes!]
  reconciledCaller_not_in: [optimismgoerli_Bytes!]
  reconciledCaller_contains: optimismgoerli_Bytes
  reconciledCaller_not_contains: optimismgoerli_Bytes
  reconciledTransactionHash: optimismgoerli_Bytes
  reconciledTransactionHash_not: optimismgoerli_Bytes
  reconciledTransactionHash_gt: optimismgoerli_Bytes
  reconciledTransactionHash_lt: optimismgoerli_Bytes
  reconciledTransactionHash_gte: optimismgoerli_Bytes
  reconciledTransactionHash_lte: optimismgoerli_Bytes
  reconciledTransactionHash_in: [optimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [optimismgoerli_Bytes!]
  reconciledTransactionHash_contains: optimismgoerli_Bytes
  reconciledTransactionHash_not_contains: optimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: optimismgoerli_Bytes
  reconciledTxOrigin_not: optimismgoerli_Bytes
  reconciledTxOrigin_gt: optimismgoerli_Bytes
  reconciledTxOrigin_lt: optimismgoerli_Bytes
  reconciledTxOrigin_gte: optimismgoerli_Bytes
  reconciledTxOrigin_lte: optimismgoerli_Bytes
  reconciledTxOrigin_in: [optimismgoerli_Bytes!]
  reconciledTxOrigin_not_in: [optimismgoerli_Bytes!]
  reconciledTxOrigin_contains: optimismgoerli_Bytes
  reconciledTxOrigin_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type optimismgoerli_OriginMessage {
  id: ID!
  transferId: optimismgoerli_Bytes
  destinationDomain: BigInt
  leaf: optimismgoerli_Bytes
  index: BigInt
  message: optimismgoerli_Bytes
  root: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  blockNumber: BigInt
  rootCount: optimismgoerli_RootCount
}

input optimismgoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_gt: optimismgoerli_Bytes
  transferId_lt: optimismgoerli_Bytes
  transferId_gte: optimismgoerli_Bytes
  transferId_lte: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: optimismgoerli_Bytes
  leaf_not: optimismgoerli_Bytes
  leaf_gt: optimismgoerli_Bytes
  leaf_lt: optimismgoerli_Bytes
  leaf_gte: optimismgoerli_Bytes
  leaf_lte: optimismgoerli_Bytes
  leaf_in: [optimismgoerli_Bytes!]
  leaf_not_in: [optimismgoerli_Bytes!]
  leaf_contains: optimismgoerli_Bytes
  leaf_not_contains: optimismgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: optimismgoerli_Bytes
  message_not: optimismgoerli_Bytes
  message_gt: optimismgoerli_Bytes
  message_lt: optimismgoerli_Bytes
  message_gte: optimismgoerli_Bytes
  message_lte: optimismgoerli_Bytes
  message_in: [optimismgoerli_Bytes!]
  message_not_in: [optimismgoerli_Bytes!]
  message_contains: optimismgoerli_Bytes
  message_not_contains: optimismgoerli_Bytes
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_gt: optimismgoerli_Bytes
  root_lt: optimismgoerli_Bytes
  root_gte: optimismgoerli_Bytes
  root_lte: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_gt: optimismgoerli_Bytes
  transactionHash_lt: optimismgoerli_Bytes
  transactionHash_gte: optimismgoerli_Bytes
  transactionHash_lte: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: optimismgoerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type optimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: optimismgoerli_Bytes
  nonce: BigInt
  status: optimismgoerli_TransferStatus
  messageHash: optimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: optimismgoerli_Bytes
  delegate: optimismgoerli_Bytes
  receiveLocal: Boolean
  callData: optimismgoerli_Bytes
  slippage: BigInt
  originSender: optimismgoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: optimismgoerli_Bytes
  asset: optimismgoerli_Asset
  transacting: optimismgoerli_Bytes
  message: optimismgoerli_OriginMessage
  relayerFee: BigInt
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: optimismgoerli_Bytes
}

input optimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_gt: optimismgoerli_Bytes
  transferId_lt: optimismgoerli_Bytes
  transferId_gte: optimismgoerli_Bytes
  transferId_lte: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: optimismgoerli_TransferStatus
  status_not: optimismgoerli_TransferStatus
  status_in: [optimismgoerli_TransferStatus!]
  status_not_in: [optimismgoerli_TransferStatus!]
  messageHash: optimismgoerli_Bytes
  messageHash_not: optimismgoerli_Bytes
  messageHash_gt: optimismgoerli_Bytes
  messageHash_lt: optimismgoerli_Bytes
  messageHash_gte: optimismgoerli_Bytes
  messageHash_lte: optimismgoerli_Bytes
  messageHash_in: [optimismgoerli_Bytes!]
  messageHash_not_in: [optimismgoerli_Bytes!]
  messageHash_contains: optimismgoerli_Bytes
  messageHash_not_contains: optimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: optimismgoerli_Bytes
  to_not: optimismgoerli_Bytes
  to_gt: optimismgoerli_Bytes
  to_lt: optimismgoerli_Bytes
  to_gte: optimismgoerli_Bytes
  to_lte: optimismgoerli_Bytes
  to_in: [optimismgoerli_Bytes!]
  to_not_in: [optimismgoerli_Bytes!]
  to_contains: optimismgoerli_Bytes
  to_not_contains: optimismgoerli_Bytes
  delegate: optimismgoerli_Bytes
  delegate_not: optimismgoerli_Bytes
  delegate_gt: optimismgoerli_Bytes
  delegate_lt: optimismgoerli_Bytes
  delegate_gte: optimismgoerli_Bytes
  delegate_lte: optimismgoerli_Bytes
  delegate_in: [optimismgoerli_Bytes!]
  delegate_not_in: [optimismgoerli_Bytes!]
  delegate_contains: optimismgoerli_Bytes
  delegate_not_contains: optimismgoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: optimismgoerli_Bytes
  callData_not: optimismgoerli_Bytes
  callData_gt: optimismgoerli_Bytes
  callData_lt: optimismgoerli_Bytes
  callData_gte: optimismgoerli_Bytes
  callData_lte: optimismgoerli_Bytes
  callData_in: [optimismgoerli_Bytes!]
  callData_not_in: [optimismgoerli_Bytes!]
  callData_contains: optimismgoerli_Bytes
  callData_not_contains: optimismgoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: optimismgoerli_Bytes
  originSender_not: optimismgoerli_Bytes
  originSender_gt: optimismgoerli_Bytes
  originSender_lt: optimismgoerli_Bytes
  originSender_gte: optimismgoerli_Bytes
  originSender_lte: optimismgoerli_Bytes
  originSender_in: [optimismgoerli_Bytes!]
  originSender_not_in: [optimismgoerli_Bytes!]
  originSender_contains: optimismgoerli_Bytes
  originSender_not_contains: optimismgoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: optimismgoerli_Bytes
  canonicalId_not: optimismgoerli_Bytes
  canonicalId_gt: optimismgoerli_Bytes
  canonicalId_lt: optimismgoerli_Bytes
  canonicalId_gte: optimismgoerli_Bytes
  canonicalId_lte: optimismgoerli_Bytes
  canonicalId_in: [optimismgoerli_Bytes!]
  canonicalId_not_in: [optimismgoerli_Bytes!]
  canonicalId_contains: optimismgoerli_Bytes
  canonicalId_not_contains: optimismgoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: optimismgoerli_Asset_filter
  transacting: optimismgoerli_Bytes
  transacting_not: optimismgoerli_Bytes
  transacting_gt: optimismgoerli_Bytes
  transacting_lt: optimismgoerli_Bytes
  transacting_gte: optimismgoerli_Bytes
  transacting_lte: optimismgoerli_Bytes
  transacting_in: [optimismgoerli_Bytes!]
  transacting_not_in: [optimismgoerli_Bytes!]
  transacting_contains: optimismgoerli_Bytes
  transacting_not_contains: optimismgoerli_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: optimismgoerli_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_gt: optimismgoerli_Bytes
  caller_lt: optimismgoerli_Bytes
  caller_gte: optimismgoerli_Bytes
  caller_lte: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_gt: optimismgoerli_Bytes
  transactionHash_lt: optimismgoerli_Bytes
  transactionHash_gte: optimismgoerli_Bytes
  transactionHash_lte: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: optimismgoerli_Bytes
  txOrigin_not: optimismgoerli_Bytes
  txOrigin_gt: optimismgoerli_Bytes
  txOrigin_lt: optimismgoerli_Bytes
  txOrigin_gte: optimismgoerli_Bytes
  txOrigin_lte: optimismgoerli_Bytes
  txOrigin_in: [optimismgoerli_Bytes!]
  txOrigin_not_in: [optimismgoerli_Bytes!]
  txOrigin_contains: optimismgoerli_Bytes
  txOrigin_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type optimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: optimismgoerli_Bytes
}

input optimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: optimismgoerli_Bytes
  relayer_not: optimismgoerli_Bytes
  relayer_gt: optimismgoerli_Bytes
  relayer_lt: optimismgoerli_Bytes
  relayer_gte: optimismgoerli_Bytes
  relayer_lte: optimismgoerli_Bytes
  relayer_in: [optimismgoerli_Bytes!]
  relayer_not_in: [optimismgoerli_Bytes!]
  relayer_contains: optimismgoerli_Bytes
  relayer_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type optimismgoerli_RootCount {
  id: ID!
  count: BigInt
}

input optimismgoerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_RootCount_orderBy {
  id
  count
}

type optimismgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: optimismgoerli_Bytes
  count: BigInt
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimismgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_gt: optimismgoerli_Bytes
  root_lt: optimismgoerli_Bytes
  root_gte: optimismgoerli_Bytes
  root_lte: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_gt: optimismgoerli_Bytes
  caller_lt: optimismgoerli_Bytes
  caller_gte: optimismgoerli_Bytes
  caller_lte: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_gt: optimismgoerli_Bytes
  transactionHash_lt: optimismgoerli_Bytes
  transactionHash_gte: optimismgoerli_Bytes
  transactionHash_lte: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type optimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: optimismgoerli_Bytes
  recipient: optimismgoerli_Bytes
  proposedOwner: optimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_AssetBalance_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_AssetBalance_filter): [optimismgoerli_AssetBalance!]!
}

input optimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: optimismgoerli_Bytes
  owner_not: optimismgoerli_Bytes
  owner_gt: optimismgoerli_Bytes
  owner_lt: optimismgoerli_Bytes
  owner_gte: optimismgoerli_Bytes
  owner_lte: optimismgoerli_Bytes
  owner_in: [optimismgoerli_Bytes!]
  owner_not_in: [optimismgoerli_Bytes!]
  owner_contains: optimismgoerli_Bytes
  owner_not_contains: optimismgoerli_Bytes
  recipient: optimismgoerli_Bytes
  recipient_not: optimismgoerli_Bytes
  recipient_gt: optimismgoerli_Bytes
  recipient_lt: optimismgoerli_Bytes
  recipient_gte: optimismgoerli_Bytes
  recipient_lte: optimismgoerli_Bytes
  recipient_in: [optimismgoerli_Bytes!]
  recipient_not_in: [optimismgoerli_Bytes!]
  recipient_contains: optimismgoerli_Bytes
  recipient_not_contains: optimismgoerli_Bytes
  proposedOwner: optimismgoerli_Bytes
  proposedOwner_not: optimismgoerli_Bytes
  proposedOwner_gt: optimismgoerli_Bytes
  proposedOwner_lt: optimismgoerli_Bytes
  proposedOwner_gte: optimismgoerli_Bytes
  proposedOwner_lte: optimismgoerli_Bytes
  proposedOwner_in: [optimismgoerli_Bytes!]
  proposedOwner_not_in: [optimismgoerli_Bytes!]
  proposedOwner_contains: optimismgoerli_Bytes
  proposedOwner_not_contains: optimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: optimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type optimismgoerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: optimismgoerli_Bytes
}

input optimismgoerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: optimismgoerli_Bytes
  sequencer_not: optimismgoerli_Bytes
  sequencer_gt: optimismgoerli_Bytes
  sequencer_lt: optimismgoerli_Bytes
  sequencer_gte: optimismgoerli_Bytes
  sequencer_lte: optimismgoerli_Bytes
  sequencer_in: [optimismgoerli_Bytes!]
  sequencer_not_in: [optimismgoerli_Bytes!]
  sequencer_contains: optimismgoerli_Bytes
  sequencer_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type optimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: optimismgoerli_Bytes!
}

input optimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_gt: optimismgoerli_Bytes
  caller_lt: optimismgoerli_Bytes
  caller_gte: optimismgoerli_Bytes
  caller_lte: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type optimismgoerli_StableSwapLiquidity {
  id: ID!
  provider: optimismgoerli_Bytes!
  stableSwap: optimismgoerli_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input optimismgoerli_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: optimismgoerli_Bytes
  provider_not: optimismgoerli_Bytes
  provider_gt: optimismgoerli_Bytes
  provider_lt: optimismgoerli_Bytes
  provider_gte: optimismgoerli_Bytes
  provider_lte: optimismgoerli_Bytes
  provider_in: [optimismgoerli_Bytes!]
  provider_not_in: [optimismgoerli_Bytes!]
  provider_contains: optimismgoerli_Bytes
  provider_not_contains: optimismgoerli_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: optimismgoerli_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

type optimismgoerli_TransferRelayerFee {
  id: ID!
  transferId: optimismgoerli_Bytes!
  fee: BigInt
}

input optimismgoerli_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_gt: optimismgoerli_Bytes
  transferId_lt: optimismgoerli_Bytes
  transferId_gte: optimismgoerli_Bytes
  transferId_lte: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum optimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type staginggoerli_AggregateRoot {
  id: ID!
  root: staginggoerli_Bytes!
  blockNumber: BigInt!
}

input staginggoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_gt: staginggoerli_Bytes
  root_lt: staginggoerli_Bytes
  root_gte: staginggoerli_Bytes
  root_lte: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type staginggoerli_Asset {
  id: ID!
  key: staginggoerli_Bytes
  canonicalId: staginggoerli_Bytes
  canonicalDomain: BigInt
  adoptedAsset: staginggoerli_Bytes
  localAsset: staginggoerli_Bytes
  blockNumber: BigInt
}

type staginggoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: staginggoerli_Router!
  asset: staginggoerli_Asset!
  feesEarned: BigInt!
}

input staginggoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: staginggoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: staginggoerli_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input staginggoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: staginggoerli_Bytes
  key_not: staginggoerli_Bytes
  key_gt: staginggoerli_Bytes
  key_lt: staginggoerli_Bytes
  key_gte: staginggoerli_Bytes
  key_lte: staginggoerli_Bytes
  key_in: [staginggoerli_Bytes!]
  key_not_in: [staginggoerli_Bytes!]
  key_contains: staginggoerli_Bytes
  key_not_contains: staginggoerli_Bytes
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_gt: staginggoerli_Bytes
  canonicalId_lt: staginggoerli_Bytes
  canonicalId_gte: staginggoerli_Bytes
  canonicalId_lte: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: staginggoerli_Bytes
  adoptedAsset_not: staginggoerli_Bytes
  adoptedAsset_gt: staginggoerli_Bytes
  adoptedAsset_lt: staginggoerli_Bytes
  adoptedAsset_gte: staginggoerli_Bytes
  adoptedAsset_lte: staginggoerli_Bytes
  adoptedAsset_in: [staginggoerli_Bytes!]
  adoptedAsset_not_in: [staginggoerli_Bytes!]
  adoptedAsset_contains: staginggoerli_Bytes
  adoptedAsset_not_contains: staginggoerli_Bytes
  localAsset: staginggoerli_Bytes
  localAsset_not: staginggoerli_Bytes
  localAsset_gt: staginggoerli_Bytes
  localAsset_lt: staginggoerli_Bytes
  localAsset_gte: staginggoerli_Bytes
  localAsset_lte: staginggoerli_Bytes
  localAsset_in: [staginggoerli_Bytes!]
  localAsset_not_in: [staginggoerli_Bytes!]
  localAsset_contains: staginggoerli_Bytes
  localAsset_not_contains: staginggoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type staginggoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
}

input staginggoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerli_Bytes
  amb_not: staginggoerli_Bytes
  amb_gt: staginggoerli_Bytes
  amb_lt: staginggoerli_Bytes
  amb_gte: staginggoerli_Bytes
  amb_lte: staginggoerli_Bytes
  amb_in: [staginggoerli_Bytes!]
  amb_not_in: [staginggoerli_Bytes!]
  amb_contains: staginggoerli_Bytes
  amb_not_contains: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  rootManager_not: staginggoerli_Bytes
  rootManager_gt: staginggoerli_Bytes
  rootManager_lt: staginggoerli_Bytes
  rootManager_gte: staginggoerli_Bytes
  rootManager_lte: staginggoerli_Bytes
  rootManager_in: [staginggoerli_Bytes!]
  rootManager_not_in: [staginggoerli_Bytes!]
  rootManager_contains: staginggoerli_Bytes
  rootManager_not_contains: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
  mirrorConnector_not: staginggoerli_Bytes
  mirrorConnector_gt: staginggoerli_Bytes
  mirrorConnector_lt: staginggoerli_Bytes
  mirrorConnector_gte: staginggoerli_Bytes
  mirrorConnector_lte: staginggoerli_Bytes
  mirrorConnector_in: [staginggoerli_Bytes!]
  mirrorConnector_not_in: [staginggoerli_Bytes!]
  mirrorConnector_contains: staginggoerli_Bytes
  mirrorConnector_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type staginggoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  status: staginggoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_Router_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_Router_filter): [staginggoerli_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: staginggoerli_Bytes
  delegate: staginggoerli_Bytes
  receiveLocal: Boolean
  callData: staginggoerli_Bytes
  slippage: BigInt
  originSender: staginggoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: staginggoerli_Bytes
  asset: staginggoerli_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: staginggoerli_Bytes
  reconciledCaller: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: staginggoerli_Bytes
}

input staginggoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_gt: staginggoerli_Bytes
  transferId_lt: staginggoerli_Bytes
  transferId_gte: staginggoerli_Bytes
  transferId_lte: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: staginggoerli_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_gt: staginggoerli_Bytes
  to_lt: staginggoerli_Bytes
  to_gte: staginggoerli_Bytes
  to_lte: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  delegate: staginggoerli_Bytes
  delegate_not: staginggoerli_Bytes
  delegate_gt: staginggoerli_Bytes
  delegate_lt: staginggoerli_Bytes
  delegate_gte: staginggoerli_Bytes
  delegate_lte: staginggoerli_Bytes
  delegate_in: [staginggoerli_Bytes!]
  delegate_not_in: [staginggoerli_Bytes!]
  delegate_contains: staginggoerli_Bytes
  delegate_not_contains: staginggoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_gt: staginggoerli_Bytes
  callData_lt: staginggoerli_Bytes
  callData_gte: staginggoerli_Bytes
  callData_lte: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: staginggoerli_Bytes
  originSender_not: staginggoerli_Bytes
  originSender_gt: staginggoerli_Bytes
  originSender_lt: staginggoerli_Bytes
  originSender_gte: staginggoerli_Bytes
  originSender_lte: staginggoerli_Bytes
  originSender_in: [staginggoerli_Bytes!]
  originSender_not_in: [staginggoerli_Bytes!]
  originSender_contains: staginggoerli_Bytes
  originSender_not_contains: staginggoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_gt: staginggoerli_Bytes
  canonicalId_lt: staginggoerli_Bytes
  canonicalId_gte: staginggoerli_Bytes
  canonicalId_lte: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: staginggoerli_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: staginggoerli_Bytes
  executedCaller_not: staginggoerli_Bytes
  executedCaller_gt: staginggoerli_Bytes
  executedCaller_lt: staginggoerli_Bytes
  executedCaller_gte: staginggoerli_Bytes
  executedCaller_lte: staginggoerli_Bytes
  executedCaller_in: [staginggoerli_Bytes!]
  executedCaller_not_in: [staginggoerli_Bytes!]
  executedCaller_contains: staginggoerli_Bytes
  executedCaller_not_contains: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
  executedTransactionHash_not: staginggoerli_Bytes
  executedTransactionHash_gt: staginggoerli_Bytes
  executedTransactionHash_lt: staginggoerli_Bytes
  executedTransactionHash_gte: staginggoerli_Bytes
  executedTransactionHash_lte: staginggoerli_Bytes
  executedTransactionHash_in: [staginggoerli_Bytes!]
  executedTransactionHash_not_in: [staginggoerli_Bytes!]
  executedTransactionHash_contains: staginggoerli_Bytes
  executedTransactionHash_not_contains: staginggoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: staginggoerli_Bytes
  executedTxOrigin_not: staginggoerli_Bytes
  executedTxOrigin_gt: staginggoerli_Bytes
  executedTxOrigin_lt: staginggoerli_Bytes
  executedTxOrigin_gte: staginggoerli_Bytes
  executedTxOrigin_lte: staginggoerli_Bytes
  executedTxOrigin_in: [staginggoerli_Bytes!]
  executedTxOrigin_not_in: [staginggoerli_Bytes!]
  executedTxOrigin_contains: staginggoerli_Bytes
  executedTxOrigin_not_contains: staginggoerli_Bytes
  reconciledCaller: staginggoerli_Bytes
  reconciledCaller_not: staginggoerli_Bytes
  reconciledCaller_gt: staginggoerli_Bytes
  reconciledCaller_lt: staginggoerli_Bytes
  reconciledCaller_gte: staginggoerli_Bytes
  reconciledCaller_lte: staginggoerli_Bytes
  reconciledCaller_in: [staginggoerli_Bytes!]
  reconciledCaller_not_in: [staginggoerli_Bytes!]
  reconciledCaller_contains: staginggoerli_Bytes
  reconciledCaller_not_contains: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
  reconciledTransactionHash_not: staginggoerli_Bytes
  reconciledTransactionHash_gt: staginggoerli_Bytes
  reconciledTransactionHash_lt: staginggoerli_Bytes
  reconciledTransactionHash_gte: staginggoerli_Bytes
  reconciledTransactionHash_lte: staginggoerli_Bytes
  reconciledTransactionHash_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_not_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_contains: staginggoerli_Bytes
  reconciledTransactionHash_not_contains: staginggoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: staginggoerli_Bytes
  reconciledTxOrigin_not: staginggoerli_Bytes
  reconciledTxOrigin_gt: staginggoerli_Bytes
  reconciledTxOrigin_lt: staginggoerli_Bytes
  reconciledTxOrigin_gte: staginggoerli_Bytes
  reconciledTxOrigin_lte: staginggoerli_Bytes
  reconciledTxOrigin_in: [staginggoerli_Bytes!]
  reconciledTxOrigin_not_in: [staginggoerli_Bytes!]
  reconciledTxOrigin_contains: staginggoerli_Bytes
  reconciledTxOrigin_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type staginggoerli_OriginMessage {
  id: ID!
  transferId: staginggoerli_Bytes
  destinationDomain: BigInt
  leaf: staginggoerli_Bytes
  index: BigInt
  message: staginggoerli_Bytes
  root: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  blockNumber: BigInt
  rootCount: staginggoerli_RootCount
}

input staginggoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_gt: staginggoerli_Bytes
  transferId_lt: staginggoerli_Bytes
  transferId_gte: staginggoerli_Bytes
  transferId_lte: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: staginggoerli_Bytes
  leaf_not: staginggoerli_Bytes
  leaf_gt: staginggoerli_Bytes
  leaf_lt: staginggoerli_Bytes
  leaf_gte: staginggoerli_Bytes
  leaf_lte: staginggoerli_Bytes
  leaf_in: [staginggoerli_Bytes!]
  leaf_not_in: [staginggoerli_Bytes!]
  leaf_contains: staginggoerli_Bytes
  leaf_not_contains: staginggoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: staginggoerli_Bytes
  message_not: staginggoerli_Bytes
  message_gt: staginggoerli_Bytes
  message_lt: staginggoerli_Bytes
  message_gte: staginggoerli_Bytes
  message_lte: staginggoerli_Bytes
  message_in: [staginggoerli_Bytes!]
  message_not_in: [staginggoerli_Bytes!]
  message_contains: staginggoerli_Bytes
  message_not_contains: staginggoerli_Bytes
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_gt: staginggoerli_Bytes
  root_lt: staginggoerli_Bytes
  root_gte: staginggoerli_Bytes
  root_lte: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_gt: staginggoerli_Bytes
  transactionHash_lt: staginggoerli_Bytes
  transactionHash_gte: staginggoerli_Bytes
  transactionHash_lte: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: staginggoerli_RootCount_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type staginggoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  status: staginggoerli_TransferStatus
  messageHash: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: staginggoerli_Bytes
  delegate: staginggoerli_Bytes
  receiveLocal: Boolean
  callData: staginggoerli_Bytes
  slippage: BigInt
  originSender: staginggoerli_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: staginggoerli_Bytes
  asset: staginggoerli_Asset
  transacting: staginggoerli_Bytes
  message: staginggoerli_OriginMessage
  relayerFee: BigInt
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: staginggoerli_Bytes
}

input staginggoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_gt: staginggoerli_Bytes
  transferId_lt: staginggoerli_Bytes
  transferId_gte: staginggoerli_Bytes
  transferId_lte: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
  messageHash: staginggoerli_Bytes
  messageHash_not: staginggoerli_Bytes
  messageHash_gt: staginggoerli_Bytes
  messageHash_lt: staginggoerli_Bytes
  messageHash_gte: staginggoerli_Bytes
  messageHash_lte: staginggoerli_Bytes
  messageHash_in: [staginggoerli_Bytes!]
  messageHash_not_in: [staginggoerli_Bytes!]
  messageHash_contains: staginggoerli_Bytes
  messageHash_not_contains: staginggoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_gt: staginggoerli_Bytes
  to_lt: staginggoerli_Bytes
  to_gte: staginggoerli_Bytes
  to_lte: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  delegate: staginggoerli_Bytes
  delegate_not: staginggoerli_Bytes
  delegate_gt: staginggoerli_Bytes
  delegate_lt: staginggoerli_Bytes
  delegate_gte: staginggoerli_Bytes
  delegate_lte: staginggoerli_Bytes
  delegate_in: [staginggoerli_Bytes!]
  delegate_not_in: [staginggoerli_Bytes!]
  delegate_contains: staginggoerli_Bytes
  delegate_not_contains: staginggoerli_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_gt: staginggoerli_Bytes
  callData_lt: staginggoerli_Bytes
  callData_gte: staginggoerli_Bytes
  callData_lte: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: staginggoerli_Bytes
  originSender_not: staginggoerli_Bytes
  originSender_gt: staginggoerli_Bytes
  originSender_lt: staginggoerli_Bytes
  originSender_gte: staginggoerli_Bytes
  originSender_lte: staginggoerli_Bytes
  originSender_in: [staginggoerli_Bytes!]
  originSender_not_in: [staginggoerli_Bytes!]
  originSender_contains: staginggoerli_Bytes
  originSender_not_contains: staginggoerli_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_gt: staginggoerli_Bytes
  canonicalId_lt: staginggoerli_Bytes
  canonicalId_gte: staginggoerli_Bytes
  canonicalId_lte: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: staginggoerli_Asset_filter
  transacting: staginggoerli_Bytes
  transacting_not: staginggoerli_Bytes
  transacting_gt: staginggoerli_Bytes
  transacting_lt: staginggoerli_Bytes
  transacting_gte: staginggoerli_Bytes
  transacting_lte: staginggoerli_Bytes
  transacting_in: [staginggoerli_Bytes!]
  transacting_not_in: [staginggoerli_Bytes!]
  transacting_contains: staginggoerli_Bytes
  transacting_not_contains: staginggoerli_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: staginggoerli_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_gt: staginggoerli_Bytes
  caller_lt: staginggoerli_Bytes
  caller_gte: staginggoerli_Bytes
  caller_lte: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_gt: staginggoerli_Bytes
  transactionHash_lt: staginggoerli_Bytes
  transactionHash_gte: staginggoerli_Bytes
  transactionHash_lte: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: staginggoerli_Bytes
  txOrigin_not: staginggoerli_Bytes
  txOrigin_gt: staginggoerli_Bytes
  txOrigin_lt: staginggoerli_Bytes
  txOrigin_gte: staginggoerli_Bytes
  txOrigin_lte: staginggoerli_Bytes
  txOrigin_in: [staginggoerli_Bytes!]
  txOrigin_not_in: [staginggoerli_Bytes!]
  txOrigin_contains: staginggoerli_Bytes
  txOrigin_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type staginggoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: staginggoerli_Bytes
}

input staginggoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: staginggoerli_Bytes
  relayer_not: staginggoerli_Bytes
  relayer_gt: staginggoerli_Bytes
  relayer_lt: staginggoerli_Bytes
  relayer_gte: staginggoerli_Bytes
  relayer_lte: staginggoerli_Bytes
  relayer_in: [staginggoerli_Bytes!]
  relayer_not_in: [staginggoerli_Bytes!]
  relayer_contains: staginggoerli_Bytes
  relayer_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type staginggoerli_RootCount {
  id: ID!
  count: BigInt
}

input staginggoerli_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootCount_orderBy {
  id
  count
}

type staginggoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: staginggoerli_Bytes
  count: BigInt
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input staginggoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_gt: staginggoerli_Bytes
  root_lt: staginggoerli_Bytes
  root_gte: staginggoerli_Bytes
  root_lte: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_gt: staginggoerli_Bytes
  caller_lt: staginggoerli_Bytes
  caller_gte: staginggoerli_Bytes
  caller_lte: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_gt: staginggoerli_Bytes
  transactionHash_lt: staginggoerli_Bytes
  transactionHash_gte: staginggoerli_Bytes
  transactionHash_lte: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type staginggoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_AssetBalance_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_AssetBalance_filter): [staginggoerli_AssetBalance!]!
}

input staginggoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: staginggoerli_Bytes
  owner_not: staginggoerli_Bytes
  owner_gt: staginggoerli_Bytes
  owner_lt: staginggoerli_Bytes
  owner_gte: staginggoerli_Bytes
  owner_lte: staginggoerli_Bytes
  owner_in: [staginggoerli_Bytes!]
  owner_not_in: [staginggoerli_Bytes!]
  owner_contains: staginggoerli_Bytes
  owner_not_contains: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  recipient_not: staginggoerli_Bytes
  recipient_gt: staginggoerli_Bytes
  recipient_lt: staginggoerli_Bytes
  recipient_gte: staginggoerli_Bytes
  recipient_lte: staginggoerli_Bytes
  recipient_in: [staginggoerli_Bytes!]
  recipient_not_in: [staginggoerli_Bytes!]
  recipient_contains: staginggoerli_Bytes
  recipient_not_contains: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedOwner_not: staginggoerli_Bytes
  proposedOwner_gt: staginggoerli_Bytes
  proposedOwner_lt: staginggoerli_Bytes
  proposedOwner_gte: staginggoerli_Bytes
  proposedOwner_lte: staginggoerli_Bytes
  proposedOwner_in: [staginggoerli_Bytes!]
  proposedOwner_not_in: [staginggoerli_Bytes!]
  proposedOwner_contains: staginggoerli_Bytes
  proposedOwner_not_contains: staginggoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: staginggoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type staginggoerli_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: staginggoerli_Bytes
}

input staginggoerli_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: staginggoerli_Bytes
  sequencer_not: staginggoerli_Bytes
  sequencer_gt: staginggoerli_Bytes
  sequencer_lt: staginggoerli_Bytes
  sequencer_gte: staginggoerli_Bytes
  sequencer_lte: staginggoerli_Bytes
  sequencer_in: [staginggoerli_Bytes!]
  sequencer_not_in: [staginggoerli_Bytes!]
  sequencer_contains: staginggoerli_Bytes
  sequencer_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type staginggoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: staginggoerli_Bytes!
}

input staginggoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_gt: staginggoerli_Bytes
  caller_lt: staginggoerli_Bytes
  caller_gte: staginggoerli_Bytes
  caller_lte: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type staginggoerli_TransferRelayerFee {
  id: ID!
  transferId: staginggoerli_Bytes!
  fee: BigInt
}

input staginggoerli_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_gt: staginggoerli_Bytes
  transferId_lt: staginggoerli_Bytes
  transferId_gte: staginggoerli_Bytes
  transferId_lte: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum staginggoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type local1338_AggregateRoot {
  id: ID!
  root: local1338_Bytes!
  blockNumber: BigInt!
}

input local1338_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: local1338_Bytes
  root_not: local1338_Bytes
  root_gt: local1338_Bytes
  root_lt: local1338_Bytes
  root_gte: local1338_Bytes
  root_lte: local1338_Bytes
  root_in: [local1338_Bytes!]
  root_not_in: [local1338_Bytes!]
  root_contains: local1338_Bytes
  root_not_contains: local1338_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type local1338_Asset {
  id: ID!
  key: local1338_Bytes
  canonicalId: local1338_Bytes
  canonicalDomain: BigInt
  adoptedAsset: local1338_Bytes
  localAsset: local1338_Bytes
  blockNumber: BigInt
}

type local1338_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1338_Router!
  asset: local1338_Asset!
  feesEarned: BigInt!
}

input local1338_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: local1338_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1338_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input local1338_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: local1338_Bytes
  key_not: local1338_Bytes
  key_gt: local1338_Bytes
  key_lt: local1338_Bytes
  key_gte: local1338_Bytes
  key_lte: local1338_Bytes
  key_in: [local1338_Bytes!]
  key_not_in: [local1338_Bytes!]
  key_contains: local1338_Bytes
  key_not_contains: local1338_Bytes
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_gt: local1338_Bytes
  canonicalId_lt: local1338_Bytes
  canonicalId_gte: local1338_Bytes
  canonicalId_lte: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: local1338_Bytes
  adoptedAsset_not: local1338_Bytes
  adoptedAsset_gt: local1338_Bytes
  adoptedAsset_lt: local1338_Bytes
  adoptedAsset_gte: local1338_Bytes
  adoptedAsset_lte: local1338_Bytes
  adoptedAsset_in: [local1338_Bytes!]
  adoptedAsset_not_in: [local1338_Bytes!]
  adoptedAsset_contains: local1338_Bytes
  adoptedAsset_not_contains: local1338_Bytes
  localAsset: local1338_Bytes
  localAsset_not: local1338_Bytes
  localAsset_gt: local1338_Bytes
  localAsset_lt: local1338_Bytes
  localAsset_gte: local1338_Bytes
  localAsset_lte: local1338_Bytes
  localAsset_in: [local1338_Bytes!]
  localAsset_not_in: [local1338_Bytes!]
  localAsset_contains: local1338_Bytes
  localAsset_not_contains: local1338_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

scalar local1338_BigDecimal

input local1338_BlockChangedFilter {
  number_gte: Int!
}

input local1338_Block_height {
  hash: local1338_Bytes
  number: Int
  number_gte: Int
}

scalar local1338_Bytes

type local1338_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: local1338_Bytes
  rootManager: local1338_Bytes
  mirrorConnector: local1338_Bytes
}

input local1338_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: local1338_Bytes
  amb_not: local1338_Bytes
  amb_gt: local1338_Bytes
  amb_lt: local1338_Bytes
  amb_gte: local1338_Bytes
  amb_lte: local1338_Bytes
  amb_in: [local1338_Bytes!]
  amb_not_in: [local1338_Bytes!]
  amb_contains: local1338_Bytes
  amb_not_contains: local1338_Bytes
  rootManager: local1338_Bytes
  rootManager_not: local1338_Bytes
  rootManager_gt: local1338_Bytes
  rootManager_lt: local1338_Bytes
  rootManager_gte: local1338_Bytes
  rootManager_lte: local1338_Bytes
  rootManager_in: [local1338_Bytes!]
  rootManager_not_in: [local1338_Bytes!]
  rootManager_contains: local1338_Bytes
  rootManager_not_contains: local1338_Bytes
  mirrorConnector: local1338_Bytes
  mirrorConnector_not: local1338_Bytes
  mirrorConnector_gt: local1338_Bytes
  mirrorConnector_lt: local1338_Bytes
  mirrorConnector_gte: local1338_Bytes
  mirrorConnector_lte: local1338_Bytes
  mirrorConnector_in: [local1338_Bytes!]
  mirrorConnector_not_in: [local1338_Bytes!]
  mirrorConnector_contains: local1338_Bytes
  mirrorConnector_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type local1338_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1338_Bytes
  nonce: BigInt
  status: local1338_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1338_Router_orderBy, orderDirection: local1338_OrderDirection, where: local1338_Router_filter): [local1338_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: local1338_Bytes
  delegate: local1338_Bytes
  receiveLocal: Boolean
  callData: local1338_Bytes
  slippage: BigInt
  originSender: local1338_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: local1338_Bytes
  asset: local1338_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: local1338_Bytes
  executedTransactionHash: local1338_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: local1338_Bytes
  reconciledCaller: local1338_Bytes
  reconciledTransactionHash: local1338_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: local1338_Bytes
}

input local1338_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_gt: local1338_Bytes
  transferId_lt: local1338_Bytes
  transferId_gte: local1338_Bytes
  transferId_lte: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: local1338_TransferStatus
  status_not: local1338_TransferStatus
  status_in: [local1338_TransferStatus!]
  status_not_in: [local1338_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: local1338_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: local1338_Bytes
  to_not: local1338_Bytes
  to_gt: local1338_Bytes
  to_lt: local1338_Bytes
  to_gte: local1338_Bytes
  to_lte: local1338_Bytes
  to_in: [local1338_Bytes!]
  to_not_in: [local1338_Bytes!]
  to_contains: local1338_Bytes
  to_not_contains: local1338_Bytes
  delegate: local1338_Bytes
  delegate_not: local1338_Bytes
  delegate_gt: local1338_Bytes
  delegate_lt: local1338_Bytes
  delegate_gte: local1338_Bytes
  delegate_lte: local1338_Bytes
  delegate_in: [local1338_Bytes!]
  delegate_not_in: [local1338_Bytes!]
  delegate_contains: local1338_Bytes
  delegate_not_contains: local1338_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: local1338_Bytes
  callData_not: local1338_Bytes
  callData_gt: local1338_Bytes
  callData_lt: local1338_Bytes
  callData_gte: local1338_Bytes
  callData_lte: local1338_Bytes
  callData_in: [local1338_Bytes!]
  callData_not_in: [local1338_Bytes!]
  callData_contains: local1338_Bytes
  callData_not_contains: local1338_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: local1338_Bytes
  originSender_not: local1338_Bytes
  originSender_gt: local1338_Bytes
  originSender_lt: local1338_Bytes
  originSender_gte: local1338_Bytes
  originSender_lte: local1338_Bytes
  originSender_in: [local1338_Bytes!]
  originSender_not_in: [local1338_Bytes!]
  originSender_contains: local1338_Bytes
  originSender_not_contains: local1338_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_gt: local1338_Bytes
  canonicalId_lt: local1338_Bytes
  canonicalId_gte: local1338_Bytes
  canonicalId_lte: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1338_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: local1338_Bytes
  executedCaller_not: local1338_Bytes
  executedCaller_gt: local1338_Bytes
  executedCaller_lt: local1338_Bytes
  executedCaller_gte: local1338_Bytes
  executedCaller_lte: local1338_Bytes
  executedCaller_in: [local1338_Bytes!]
  executedCaller_not_in: [local1338_Bytes!]
  executedCaller_contains: local1338_Bytes
  executedCaller_not_contains: local1338_Bytes
  executedTransactionHash: local1338_Bytes
  executedTransactionHash_not: local1338_Bytes
  executedTransactionHash_gt: local1338_Bytes
  executedTransactionHash_lt: local1338_Bytes
  executedTransactionHash_gte: local1338_Bytes
  executedTransactionHash_lte: local1338_Bytes
  executedTransactionHash_in: [local1338_Bytes!]
  executedTransactionHash_not_in: [local1338_Bytes!]
  executedTransactionHash_contains: local1338_Bytes
  executedTransactionHash_not_contains: local1338_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: local1338_Bytes
  executedTxOrigin_not: local1338_Bytes
  executedTxOrigin_gt: local1338_Bytes
  executedTxOrigin_lt: local1338_Bytes
  executedTxOrigin_gte: local1338_Bytes
  executedTxOrigin_lte: local1338_Bytes
  executedTxOrigin_in: [local1338_Bytes!]
  executedTxOrigin_not_in: [local1338_Bytes!]
  executedTxOrigin_contains: local1338_Bytes
  executedTxOrigin_not_contains: local1338_Bytes
  reconciledCaller: local1338_Bytes
  reconciledCaller_not: local1338_Bytes
  reconciledCaller_gt: local1338_Bytes
  reconciledCaller_lt: local1338_Bytes
  reconciledCaller_gte: local1338_Bytes
  reconciledCaller_lte: local1338_Bytes
  reconciledCaller_in: [local1338_Bytes!]
  reconciledCaller_not_in: [local1338_Bytes!]
  reconciledCaller_contains: local1338_Bytes
  reconciledCaller_not_contains: local1338_Bytes
  reconciledTransactionHash: local1338_Bytes
  reconciledTransactionHash_not: local1338_Bytes
  reconciledTransactionHash_gt: local1338_Bytes
  reconciledTransactionHash_lt: local1338_Bytes
  reconciledTransactionHash_gte: local1338_Bytes
  reconciledTransactionHash_lte: local1338_Bytes
  reconciledTransactionHash_in: [local1338_Bytes!]
  reconciledTransactionHash_not_in: [local1338_Bytes!]
  reconciledTransactionHash_contains: local1338_Bytes
  reconciledTransactionHash_not_contains: local1338_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: local1338_Bytes
  reconciledTxOrigin_not: local1338_Bytes
  reconciledTxOrigin_gt: local1338_Bytes
  reconciledTxOrigin_lt: local1338_Bytes
  reconciledTxOrigin_gte: local1338_Bytes
  reconciledTxOrigin_lte: local1338_Bytes
  reconciledTxOrigin_in: [local1338_Bytes!]
  reconciledTxOrigin_not_in: [local1338_Bytes!]
  reconciledTxOrigin_contains: local1338_Bytes
  reconciledTxOrigin_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

"""Defines the order direction, either ascending or descending"""
enum local1338_OrderDirection {
  asc
  desc
}

type local1338_OriginMessage {
  id: ID!
  transferId: local1338_Bytes
  destinationDomain: BigInt
  leaf: local1338_Bytes
  index: BigInt
  message: local1338_Bytes
  root: local1338_Bytes
  transactionHash: local1338_Bytes
  blockNumber: BigInt
  rootCount: local1338_RootCount
}

input local1338_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_gt: local1338_Bytes
  transferId_lt: local1338_Bytes
  transferId_gte: local1338_Bytes
  transferId_lte: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: local1338_Bytes
  leaf_not: local1338_Bytes
  leaf_gt: local1338_Bytes
  leaf_lt: local1338_Bytes
  leaf_gte: local1338_Bytes
  leaf_lte: local1338_Bytes
  leaf_in: [local1338_Bytes!]
  leaf_not_in: [local1338_Bytes!]
  leaf_contains: local1338_Bytes
  leaf_not_contains: local1338_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: local1338_Bytes
  message_not: local1338_Bytes
  message_gt: local1338_Bytes
  message_lt: local1338_Bytes
  message_gte: local1338_Bytes
  message_lte: local1338_Bytes
  message_in: [local1338_Bytes!]
  message_not_in: [local1338_Bytes!]
  message_contains: local1338_Bytes
  message_not_contains: local1338_Bytes
  root: local1338_Bytes
  root_not: local1338_Bytes
  root_gt: local1338_Bytes
  root_lt: local1338_Bytes
  root_gte: local1338_Bytes
  root_lte: local1338_Bytes
  root_in: [local1338_Bytes!]
  root_not_in: [local1338_Bytes!]
  root_contains: local1338_Bytes
  root_not_contains: local1338_Bytes
  transactionHash: local1338_Bytes
  transactionHash_not: local1338_Bytes
  transactionHash_gt: local1338_Bytes
  transactionHash_lt: local1338_Bytes
  transactionHash_gte: local1338_Bytes
  transactionHash_lte: local1338_Bytes
  transactionHash_in: [local1338_Bytes!]
  transactionHash_not_in: [local1338_Bytes!]
  transactionHash_contains: local1338_Bytes
  transactionHash_not_contains: local1338_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: local1338_RootCount_filter
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type local1338_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1338_Bytes
  nonce: BigInt
  status: local1338_TransferStatus
  messageHash: local1338_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: local1338_Bytes
  delegate: local1338_Bytes
  receiveLocal: Boolean
  callData: local1338_Bytes
  slippage: BigInt
  originSender: local1338_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: local1338_Bytes
  asset: local1338_Asset
  transacting: local1338_Bytes
  message: local1338_OriginMessage
  relayerFee: BigInt
  caller: local1338_Bytes
  transactionHash: local1338_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: local1338_Bytes
}

input local1338_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_gt: local1338_Bytes
  transferId_lt: local1338_Bytes
  transferId_gte: local1338_Bytes
  transferId_lte: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: local1338_TransferStatus
  status_not: local1338_TransferStatus
  status_in: [local1338_TransferStatus!]
  status_not_in: [local1338_TransferStatus!]
  messageHash: local1338_Bytes
  messageHash_not: local1338_Bytes
  messageHash_gt: local1338_Bytes
  messageHash_lt: local1338_Bytes
  messageHash_gte: local1338_Bytes
  messageHash_lte: local1338_Bytes
  messageHash_in: [local1338_Bytes!]
  messageHash_not_in: [local1338_Bytes!]
  messageHash_contains: local1338_Bytes
  messageHash_not_contains: local1338_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: local1338_Bytes
  to_not: local1338_Bytes
  to_gt: local1338_Bytes
  to_lt: local1338_Bytes
  to_gte: local1338_Bytes
  to_lte: local1338_Bytes
  to_in: [local1338_Bytes!]
  to_not_in: [local1338_Bytes!]
  to_contains: local1338_Bytes
  to_not_contains: local1338_Bytes
  delegate: local1338_Bytes
  delegate_not: local1338_Bytes
  delegate_gt: local1338_Bytes
  delegate_lt: local1338_Bytes
  delegate_gte: local1338_Bytes
  delegate_lte: local1338_Bytes
  delegate_in: [local1338_Bytes!]
  delegate_not_in: [local1338_Bytes!]
  delegate_contains: local1338_Bytes
  delegate_not_contains: local1338_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: local1338_Bytes
  callData_not: local1338_Bytes
  callData_gt: local1338_Bytes
  callData_lt: local1338_Bytes
  callData_gte: local1338_Bytes
  callData_lte: local1338_Bytes
  callData_in: [local1338_Bytes!]
  callData_not_in: [local1338_Bytes!]
  callData_contains: local1338_Bytes
  callData_not_contains: local1338_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: local1338_Bytes
  originSender_not: local1338_Bytes
  originSender_gt: local1338_Bytes
  originSender_lt: local1338_Bytes
  originSender_gte: local1338_Bytes
  originSender_lte: local1338_Bytes
  originSender_in: [local1338_Bytes!]
  originSender_not_in: [local1338_Bytes!]
  originSender_contains: local1338_Bytes
  originSender_not_contains: local1338_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_gt: local1338_Bytes
  canonicalId_lt: local1338_Bytes
  canonicalId_gte: local1338_Bytes
  canonicalId_lte: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1338_Asset_filter
  transacting: local1338_Bytes
  transacting_not: local1338_Bytes
  transacting_gt: local1338_Bytes
  transacting_lt: local1338_Bytes
  transacting_gte: local1338_Bytes
  transacting_lte: local1338_Bytes
  transacting_in: [local1338_Bytes!]
  transacting_not_in: [local1338_Bytes!]
  transacting_contains: local1338_Bytes
  transacting_not_contains: local1338_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: local1338_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_gt: local1338_Bytes
  caller_lt: local1338_Bytes
  caller_gte: local1338_Bytes
  caller_lte: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  transactionHash: local1338_Bytes
  transactionHash_not: local1338_Bytes
  transactionHash_gt: local1338_Bytes
  transactionHash_lt: local1338_Bytes
  transactionHash_gte: local1338_Bytes
  transactionHash_lte: local1338_Bytes
  transactionHash_in: [local1338_Bytes!]
  transactionHash_not_in: [local1338_Bytes!]
  transactionHash_contains: local1338_Bytes
  transactionHash_not_contains: local1338_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: local1338_Bytes
  txOrigin_not: local1338_Bytes
  txOrigin_gt: local1338_Bytes
  txOrigin_lt: local1338_Bytes
  txOrigin_gte: local1338_Bytes
  txOrigin_lte: local1338_Bytes
  txOrigin_in: [local1338_Bytes!]
  txOrigin_not_in: [local1338_Bytes!]
  txOrigin_contains: local1338_Bytes
  txOrigin_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type local1338_PooledToken {
  id: ID!
  asset: local1338_Bytes!
}

input local1338_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: local1338_Bytes
  asset_not: local1338_Bytes
  asset_gt: local1338_Bytes
  asset_lt: local1338_Bytes
  asset_gte: local1338_Bytes
  asset_lte: local1338_Bytes
  asset_in: [local1338_Bytes!]
  asset_not_in: [local1338_Bytes!]
  asset_contains: local1338_Bytes
  asset_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_PooledToken_orderBy {
  id
  asset
}

type local1338_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1338_Bytes
}

input local1338_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: local1338_Bytes
  relayer_not: local1338_Bytes
  relayer_gt: local1338_Bytes
  relayer_lt: local1338_Bytes
  relayer_gte: local1338_Bytes
  relayer_lte: local1338_Bytes
  relayer_in: [local1338_Bytes!]
  relayer_not_in: [local1338_Bytes!]
  relayer_contains: local1338_Bytes
  relayer_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Relayer_orderBy {
  id
  isActive
  relayer
}

type local1338_RootCount {
  id: ID!
  count: BigInt
}

input local1338_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_RootCount_orderBy {
  id
  count
}

type local1338_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: local1338_Bytes
  count: BigInt
  caller: local1338_Bytes
  transactionHash: local1338_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input local1338_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: local1338_Bytes
  root_not: local1338_Bytes
  root_gt: local1338_Bytes
  root_lt: local1338_Bytes
  root_gte: local1338_Bytes
  root_lte: local1338_Bytes
  root_in: [local1338_Bytes!]
  root_not_in: [local1338_Bytes!]
  root_contains: local1338_Bytes
  root_not_contains: local1338_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_gt: local1338_Bytes
  caller_lt: local1338_Bytes
  caller_gte: local1338_Bytes
  caller_lte: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  transactionHash: local1338_Bytes
  transactionHash_not: local1338_Bytes
  transactionHash_gt: local1338_Bytes
  transactionHash_lt: local1338_Bytes
  transactionHash_gte: local1338_Bytes
  transactionHash_lte: local1338_Bytes
  transactionHash_in: [local1338_Bytes!]
  transactionHash_not_in: [local1338_Bytes!]
  transactionHash_contains: local1338_Bytes
  transactionHash_not_contains: local1338_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type local1338_Router {
  id: ID!
  isActive: Boolean!
  owner: local1338_Bytes
  recipient: local1338_Bytes
  proposedOwner: local1338_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1338_AssetBalance_orderBy, orderDirection: local1338_OrderDirection, where: local1338_AssetBalance_filter): [local1338_AssetBalance!]!
}

input local1338_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: local1338_Bytes
  owner_not: local1338_Bytes
  owner_gt: local1338_Bytes
  owner_lt: local1338_Bytes
  owner_gte: local1338_Bytes
  owner_lte: local1338_Bytes
  owner_in: [local1338_Bytes!]
  owner_not_in: [local1338_Bytes!]
  owner_contains: local1338_Bytes
  owner_not_contains: local1338_Bytes
  recipient: local1338_Bytes
  recipient_not: local1338_Bytes
  recipient_gt: local1338_Bytes
  recipient_lt: local1338_Bytes
  recipient_gte: local1338_Bytes
  recipient_lte: local1338_Bytes
  recipient_in: [local1338_Bytes!]
  recipient_not_in: [local1338_Bytes!]
  recipient_contains: local1338_Bytes
  recipient_not_contains: local1338_Bytes
  proposedOwner: local1338_Bytes
  proposedOwner_not: local1338_Bytes
  proposedOwner_gt: local1338_Bytes
  proposedOwner_lt: local1338_Bytes
  proposedOwner_gte: local1338_Bytes
  proposedOwner_lte: local1338_Bytes
  proposedOwner_in: [local1338_Bytes!]
  proposedOwner_not_in: [local1338_Bytes!]
  proposedOwner_contains: local1338_Bytes
  proposedOwner_not_contains: local1338_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: local1338_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type local1338_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: local1338_Bytes
}

input local1338_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: local1338_Bytes
  sequencer_not: local1338_Bytes
  sequencer_gt: local1338_Bytes
  sequencer_lt: local1338_Bytes
  sequencer_gte: local1338_Bytes
  sequencer_lte: local1338_Bytes
  sequencer_in: [local1338_Bytes!]
  sequencer_not_in: [local1338_Bytes!]
  sequencer_contains: local1338_Bytes
  sequencer_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type local1338_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1338_Bytes!
}

input local1338_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_gt: local1338_Bytes
  caller_lt: local1338_Bytes
  caller_gte: local1338_Bytes
  caller_lte: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type local1338_StableSwap {
  id: ID!
  isActive: Boolean
  key: local1338_Bytes
  canonicalId: local1338_Bytes
  domain: BigInt
  swapPool: local1338_Bytes
  lpToken: local1338_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: local1338_PooledToken_orderBy, orderDirection: local1338_OrderDirection, where: local1338_PooledToken_filter): [local1338_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt
}

type local1338_StableSwapAddLiquidityEvent implements local1338_StableSwapEvent {
  id: ID!
  stableSwap: local1338_StableSwap!
  provider: local1338_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: local1338_Bytes!
}

input local1338_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1338_StableSwap_filter
  provider: local1338_Bytes
  provider_not: local1338_Bytes
  provider_gt: local1338_Bytes
  provider_lt: local1338_Bytes
  provider_gte: local1338_Bytes
  provider_lte: local1338_Bytes
  provider_in: [local1338_Bytes!]
  provider_not_in: [local1338_Bytes!]
  provider_contains: local1338_Bytes
  provider_not_contains: local1338_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: local1338_Bytes
  transaction_not: local1338_Bytes
  transaction_gt: local1338_Bytes
  transaction_lt: local1338_Bytes
  transaction_gte: local1338_Bytes
  transaction_lte: local1338_Bytes
  transaction_in: [local1338_Bytes!]
  transaction_not_in: [local1338_Bytes!]
  transaction_contains: local1338_Bytes
  transaction_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface local1338_StableSwapEvent {
  stableSwap: local1338_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: local1338_Bytes!
}

input local1338_StableSwapEvent_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1338_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: local1338_Bytes
  transaction_not: local1338_Bytes
  transaction_gt: local1338_Bytes
  transaction_lt: local1338_Bytes
  transaction_gte: local1338_Bytes
  transaction_lte: local1338_Bytes
  transaction_in: [local1338_Bytes!]
  transaction_not_in: [local1338_Bytes!]
  transaction_contains: local1338_Bytes
  transaction_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_StableSwapEvent_orderBy {
  stableSwap
  block
  timestamp
  transaction
}

type local1338_StableSwapExchange {
  id: ID!
  stableSwap: local1338_StableSwap!
  buyer: local1338_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: local1338_Bytes!
}

input local1338_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1338_StableSwap_filter
  buyer: local1338_Bytes
  buyer_not: local1338_Bytes
  buyer_gt: local1338_Bytes
  buyer_lt: local1338_Bytes
  buyer_gte: local1338_Bytes
  buyer_lte: local1338_Bytes
  buyer_in: [local1338_Bytes!]
  buyer_not_in: [local1338_Bytes!]
  buyer_contains: local1338_Bytes
  buyer_not_contains: local1338_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: local1338_Bytes
  transaction_not: local1338_Bytes
  transaction_gt: local1338_Bytes
  transaction_lt: local1338_Bytes
  transaction_gte: local1338_Bytes
  transaction_lte: local1338_Bytes
  transaction_in: [local1338_Bytes!]
  transaction_not_in: [local1338_Bytes!]
  transaction_contains: local1338_Bytes
  transaction_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type local1338_StableSwapRemoveLiquidityEvent implements local1338_StableSwapEvent {
  id: ID!
  stableSwap: local1338_StableSwap!
  provider: local1338_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: local1338_Bytes!
}

input local1338_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1338_StableSwap_filter
  provider: local1338_Bytes
  provider_not: local1338_Bytes
  provider_gt: local1338_Bytes
  provider_lt: local1338_Bytes
  provider_gte: local1338_Bytes
  provider_lte: local1338_Bytes
  provider_in: [local1338_Bytes!]
  provider_not_in: [local1338_Bytes!]
  provider_contains: local1338_Bytes
  provider_not_contains: local1338_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: local1338_Bytes
  transaction_not: local1338_Bytes
  transaction_gt: local1338_Bytes
  transaction_lt: local1338_Bytes
  transaction_gte: local1338_Bytes
  transaction_lte: local1338_Bytes
  transaction_in: [local1338_Bytes!]
  transaction_not_in: [local1338_Bytes!]
  transaction_contains: local1338_Bytes
  transaction_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input local1338_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: local1338_Bytes
  key_not: local1338_Bytes
  key_gt: local1338_Bytes
  key_lt: local1338_Bytes
  key_gte: local1338_Bytes
  key_lte: local1338_Bytes
  key_in: [local1338_Bytes!]
  key_not_in: [local1338_Bytes!]
  key_contains: local1338_Bytes
  key_not_contains: local1338_Bytes
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_gt: local1338_Bytes
  canonicalId_lt: local1338_Bytes
  canonicalId_gte: local1338_Bytes
  canonicalId_lte: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: local1338_Bytes
  swapPool_not: local1338_Bytes
  swapPool_gt: local1338_Bytes
  swapPool_lt: local1338_Bytes
  swapPool_gte: local1338_Bytes
  swapPool_lte: local1338_Bytes
  swapPool_in: [local1338_Bytes!]
  swapPool_not_in: [local1338_Bytes!]
  swapPool_contains: local1338_Bytes
  swapPool_not_contains: local1338_Bytes
  lpToken: local1338_Bytes
  lpToken_not: local1338_Bytes
  lpToken_gt: local1338_Bytes
  lpToken_lt: local1338_Bytes
  lpToken_gte: local1338_Bytes
  lpToken_lte: local1338_Bytes
  lpToken_in: [local1338_Bytes!]
  lpToken_not_in: [local1338_Bytes!]
  lpToken_contains: local1338_Bytes
  lpToken_not_contains: local1338_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: local1338_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  invariant
  lpTokenSupply
}

type local1338_SwapDailyVolume implements local1338_SwapTradeVolume {
  id: ID!
  stableSwap: local1338_StableSwap!
  timestamp: BigInt!
  volume: local1338_BigDecimal!
}

input local1338_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1338_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: local1338_BigDecimal
  volume_not: local1338_BigDecimal
  volume_gt: local1338_BigDecimal
  volume_lt: local1338_BigDecimal
  volume_gte: local1338_BigDecimal
  volume_lte: local1338_BigDecimal
  volume_in: [local1338_BigDecimal!]
  volume_not_in: [local1338_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type local1338_SwapHourlyVolume implements local1338_SwapTradeVolume {
  id: ID!
  stableSwap: local1338_StableSwap!
  timestamp: BigInt!
  volume: local1338_BigDecimal!
}

input local1338_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1338_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: local1338_BigDecimal
  volume_not: local1338_BigDecimal
  volume_gt: local1338_BigDecimal
  volume_lt: local1338_BigDecimal
  volume_gte: local1338_BigDecimal
  volume_lte: local1338_BigDecimal
  volume_in: [local1338_BigDecimal!]
  volume_not_in: [local1338_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface local1338_SwapTradeVolume {
  stableSwap: local1338_StableSwap!
  timestamp: BigInt!
  volume: local1338_BigDecimal!
}

input local1338_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1338_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: local1338_BigDecimal
  volume_not: local1338_BigDecimal
  volume_gt: local1338_BigDecimal
  volume_lt: local1338_BigDecimal
  volume_gte: local1338_BigDecimal
  volume_lte: local1338_BigDecimal
  volume_in: [local1338_BigDecimal!]
  volume_not_in: [local1338_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type local1338_SwapWeeklyVolume implements local1338_SwapTradeVolume {
  id: ID!
  stableSwap: local1338_StableSwap!
  timestamp: BigInt!
  volume: local1338_BigDecimal!
}

input local1338_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1338_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: local1338_BigDecimal
  volume_not: local1338_BigDecimal
  volume_gt: local1338_BigDecimal
  volume_lt: local1338_BigDecimal
  volume_gte: local1338_BigDecimal
  volume_lte: local1338_BigDecimal
  volume_in: [local1338_BigDecimal!]
  volume_not_in: [local1338_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type local1338_TransferRelayerFee {
  id: ID!
  transferId: local1338_Bytes!
  fee: BigInt
}

input local1338_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_gt: local1338_Bytes
  transferId_lt: local1338_Bytes
  transferId_gte: local1338_Bytes
  transferId_lte: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum local1338_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type local1338__Block_ {
  """The hash of the block"""
  hash: local1338_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type local1338__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: local1338__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type local1337_AggregateRoot {
  id: ID!
  root: local1337_Bytes!
  blockNumber: BigInt!
}

input local1337_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: local1337_Bytes
  root_not: local1337_Bytes
  root_gt: local1337_Bytes
  root_lt: local1337_Bytes
  root_gte: local1337_Bytes
  root_lte: local1337_Bytes
  root_in: [local1337_Bytes!]
  root_not_in: [local1337_Bytes!]
  root_contains: local1337_Bytes
  root_not_contains: local1337_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type local1337_Asset {
  id: ID!
  key: local1337_Bytes
  canonicalId: local1337_Bytes
  canonicalDomain: BigInt
  adoptedAsset: local1337_Bytes
  localAsset: local1337_Bytes
  blockNumber: BigInt
}

type local1337_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1337_Router!
  asset: local1337_Asset!
  feesEarned: BigInt!
}

input local1337_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: local1337_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1337_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input local1337_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: local1337_Bytes
  key_not: local1337_Bytes
  key_gt: local1337_Bytes
  key_lt: local1337_Bytes
  key_gte: local1337_Bytes
  key_lte: local1337_Bytes
  key_in: [local1337_Bytes!]
  key_not_in: [local1337_Bytes!]
  key_contains: local1337_Bytes
  key_not_contains: local1337_Bytes
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_gt: local1337_Bytes
  canonicalId_lt: local1337_Bytes
  canonicalId_gte: local1337_Bytes
  canonicalId_lte: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: local1337_Bytes
  adoptedAsset_not: local1337_Bytes
  adoptedAsset_gt: local1337_Bytes
  adoptedAsset_lt: local1337_Bytes
  adoptedAsset_gte: local1337_Bytes
  adoptedAsset_lte: local1337_Bytes
  adoptedAsset_in: [local1337_Bytes!]
  adoptedAsset_not_in: [local1337_Bytes!]
  adoptedAsset_contains: local1337_Bytes
  adoptedAsset_not_contains: local1337_Bytes
  localAsset: local1337_Bytes
  localAsset_not: local1337_Bytes
  localAsset_gt: local1337_Bytes
  localAsset_lt: local1337_Bytes
  localAsset_gte: local1337_Bytes
  localAsset_lte: local1337_Bytes
  localAsset_in: [local1337_Bytes!]
  localAsset_not_in: [local1337_Bytes!]
  localAsset_contains: local1337_Bytes
  localAsset_not_contains: local1337_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

scalar local1337_BigDecimal

input local1337_BlockChangedFilter {
  number_gte: Int!
}

input local1337_Block_height {
  hash: local1337_Bytes
  number: Int
  number_gte: Int
}

scalar local1337_Bytes

type local1337_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: local1337_Bytes
  rootManager: local1337_Bytes
  mirrorConnector: local1337_Bytes
}

input local1337_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: local1337_Bytes
  amb_not: local1337_Bytes
  amb_gt: local1337_Bytes
  amb_lt: local1337_Bytes
  amb_gte: local1337_Bytes
  amb_lte: local1337_Bytes
  amb_in: [local1337_Bytes!]
  amb_not_in: [local1337_Bytes!]
  amb_contains: local1337_Bytes
  amb_not_contains: local1337_Bytes
  rootManager: local1337_Bytes
  rootManager_not: local1337_Bytes
  rootManager_gt: local1337_Bytes
  rootManager_lt: local1337_Bytes
  rootManager_gte: local1337_Bytes
  rootManager_lte: local1337_Bytes
  rootManager_in: [local1337_Bytes!]
  rootManager_not_in: [local1337_Bytes!]
  rootManager_contains: local1337_Bytes
  rootManager_not_contains: local1337_Bytes
  mirrorConnector: local1337_Bytes
  mirrorConnector_not: local1337_Bytes
  mirrorConnector_gt: local1337_Bytes
  mirrorConnector_lt: local1337_Bytes
  mirrorConnector_gte: local1337_Bytes
  mirrorConnector_lte: local1337_Bytes
  mirrorConnector_in: [local1337_Bytes!]
  mirrorConnector_not_in: [local1337_Bytes!]
  mirrorConnector_contains: local1337_Bytes
  mirrorConnector_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type local1337_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  status: local1337_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1337_Router_orderBy, orderDirection: local1337_OrderDirection, where: local1337_Router_filter): [local1337_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: local1337_Bytes
  delegate: local1337_Bytes
  receiveLocal: Boolean
  callData: local1337_Bytes
  slippage: BigInt
  originSender: local1337_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: local1337_Bytes
  asset: local1337_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: local1337_Bytes
  executedTransactionHash: local1337_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: local1337_Bytes
  reconciledCaller: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: local1337_Bytes
}

input local1337_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_gt: local1337_Bytes
  transferId_lt: local1337_Bytes
  transferId_gte: local1337_Bytes
  transferId_lte: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: local1337_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_gt: local1337_Bytes
  to_lt: local1337_Bytes
  to_gte: local1337_Bytes
  to_lte: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  delegate: local1337_Bytes
  delegate_not: local1337_Bytes
  delegate_gt: local1337_Bytes
  delegate_lt: local1337_Bytes
  delegate_gte: local1337_Bytes
  delegate_lte: local1337_Bytes
  delegate_in: [local1337_Bytes!]
  delegate_not_in: [local1337_Bytes!]
  delegate_contains: local1337_Bytes
  delegate_not_contains: local1337_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_gt: local1337_Bytes
  callData_lt: local1337_Bytes
  callData_gte: local1337_Bytes
  callData_lte: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: local1337_Bytes
  originSender_not: local1337_Bytes
  originSender_gt: local1337_Bytes
  originSender_lt: local1337_Bytes
  originSender_gte: local1337_Bytes
  originSender_lte: local1337_Bytes
  originSender_in: [local1337_Bytes!]
  originSender_not_in: [local1337_Bytes!]
  originSender_contains: local1337_Bytes
  originSender_not_contains: local1337_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_gt: local1337_Bytes
  canonicalId_lt: local1337_Bytes
  canonicalId_gte: local1337_Bytes
  canonicalId_lte: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1337_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: local1337_Bytes
  executedCaller_not: local1337_Bytes
  executedCaller_gt: local1337_Bytes
  executedCaller_lt: local1337_Bytes
  executedCaller_gte: local1337_Bytes
  executedCaller_lte: local1337_Bytes
  executedCaller_in: [local1337_Bytes!]
  executedCaller_not_in: [local1337_Bytes!]
  executedCaller_contains: local1337_Bytes
  executedCaller_not_contains: local1337_Bytes
  executedTransactionHash: local1337_Bytes
  executedTransactionHash_not: local1337_Bytes
  executedTransactionHash_gt: local1337_Bytes
  executedTransactionHash_lt: local1337_Bytes
  executedTransactionHash_gte: local1337_Bytes
  executedTransactionHash_lte: local1337_Bytes
  executedTransactionHash_in: [local1337_Bytes!]
  executedTransactionHash_not_in: [local1337_Bytes!]
  executedTransactionHash_contains: local1337_Bytes
  executedTransactionHash_not_contains: local1337_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: local1337_Bytes
  executedTxOrigin_not: local1337_Bytes
  executedTxOrigin_gt: local1337_Bytes
  executedTxOrigin_lt: local1337_Bytes
  executedTxOrigin_gte: local1337_Bytes
  executedTxOrigin_lte: local1337_Bytes
  executedTxOrigin_in: [local1337_Bytes!]
  executedTxOrigin_not_in: [local1337_Bytes!]
  executedTxOrigin_contains: local1337_Bytes
  executedTxOrigin_not_contains: local1337_Bytes
  reconciledCaller: local1337_Bytes
  reconciledCaller_not: local1337_Bytes
  reconciledCaller_gt: local1337_Bytes
  reconciledCaller_lt: local1337_Bytes
  reconciledCaller_gte: local1337_Bytes
  reconciledCaller_lte: local1337_Bytes
  reconciledCaller_in: [local1337_Bytes!]
  reconciledCaller_not_in: [local1337_Bytes!]
  reconciledCaller_contains: local1337_Bytes
  reconciledCaller_not_contains: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
  reconciledTransactionHash_not: local1337_Bytes
  reconciledTransactionHash_gt: local1337_Bytes
  reconciledTransactionHash_lt: local1337_Bytes
  reconciledTransactionHash_gte: local1337_Bytes
  reconciledTransactionHash_lte: local1337_Bytes
  reconciledTransactionHash_in: [local1337_Bytes!]
  reconciledTransactionHash_not_in: [local1337_Bytes!]
  reconciledTransactionHash_contains: local1337_Bytes
  reconciledTransactionHash_not_contains: local1337_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: local1337_Bytes
  reconciledTxOrigin_not: local1337_Bytes
  reconciledTxOrigin_gt: local1337_Bytes
  reconciledTxOrigin_lt: local1337_Bytes
  reconciledTxOrigin_gte: local1337_Bytes
  reconciledTxOrigin_lte: local1337_Bytes
  reconciledTxOrigin_in: [local1337_Bytes!]
  reconciledTxOrigin_not_in: [local1337_Bytes!]
  reconciledTxOrigin_contains: local1337_Bytes
  reconciledTxOrigin_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

"""Defines the order direction, either ascending or descending"""
enum local1337_OrderDirection {
  asc
  desc
}

type local1337_OriginMessage {
  id: ID!
  transferId: local1337_Bytes
  destinationDomain: BigInt
  leaf: local1337_Bytes
  index: BigInt
  message: local1337_Bytes
  root: local1337_Bytes
  transactionHash: local1337_Bytes
  blockNumber: BigInt
  rootCount: local1337_RootCount
}

input local1337_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_gt: local1337_Bytes
  transferId_lt: local1337_Bytes
  transferId_gte: local1337_Bytes
  transferId_lte: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: local1337_Bytes
  leaf_not: local1337_Bytes
  leaf_gt: local1337_Bytes
  leaf_lt: local1337_Bytes
  leaf_gte: local1337_Bytes
  leaf_lte: local1337_Bytes
  leaf_in: [local1337_Bytes!]
  leaf_not_in: [local1337_Bytes!]
  leaf_contains: local1337_Bytes
  leaf_not_contains: local1337_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: local1337_Bytes
  message_not: local1337_Bytes
  message_gt: local1337_Bytes
  message_lt: local1337_Bytes
  message_gte: local1337_Bytes
  message_lte: local1337_Bytes
  message_in: [local1337_Bytes!]
  message_not_in: [local1337_Bytes!]
  message_contains: local1337_Bytes
  message_not_contains: local1337_Bytes
  root: local1337_Bytes
  root_not: local1337_Bytes
  root_gt: local1337_Bytes
  root_lt: local1337_Bytes
  root_gte: local1337_Bytes
  root_lte: local1337_Bytes
  root_in: [local1337_Bytes!]
  root_not_in: [local1337_Bytes!]
  root_contains: local1337_Bytes
  root_not_contains: local1337_Bytes
  transactionHash: local1337_Bytes
  transactionHash_not: local1337_Bytes
  transactionHash_gt: local1337_Bytes
  transactionHash_lt: local1337_Bytes
  transactionHash_gte: local1337_Bytes
  transactionHash_lte: local1337_Bytes
  transactionHash_in: [local1337_Bytes!]
  transactionHash_not_in: [local1337_Bytes!]
  transactionHash_contains: local1337_Bytes
  transactionHash_not_contains: local1337_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: local1337_RootCount_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type local1337_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  status: local1337_TransferStatus
  messageHash: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: local1337_Bytes
  delegate: local1337_Bytes
  receiveLocal: Boolean
  callData: local1337_Bytes
  slippage: BigInt
  originSender: local1337_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: local1337_Bytes
  asset: local1337_Asset
  transacting: local1337_Bytes
  message: local1337_OriginMessage
  relayerFee: BigInt
  caller: local1337_Bytes
  transactionHash: local1337_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: local1337_Bytes
}

input local1337_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_gt: local1337_Bytes
  transferId_lt: local1337_Bytes
  transferId_gte: local1337_Bytes
  transferId_lte: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
  messageHash: local1337_Bytes
  messageHash_not: local1337_Bytes
  messageHash_gt: local1337_Bytes
  messageHash_lt: local1337_Bytes
  messageHash_gte: local1337_Bytes
  messageHash_lte: local1337_Bytes
  messageHash_in: [local1337_Bytes!]
  messageHash_not_in: [local1337_Bytes!]
  messageHash_contains: local1337_Bytes
  messageHash_not_contains: local1337_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_gt: local1337_Bytes
  to_lt: local1337_Bytes
  to_gte: local1337_Bytes
  to_lte: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  delegate: local1337_Bytes
  delegate_not: local1337_Bytes
  delegate_gt: local1337_Bytes
  delegate_lt: local1337_Bytes
  delegate_gte: local1337_Bytes
  delegate_lte: local1337_Bytes
  delegate_in: [local1337_Bytes!]
  delegate_not_in: [local1337_Bytes!]
  delegate_contains: local1337_Bytes
  delegate_not_contains: local1337_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_gt: local1337_Bytes
  callData_lt: local1337_Bytes
  callData_gte: local1337_Bytes
  callData_lte: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: local1337_Bytes
  originSender_not: local1337_Bytes
  originSender_gt: local1337_Bytes
  originSender_lt: local1337_Bytes
  originSender_gte: local1337_Bytes
  originSender_lte: local1337_Bytes
  originSender_in: [local1337_Bytes!]
  originSender_not_in: [local1337_Bytes!]
  originSender_contains: local1337_Bytes
  originSender_not_contains: local1337_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_gt: local1337_Bytes
  canonicalId_lt: local1337_Bytes
  canonicalId_gte: local1337_Bytes
  canonicalId_lte: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1337_Asset_filter
  transacting: local1337_Bytes
  transacting_not: local1337_Bytes
  transacting_gt: local1337_Bytes
  transacting_lt: local1337_Bytes
  transacting_gte: local1337_Bytes
  transacting_lte: local1337_Bytes
  transacting_in: [local1337_Bytes!]
  transacting_not_in: [local1337_Bytes!]
  transacting_contains: local1337_Bytes
  transacting_not_contains: local1337_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: local1337_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_gt: local1337_Bytes
  caller_lt: local1337_Bytes
  caller_gte: local1337_Bytes
  caller_lte: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  transactionHash: local1337_Bytes
  transactionHash_not: local1337_Bytes
  transactionHash_gt: local1337_Bytes
  transactionHash_lt: local1337_Bytes
  transactionHash_gte: local1337_Bytes
  transactionHash_lte: local1337_Bytes
  transactionHash_in: [local1337_Bytes!]
  transactionHash_not_in: [local1337_Bytes!]
  transactionHash_contains: local1337_Bytes
  transactionHash_not_contains: local1337_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: local1337_Bytes
  txOrigin_not: local1337_Bytes
  txOrigin_gt: local1337_Bytes
  txOrigin_lt: local1337_Bytes
  txOrigin_gte: local1337_Bytes
  txOrigin_lte: local1337_Bytes
  txOrigin_in: [local1337_Bytes!]
  txOrigin_not_in: [local1337_Bytes!]
  txOrigin_contains: local1337_Bytes
  txOrigin_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type local1337_PooledToken {
  id: ID!
  asset: local1337_Bytes!
}

input local1337_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: local1337_Bytes
  asset_not: local1337_Bytes
  asset_gt: local1337_Bytes
  asset_lt: local1337_Bytes
  asset_gte: local1337_Bytes
  asset_lte: local1337_Bytes
  asset_in: [local1337_Bytes!]
  asset_not_in: [local1337_Bytes!]
  asset_contains: local1337_Bytes
  asset_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_PooledToken_orderBy {
  id
  asset
}

type local1337_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1337_Bytes
}

input local1337_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: local1337_Bytes
  relayer_not: local1337_Bytes
  relayer_gt: local1337_Bytes
  relayer_lt: local1337_Bytes
  relayer_gte: local1337_Bytes
  relayer_lte: local1337_Bytes
  relayer_in: [local1337_Bytes!]
  relayer_not_in: [local1337_Bytes!]
  relayer_contains: local1337_Bytes
  relayer_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Relayer_orderBy {
  id
  isActive
  relayer
}

type local1337_RootCount {
  id: ID!
  count: BigInt
}

input local1337_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_RootCount_orderBy {
  id
  count
}

type local1337_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: local1337_Bytes
  count: BigInt
  caller: local1337_Bytes
  transactionHash: local1337_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input local1337_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: local1337_Bytes
  root_not: local1337_Bytes
  root_gt: local1337_Bytes
  root_lt: local1337_Bytes
  root_gte: local1337_Bytes
  root_lte: local1337_Bytes
  root_in: [local1337_Bytes!]
  root_not_in: [local1337_Bytes!]
  root_contains: local1337_Bytes
  root_not_contains: local1337_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_gt: local1337_Bytes
  caller_lt: local1337_Bytes
  caller_gte: local1337_Bytes
  caller_lte: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  transactionHash: local1337_Bytes
  transactionHash_not: local1337_Bytes
  transactionHash_gt: local1337_Bytes
  transactionHash_lt: local1337_Bytes
  transactionHash_gte: local1337_Bytes
  transactionHash_lte: local1337_Bytes
  transactionHash_in: [local1337_Bytes!]
  transactionHash_not_in: [local1337_Bytes!]
  transactionHash_contains: local1337_Bytes
  transactionHash_not_contains: local1337_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type local1337_Router {
  id: ID!
  isActive: Boolean!
  owner: local1337_Bytes
  recipient: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1337_AssetBalance_orderBy, orderDirection: local1337_OrderDirection, where: local1337_AssetBalance_filter): [local1337_AssetBalance!]!
}

input local1337_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: local1337_Bytes
  owner_not: local1337_Bytes
  owner_gt: local1337_Bytes
  owner_lt: local1337_Bytes
  owner_gte: local1337_Bytes
  owner_lte: local1337_Bytes
  owner_in: [local1337_Bytes!]
  owner_not_in: [local1337_Bytes!]
  owner_contains: local1337_Bytes
  owner_not_contains: local1337_Bytes
  recipient: local1337_Bytes
  recipient_not: local1337_Bytes
  recipient_gt: local1337_Bytes
  recipient_lt: local1337_Bytes
  recipient_gte: local1337_Bytes
  recipient_lte: local1337_Bytes
  recipient_in: [local1337_Bytes!]
  recipient_not_in: [local1337_Bytes!]
  recipient_contains: local1337_Bytes
  recipient_not_contains: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedOwner_not: local1337_Bytes
  proposedOwner_gt: local1337_Bytes
  proposedOwner_lt: local1337_Bytes
  proposedOwner_gte: local1337_Bytes
  proposedOwner_lte: local1337_Bytes
  proposedOwner_in: [local1337_Bytes!]
  proposedOwner_not_in: [local1337_Bytes!]
  proposedOwner_contains: local1337_Bytes
  proposedOwner_not_contains: local1337_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: local1337_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type local1337_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: local1337_Bytes
}

input local1337_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: local1337_Bytes
  sequencer_not: local1337_Bytes
  sequencer_gt: local1337_Bytes
  sequencer_lt: local1337_Bytes
  sequencer_gte: local1337_Bytes
  sequencer_lte: local1337_Bytes
  sequencer_in: [local1337_Bytes!]
  sequencer_not_in: [local1337_Bytes!]
  sequencer_contains: local1337_Bytes
  sequencer_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type local1337_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1337_Bytes!
}

input local1337_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_gt: local1337_Bytes
  caller_lt: local1337_Bytes
  caller_gte: local1337_Bytes
  caller_lte: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type local1337_StableSwap {
  id: ID!
  isActive: Boolean
  key: local1337_Bytes
  canonicalId: local1337_Bytes
  domain: BigInt
  swapPool: local1337_Bytes
  lpToken: local1337_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens(skip: Int = 0, first: Int = 100, orderBy: local1337_PooledToken_orderBy, orderDirection: local1337_OrderDirection, where: local1337_PooledToken_filter): [local1337_PooledToken!]!
  tokenPrecisionMultipliers: [BigInt!]
  balances: [BigInt!]!
  adminFees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt
}

type local1337_StableSwapAddLiquidityEvent implements local1337_StableSwapEvent {
  id: ID!
  stableSwap: local1337_StableSwap!
  provider: local1337_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: local1337_Bytes!
}

input local1337_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1337_StableSwap_filter
  provider: local1337_Bytes
  provider_not: local1337_Bytes
  provider_gt: local1337_Bytes
  provider_lt: local1337_Bytes
  provider_gte: local1337_Bytes
  provider_lte: local1337_Bytes
  provider_in: [local1337_Bytes!]
  provider_not_in: [local1337_Bytes!]
  provider_contains: local1337_Bytes
  provider_not_contains: local1337_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: local1337_Bytes
  transaction_not: local1337_Bytes
  transaction_gt: local1337_Bytes
  transaction_lt: local1337_Bytes
  transaction_gte: local1337_Bytes
  transaction_lte: local1337_Bytes
  transaction_in: [local1337_Bytes!]
  transaction_not_in: [local1337_Bytes!]
  transaction_contains: local1337_Bytes
  transaction_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

interface local1337_StableSwapEvent {
  stableSwap: local1337_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: local1337_Bytes!
}

input local1337_StableSwapEvent_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1337_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: local1337_Bytes
  transaction_not: local1337_Bytes
  transaction_gt: local1337_Bytes
  transaction_lt: local1337_Bytes
  transaction_gte: local1337_Bytes
  transaction_lte: local1337_Bytes
  transaction_in: [local1337_Bytes!]
  transaction_not_in: [local1337_Bytes!]
  transaction_contains: local1337_Bytes
  transaction_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwapEvent_orderBy {
  stableSwap
  block
  timestamp
  transaction
}

type local1337_StableSwapExchange {
  id: ID!
  stableSwap: local1337_StableSwap!
  buyer: local1337_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: local1337_Bytes!
}

input local1337_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1337_StableSwap_filter
  buyer: local1337_Bytes
  buyer_not: local1337_Bytes
  buyer_gt: local1337_Bytes
  buyer_lt: local1337_Bytes
  buyer_gte: local1337_Bytes
  buyer_lte: local1337_Bytes
  buyer_in: [local1337_Bytes!]
  buyer_not_in: [local1337_Bytes!]
  buyer_contains: local1337_Bytes
  buyer_not_contains: local1337_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: local1337_Bytes
  transaction_not: local1337_Bytes
  transaction_gt: local1337_Bytes
  transaction_lt: local1337_Bytes
  transaction_gte: local1337_Bytes
  transaction_lte: local1337_Bytes
  transaction_in: [local1337_Bytes!]
  transaction_not_in: [local1337_Bytes!]
  transaction_contains: local1337_Bytes
  transaction_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  block
  timestamp
  transaction
}

type local1337_StableSwapRemoveLiquidityEvent implements local1337_StableSwapEvent {
  id: ID!
  stableSwap: local1337_StableSwap!
  provider: local1337_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: local1337_Bytes!
}

input local1337_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1337_StableSwap_filter
  provider: local1337_Bytes
  provider_not: local1337_Bytes
  provider_gt: local1337_Bytes
  provider_lt: local1337_Bytes
  provider_gte: local1337_Bytes
  provider_lte: local1337_Bytes
  provider_in: [local1337_Bytes!]
  provider_not_in: [local1337_Bytes!]
  provider_contains: local1337_Bytes
  provider_not_contains: local1337_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: local1337_Bytes
  transaction_not: local1337_Bytes
  transaction_gt: local1337_Bytes
  transaction_lt: local1337_Bytes
  transaction_gte: local1337_Bytes
  transaction_lte: local1337_Bytes
  transaction_in: [local1337_Bytes!]
  transaction_not_in: [local1337_Bytes!]
  transaction_contains: local1337_Bytes
  transaction_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  block
  timestamp
  transaction
}

input local1337_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: local1337_Bytes
  key_not: local1337_Bytes
  key_gt: local1337_Bytes
  key_lt: local1337_Bytes
  key_gte: local1337_Bytes
  key_lte: local1337_Bytes
  key_in: [local1337_Bytes!]
  key_not_in: [local1337_Bytes!]
  key_contains: local1337_Bytes
  key_not_contains: local1337_Bytes
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_gt: local1337_Bytes
  canonicalId_lt: local1337_Bytes
  canonicalId_gte: local1337_Bytes
  canonicalId_lte: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: local1337_Bytes
  swapPool_not: local1337_Bytes
  swapPool_gt: local1337_Bytes
  swapPool_lt: local1337_Bytes
  swapPool_gte: local1337_Bytes
  swapPool_lte: local1337_Bytes
  swapPool_in: [local1337_Bytes!]
  swapPool_not_in: [local1337_Bytes!]
  swapPool_contains: local1337_Bytes
  swapPool_not_contains: local1337_Bytes
  lpToken: local1337_Bytes
  lpToken_not: local1337_Bytes
  lpToken_gt: local1337_Bytes
  lpToken_lt: local1337_Bytes
  lpToken_gte: local1337_Bytes
  lpToken_lte: local1337_Bytes
  lpToken_in: [local1337_Bytes!]
  lpToken_not_in: [local1337_Bytes!]
  lpToken_contains: local1337_Bytes
  lpToken_not_contains: local1337_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [String!]
  pooledTokens_not: [String!]
  pooledTokens_contains: [String!]
  pooledTokens_contains_nocase: [String!]
  pooledTokens_not_contains: [String!]
  pooledTokens_not_contains_nocase: [String!]
  pooledTokens_: local1337_PooledToken_filter
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  invariant
  lpTokenSupply
}

type local1337_SwapDailyVolume implements local1337_SwapTradeVolume {
  id: ID!
  stableSwap: local1337_StableSwap!
  timestamp: BigInt!
  volume: local1337_BigDecimal!
}

input local1337_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1337_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: local1337_BigDecimal
  volume_not: local1337_BigDecimal
  volume_gt: local1337_BigDecimal
  volume_lt: local1337_BigDecimal
  volume_gte: local1337_BigDecimal
  volume_lte: local1337_BigDecimal
  volume_in: [local1337_BigDecimal!]
  volume_not_in: [local1337_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type local1337_SwapHourlyVolume implements local1337_SwapTradeVolume {
  id: ID!
  stableSwap: local1337_StableSwap!
  timestamp: BigInt!
  volume: local1337_BigDecimal!
}

input local1337_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1337_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: local1337_BigDecimal
  volume_not: local1337_BigDecimal
  volume_gt: local1337_BigDecimal
  volume_lt: local1337_BigDecimal
  volume_gte: local1337_BigDecimal
  volume_lte: local1337_BigDecimal
  volume_in: [local1337_BigDecimal!]
  volume_not_in: [local1337_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface local1337_SwapTradeVolume {
  stableSwap: local1337_StableSwap!
  timestamp: BigInt!
  volume: local1337_BigDecimal!
}

input local1337_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1337_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: local1337_BigDecimal
  volume_not: local1337_BigDecimal
  volume_gt: local1337_BigDecimal
  volume_lt: local1337_BigDecimal
  volume_gte: local1337_BigDecimal
  volume_lte: local1337_BigDecimal
  volume_in: [local1337_BigDecimal!]
  volume_not_in: [local1337_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type local1337_SwapWeeklyVolume implements local1337_SwapTradeVolume {
  id: ID!
  stableSwap: local1337_StableSwap!
  timestamp: BigInt!
  volume: local1337_BigDecimal!
}

input local1337_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: local1337_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: local1337_BigDecimal
  volume_not: local1337_BigDecimal
  volume_gt: local1337_BigDecimal
  volume_lt: local1337_BigDecimal
  volume_gte: local1337_BigDecimal
  volume_lte: local1337_BigDecimal
  volume_in: [local1337_BigDecimal!]
  volume_not_in: [local1337_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type local1337_TransferRelayerFee {
  id: ID!
  transferId: local1337_Bytes!
  fee: BigInt
}

input local1337_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_gt: local1337_Bytes
  transferId_lt: local1337_Bytes
  transferId_gte: local1337_Bytes
  transferId_lte: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum local1337_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type local1337__Block_ {
  """The hash of the block"""
  hash: local1337_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type local1337__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: local1337__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type xdai_AggregateRoot {
  id: ID!
  root: xdai_Bytes!
  blockNumber: BigInt!
}

input xdai_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: xdai_Bytes
  root_not: xdai_Bytes
  root_gt: xdai_Bytes
  root_lt: xdai_Bytes
  root_gte: xdai_Bytes
  root_lte: xdai_Bytes
  root_in: [xdai_Bytes!]
  root_not_in: [xdai_Bytes!]
  root_contains: xdai_Bytes
  root_not_contains: xdai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type xdai_Asset {
  id: ID!
  key: xdai_Bytes
  canonicalId: xdai_Bytes
  canonicalDomain: BigInt
  adoptedAsset: xdai_Bytes
  localAsset: xdai_Bytes
  blockNumber: BigInt
}

type xdai_AssetBalance {
  id: ID!
  amount: BigInt!
  router: xdai_Router!
  asset: xdai_Asset!
  feesEarned: BigInt!
}

input xdai_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: xdai_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: xdai_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_AssetBalance_orderBy {
  id
  amount
  router
  asset
  feesEarned
}

input xdai_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: xdai_Bytes
  key_not: xdai_Bytes
  key_gt: xdai_Bytes
  key_lt: xdai_Bytes
  key_gte: xdai_Bytes
  key_lte: xdai_Bytes
  key_in: [xdai_Bytes!]
  key_not_in: [xdai_Bytes!]
  key_contains: xdai_Bytes
  key_not_contains: xdai_Bytes
  canonicalId: xdai_Bytes
  canonicalId_not: xdai_Bytes
  canonicalId_gt: xdai_Bytes
  canonicalId_lt: xdai_Bytes
  canonicalId_gte: xdai_Bytes
  canonicalId_lte: xdai_Bytes
  canonicalId_in: [xdai_Bytes!]
  canonicalId_not_in: [xdai_Bytes!]
  canonicalId_contains: xdai_Bytes
  canonicalId_not_contains: xdai_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: xdai_Bytes
  adoptedAsset_not: xdai_Bytes
  adoptedAsset_gt: xdai_Bytes
  adoptedAsset_lt: xdai_Bytes
  adoptedAsset_gte: xdai_Bytes
  adoptedAsset_lte: xdai_Bytes
  adoptedAsset_in: [xdai_Bytes!]
  adoptedAsset_not_in: [xdai_Bytes!]
  adoptedAsset_contains: xdai_Bytes
  adoptedAsset_not_contains: xdai_Bytes
  localAsset: xdai_Bytes
  localAsset_not: xdai_Bytes
  localAsset_gt: xdai_Bytes
  localAsset_lt: xdai_Bytes
  localAsset_gte: xdai_Bytes
  localAsset_lte: xdai_Bytes
  localAsset_in: [xdai_Bytes!]
  localAsset_not_in: [xdai_Bytes!]
  localAsset_contains: xdai_Bytes
  localAsset_not_contains: xdai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_Asset_orderBy {
  id
  key
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
}

type xdai_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: xdai_Bytes
  rootManager: xdai_Bytes
  mirrorConnector: xdai_Bytes
}

input xdai_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: xdai_Bytes
  amb_not: xdai_Bytes
  amb_gt: xdai_Bytes
  amb_lt: xdai_Bytes
  amb_gte: xdai_Bytes
  amb_lte: xdai_Bytes
  amb_in: [xdai_Bytes!]
  amb_not_in: [xdai_Bytes!]
  amb_contains: xdai_Bytes
  amb_not_contains: xdai_Bytes
  rootManager: xdai_Bytes
  rootManager_not: xdai_Bytes
  rootManager_gt: xdai_Bytes
  rootManager_lt: xdai_Bytes
  rootManager_gte: xdai_Bytes
  rootManager_lte: xdai_Bytes
  rootManager_in: [xdai_Bytes!]
  rootManager_not_in: [xdai_Bytes!]
  rootManager_contains: xdai_Bytes
  rootManager_not_contains: xdai_Bytes
  mirrorConnector: xdai_Bytes
  mirrorConnector_not: xdai_Bytes
  mirrorConnector_gt: xdai_Bytes
  mirrorConnector_lt: xdai_Bytes
  mirrorConnector_gte: xdai_Bytes
  mirrorConnector_lte: xdai_Bytes
  mirrorConnector_in: [xdai_Bytes!]
  mirrorConnector_not_in: [xdai_Bytes!]
  mirrorConnector_contains: xdai_Bytes
  mirrorConnector_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type xdai_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: xdai_Bytes
  nonce: BigInt
  status: xdai_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: xdai_Router_orderBy, orderDirection: xdai_OrderDirection, where: xdai_Router_filter): [xdai_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: xdai_Bytes
  delegate: xdai_Bytes
  receiveLocal: Boolean
  callData: xdai_Bytes
  slippage: BigInt
  originSender: xdai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: xdai_Bytes
  asset: xdai_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: xdai_Bytes
  executedTransactionHash: xdai_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: xdai_Bytes
  reconciledCaller: xdai_Bytes
  reconciledTransactionHash: xdai_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: xdai_Bytes
}

input xdai_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: xdai_Bytes
  transferId_not: xdai_Bytes
  transferId_gt: xdai_Bytes
  transferId_lt: xdai_Bytes
  transferId_gte: xdai_Bytes
  transferId_lte: xdai_Bytes
  transferId_in: [xdai_Bytes!]
  transferId_not_in: [xdai_Bytes!]
  transferId_contains: xdai_Bytes
  transferId_not_contains: xdai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: xdai_TransferStatus
  status_not: xdai_TransferStatus
  status_in: [xdai_TransferStatus!]
  status_not_in: [xdai_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: xdai_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: xdai_Bytes
  to_not: xdai_Bytes
  to_gt: xdai_Bytes
  to_lt: xdai_Bytes
  to_gte: xdai_Bytes
  to_lte: xdai_Bytes
  to_in: [xdai_Bytes!]
  to_not_in: [xdai_Bytes!]
  to_contains: xdai_Bytes
  to_not_contains: xdai_Bytes
  delegate: xdai_Bytes
  delegate_not: xdai_Bytes
  delegate_gt: xdai_Bytes
  delegate_lt: xdai_Bytes
  delegate_gte: xdai_Bytes
  delegate_lte: xdai_Bytes
  delegate_in: [xdai_Bytes!]
  delegate_not_in: [xdai_Bytes!]
  delegate_contains: xdai_Bytes
  delegate_not_contains: xdai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: xdai_Bytes
  callData_not: xdai_Bytes
  callData_gt: xdai_Bytes
  callData_lt: xdai_Bytes
  callData_gte: xdai_Bytes
  callData_lte: xdai_Bytes
  callData_in: [xdai_Bytes!]
  callData_not_in: [xdai_Bytes!]
  callData_contains: xdai_Bytes
  callData_not_contains: xdai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: xdai_Bytes
  originSender_not: xdai_Bytes
  originSender_gt: xdai_Bytes
  originSender_lt: xdai_Bytes
  originSender_gte: xdai_Bytes
  originSender_lte: xdai_Bytes
  originSender_in: [xdai_Bytes!]
  originSender_not_in: [xdai_Bytes!]
  originSender_contains: xdai_Bytes
  originSender_not_contains: xdai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: xdai_Bytes
  canonicalId_not: xdai_Bytes
  canonicalId_gt: xdai_Bytes
  canonicalId_lt: xdai_Bytes
  canonicalId_gte: xdai_Bytes
  canonicalId_lte: xdai_Bytes
  canonicalId_in: [xdai_Bytes!]
  canonicalId_not_in: [xdai_Bytes!]
  canonicalId_contains: xdai_Bytes
  canonicalId_not_contains: xdai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: xdai_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: xdai_Bytes
  executedCaller_not: xdai_Bytes
  executedCaller_gt: xdai_Bytes
  executedCaller_lt: xdai_Bytes
  executedCaller_gte: xdai_Bytes
  executedCaller_lte: xdai_Bytes
  executedCaller_in: [xdai_Bytes!]
  executedCaller_not_in: [xdai_Bytes!]
  executedCaller_contains: xdai_Bytes
  executedCaller_not_contains: xdai_Bytes
  executedTransactionHash: xdai_Bytes
  executedTransactionHash_not: xdai_Bytes
  executedTransactionHash_gt: xdai_Bytes
  executedTransactionHash_lt: xdai_Bytes
  executedTransactionHash_gte: xdai_Bytes
  executedTransactionHash_lte: xdai_Bytes
  executedTransactionHash_in: [xdai_Bytes!]
  executedTransactionHash_not_in: [xdai_Bytes!]
  executedTransactionHash_contains: xdai_Bytes
  executedTransactionHash_not_contains: xdai_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: xdai_Bytes
  executedTxOrigin_not: xdai_Bytes
  executedTxOrigin_gt: xdai_Bytes
  executedTxOrigin_lt: xdai_Bytes
  executedTxOrigin_gte: xdai_Bytes
  executedTxOrigin_lte: xdai_Bytes
  executedTxOrigin_in: [xdai_Bytes!]
  executedTxOrigin_not_in: [xdai_Bytes!]
  executedTxOrigin_contains: xdai_Bytes
  executedTxOrigin_not_contains: xdai_Bytes
  reconciledCaller: xdai_Bytes
  reconciledCaller_not: xdai_Bytes
  reconciledCaller_gt: xdai_Bytes
  reconciledCaller_lt: xdai_Bytes
  reconciledCaller_gte: xdai_Bytes
  reconciledCaller_lte: xdai_Bytes
  reconciledCaller_in: [xdai_Bytes!]
  reconciledCaller_not_in: [xdai_Bytes!]
  reconciledCaller_contains: xdai_Bytes
  reconciledCaller_not_contains: xdai_Bytes
  reconciledTransactionHash: xdai_Bytes
  reconciledTransactionHash_not: xdai_Bytes
  reconciledTransactionHash_gt: xdai_Bytes
  reconciledTransactionHash_lt: xdai_Bytes
  reconciledTransactionHash_gte: xdai_Bytes
  reconciledTransactionHash_lte: xdai_Bytes
  reconciledTransactionHash_in: [xdai_Bytes!]
  reconciledTransactionHash_not_in: [xdai_Bytes!]
  reconciledTransactionHash_contains: xdai_Bytes
  reconciledTransactionHash_not_contains: xdai_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: xdai_Bytes
  reconciledTxOrigin_not: xdai_Bytes
  reconciledTxOrigin_gt: xdai_Bytes
  reconciledTxOrigin_lt: xdai_Bytes
  reconciledTxOrigin_gte: xdai_Bytes
  reconciledTxOrigin_lte: xdai_Bytes
  reconciledTxOrigin_in: [xdai_Bytes!]
  reconciledTxOrigin_not_in: [xdai_Bytes!]
  reconciledTxOrigin_contains: xdai_Bytes
  reconciledTxOrigin_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
}

type xdai_OriginMessage {
  id: ID!
  transferId: xdai_Bytes
  destinationDomain: BigInt
  leaf: xdai_Bytes
  index: BigInt
  message: xdai_Bytes
  root: xdai_Bytes
  transactionHash: xdai_Bytes
  blockNumber: BigInt
  rootCount: xdai_RootCount
}

input xdai_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: xdai_Bytes
  transferId_not: xdai_Bytes
  transferId_gt: xdai_Bytes
  transferId_lt: xdai_Bytes
  transferId_gte: xdai_Bytes
  transferId_lte: xdai_Bytes
  transferId_in: [xdai_Bytes!]
  transferId_not_in: [xdai_Bytes!]
  transferId_contains: xdai_Bytes
  transferId_not_contains: xdai_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: xdai_Bytes
  leaf_not: xdai_Bytes
  leaf_gt: xdai_Bytes
  leaf_lt: xdai_Bytes
  leaf_gte: xdai_Bytes
  leaf_lte: xdai_Bytes
  leaf_in: [xdai_Bytes!]
  leaf_not_in: [xdai_Bytes!]
  leaf_contains: xdai_Bytes
  leaf_not_contains: xdai_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: xdai_Bytes
  message_not: xdai_Bytes
  message_gt: xdai_Bytes
  message_lt: xdai_Bytes
  message_gte: xdai_Bytes
  message_lte: xdai_Bytes
  message_in: [xdai_Bytes!]
  message_not_in: [xdai_Bytes!]
  message_contains: xdai_Bytes
  message_not_contains: xdai_Bytes
  root: xdai_Bytes
  root_not: xdai_Bytes
  root_gt: xdai_Bytes
  root_lt: xdai_Bytes
  root_gte: xdai_Bytes
  root_lte: xdai_Bytes
  root_in: [xdai_Bytes!]
  root_not_in: [xdai_Bytes!]
  root_contains: xdai_Bytes
  root_not_contains: xdai_Bytes
  transactionHash: xdai_Bytes
  transactionHash_not: xdai_Bytes
  transactionHash_gt: xdai_Bytes
  transactionHash_lt: xdai_Bytes
  transactionHash_gte: xdai_Bytes
  transactionHash_lte: xdai_Bytes
  transactionHash_in: [xdai_Bytes!]
  transactionHash_not_in: [xdai_Bytes!]
  transactionHash_contains: xdai_Bytes
  transactionHash_not_contains: xdai_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: xdai_RootCount_filter
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type xdai_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: xdai_Bytes
  nonce: BigInt
  status: xdai_TransferStatus
  messageHash: xdai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: xdai_Bytes
  delegate: xdai_Bytes
  receiveLocal: Boolean
  callData: xdai_Bytes
  slippage: BigInt
  originSender: xdai_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: xdai_Bytes
  asset: xdai_Asset
  transacting: xdai_Bytes
  message: xdai_OriginMessage
  relayerFee: BigInt
  caller: xdai_Bytes
  transactionHash: xdai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: xdai_Bytes
}

input xdai_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: xdai_Bytes
  transferId_not: xdai_Bytes
  transferId_gt: xdai_Bytes
  transferId_lt: xdai_Bytes
  transferId_gte: xdai_Bytes
  transferId_lte: xdai_Bytes
  transferId_in: [xdai_Bytes!]
  transferId_not_in: [xdai_Bytes!]
  transferId_contains: xdai_Bytes
  transferId_not_contains: xdai_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: xdai_TransferStatus
  status_not: xdai_TransferStatus
  status_in: [xdai_TransferStatus!]
  status_not_in: [xdai_TransferStatus!]
  messageHash: xdai_Bytes
  messageHash_not: xdai_Bytes
  messageHash_gt: xdai_Bytes
  messageHash_lt: xdai_Bytes
  messageHash_gte: xdai_Bytes
  messageHash_lte: xdai_Bytes
  messageHash_in: [xdai_Bytes!]
  messageHash_not_in: [xdai_Bytes!]
  messageHash_contains: xdai_Bytes
  messageHash_not_contains: xdai_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: xdai_Bytes
  to_not: xdai_Bytes
  to_gt: xdai_Bytes
  to_lt: xdai_Bytes
  to_gte: xdai_Bytes
  to_lte: xdai_Bytes
  to_in: [xdai_Bytes!]
  to_not_in: [xdai_Bytes!]
  to_contains: xdai_Bytes
  to_not_contains: xdai_Bytes
  delegate: xdai_Bytes
  delegate_not: xdai_Bytes
  delegate_gt: xdai_Bytes
  delegate_lt: xdai_Bytes
  delegate_gte: xdai_Bytes
  delegate_lte: xdai_Bytes
  delegate_in: [xdai_Bytes!]
  delegate_not_in: [xdai_Bytes!]
  delegate_contains: xdai_Bytes
  delegate_not_contains: xdai_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: xdai_Bytes
  callData_not: xdai_Bytes
  callData_gt: xdai_Bytes
  callData_lt: xdai_Bytes
  callData_gte: xdai_Bytes
  callData_lte: xdai_Bytes
  callData_in: [xdai_Bytes!]
  callData_not_in: [xdai_Bytes!]
  callData_contains: xdai_Bytes
  callData_not_contains: xdai_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: xdai_Bytes
  originSender_not: xdai_Bytes
  originSender_gt: xdai_Bytes
  originSender_lt: xdai_Bytes
  originSender_gte: xdai_Bytes
  originSender_lte: xdai_Bytes
  originSender_in: [xdai_Bytes!]
  originSender_not_in: [xdai_Bytes!]
  originSender_contains: xdai_Bytes
  originSender_not_contains: xdai_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: xdai_Bytes
  canonicalId_not: xdai_Bytes
  canonicalId_gt: xdai_Bytes
  canonicalId_lt: xdai_Bytes
  canonicalId_gte: xdai_Bytes
  canonicalId_lte: xdai_Bytes
  canonicalId_in: [xdai_Bytes!]
  canonicalId_not_in: [xdai_Bytes!]
  canonicalId_contains: xdai_Bytes
  canonicalId_not_contains: xdai_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: xdai_Asset_filter
  transacting: xdai_Bytes
  transacting_not: xdai_Bytes
  transacting_gt: xdai_Bytes
  transacting_lt: xdai_Bytes
  transacting_gte: xdai_Bytes
  transacting_lte: xdai_Bytes
  transacting_in: [xdai_Bytes!]
  transacting_not_in: [xdai_Bytes!]
  transacting_contains: xdai_Bytes
  transacting_not_contains: xdai_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: xdai_OriginMessage_filter
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  caller: xdai_Bytes
  caller_not: xdai_Bytes
  caller_gt: xdai_Bytes
  caller_lt: xdai_Bytes
  caller_gte: xdai_Bytes
  caller_lte: xdai_Bytes
  caller_in: [xdai_Bytes!]
  caller_not_in: [xdai_Bytes!]
  caller_contains: xdai_Bytes
  caller_not_contains: xdai_Bytes
  transactionHash: xdai_Bytes
  transactionHash_not: xdai_Bytes
  transactionHash_gt: xdai_Bytes
  transactionHash_lt: xdai_Bytes
  transactionHash_gte: xdai_Bytes
  transactionHash_lte: xdai_Bytes
  transactionHash_in: [xdai_Bytes!]
  transactionHash_not_in: [xdai_Bytes!]
  transactionHash_contains: xdai_Bytes
  transactionHash_not_contains: xdai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: xdai_Bytes
  txOrigin_not: xdai_Bytes
  txOrigin_gt: xdai_Bytes
  txOrigin_lt: xdai_Bytes
  txOrigin_gte: xdai_Bytes
  txOrigin_lte: xdai_Bytes
  txOrigin_in: [xdai_Bytes!]
  txOrigin_not_in: [xdai_Bytes!]
  txOrigin_contains: xdai_Bytes
  txOrigin_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transacting
  message
  relayerFee
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
}

type xdai_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: xdai_Bytes
}

input xdai_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: xdai_Bytes
  relayer_not: xdai_Bytes
  relayer_gt: xdai_Bytes
  relayer_lt: xdai_Bytes
  relayer_gte: xdai_Bytes
  relayer_lte: xdai_Bytes
  relayer_in: [xdai_Bytes!]
  relayer_not_in: [xdai_Bytes!]
  relayer_contains: xdai_Bytes
  relayer_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_Relayer_orderBy {
  id
  isActive
  relayer
}

type xdai_RootCount {
  id: ID!
  count: BigInt
}

input xdai_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_RootCount_orderBy {
  id
  count
}

type xdai_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: xdai_Bytes
  count: BigInt
  caller: xdai_Bytes
  transactionHash: xdai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input xdai_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: xdai_Bytes
  root_not: xdai_Bytes
  root_gt: xdai_Bytes
  root_lt: xdai_Bytes
  root_gte: xdai_Bytes
  root_lte: xdai_Bytes
  root_in: [xdai_Bytes!]
  root_not_in: [xdai_Bytes!]
  root_contains: xdai_Bytes
  root_not_contains: xdai_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: xdai_Bytes
  caller_not: xdai_Bytes
  caller_gt: xdai_Bytes
  caller_lt: xdai_Bytes
  caller_gte: xdai_Bytes
  caller_lte: xdai_Bytes
  caller_in: [xdai_Bytes!]
  caller_not_in: [xdai_Bytes!]
  caller_contains: xdai_Bytes
  caller_not_contains: xdai_Bytes
  transactionHash: xdai_Bytes
  transactionHash_not: xdai_Bytes
  transactionHash_gt: xdai_Bytes
  transactionHash_lt: xdai_Bytes
  transactionHash_gte: xdai_Bytes
  transactionHash_lte: xdai_Bytes
  transactionHash_in: [xdai_Bytes!]
  transactionHash_not_in: [xdai_Bytes!]
  transactionHash_contains: xdai_Bytes
  transactionHash_not_contains: xdai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type xdai_Router {
  id: ID!
  isActive: Boolean!
  owner: xdai_Bytes
  recipient: xdai_Bytes
  proposedOwner: xdai_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: xdai_AssetBalance_orderBy, orderDirection: xdai_OrderDirection, where: xdai_AssetBalance_filter): [xdai_AssetBalance!]!
}

input xdai_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: xdai_Bytes
  owner_not: xdai_Bytes
  owner_gt: xdai_Bytes
  owner_lt: xdai_Bytes
  owner_gte: xdai_Bytes
  owner_lte: xdai_Bytes
  owner_in: [xdai_Bytes!]
  owner_not_in: [xdai_Bytes!]
  owner_contains: xdai_Bytes
  owner_not_contains: xdai_Bytes
  recipient: xdai_Bytes
  recipient_not: xdai_Bytes
  recipient_gt: xdai_Bytes
  recipient_lt: xdai_Bytes
  recipient_gte: xdai_Bytes
  recipient_lte: xdai_Bytes
  recipient_in: [xdai_Bytes!]
  recipient_not_in: [xdai_Bytes!]
  recipient_contains: xdai_Bytes
  recipient_not_contains: xdai_Bytes
  proposedOwner: xdai_Bytes
  proposedOwner_not: xdai_Bytes
  proposedOwner_gt: xdai_Bytes
  proposedOwner_lt: xdai_Bytes
  proposedOwner_gte: xdai_Bytes
  proposedOwner_lte: xdai_Bytes
  proposedOwner_in: [xdai_Bytes!]
  proposedOwner_not_in: [xdai_Bytes!]
  proposedOwner_contains: xdai_Bytes
  proposedOwner_not_contains: xdai_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: xdai_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type xdai_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: xdai_Bytes
}

input xdai_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: xdai_Bytes
  sequencer_not: xdai_Bytes
  sequencer_gt: xdai_Bytes
  sequencer_lt: xdai_Bytes
  sequencer_gte: xdai_Bytes
  sequencer_lte: xdai_Bytes
  sequencer_in: [xdai_Bytes!]
  sequencer_not_in: [xdai_Bytes!]
  sequencer_contains: xdai_Bytes
  sequencer_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type xdai_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: xdai_Bytes!
}

input xdai_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: xdai_Bytes
  caller_not: xdai_Bytes
  caller_gt: xdai_Bytes
  caller_lt: xdai_Bytes
  caller_gte: xdai_Bytes
  caller_lte: xdai_Bytes
  caller_in: [xdai_Bytes!]
  caller_not_in: [xdai_Bytes!]
  caller_contains: xdai_Bytes
  caller_not_contains: xdai_Bytes
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type xdai_StableSwapLiquidity {
  id: ID!
  provider: xdai_Bytes!
  stableSwap: xdai_StableSwap!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt
}

input xdai_StableSwapLiquidity_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  provider: xdai_Bytes
  provider_not: xdai_Bytes
  provider_gt: xdai_Bytes
  provider_lt: xdai_Bytes
  provider_gte: xdai_Bytes
  provider_lte: xdai_Bytes
  provider_in: [xdai_Bytes!]
  provider_not_in: [xdai_Bytes!]
  provider_contains: xdai_Bytes
  provider_not_contains: xdai_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: xdai_StableSwap_filter
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_StableSwapLiquidity_orderBy {
  id
  provider
  stableSwap
  tokenAmounts
  fees
  invariant
  lpTokenSupply
}

type xdai_TransferRelayerFee {
  id: ID!
  transferId: xdai_Bytes!
  fee: BigInt
}

input xdai_TransferRelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: xdai_Bytes
  transferId_not: xdai_Bytes
  transferId_gt: xdai_Bytes
  transferId_lt: xdai_Bytes
  transferId_gte: xdai_Bytes
  transferId_lte: xdai_Bytes
  transferId_in: [xdai_Bytes!]
  transferId_not_in: [xdai_Bytes!]
  transferId_contains: xdai_Bytes
  transferId_not_contains: xdai_Bytes
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xdai_BlockChangedFilter
}

enum xdai_TransferRelayerFee_orderBy {
  id
  transferId
  fee
}

enum xdai_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}