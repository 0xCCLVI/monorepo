schema {
  query: Query
  subscription: Subscription
}

type Query {
  rinkeby_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Asset
  rinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Asset_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Asset!]!
  rinkeby_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_AssetBalance
  rinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_AssetBalance_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_AssetBalance!]!
  rinkeby_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Router
  rinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Router_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Router!]!
  rinkeby_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Setting
  rinkeby_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Setting_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Setting!]!
  rinkeby_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Relayer
  rinkeby_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Relayer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Relayer!]!
  rinkeby_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_StableSwap
  rinkeby_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_StableSwap_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_StableSwap!]!
  rinkeby_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_SponsorVault
  rinkeby_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_SponsorVault_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_SponsorVault!]!
  rinkeby_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_OriginTransfer
  rinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_OriginTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_OriginTransfer!]!
  rinkeby_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_DestinationTransfer
  rinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_DestinationTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_DestinationTransfer!]!
  """Access to subgraph metadata"""
  rinkeby__meta(block: rinkeby_Block_height): rinkeby__Meta_
<<<<<<< HEAD
  testoptimismgoerli_asset(
=======
  testgoerli_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
=======
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
=======
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
=======
  ): [testgoerli_Router!]!
  testgoerli_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
=======
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
=======
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
=======
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
=======
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
=======
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
  local1338_asset(
=======
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
  staginggoerli_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Asset
  local1338_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Asset_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Asset!]!
  local1338_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_AssetBalance
  local1338_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AssetBalance_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_AssetBalance!]!
  local1338_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Router
  local1338_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Router_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Router!]!
  local1338_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Setting
  local1338_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Setting_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Setting!]!
  local1338_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Relayer
  local1338_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Relayer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Relayer!]!
  local1338_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwap
  local1338_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwap_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwap!]!
  local1338_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SponsorVault
  local1338_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SponsorVault_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SponsorVault!]!
  local1338_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_OriginTransfer
  local1338_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_OriginTransfer!]!
  local1338_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_DestinationTransfer
  local1338_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_DestinationTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1338__meta(block: local1338_Block_height): local1338__Meta_
  goerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_Router!]!
  goerli_setting(
=======
  ): [staginggoerli_AggregateRoot!]!
  staginggoerli_connectorMeta(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
=======
  ): staginggoerli_ConnectorMeta
  staginggoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_ConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_ConnectorMeta_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_Setting!]!
  goerli_relayer(
=======
  ): [staginggoerli_ConnectorMeta!]!
  staginggoerli_rootMessageSent(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): staginggoerli_RootMessageSent
  staginggoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageSent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_Relayer!]!
  goerli_stableSwap(
=======
  ): [staginggoerli_RootMessageSent!]!
  staginggoerli_rootMessageProcessed(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): staginggoerli_RootMessageProcessed
  staginggoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageProcessed_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_StableSwap!]!
  goerli_sponsorVault(
=======
  ): [staginggoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  local1337_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_SponsorVault
  goerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SponsorVault_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_SponsorVault!]!
  goerli_originTransfer(
=======
  ): [local1337_Asset!]!
  local1337_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
=======
  ): [local1337_AssetBalance!]!
  local1337_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_DestinationTransfer!]!
  goerli_originMessage(
=======
  ): [local1337_Router!]!
  local1337_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_OriginMessage
  goerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_OriginMessage!]!
  goerli_destinationMessage(
=======
  ): [local1337_Setting!]!
  local1337_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_DestinationMessage
  goerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_DestinationMessage!]!
  goerli_aggregateRoot(
=======
  ): [local1337_Relayer!]!
  local1337_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_AggregateRoot
  goerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_AggregateRoot!]!
  goerli_rootMessage(
=======
  ): [local1337_StableSwap!]!
  local1337_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_RootMessage
  goerli_rootMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): local1337_SponsorVault
  local1337_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SponsorVault_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_RootMessage!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
  optimismgoerli_asset(
=======
  ): [local1337_SponsorVault!]!
  local1337_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_Asset
  optimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Asset_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_Asset!]!
  optimismgoerli_assetBalance(
=======
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_AssetBalance
  optimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AssetBalance_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_AssetBalance!]!
  optimismgoerli_router(
=======
  ): [local1337_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
  testoptimismgoerli_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_Router
  optimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Router_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_Router!]!
  optimismgoerli_setting(
=======
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_Setting
  optimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Setting_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_Setting!]!
  optimismgoerli_relayer(
=======
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_Relayer
  optimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Relayer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_Relayer!]!
  optimismgoerli_stableSwap(
=======
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_StableSwap
  optimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwap_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_StableSwap!]!
  optimismgoerli_sponsorVault(
=======
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_SponsorVault
  optimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SponsorVault_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_SponsorVault!]!
  optimismgoerli_originTransfer(
=======
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_OriginTransfer
  optimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_OriginTransfer!]!
  optimismgoerli_destinationTransfer(
=======
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_DestinationTransfer
  optimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_DestinationTransfer!]!
  optimismgoerli_originMessage(
=======
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_OriginMessage
  optimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_OriginMessage!]!
  optimismgoerli_destinationMessage(
=======
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_DestinationMessage
  optimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_DestinationMessage!]!
  optimismgoerli_aggregateRoot(
=======
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
  local1338_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_AggregateRoot
  optimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AggregateRoot_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): local1338_Asset
  local1338_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Asset_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_AggregateRoot!]!
  optimismgoerli_rootMessage(
=======
  ): [local1338_Asset!]!
  local1338_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_RootMessage
  optimismgoerli_rootMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): local1338_AssetBalance
  local1338_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AssetBalance_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_RootMessage!]!
  """Access to subgraph metadata"""
  optimismgoerli__meta(block: optimismgoerli_Block_height): optimismgoerli__Meta_
  testgoerli_asset(
=======
  ): [local1338_AssetBalance!]!
  local1338_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1338_Router
  local1338_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Router_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
=======
  ): [local1338_Router!]!
  local1338_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1338_Setting
  local1338_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Setting_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
=======
  ): [local1338_Setting!]!
  local1338_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1338_Relayer
  local1338_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Relayer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_Router!]!
  testgoerli_setting(
=======
  ): [local1338_Relayer!]!
  local1338_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1338_StableSwap
  local1338_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwap_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
=======
  ): [local1338_StableSwap!]!
  local1338_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1338_SponsorVault
  local1338_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SponsorVault_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
=======
  ): [local1338_SponsorVault!]!
  local1338_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1338_OriginTransfer
  local1338_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
=======
  ): [local1338_OriginTransfer!]!
  local1338_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1338_DestinationTransfer
  local1338_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_DestinationTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
=======
  ): [local1338_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1338__meta(block: local1338_Block_height): local1338__Meta_
  optimismgoerli_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): optimismgoerli_Asset
  optimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Asset_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
=======
  ): [optimismgoerli_Asset!]!
  optimismgoerli_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): optimismgoerli_AssetBalance
  optimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AssetBalance_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
  stagingoptimismgoerli_asset(
=======
  ): [optimismgoerli_AssetBalance!]!
  optimismgoerli_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_Router
  optimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Router_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetBalance(
=======
  ): [optimismgoerli_Router!]!
  optimismgoerli_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_Setting
  optimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Setting_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
=======
  ): [optimismgoerli_Setting!]!
  optimismgoerli_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_Relayer
  optimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Relayer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
=======
  ): [optimismgoerli_Relayer!]!
  optimismgoerli_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_StableSwap
  optimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwap_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
=======
  ): [optimismgoerli_StableSwap!]!
  optimismgoerli_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_SponsorVault
  optimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SponsorVault_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_stableSwap(
=======
  ): [optimismgoerli_SponsorVault!]!
  optimismgoerli_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_OriginTransfer
  optimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_sponsorVault(
=======
  ): [optimismgoerli_OriginTransfer!]!
  optimismgoerli_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_SponsorVault
  stagingoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SponsorVault_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_DestinationTransfer
  optimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_SponsorVault!]!
  stagingoptimismgoerli_originTransfer(
=======
  ): [optimismgoerli_DestinationTransfer!]!
  optimismgoerli_originMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_OriginMessage
  optimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
=======
  ): [optimismgoerli_OriginMessage!]!
  optimismgoerli_destinationMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): optimismgoerli_DestinationMessage
  optimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  stagingoptimismgoerli_originMessage(
=======
  ): [optimismgoerli_DestinationMessage!]!
  optimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AggregateRoot
  optimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AggregateRoot_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AggregateRoot!]!
  optimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_ConnectorMeta
  optimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_ConnectorMeta_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_ConnectorMeta!]!
  optimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageSent
  optimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageSent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageSent!]!
  optimismgoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageProcessed
  optimismgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageProcessed_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  optimismgoerli__meta(block: optimismgoerli_Block_height): optimismgoerli__Meta_
  goerli_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginMessage
  stagingoptimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginMessage!]!
  stagingoptimismgoerli_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationMessage
  stagingoptimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationMessage!]!
  stagingoptimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AggregateRoot
  stagingoptimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AggregateRoot_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AggregateRoot!]!
  stagingoptimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_ConnectorMeta
  stagingoptimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_ConnectorMeta!]!
  stagingoptimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootMessageSent
  stagingoptimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageSent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootMessageSent!]!
  stagingoptimismgoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootMessageProcessed
  stagingoptimismgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageProcessed_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
  staginggoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Router!]!
  staginggoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Setting
  staginggoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Setting_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Setting!]!
  staginggoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Relayer
  staginggoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Relayer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Relayer!]!
  staginggoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_StableSwap
  staginggoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwap_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_StableSwap!]!
  staginggoerli_sponsorVault(
=======
  ): [goerli_AggregateRoot!]!
  goerli_connectorMeta(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_SponsorVault
  staginggoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SponsorVault_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SponsorVault_filter
=======
  ): goerli_ConnectorMeta
  goerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ConnectorMeta_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_SponsorVault!]!
  staginggoerli_originTransfer(
=======
  ): [goerli_ConnectorMeta!]!
  goerli_rootMessageSent(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): goerli_RootMessageSent
  goerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageSent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
=======
  ): [goerli_RootMessageSent!]!
  goerli_rootMessageProcessed(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): goerli_RootMessageProcessed
  goerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageProcessed_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
  mumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Asset
  mumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Asset_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Asset!]!
  mumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AssetBalance
  mumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AssetBalance_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AssetBalance!]!
  mumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Router
  mumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Router_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Router!]!
  mumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Setting
  mumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Setting_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Setting!]!
  mumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Relayer
  mumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Relayer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_DestinationTransfer!]!
  staginggoerli_originMessage(
=======
  ): [mumbai_Relayer!]!
  mumbai_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_OriginMessage
  staginggoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginMessage_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): mumbai_StableSwap
  mumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwap_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_OriginMessage!]!
  staginggoerli_destinationMessage(
=======
  ): [mumbai_StableSwap!]!
  mumbai_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_DestinationMessage
  staginggoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationMessage_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): mumbai_SponsorVault
  mumbai_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SponsorVault_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_DestinationMessage!]!
  staginggoerli_aggregateRoot(
=======
  ): [mumbai_SponsorVault!]!
  mumbai_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_AggregateRoot
  staginggoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AggregateRoot_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): mumbai_OriginTransfer
  mumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_AggregateRoot!]!
  staginggoerli_connectorMeta(
=======
  ): [mumbai_OriginTransfer!]!
  mumbai_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_ConnectorMeta
  staginggoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_ConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): mumbai_DestinationTransfer
  mumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_ConnectorMeta!]!
  staginggoerli_rootMessageSent(
=======
  ): [mumbai_DestinationTransfer!]!
  mumbai_originMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_RootMessageSent
  staginggoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageSent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): mumbai_OriginMessage
  mumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_RootMessageSent!]!
  staginggoerli_rootMessageProcessed(
=======
  ): [mumbai_OriginMessage!]!
  mumbai_destinationMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_RootMessageProcessed
  staginggoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageProcessed_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): mumbai_DestinationMessage
  mumbai_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  local1337_asset(
=======
  ): [mumbai_DestinationMessage!]!
  mumbai_aggregateRoot(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AggregateRoot
  mumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AggregateRoot_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AggregateRoot!]!
  mumbai_rootMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_RootMessage
  mumbai_rootMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_RootMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_RootMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_RootMessage!]!
  """Access to subgraph metadata"""
  mumbai__meta(block: mumbai_Block_height): mumbai__Meta_
  stagingoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SponsorVault
  stagingoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SponsorVault_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
}

type Subscription {
  rinkeby_asset(
=======
  ): [stagingoptimismgoerli_SponsorVault!]!
  stagingoptimismgoerli_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_Asset
  rinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Asset_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_Asset!]!
  rinkeby_assetBalance(
=======
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_AssetBalance
  rinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_AssetBalance_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_AssetBalance!]!
  rinkeby_router(
=======
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  stagingoptimismgoerli_originMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_Router
  rinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Router_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingoptimismgoerli_OriginMessage
  stagingoptimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_Router!]!
  rinkeby_setting(
=======
  ): [stagingoptimismgoerli_OriginMessage!]!
  stagingoptimismgoerli_destinationMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_Setting
  rinkeby_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Setting_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingoptimismgoerli_DestinationMessage
  stagingoptimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_Setting!]!
  rinkeby_relayer(
=======
  ): [stagingoptimismgoerli_DestinationMessage!]!
  stagingoptimismgoerli_aggregateRoot(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_Relayer
  rinkeby_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Relayer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingoptimismgoerli_AggregateRoot
  stagingoptimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AggregateRoot_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_Relayer!]!
  rinkeby_stableSwap(
=======
  ): [stagingoptimismgoerli_AggregateRoot!]!
  stagingoptimismgoerli_connectorMeta(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_StableSwap
  rinkeby_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_StableSwap_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingoptimismgoerli_ConnectorMeta
  stagingoptimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_StableSwap!]!
  rinkeby_sponsorVault(
=======
  ): [stagingoptimismgoerli_ConnectorMeta!]!
  stagingoptimismgoerli_rootMessageSent(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_SponsorVault
  rinkeby_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_SponsorVault_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingoptimismgoerli_RootMessageSent
  stagingoptimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageSent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_SponsorVault!]!
  rinkeby_originTransfer(
=======
  ): [stagingoptimismgoerli_RootMessageSent!]!
  stagingoptimismgoerli_rootMessageProcessed(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_OriginTransfer
  rinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_OriginTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingoptimismgoerli_RootMessageProcessed
  stagingoptimismgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageProcessed_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_OriginTransfer!]!
  rinkeby_destinationTransfer(
=======
  ): [stagingoptimismgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
  stagingmumbai_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: rinkeby_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): rinkeby_DestinationTransfer
  rinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_DestinationTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
=======
  ): stagingmumbai_Asset
  stagingmumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Asset_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [rinkeby_DestinationTransfer!]!
  """Access to subgraph metadata"""
  rinkeby__meta(block: rinkeby_Block_height): rinkeby__Meta_
  testoptimismgoerli_asset(
=======
  ): [stagingmumbai_Asset!]!
  stagingmumbai_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_AssetBalance
  stagingmumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AssetBalance_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
=======
  ): [stagingmumbai_AssetBalance!]!
  stagingmumbai_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_Router
  stagingmumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Router_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
=======
  ): [stagingmumbai_Router!]!
  stagingmumbai_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_Setting
  stagingmumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Setting_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
=======
  ): [stagingmumbai_Setting!]!
  stagingmumbai_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_Relayer
  stagingmumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Relayer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
=======
  ): [stagingmumbai_Relayer!]!
  stagingmumbai_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_StableSwap
  stagingmumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwap_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
=======
  ): [stagingmumbai_StableSwap!]!
  stagingmumbai_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_SponsorVault
  stagingmumbai_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SponsorVault_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
=======
  ): [stagingmumbai_SponsorVault!]!
  stagingmumbai_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_OriginTransfer
  stagingmumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
=======
  ): [stagingmumbai_OriginTransfer!]!
  stagingmumbai_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_DestinationTransfer
  stagingmumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
=======
  ): [stagingmumbai_DestinationTransfer!]!
  stagingmumbai_originMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testoptimismgoerli_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
=======
  ): stagingmumbai_OriginMessage
  stagingmumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
  local1338_asset(
=======
  ): [stagingmumbai_OriginMessage!]!
  stagingmumbai_destinationMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_Asset
  local1338_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Asset_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): stagingmumbai_DestinationMessage
  stagingmumbai_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_Asset!]!
  local1338_assetBalance(
=======
  ): [stagingmumbai_DestinationMessage!]!
  stagingmumbai_aggregateRoot(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_AssetBalance
  local1338_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AssetBalance_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): stagingmumbai_AggregateRoot
  stagingmumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AggregateRoot_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_AssetBalance!]!
  local1338_router(
=======
  ): [stagingmumbai_AggregateRoot!]!
  stagingmumbai_connectorMeta(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_Router
  local1338_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Router_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): stagingmumbai_ConnectorMeta
  stagingmumbai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_ConnectorMeta_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_Router!]!
  local1338_setting(
=======
  ): [stagingmumbai_ConnectorMeta!]!
  stagingmumbai_rootMessageSent(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_Setting
  local1338_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Setting_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): stagingmumbai_RootMessageSent
  stagingmumbai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootMessageSent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_Setting!]!
  local1338_relayer(
=======
  ): [stagingmumbai_RootMessageSent!]!
  stagingmumbai_rootMessageProcessed(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_Relayer
  local1338_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Relayer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): stagingmumbai_RootMessageProcessed
  stagingmumbai_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootMessageProcessed_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_Relayer!]!
  local1338_stableSwap(
=======
  ): [stagingmumbai_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  stagingmumbai__meta(block: stagingmumbai_Block_height): stagingmumbai__Meta_
}

type Subscription {
  rinkeby_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_StableSwap
  local1338_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwap_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): rinkeby_Asset
  rinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Asset_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_StableSwap!]!
  local1338_sponsorVault(
=======
  ): [rinkeby_Asset!]!
  rinkeby_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_SponsorVault
  local1338_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SponsorVault_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): rinkeby_AssetBalance
  rinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_AssetBalance_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_SponsorVault!]!
  local1338_originTransfer(
=======
  ): [rinkeby_AssetBalance!]!
  rinkeby_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_OriginTransfer
  local1338_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): rinkeby_Router
  rinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Router_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_OriginTransfer!]!
  local1338_destinationTransfer(
=======
  ): [rinkeby_Router!]!
  rinkeby_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1338_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1338_DestinationTransfer
  local1338_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_DestinationTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
=======
  ): rinkeby_Setting
  rinkeby_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Setting_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1338_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1338__meta(block: local1338_Block_height): local1338__Meta_
  goerli_asset(
=======
  ): [rinkeby_Setting!]!
  rinkeby_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): rinkeby_Relayer
  rinkeby_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Relayer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_Asset!]!
  goerli_assetBalance(
=======
  ): [rinkeby_Relayer!]!
  rinkeby_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): rinkeby_StableSwap
  rinkeby_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_StableSwap_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_AssetBalance!]!
  goerli_router(
=======
  ): [rinkeby_StableSwap!]!
  rinkeby_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Setting!]!
  goerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Relayer!]!
  goerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): rinkeby_SponsorVault
  rinkeby_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_SponsorVault_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_StableSwap!]!
  goerli_sponsorVault(
=======
  ): [rinkeby_SponsorVault!]!
  rinkeby_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_SponsorVault
  goerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SponsorVault_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): rinkeby_OriginTransfer
  rinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_OriginTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_SponsorVault!]!
  goerli_originTransfer(
=======
  ): [rinkeby_OriginTransfer!]!
  rinkeby_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: goerli_Block_height
=======
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
=======
  ): rinkeby_DestinationTransfer
  rinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_DestinationTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
=======
  ): [rinkeby_DestinationTransfer!]!
  """Access to subgraph metadata"""
  rinkeby__meta(block: rinkeby_Block_height): rinkeby__Meta_
  testgoerli_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!
  goerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginMessage
  goerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginMessage!]!
  goerli_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationMessage
  goerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationMessage!]!
  goerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregateRoot
  goerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregateRoot!]!
  goerli_rootMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessage
  goerli_rootMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessage!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
  optimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Asset
  optimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Asset_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Asset!]!
  optimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_AssetBalance
  optimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AssetBalance_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_AssetBalance!]!
  optimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Router
  optimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Router_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_Router!]!
  optimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Setting
  optimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Setting_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_Setting!]!
  optimismgoerli_relayer(
=======
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
  staginggoerli_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_Relayer
  optimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Relayer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_Relayer!]!
  optimismgoerli_stableSwap(
=======
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_StableSwap
  optimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwap_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_StableSwap!]!
  optimismgoerli_sponsorVault(
=======
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_SponsorVault
  optimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SponsorVault_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_SponsorVault!]!
  optimismgoerli_originTransfer(
=======
  ): [staginggoerli_Router!]!
  staginggoerli_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_OriginTransfer
  optimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_Setting
  staginggoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Setting_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_OriginTransfer!]!
  optimismgoerli_destinationTransfer(
=======
  ): [staginggoerli_Setting!]!
  staginggoerli_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_DestinationTransfer
  optimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_Relayer
  staginggoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Relayer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_DestinationTransfer!]!
  optimismgoerli_originMessage(
=======
  ): [staginggoerli_Relayer!]!
  staginggoerli_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_OriginMessage
  optimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_StableSwap
  staginggoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwap_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_OriginMessage!]!
  optimismgoerli_destinationMessage(
=======
  ): [staginggoerli_StableSwap!]!
  staginggoerli_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_DestinationMessage
  optimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_SponsorVault
  staginggoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SponsorVault_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_DestinationMessage!]!
  optimismgoerli_aggregateRoot(
=======
  ): [staginggoerli_SponsorVault!]!
  staginggoerli_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_AggregateRoot
  optimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AggregateRoot_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_AggregateRoot!]!
  optimismgoerli_rootMessage(
=======
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: optimismgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): optimismgoerli_RootMessage
  optimismgoerli_rootMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
=======
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [optimismgoerli_RootMessage!]!
  """Access to subgraph metadata"""
  optimismgoerli__meta(block: optimismgoerli_Block_height): optimismgoerli__Meta_
  testgoerli_asset(
=======
  ): [staginggoerli_DestinationTransfer!]!
  staginggoerli_originMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): staginggoerli_OriginMessage
  staginggoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginMessage_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
=======
  ): [staginggoerli_OriginMessage!]!
  staginggoerli_destinationMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): staginggoerli_DestinationMessage
  staginggoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationMessage_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
=======
  ): [staginggoerli_DestinationMessage!]!
  staginggoerli_aggregateRoot(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): staginggoerli_AggregateRoot
  staginggoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AggregateRoot_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_Router!]!
  testgoerli_setting(
=======
  ): [staginggoerli_AggregateRoot!]!
  staginggoerli_connectorMeta(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): staginggoerli_ConnectorMeta
  staginggoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_ConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
=======
  ): [staginggoerli_ConnectorMeta!]!
  staginggoerli_rootMessageSent(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): staginggoerli_RootMessageSent
  staginggoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageSent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
=======
  ): [staginggoerli_RootMessageSent!]!
  staginggoerli_rootMessageProcessed(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): staginggoerli_RootMessageProcessed
  staginggoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageProcessed_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
=======
  ): [staginggoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  local1337_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
=======
  ): [local1337_Asset!]!
  local1337_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
=======
  ): [local1337_AssetBalance!]!
  local1337_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: testgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
=======
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
  stagingoptimismgoerli_asset(
=======
  ): [local1337_Router!]!
  local1337_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetBalance(
=======
  ): [local1337_Setting!]!
  local1337_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
=======
  ): [local1337_Relayer!]!
  local1337_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
=======
  ): [local1337_StableSwap!]!
  local1337_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): local1337_SponsorVault
  local1337_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SponsorVault_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
=======
  ): [local1337_SponsorVault!]!
  local1337_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_stableSwap(
=======
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_sponsorVault(
=======
  ): [local1337_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
  testoptimismgoerli_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_SponsorVault
  stagingoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SponsorVault_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_SponsorVault!]!
  stagingoptimismgoerli_originTransfer(
=======
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
=======
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  stagingoptimismgoerli_originMessage(
=======
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_OriginMessage
  stagingoptimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_OriginMessage!]!
  stagingoptimismgoerli_destinationMessage(
=======
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_DestinationMessage
  stagingoptimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_DestinationMessage!]!
  stagingoptimismgoerli_aggregateRoot(
=======
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_AggregateRoot
  stagingoptimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AggregateRoot_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_AggregateRoot!]!
  stagingoptimismgoerli_connectorMeta(
=======
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_ConnectorMeta
  stagingoptimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_ConnectorMeta!]!
  stagingoptimismgoerli_rootMessageSent(
=======
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_RootMessageSent
  stagingoptimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageSent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_RootMessageSent!]!
  stagingoptimismgoerli_rootMessageProcessed(
=======
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: stagingoptimismgoerli_Block_height
=======
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): stagingoptimismgoerli_RootMessageProcessed
  stagingoptimismgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageProcessed_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
=======
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [stagingoptimismgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
  staginggoerli_asset(
=======
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
  local1338_asset(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): local1338_Asset
  local1338_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Asset_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
=======
  ): [local1338_Asset!]!
  local1338_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): local1338_AssetBalance
  local1338_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_AssetBalance_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
=======
  ): [local1338_AssetBalance!]!
  local1338_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): local1338_Router
  local1338_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Router_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_Router!]!
  staginggoerli_setting(
=======
  ): [local1338_Router!]!
  local1338_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: local1338_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_Setting
  staginggoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Setting_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Setting_filter
=======
  ): local1338_Setting
  local1338_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Setting_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Setting!]!
  local1338_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_Relayer
  local1338_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_Relayer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_Relayer!]!
  local1338_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_StableSwap
  local1338_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_StableSwap_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_StableSwap!]!
  local1338_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_SponsorVault
  local1338_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_SponsorVault_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_SponsorVault!]!
  local1338_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_OriginTransfer
  local1338_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_OriginTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_OriginTransfer!]!
  local1338_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): local1338_DestinationTransfer
  local1338_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1338_DestinationTransfer_orderBy
    orderDirection: local1338_OrderDirection
    where: local1338_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1338_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [local1338_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1338__meta(block: local1338_Block_height): local1338__Meta_
  optimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_Asset
  optimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Asset_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Asset_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_Setting!]!
  staginggoerli_relayer(
=======
  ): [optimismgoerli_Asset!]!
  optimismgoerli_assetBalance(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_Relayer
  staginggoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Relayer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Relayer_filter
=======
  ): optimismgoerli_AssetBalance
  optimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AssetBalance_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AssetBalance_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_Relayer!]!
  staginggoerli_stableSwap(
=======
  ): [optimismgoerli_AssetBalance!]!
  optimismgoerli_router(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_StableSwap
  staginggoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_StableSwap_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_StableSwap_filter
=======
  ): optimismgoerli_Router
  optimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Router_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Router_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_StableSwap!]!
  staginggoerli_sponsorVault(
=======
  ): [optimismgoerli_Router!]!
  optimismgoerli_setting(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_SponsorVault
  staginggoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_SponsorVault_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_SponsorVault_filter
=======
  ): optimismgoerli_Setting
  optimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Setting_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Setting_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_SponsorVault!]!
  staginggoerli_originTransfer(
=======
  ): [optimismgoerli_Setting!]!
  optimismgoerli_relayer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter
=======
  ): optimismgoerli_Relayer
  optimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_Relayer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_Relayer_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
=======
  ): [optimismgoerli_Relayer!]!
  optimismgoerli_stableSwap(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter
=======
  ): optimismgoerli_StableSwap
  optimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_StableSwap_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_StableSwap_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_DestinationTransfer!]!
  staginggoerli_originMessage(
=======
  ): [optimismgoerli_StableSwap!]!
  optimismgoerli_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_OriginMessage
  staginggoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginMessage_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginMessage_filter
=======
  ): optimismgoerli_SponsorVault
  optimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_SponsorVault_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_SponsorVault_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_OriginMessage!]!
  staginggoerli_destinationMessage(
=======
  ): [optimismgoerli_SponsorVault!]!
  optimismgoerli_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_DestinationMessage
  staginggoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationMessage_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationMessage_filter
=======
  ): optimismgoerli_OriginTransfer
  optimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginTransfer_filter
>>>>>>> 1807-xcall-interface
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_DestinationMessage!]!
  staginggoerli_aggregateRoot(
=======
  ): [optimismgoerli_OriginTransfer!]!
  optimismgoerli_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_AggregateRoot
  staginggoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AggregateRoot_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): optimismgoerli_DestinationTransfer
  optimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationTransfer_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_AggregateRoot!]!
  staginggoerli_connectorMeta(
=======
  ): [optimismgoerli_DestinationTransfer!]!
  optimismgoerli_originMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_ConnectorMeta
  staginggoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_ConnectorMeta_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): optimismgoerli_OriginMessage
  optimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_OriginMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_ConnectorMeta!]!
  staginggoerli_rootMessageSent(
=======
  ): [optimismgoerli_OriginMessage!]!
  optimismgoerli_destinationMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_RootMessageSent
  staginggoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageSent_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): optimismgoerli_DestinationMessage
  optimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_DestinationMessage_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_RootMessageSent!]!
  staginggoerli_rootMessageProcessed(
=======
  ): [optimismgoerli_DestinationMessage!]!
  optimismgoerli_aggregateRoot(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: staginggoerli_Block_height
=======
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): staginggoerli_RootMessageProcessed
  staginggoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_RootMessageProcessed_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height
=======
  ): optimismgoerli_AggregateRoot
  optimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_AggregateRoot_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [staginggoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  local1337_asset(
=======
  ): [optimismgoerli_AggregateRoot!]!
  optimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_ConnectorMeta
  optimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_ConnectorMeta_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_ConnectorMeta!]!
  optimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageSent
  optimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageSent_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageSent!]!
  optimismgoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): optimismgoerli_RootMessageProcessed
  optimismgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: optimismgoerli_RootMessageProcessed_orderBy
    orderDirection: optimismgoerli_OrderDirection
    where: optimismgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: optimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [optimismgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  optimismgoerli__meta(block: optimismgoerli_Block_height): optimismgoerli__Meta_
  goerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Setting
  goerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Setting_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Setting!]!
  goerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Relayer
  goerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Relayer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Relayer!]!
  goerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_StableSwap
  goerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_StableSwap_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_StableSwap!]!
  goerli_sponsorVault(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_Asset
  local1337_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Asset_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_SponsorVault
  goerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_SponsorVault_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_Asset!]!
  local1337_assetBalance(
=======
  ): [goerli_SponsorVault!]!
  goerli_originTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_AssetBalance
  local1337_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_AssetBalance_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_AssetBalance!]!
  local1337_router(
=======
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_Router
  local1337_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Router_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_Router!]!
  local1337_setting(
=======
  ): [goerli_DestinationTransfer!]!
  goerli_originMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_Setting
  local1337_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Setting_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_OriginMessage
  goerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_Setting!]!
  local1337_relayer(
=======
  ): [goerli_OriginMessage!]!
  goerli_destinationMessage(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_Relayer
  local1337_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_Relayer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_DestinationMessage
  goerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationMessage_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_Relayer!]!
  local1337_stableSwap(
=======
  ): [goerli_DestinationMessage!]!
  goerli_aggregateRoot(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_StableSwap
  local1337_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_StableSwap_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_AggregateRoot
  goerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_StableSwap!]!
  local1337_sponsorVault(
=======
  ): [goerli_AggregateRoot!]!
  goerli_connectorMeta(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_SponsorVault
  local1337_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_SponsorVault_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_ConnectorMeta
  goerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_SponsorVault!]!
  local1337_originTransfer(
=======
  ): [goerli_ConnectorMeta!]!
  goerli_rootMessageSent(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_OriginTransfer
  local1337_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_OriginTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_RootMessageSent
  goerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageSent_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_OriginTransfer!]!
  local1337_destinationTransfer(
=======
  ): [goerli_RootMessageSent!]!
  goerli_rootMessageProcessed(
>>>>>>> 1807-xcall-interface
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
<<<<<<< HEAD
    block: local1337_Block_height
=======
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): local1337_DestinationTransfer
  local1337_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: local1337_DestinationTransfer_orderBy
    orderDirection: local1337_OrderDirection
    where: local1337_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: local1337_Block_height
=======
  ): goerli_RootMessageProcessed
  goerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageProcessed_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
>>>>>>> 1807-xcall-interface
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
<<<<<<< HEAD
  ): [local1337_DestinationTransfer!]!
  """Access to subgraph metadata"""
  local1337__meta(block: local1337_Block_height): local1337__Meta_
}

type rinkeby_Asset {
  id: ID!
  local: rinkeby_Bytes!
  adoptedAsset: rinkeby_Bytes!
  canonicalId: rinkeby_Bytes!
=======
  ): [goerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
  mumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Asset
  mumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Asset_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Asset!]!
  mumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AssetBalance
  mumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AssetBalance_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AssetBalance!]!
  mumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Router
  mumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Router_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Router!]!
  mumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Setting
  mumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Setting_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Setting!]!
  mumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_Relayer
  mumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_Relayer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_Relayer!]!
  mumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_StableSwap
  mumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_StableSwap_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_StableSwap!]!
  mumbai_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_SponsorVault
  mumbai_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_SponsorVault_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_SponsorVault!]!
  mumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginTransfer
  mumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginTransfer!]!
  mumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_DestinationTransfer
  mumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationTransfer_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_DestinationTransfer!]!
  mumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_OriginMessage
  mumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_OriginMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_OriginMessage!]!
  mumbai_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_DestinationMessage
  mumbai_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_DestinationMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_DestinationMessage!]!
  mumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_AggregateRoot
  mumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_AggregateRoot_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_AggregateRoot!]!
  mumbai_rootMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mumbai_RootMessage
  mumbai_rootMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mumbai_RootMessage_orderBy
    orderDirection: mumbai_OrderDirection
    where: mumbai_RootMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mumbai_RootMessage!]!
  """Access to subgraph metadata"""
  mumbai__meta(block: mumbai_Block_height): mumbai__Meta_
  stagingoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Asset
  stagingoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Asset_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Asset!]!
  stagingoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AssetBalance
  stagingoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AssetBalance_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AssetBalance!]!
  stagingoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Router
  stagingoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Router_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Router!]!
  stagingoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Setting
  stagingoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Setting_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Setting!]!
  stagingoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_Relayer
  stagingoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_Relayer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_Relayer!]!
  stagingoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_StableSwap
  stagingoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_StableSwap!]!
  stagingoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_SponsorVault
  stagingoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_SponsorVault_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_SponsorVault!]!
  stagingoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginTransfer
  stagingoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginTransfer!]!
  stagingoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationTransfer
  stagingoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationTransfer!]!
  stagingoptimismgoerli_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_OriginMessage
  stagingoptimismgoerli_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_OriginMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_OriginMessage!]!
  stagingoptimismgoerli_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_DestinationMessage
  stagingoptimismgoerli_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_DestinationMessage_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_DestinationMessage!]!
  stagingoptimismgoerli_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_AggregateRoot
  stagingoptimismgoerli_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_AggregateRoot_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_AggregateRoot!]!
  stagingoptimismgoerli_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_ConnectorMeta
  stagingoptimismgoerli_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_ConnectorMeta!]!
  stagingoptimismgoerli_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootMessageSent
  stagingoptimismgoerli_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageSent_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootMessageSent!]!
  stagingoptimismgoerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_RootMessageProcessed
  stagingoptimismgoerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_RootMessageProcessed_orderBy
    orderDirection: stagingoptimismgoerli_OrderDirection
    where: stagingoptimismgoerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli__meta(block: stagingoptimismgoerli_Block_height): stagingoptimismgoerli__Meta_
  stagingmumbai_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Asset
  stagingmumbai_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Asset_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Asset!]!
  stagingmumbai_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AssetBalance
  stagingmumbai_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AssetBalance_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AssetBalance!]!
  stagingmumbai_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Router
  stagingmumbai_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Router_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Router!]!
  stagingmumbai_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Setting
  stagingmumbai_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Setting_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Setting!]!
  stagingmumbai_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_Relayer
  stagingmumbai_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_Relayer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_Relayer!]!
  stagingmumbai_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_StableSwap
  stagingmumbai_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_StableSwap_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_StableSwap!]!
  stagingmumbai_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_SponsorVault
  stagingmumbai_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_SponsorVault_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_SponsorVault!]!
  stagingmumbai_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginTransfer
  stagingmumbai_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginTransfer!]!
  stagingmumbai_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_DestinationTransfer
  stagingmumbai_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationTransfer_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_DestinationTransfer!]!
  stagingmumbai_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_OriginMessage
  stagingmumbai_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_OriginMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_OriginMessage!]!
  stagingmumbai_destinationMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_DestinationMessage
  stagingmumbai_destinationMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_DestinationMessage_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_DestinationMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_DestinationMessage!]!
  stagingmumbai_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_AggregateRoot
  stagingmumbai_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_AggregateRoot_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_AggregateRoot!]!
  stagingmumbai_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_ConnectorMeta
  stagingmumbai_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_ConnectorMeta_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_ConnectorMeta!]!
  stagingmumbai_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootMessageSent
  stagingmumbai_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootMessageSent_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootMessageSent!]!
  stagingmumbai_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmumbai_RootMessageProcessed
  stagingmumbai_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmumbai_RootMessageProcessed_orderBy
    orderDirection: stagingmumbai_OrderDirection
    where: stagingmumbai_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmumbai_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmumbai_RootMessageProcessed!]!
  """Access to subgraph metadata"""
  stagingmumbai__meta(block: stagingmumbai_Block_height): stagingmumbai__Meta_
}

type rinkeby_Asset {
  id: ID!
  local: rinkeby_Bytes!
  adoptedAsset: rinkeby_Bytes!
  canonicalId: rinkeby_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type rinkeby_AssetBalance {
  id: ID!
  amount: BigInt!
  router: rinkeby_Router!
  asset: rinkeby_Asset!
}

input rinkeby_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: rinkeby_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: rinkeby_Asset_filter
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input rinkeby_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: rinkeby_Bytes
  local_not: rinkeby_Bytes
  local_in: [rinkeby_Bytes!]
  local_not_in: [rinkeby_Bytes!]
  local_contains: rinkeby_Bytes
  local_not_contains: rinkeby_Bytes
  adoptedAsset: rinkeby_Bytes
  adoptedAsset_not: rinkeby_Bytes
  adoptedAsset_in: [rinkeby_Bytes!]
  adoptedAsset_not_in: [rinkeby_Bytes!]
  adoptedAsset_contains: rinkeby_Bytes
  adoptedAsset_not_contains: rinkeby_Bytes
  canonicalId: rinkeby_Bytes
  canonicalId_not: rinkeby_Bytes
  canonicalId_in: [rinkeby_Bytes!]
  canonicalId_not_in: [rinkeby_Bytes!]
  canonicalId_contains: rinkeby_Bytes
  canonicalId_not_contains: rinkeby_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar rinkeby_BigDecimal

scalar BigInt

input rinkeby_BlockChangedFilter {
  number_gte: Int!
}

input rinkeby_Block_height {
  hash: rinkeby_Bytes
  number: Int
  number_gte: Int
}

scalar rinkeby_Bytes

type rinkeby_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: rinkeby_Bytes
  nonce: BigInt
  to: rinkeby_Bytes
  callData: rinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: rinkeby_Bytes
  recovery: rinkeby_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: rinkeby_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: rinkeby_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: rinkeby_Router_orderBy, orderDirection: rinkeby_OrderDirection, where: rinkeby_Router_filter): [rinkeby_Router!]
  originSender: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAmount: BigInt
  localAsset: rinkeby_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: rinkeby_Bytes
  executedTransactionHash: rinkeby_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: rinkeby_Bytes
  reconciledTransactionHash: rinkeby_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input rinkeby_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: rinkeby_Bytes
  transferId_not: rinkeby_Bytes
  transferId_in: [rinkeby_Bytes!]
  transferId_not_in: [rinkeby_Bytes!]
  transferId_contains: rinkeby_Bytes
  transferId_not_contains: rinkeby_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: rinkeby_Bytes
  to_not: rinkeby_Bytes
  to_in: [rinkeby_Bytes!]
  to_not_in: [rinkeby_Bytes!]
  to_contains: rinkeby_Bytes
  to_not_contains: rinkeby_Bytes
  callData: rinkeby_Bytes
  callData_not: rinkeby_Bytes
  callData_in: [rinkeby_Bytes!]
  callData_not_in: [rinkeby_Bytes!]
  callData_contains: rinkeby_Bytes
  callData_not_contains: rinkeby_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: rinkeby_Bytes
  agent_not: rinkeby_Bytes
  agent_in: [rinkeby_Bytes!]
  agent_not_in: [rinkeby_Bytes!]
  agent_contains: rinkeby_Bytes
  agent_not_contains: rinkeby_Bytes
  recovery: rinkeby_Bytes
  recovery_not: rinkeby_Bytes
  recovery_in: [rinkeby_Bytes!]
  recovery_not_in: [rinkeby_Bytes!]
  recovery_contains: rinkeby_Bytes
  recovery_not_contains: rinkeby_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: rinkeby_Bytes
  callback_not: rinkeby_Bytes
  callback_in: [rinkeby_Bytes!]
  callback_not_in: [rinkeby_Bytes!]
  callback_contains: rinkeby_Bytes
  callback_not_contains: rinkeby_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: rinkeby_TransferStatus
  status_not: rinkeby_TransferStatus
  status_in: [rinkeby_TransferStatus!]
  status_not_in: [rinkeby_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: rinkeby_Router_filter
  originSender: rinkeby_Bytes
  originSender_not: rinkeby_Bytes
  originSender_in: [rinkeby_Bytes!]
  originSender_not_in: [rinkeby_Bytes!]
  originSender_contains: rinkeby_Bytes
  originSender_not_contains: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAsset_not: rinkeby_Bytes
  transactingAsset_in: [rinkeby_Bytes!]
  transactingAsset_not_in: [rinkeby_Bytes!]
  transactingAsset_contains: rinkeby_Bytes
  transactingAsset_not_contains: rinkeby_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: rinkeby_Bytes
  localAsset_not: rinkeby_Bytes
  localAsset_in: [rinkeby_Bytes!]
  localAsset_not_in: [rinkeby_Bytes!]
  localAsset_contains: rinkeby_Bytes
  localAsset_not_contains: rinkeby_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: rinkeby_Bytes
  executedCaller_not: rinkeby_Bytes
  executedCaller_in: [rinkeby_Bytes!]
  executedCaller_not_in: [rinkeby_Bytes!]
  executedCaller_contains: rinkeby_Bytes
  executedCaller_not_contains: rinkeby_Bytes
  executedTransactionHash: rinkeby_Bytes
  executedTransactionHash_not: rinkeby_Bytes
  executedTransactionHash_in: [rinkeby_Bytes!]
  executedTransactionHash_not_in: [rinkeby_Bytes!]
  executedTransactionHash_contains: rinkeby_Bytes
  executedTransactionHash_not_contains: rinkeby_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: rinkeby_Bytes
  reconciledCaller_not: rinkeby_Bytes
  reconciledCaller_in: [rinkeby_Bytes!]
  reconciledCaller_not_in: [rinkeby_Bytes!]
  reconciledCaller_contains: rinkeby_Bytes
  reconciledCaller_not_contains: rinkeby_Bytes
  reconciledTransactionHash: rinkeby_Bytes
  reconciledTransactionHash_not: rinkeby_Bytes
  reconciledTransactionHash_in: [rinkeby_Bytes!]
  reconciledTransactionHash_not_in: [rinkeby_Bytes!]
  reconciledTransactionHash_contains: rinkeby_Bytes
  reconciledTransactionHash_not_contains: rinkeby_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum rinkeby_OrderDirection {
  asc
  desc
}

type rinkeby_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: rinkeby_Bytes
  nonce: BigInt
  to: rinkeby_Bytes
  callData: rinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: rinkeby_Bytes
  recovery: rinkeby_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: rinkeby_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: rinkeby_TransferStatus
  message: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAmount: BigInt
  bridgedAsset: rinkeby_Bytes
  bridgedAmount: BigInt
  caller: rinkeby_Bytes
  transactionHash: rinkeby_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input rinkeby_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: rinkeby_Bytes
  transferId_not: rinkeby_Bytes
  transferId_in: [rinkeby_Bytes!]
  transferId_not_in: [rinkeby_Bytes!]
  transferId_contains: rinkeby_Bytes
  transferId_not_contains: rinkeby_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: rinkeby_Bytes
  to_not: rinkeby_Bytes
  to_in: [rinkeby_Bytes!]
  to_not_in: [rinkeby_Bytes!]
  to_contains: rinkeby_Bytes
  to_not_contains: rinkeby_Bytes
  callData: rinkeby_Bytes
  callData_not: rinkeby_Bytes
  callData_in: [rinkeby_Bytes!]
  callData_not_in: [rinkeby_Bytes!]
  callData_contains: rinkeby_Bytes
  callData_not_contains: rinkeby_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: rinkeby_Bytes
  agent_not: rinkeby_Bytes
  agent_in: [rinkeby_Bytes!]
  agent_not_in: [rinkeby_Bytes!]
  agent_contains: rinkeby_Bytes
  agent_not_contains: rinkeby_Bytes
  recovery: rinkeby_Bytes
  recovery_not: rinkeby_Bytes
  recovery_in: [rinkeby_Bytes!]
  recovery_not_in: [rinkeby_Bytes!]
  recovery_contains: rinkeby_Bytes
  recovery_not_contains: rinkeby_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: rinkeby_Bytes
  callback_not: rinkeby_Bytes
  callback_in: [rinkeby_Bytes!]
  callback_not_in: [rinkeby_Bytes!]
  callback_contains: rinkeby_Bytes
  callback_not_contains: rinkeby_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: rinkeby_TransferStatus
  status_not: rinkeby_TransferStatus
  status_in: [rinkeby_TransferStatus!]
  status_not_in: [rinkeby_TransferStatus!]
  message: rinkeby_Bytes
  message_not: rinkeby_Bytes
  message_in: [rinkeby_Bytes!]
  message_not_in: [rinkeby_Bytes!]
  message_contains: rinkeby_Bytes
  message_not_contains: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAsset_not: rinkeby_Bytes
  transactingAsset_in: [rinkeby_Bytes!]
  transactingAsset_not_in: [rinkeby_Bytes!]
  transactingAsset_contains: rinkeby_Bytes
  transactingAsset_not_contains: rinkeby_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: rinkeby_Bytes
  bridgedAsset_not: rinkeby_Bytes
  bridgedAsset_in: [rinkeby_Bytes!]
  bridgedAsset_not_in: [rinkeby_Bytes!]
  bridgedAsset_contains: rinkeby_Bytes
  bridgedAsset_not_contains: rinkeby_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: rinkeby_Bytes
  caller_not: rinkeby_Bytes
  caller_in: [rinkeby_Bytes!]
  caller_not_in: [rinkeby_Bytes!]
  caller_contains: rinkeby_Bytes
  caller_not_contains: rinkeby_Bytes
  transactionHash: rinkeby_Bytes
  transactionHash_not: rinkeby_Bytes
  transactionHash_in: [rinkeby_Bytes!]
  transactionHash_not_in: [rinkeby_Bytes!]
  transactionHash_contains: rinkeby_Bytes
  transactionHash_not_contains: rinkeby_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type rinkeby_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: rinkeby_Bytes
}

input rinkeby_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: rinkeby_Bytes
  relayer_not: rinkeby_Bytes
  relayer_in: [rinkeby_Bytes!]
  relayer_not_in: [rinkeby_Bytes!]
  relayer_contains: rinkeby_Bytes
  relayer_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Relayer_orderBy {
  id
  isActive
  relayer
}

type rinkeby_Router {
  id: ID!
  isActive: Boolean!
  owner: rinkeby_Bytes
  recipient: rinkeby_Bytes
  proposedOwner: rinkeby_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: rinkeby_AssetBalance_orderBy, orderDirection: rinkeby_OrderDirection, where: rinkeby_AssetBalance_filter): [rinkeby_AssetBalance!]!
}

input rinkeby_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: rinkeby_Bytes
  owner_not: rinkeby_Bytes
  owner_in: [rinkeby_Bytes!]
  owner_not_in: [rinkeby_Bytes!]
  owner_contains: rinkeby_Bytes
  owner_not_contains: rinkeby_Bytes
  recipient: rinkeby_Bytes
  recipient_not: rinkeby_Bytes
  recipient_in: [rinkeby_Bytes!]
  recipient_not_in: [rinkeby_Bytes!]
  recipient_contains: rinkeby_Bytes
  recipient_not_contains: rinkeby_Bytes
  proposedOwner: rinkeby_Bytes
  proposedOwner_not: rinkeby_Bytes
  proposedOwner_in: [rinkeby_Bytes!]
  proposedOwner_not_in: [rinkeby_Bytes!]
  proposedOwner_contains: rinkeby_Bytes
  proposedOwner_not_contains: rinkeby_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: rinkeby_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type rinkeby_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: rinkeby_Bytes!
}

input rinkeby_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: rinkeby_Bytes
  caller_not: rinkeby_Bytes
  caller_in: [rinkeby_Bytes!]
  caller_not_in: [rinkeby_Bytes!]
  caller_contains: rinkeby_Bytes
  caller_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type rinkeby_SponsorVault {
  id: ID!
  sponsorVault: rinkeby_Bytes!
}

input rinkeby_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: rinkeby_Bytes
  sponsorVault_not: rinkeby_Bytes
  sponsorVault_in: [rinkeby_Bytes!]
  sponsorVault_not_in: [rinkeby_Bytes!]
  sponsorVault_contains: rinkeby_Bytes
  sponsorVault_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_SponsorVault_orderBy {
  id
  sponsorVault
}

type rinkeby_StableSwap {
  id: ID!
  canonicalId: rinkeby_Bytes!
  domain: BigInt
  swapPool: rinkeby_Bytes!
}

input rinkeby_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: rinkeby_Bytes
  canonicalId_not: rinkeby_Bytes
  canonicalId_in: [rinkeby_Bytes!]
  canonicalId_not_in: [rinkeby_Bytes!]
  canonicalId_contains: rinkeby_Bytes
  canonicalId_not_contains: rinkeby_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: rinkeby_Bytes
  swapPool_not: rinkeby_Bytes
  swapPool_in: [rinkeby_Bytes!]
  swapPool_not_in: [rinkeby_Bytes!]
  swapPool_contains: rinkeby_Bytes
  swapPool_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum rinkeby_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type rinkeby__Block_ {
  """The hash of the block"""
  hash: rinkeby_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type rinkeby__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: rinkeby__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type testgoerli_Asset {
  id: ID!
  key: testgoerli_Bytes
  local: testgoerli_Bytes!
  adoptedAsset: testgoerli_Bytes!
  canonicalId: testgoerli_Bytes!
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

<<<<<<< HEAD
type rinkeby_AssetBalance {
  id: ID!
  amount: BigInt!
  router: rinkeby_Router!
  asset: rinkeby_Asset!
}

input rinkeby_AssetBalance_filter {
=======
type testgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testgoerli_Router!
  asset: testgoerli_Asset!
}

input testgoerli_AssetBalance_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
<<<<<<< HEAD
  router_: rinkeby_Router_filter
=======
  router_: testgoerli_Router_filter
>>>>>>> 1807-xcall-interface
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
<<<<<<< HEAD
  asset_: rinkeby_Asset_filter
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_AssetBalance_orderBy {
=======
  asset_: testgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_AssetBalance_orderBy {
>>>>>>> 1807-xcall-interface
  id
  amount
  router
  asset
}

<<<<<<< HEAD
input rinkeby_Asset_filter {
=======
input testgoerli_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  local: rinkeby_Bytes
  local_not: rinkeby_Bytes
  local_in: [rinkeby_Bytes!]
  local_not_in: [rinkeby_Bytes!]
  local_contains: rinkeby_Bytes
  local_not_contains: rinkeby_Bytes
  adoptedAsset: rinkeby_Bytes
  adoptedAsset_not: rinkeby_Bytes
  adoptedAsset_in: [rinkeby_Bytes!]
  adoptedAsset_not_in: [rinkeby_Bytes!]
  adoptedAsset_contains: rinkeby_Bytes
  adoptedAsset_not_contains: rinkeby_Bytes
  canonicalId: rinkeby_Bytes
  canonicalId_not: rinkeby_Bytes
  canonicalId_in: [rinkeby_Bytes!]
  canonicalId_not_in: [rinkeby_Bytes!]
  canonicalId_contains: rinkeby_Bytes
  canonicalId_not_contains: rinkeby_Bytes
=======
  key: testgoerli_Bytes
  key_not: testgoerli_Bytes
  key_in: [testgoerli_Bytes!]
  key_not_in: [testgoerli_Bytes!]
  key_contains: testgoerli_Bytes
  key_not_contains: testgoerli_Bytes
  local: testgoerli_Bytes
  local_not: testgoerli_Bytes
  local_in: [testgoerli_Bytes!]
  local_not_in: [testgoerli_Bytes!]
  local_contains: testgoerli_Bytes
  local_not_contains: testgoerli_Bytes
  adoptedAsset: testgoerli_Bytes
  adoptedAsset_not: testgoerli_Bytes
  adoptedAsset_in: [testgoerli_Bytes!]
  adoptedAsset_not_in: [testgoerli_Bytes!]
  adoptedAsset_contains: testgoerli_Bytes
  adoptedAsset_not_contains: testgoerli_Bytes
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Asset_orderBy {
  id
=======
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Asset_orderBy {
  id
  key
>>>>>>> 1807-xcall-interface
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

<<<<<<< HEAD
scalar rinkeby_BigDecimal

scalar BigInt

input rinkeby_BlockChangedFilter {
  number_gte: Int!
}

input rinkeby_Block_height {
  hash: rinkeby_Bytes
=======
scalar testgoerli_BigDecimal

input testgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testgoerli_Block_height {
  hash: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  number: Int
  number_gte: Int
}

<<<<<<< HEAD
scalar rinkeby_Bytes

type rinkeby_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: rinkeby_Bytes
  nonce: BigInt
  to: rinkeby_Bytes
  callData: rinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: rinkeby_Bytes
  recovery: rinkeby_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: rinkeby_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: rinkeby_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: rinkeby_Router_orderBy, orderDirection: rinkeby_OrderDirection, where: rinkeby_Router_filter): [rinkeby_Router!]
  originSender: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAmount: BigInt
  localAsset: rinkeby_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: rinkeby_Bytes
  executedTransactionHash: rinkeby_Bytes
=======
scalar testgoerli_Bytes

type testgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testgoerli_Router_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_Router_filter): [testgoerli_Router!]
  originSender: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
<<<<<<< HEAD
  reconciledCaller: rinkeby_Bytes
  reconciledTransactionHash: rinkeby_Bytes
=======
  reconciledCaller: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

<<<<<<< HEAD
input rinkeby_DestinationTransfer_filter {
=======
input testgoerli_DestinationTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: rinkeby_Bytes
  transferId_not: rinkeby_Bytes
  transferId_in: [rinkeby_Bytes!]
  transferId_not_in: [rinkeby_Bytes!]
  transferId_contains: rinkeby_Bytes
  transferId_not_contains: rinkeby_Bytes
=======
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: rinkeby_Bytes
  to_not: rinkeby_Bytes
  to_in: [rinkeby_Bytes!]
  to_not_in: [rinkeby_Bytes!]
  to_contains: rinkeby_Bytes
  to_not_contains: rinkeby_Bytes
  callData: rinkeby_Bytes
  callData_not: rinkeby_Bytes
  callData_in: [rinkeby_Bytes!]
  callData_not_in: [rinkeby_Bytes!]
  callData_contains: rinkeby_Bytes
  callData_not_contains: rinkeby_Bytes
=======
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: rinkeby_Bytes
  agent_not: rinkeby_Bytes
  agent_in: [rinkeby_Bytes!]
  agent_not_in: [rinkeby_Bytes!]
  agent_contains: rinkeby_Bytes
  agent_not_contains: rinkeby_Bytes
  recovery: rinkeby_Bytes
  recovery_not: rinkeby_Bytes
  recovery_in: [rinkeby_Bytes!]
  recovery_not_in: [rinkeby_Bytes!]
  recovery_contains: rinkeby_Bytes
  recovery_not_contains: rinkeby_Bytes
=======
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: rinkeby_Bytes
  callback_not: rinkeby_Bytes
  callback_in: [rinkeby_Bytes!]
  callback_not_in: [rinkeby_Bytes!]
  callback_contains: rinkeby_Bytes
  callback_not_contains: rinkeby_Bytes
=======
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: rinkeby_TransferStatus
  status_not: rinkeby_TransferStatus
  status_in: [rinkeby_TransferStatus!]
  status_not_in: [rinkeby_TransferStatus!]
=======
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
>>>>>>> 1807-xcall-interface
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
<<<<<<< HEAD
  routers_: rinkeby_Router_filter
  originSender: rinkeby_Bytes
  originSender_not: rinkeby_Bytes
  originSender_in: [rinkeby_Bytes!]
  originSender_not_in: [rinkeby_Bytes!]
  originSender_contains: rinkeby_Bytes
  originSender_not_contains: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAsset_not: rinkeby_Bytes
  transactingAsset_in: [rinkeby_Bytes!]
  transactingAsset_not_in: [rinkeby_Bytes!]
  transactingAsset_contains: rinkeby_Bytes
  transactingAsset_not_contains: rinkeby_Bytes
=======
  routers_: testgoerli_Router_filter
  originSender: testgoerli_Bytes
  originSender_not: testgoerli_Bytes
  originSender_in: [testgoerli_Bytes!]
  originSender_not_in: [testgoerli_Bytes!]
  originSender_contains: testgoerli_Bytes
  originSender_not_contains: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  localAsset: rinkeby_Bytes
  localAsset_not: rinkeby_Bytes
  localAsset_in: [rinkeby_Bytes!]
  localAsset_not_in: [rinkeby_Bytes!]
  localAsset_contains: rinkeby_Bytes
  localAsset_not_contains: rinkeby_Bytes
=======
  localAsset: testgoerli_Bytes
  localAsset_not: testgoerli_Bytes
  localAsset_in: [testgoerli_Bytes!]
  localAsset_not_in: [testgoerli_Bytes!]
  localAsset_contains: testgoerli_Bytes
  localAsset_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  executedCaller: rinkeby_Bytes
  executedCaller_not: rinkeby_Bytes
  executedCaller_in: [rinkeby_Bytes!]
  executedCaller_not_in: [rinkeby_Bytes!]
  executedCaller_contains: rinkeby_Bytes
  executedCaller_not_contains: rinkeby_Bytes
  executedTransactionHash: rinkeby_Bytes
  executedTransactionHash_not: rinkeby_Bytes
  executedTransactionHash_in: [rinkeby_Bytes!]
  executedTransactionHash_not_in: [rinkeby_Bytes!]
  executedTransactionHash_contains: rinkeby_Bytes
  executedTransactionHash_not_contains: rinkeby_Bytes
=======
  executedCaller: testgoerli_Bytes
  executedCaller_not: testgoerli_Bytes
  executedCaller_in: [testgoerli_Bytes!]
  executedCaller_not_in: [testgoerli_Bytes!]
  executedCaller_contains: testgoerli_Bytes
  executedCaller_not_contains: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
  executedTransactionHash_not: testgoerli_Bytes
  executedTransactionHash_in: [testgoerli_Bytes!]
  executedTransactionHash_not_in: [testgoerli_Bytes!]
  executedTransactionHash_contains: testgoerli_Bytes
  executedTransactionHash_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
<<<<<<< HEAD
  reconciledCaller: rinkeby_Bytes
  reconciledCaller_not: rinkeby_Bytes
  reconciledCaller_in: [rinkeby_Bytes!]
  reconciledCaller_not_in: [rinkeby_Bytes!]
  reconciledCaller_contains: rinkeby_Bytes
  reconciledCaller_not_contains: rinkeby_Bytes
  reconciledTransactionHash: rinkeby_Bytes
  reconciledTransactionHash_not: rinkeby_Bytes
  reconciledTransactionHash_in: [rinkeby_Bytes!]
  reconciledTransactionHash_not_in: [rinkeby_Bytes!]
  reconciledTransactionHash_contains: rinkeby_Bytes
  reconciledTransactionHash_not_contains: rinkeby_Bytes
=======
  reconciledCaller: testgoerli_Bytes
  reconciledCaller_not: testgoerli_Bytes
  reconciledCaller_in: [testgoerli_Bytes!]
  reconciledCaller_not_in: [testgoerli_Bytes!]
  reconciledCaller_contains: testgoerli_Bytes
  reconciledCaller_not_contains: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
  reconciledTransactionHash_not: testgoerli_Bytes
  reconciledTransactionHash_in: [testgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testgoerli_Bytes!]
  reconciledTransactionHash_contains: testgoerli_Bytes
  reconciledTransactionHash_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_DestinationTransfer_orderBy {
=======
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_DestinationTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
<<<<<<< HEAD
enum rinkeby_OrderDirection {
=======
enum testgoerli_OrderDirection {
>>>>>>> 1807-xcall-interface
  asc
  desc
}

<<<<<<< HEAD
type rinkeby_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: rinkeby_Bytes
  nonce: BigInt
  to: rinkeby_Bytes
  callData: rinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: rinkeby_Bytes
  recovery: rinkeby_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: rinkeby_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  slippageTol: BigInt
  status: rinkeby_TransferStatus
  message: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAmount: BigInt
  bridgedAsset: rinkeby_Bytes
  bridgedAmount: BigInt
  caller: rinkeby_Bytes
  transactionHash: rinkeby_Bytes
=======
type testgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testgoerli_Bytes
  bridgedAmount: BigInt
  caller: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input rinkeby_OriginTransfer_filter {
=======
input testgoerli_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: rinkeby_Bytes
  transferId_not: rinkeby_Bytes
  transferId_in: [rinkeby_Bytes!]
  transferId_not_in: [rinkeby_Bytes!]
  transferId_contains: rinkeby_Bytes
  transferId_not_contains: rinkeby_Bytes
=======
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: rinkeby_Bytes
  to_not: rinkeby_Bytes
  to_in: [rinkeby_Bytes!]
  to_not_in: [rinkeby_Bytes!]
  to_contains: rinkeby_Bytes
  to_not_contains: rinkeby_Bytes
  callData: rinkeby_Bytes
  callData_not: rinkeby_Bytes
  callData_in: [rinkeby_Bytes!]
  callData_not_in: [rinkeby_Bytes!]
  callData_contains: rinkeby_Bytes
  callData_not_contains: rinkeby_Bytes
=======
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: rinkeby_Bytes
  agent_not: rinkeby_Bytes
  agent_in: [rinkeby_Bytes!]
  agent_not_in: [rinkeby_Bytes!]
  agent_contains: rinkeby_Bytes
  agent_not_contains: rinkeby_Bytes
  recovery: rinkeby_Bytes
  recovery_not: rinkeby_Bytes
  recovery_in: [rinkeby_Bytes!]
  recovery_not_in: [rinkeby_Bytes!]
  recovery_contains: rinkeby_Bytes
  recovery_not_contains: rinkeby_Bytes
=======
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: rinkeby_Bytes
  callback_not: rinkeby_Bytes
  callback_in: [rinkeby_Bytes!]
  callback_not_in: [rinkeby_Bytes!]
  callback_contains: rinkeby_Bytes
  callback_not_contains: rinkeby_Bytes
=======
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  slippageTol: BigInt
  slippageTol_not: BigInt
  slippageTol_gt: BigInt
  slippageTol_lt: BigInt
  slippageTol_gte: BigInt
  slippageTol_lte: BigInt
  slippageTol_in: [BigInt!]
  slippageTol_not_in: [BigInt!]
  status: rinkeby_TransferStatus
  status_not: rinkeby_TransferStatus
  status_in: [rinkeby_TransferStatus!]
  status_not_in: [rinkeby_TransferStatus!]
  message: rinkeby_Bytes
  message_not: rinkeby_Bytes
  message_in: [rinkeby_Bytes!]
  message_not_in: [rinkeby_Bytes!]
  message_contains: rinkeby_Bytes
  message_not_contains: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAsset_not: rinkeby_Bytes
  transactingAsset_in: [rinkeby_Bytes!]
  transactingAsset_not_in: [rinkeby_Bytes!]
  transactingAsset_contains: rinkeby_Bytes
  transactingAsset_not_contains: rinkeby_Bytes
=======
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  bridgedAsset: rinkeby_Bytes
  bridgedAsset_not: rinkeby_Bytes
  bridgedAsset_in: [rinkeby_Bytes!]
  bridgedAsset_not_in: [rinkeby_Bytes!]
  bridgedAsset_contains: rinkeby_Bytes
  bridgedAsset_not_contains: rinkeby_Bytes
=======
  bridgedAsset: testgoerli_Bytes
  bridgedAsset_not: testgoerli_Bytes
  bridgedAsset_in: [testgoerli_Bytes!]
  bridgedAsset_not_in: [testgoerli_Bytes!]
  bridgedAsset_contains: testgoerli_Bytes
  bridgedAsset_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
<<<<<<< HEAD
  caller: rinkeby_Bytes
  caller_not: rinkeby_Bytes
  caller_in: [rinkeby_Bytes!]
  caller_not_in: [rinkeby_Bytes!]
  caller_contains: rinkeby_Bytes
  caller_not_contains: rinkeby_Bytes
  transactionHash: rinkeby_Bytes
  transactionHash_not: rinkeby_Bytes
  transactionHash_in: [rinkeby_Bytes!]
  transactionHash_not_in: [rinkeby_Bytes!]
  transactionHash_contains: rinkeby_Bytes
  transactionHash_not_contains: rinkeby_Bytes
=======
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  transactionHash_not: testgoerli_Bytes
  transactionHash_in: [testgoerli_Bytes!]
  transactionHash_not_in: [testgoerli_Bytes!]
  transactionHash_contains: testgoerli_Bytes
  transactionHash_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_OriginTransfer_orderBy {
=======
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_OriginTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  slippageTol
  status
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type rinkeby_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: rinkeby_Bytes
}

input rinkeby_Relayer_filter {
=======
type testgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testgoerli_Bytes
}

input testgoerli_Relayer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  relayer: rinkeby_Bytes
  relayer_not: rinkeby_Bytes
  relayer_in: [rinkeby_Bytes!]
  relayer_not_in: [rinkeby_Bytes!]
  relayer_contains: rinkeby_Bytes
  relayer_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Relayer_orderBy {
=======
  relayer: testgoerli_Bytes
  relayer_not: testgoerli_Bytes
  relayer_in: [testgoerli_Bytes!]
  relayer_not_in: [testgoerli_Bytes!]
  relayer_contains: testgoerli_Bytes
  relayer_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Relayer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  relayer
}

<<<<<<< HEAD
type rinkeby_Router {
  id: ID!
  isActive: Boolean!
  owner: rinkeby_Bytes
  recipient: rinkeby_Bytes
  proposedOwner: rinkeby_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: rinkeby_AssetBalance_orderBy, orderDirection: rinkeby_OrderDirection, where: rinkeby_AssetBalance_filter): [rinkeby_AssetBalance!]!
}

input rinkeby_Router_filter {
=======
type testgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testgoerli_Bytes
  recipient: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testgoerli_AssetBalance_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_AssetBalance_filter): [testgoerli_AssetBalance!]!
}

input testgoerli_Router_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  owner: rinkeby_Bytes
  owner_not: rinkeby_Bytes
  owner_in: [rinkeby_Bytes!]
  owner_not_in: [rinkeby_Bytes!]
  owner_contains: rinkeby_Bytes
  owner_not_contains: rinkeby_Bytes
  recipient: rinkeby_Bytes
  recipient_not: rinkeby_Bytes
  recipient_in: [rinkeby_Bytes!]
  recipient_not_in: [rinkeby_Bytes!]
  recipient_contains: rinkeby_Bytes
  recipient_not_contains: rinkeby_Bytes
  proposedOwner: rinkeby_Bytes
  proposedOwner_not: rinkeby_Bytes
  proposedOwner_in: [rinkeby_Bytes!]
  proposedOwner_not_in: [rinkeby_Bytes!]
  proposedOwner_contains: rinkeby_Bytes
  proposedOwner_not_contains: rinkeby_Bytes
=======
  owner: testgoerli_Bytes
  owner_not: testgoerli_Bytes
  owner_in: [testgoerli_Bytes!]
  owner_not_in: [testgoerli_Bytes!]
  owner_contains: testgoerli_Bytes
  owner_not_contains: testgoerli_Bytes
  recipient: testgoerli_Bytes
  recipient_not: testgoerli_Bytes
  recipient_in: [testgoerli_Bytes!]
  recipient_not_in: [testgoerli_Bytes!]
  recipient_contains: testgoerli_Bytes
  recipient_not_contains: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedOwner_not: testgoerli_Bytes
  proposedOwner_in: [testgoerli_Bytes!]
  proposedOwner_not_in: [testgoerli_Bytes!]
  proposedOwner_contains: testgoerli_Bytes
  proposedOwner_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
<<<<<<< HEAD
  assetBalances_: rinkeby_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Router_orderBy {
=======
  assetBalances_: testgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Router_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

<<<<<<< HEAD
type rinkeby_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: rinkeby_Bytes!
}

input rinkeby_Setting_filter {
=======
type testgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testgoerli_Bytes!
}

input testgoerli_Setting_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
<<<<<<< HEAD
  caller: rinkeby_Bytes
  caller_not: rinkeby_Bytes
  caller_in: [rinkeby_Bytes!]
  caller_not_in: [rinkeby_Bytes!]
  caller_contains: rinkeby_Bytes
  caller_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Setting_orderBy {
=======
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Setting_orderBy {
>>>>>>> 1807-xcall-interface
  id
  maxRoutersPerTransfer
  caller
}

<<<<<<< HEAD
type rinkeby_SponsorVault {
  id: ID!
  sponsorVault: rinkeby_Bytes!
}

input rinkeby_SponsorVault_filter {
=======
type testgoerli_SponsorVault {
  id: ID!
  sponsorVault: testgoerli_Bytes!
}

input testgoerli_SponsorVault_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  sponsorVault: rinkeby_Bytes
  sponsorVault_not: rinkeby_Bytes
  sponsorVault_in: [rinkeby_Bytes!]
  sponsorVault_not_in: [rinkeby_Bytes!]
  sponsorVault_contains: rinkeby_Bytes
  sponsorVault_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_SponsorVault_orderBy {
=======
  sponsorVault: testgoerli_Bytes
  sponsorVault_not: testgoerli_Bytes
  sponsorVault_in: [testgoerli_Bytes!]
  sponsorVault_not_in: [testgoerli_Bytes!]
  sponsorVault_contains: testgoerli_Bytes
  sponsorVault_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_SponsorVault_orderBy {
>>>>>>> 1807-xcall-interface
  id
  sponsorVault
}

<<<<<<< HEAD
type rinkeby_StableSwap {
  id: ID!
  canonicalId: rinkeby_Bytes!
  domain: BigInt
  swapPool: rinkeby_Bytes!
}

input rinkeby_StableSwap_filter {
=======
type testgoerli_StableSwap {
  id: ID!
  canonicalId: testgoerli_Bytes!
  domain: BigInt
  swapPool: testgoerli_Bytes!
}

input testgoerli_StableSwap_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  canonicalId: rinkeby_Bytes
  canonicalId_not: rinkeby_Bytes
  canonicalId_in: [rinkeby_Bytes!]
  canonicalId_not_in: [rinkeby_Bytes!]
  canonicalId_contains: rinkeby_Bytes
  canonicalId_not_contains: rinkeby_Bytes
=======
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
<<<<<<< HEAD
  swapPool: rinkeby_Bytes
  swapPool_not: rinkeby_Bytes
  swapPool_in: [rinkeby_Bytes!]
  swapPool_not_in: [rinkeby_Bytes!]
  swapPool_contains: rinkeby_Bytes
  swapPool_not_contains: rinkeby_Bytes
  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_StableSwap_orderBy {
=======
  swapPool: testgoerli_Bytes
  swapPool_not: testgoerli_Bytes
  swapPool_in: [testgoerli_Bytes!]
  swapPool_not_in: [testgoerli_Bytes!]
  swapPool_contains: testgoerli_Bytes
  swapPool_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_StableSwap_orderBy {
>>>>>>> 1807-xcall-interface
  id
  canonicalId
  domain
  swapPool
}

<<<<<<< HEAD
enum rinkeby_TransferStatus {
=======
enum testgoerli_TransferStatus {
>>>>>>> 1807-xcall-interface
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

<<<<<<< HEAD
type rinkeby__Block_ {
  """The hash of the block"""
  hash: rinkeby_Bytes
=======
type testgoerli__Block_ {
  """The hash of the block"""
  hash: testgoerli_Bytes
>>>>>>> 1807-xcall-interface
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
<<<<<<< HEAD
type rinkeby__Meta_ {
=======
type testgoerli__Meta_ {
>>>>>>> 1807-xcall-interface
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
<<<<<<< HEAD
  block: rinkeby__Block_!
=======
  block: testgoerli__Block_!
>>>>>>> 1807-xcall-interface
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

<<<<<<< HEAD
enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type testoptimismgoerli_Asset {
  id: ID!
  key: testoptimismgoerli_Bytes
  local: testoptimismgoerli_Bytes!
  adoptedAsset: testoptimismgoerli_Bytes!
  canonicalId: testoptimismgoerli_Bytes!
=======
type staginggoerli_AggregateRoot {
  id: ID!
  root: staginggoerli_Bytes!
}

input staginggoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AggregateRoot_orderBy {
  id
  root
}

type staginggoerli_Asset {
  id: ID!
  key: staginggoerli_Bytes
  local: staginggoerli_Bytes!
  adoptedAsset: staginggoerli_Bytes!
  canonicalId: staginggoerli_Bytes!
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

<<<<<<< HEAD
type testoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testoptimismgoerli_Router!
  asset: testoptimismgoerli_Asset!
}

input testoptimismgoerli_AssetBalance_filter {
=======
type staginggoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: staginggoerli_Router!
  asset: staginggoerli_Asset!
}

input staginggoerli_AssetBalance_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
<<<<<<< HEAD
  router_: testoptimismgoerli_Router_filter
=======
  router_: staginggoerli_Router_filter
>>>>>>> 1807-xcall-interface
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
<<<<<<< HEAD
  asset_: testoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_AssetBalance_orderBy {
=======
  asset_: staginggoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AssetBalance_orderBy {
>>>>>>> 1807-xcall-interface
  id
  amount
  router
  asset
}

<<<<<<< HEAD
input testoptimismgoerli_Asset_filter {
=======
input staginggoerli_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  key: testoptimismgoerli_Bytes
  key_not: testoptimismgoerli_Bytes
  key_in: [testoptimismgoerli_Bytes!]
  key_not_in: [testoptimismgoerli_Bytes!]
  key_contains: testoptimismgoerli_Bytes
  key_not_contains: testoptimismgoerli_Bytes
  local: testoptimismgoerli_Bytes
  local_not: testoptimismgoerli_Bytes
  local_in: [testoptimismgoerli_Bytes!]
  local_not_in: [testoptimismgoerli_Bytes!]
  local_contains: testoptimismgoerli_Bytes
  local_not_contains: testoptimismgoerli_Bytes
  adoptedAsset: testoptimismgoerli_Bytes
  adoptedAsset_not: testoptimismgoerli_Bytes
  adoptedAsset_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_contains: testoptimismgoerli_Bytes
  adoptedAsset_not_contains: testoptimismgoerli_Bytes
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
=======
  key: staginggoerli_Bytes
  key_not: staginggoerli_Bytes
  key_in: [staginggoerli_Bytes!]
  key_not_in: [staginggoerli_Bytes!]
  key_contains: staginggoerli_Bytes
  key_not_contains: staginggoerli_Bytes
  local: staginggoerli_Bytes
  local_not: staginggoerli_Bytes
  local_in: [staginggoerli_Bytes!]
  local_not_in: [staginggoerli_Bytes!]
  local_contains: staginggoerli_Bytes
  local_not_contains: staginggoerli_Bytes
  adoptedAsset: staginggoerli_Bytes
  adoptedAsset_not: staginggoerli_Bytes
  adoptedAsset_in: [staginggoerli_Bytes!]
  adoptedAsset_not_in: [staginggoerli_Bytes!]
  adoptedAsset_contains: staginggoerli_Bytes
  adoptedAsset_not_contains: staginggoerli_Bytes
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Asset_orderBy {
=======
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Asset_orderBy {
>>>>>>> 1807-xcall-interface
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

<<<<<<< HEAD
scalar testoptimismgoerli_BigDecimal

input testoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testoptimismgoerli_Block_height {
  hash: testoptimismgoerli_Bytes
=======
scalar staginggoerli_BigDecimal

input staginggoerli_BlockChangedFilter {
  number_gte: Int!
}

input staginggoerli_Block_height {
  hash: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  number: Int
  number_gte: Int
}

<<<<<<< HEAD
scalar testoptimismgoerli_Bytes

type testoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_Router_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_Router_filter): [testoptimismgoerli_Router!]
  originSender: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testoptimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
=======
scalar staginggoerli_Bytes

type staginggoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerli_Bytes!
  rootManager: staginggoerli_Bytes!
  mirrorConnector: staginggoerli_Bytes!
}

input staginggoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: staginggoerli_Bytes
  amb_not: staginggoerli_Bytes
  amb_in: [staginggoerli_Bytes!]
  amb_not_in: [staginggoerli_Bytes!]
  amb_contains: staginggoerli_Bytes
  amb_not_contains: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  rootManager_not: staginggoerli_Bytes
  rootManager_in: [staginggoerli_Bytes!]
  rootManager_not_in: [staginggoerli_Bytes!]
  rootManager_contains: staginggoerli_Bytes
  rootManager_not_contains: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
  mirrorConnector_not: staginggoerli_Bytes
  mirrorConnector_in: [staginggoerli_Bytes!]
  mirrorConnector_not_in: [staginggoerli_Bytes!]
  mirrorConnector_contains: staginggoerli_Bytes
  mirrorConnector_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type staginggoerli_DestinationMessage {
  id: ID!
  leaf: staginggoerli_Bytes
  processed: Boolean
  returnData: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
}

input staginggoerli_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: staginggoerli_Bytes
  leaf_not: staginggoerli_Bytes
  leaf_in: [staginggoerli_Bytes!]
  leaf_not_in: [staginggoerli_Bytes!]
  leaf_contains: staginggoerli_Bytes
  leaf_not_contains: staginggoerli_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: staginggoerli_Bytes
  returnData_not: staginggoerli_Bytes
  returnData_in: [staginggoerli_Bytes!]
  returnData_not_in: [staginggoerli_Bytes!]
  returnData_contains: staginggoerli_Bytes
  returnData_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  transactionHash
}

type staginggoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  to: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: staginggoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: staginggoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_Router_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_Router_filter): [staginggoerli_Router!]
  originSender: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAmount: BigInt
  localAsset: staginggoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
<<<<<<< HEAD
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
=======
  reconciledCaller: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

<<<<<<< HEAD
input testoptimismgoerli_DestinationTransfer_filter {
=======
input staginggoerli_DestinationTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
=======
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
=======
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
=======
  agent: staginggoerli_Bytes
  agent_not: staginggoerli_Bytes
  agent_in: [staginggoerli_Bytes!]
  agent_not_in: [staginggoerli_Bytes!]
  agent_contains: staginggoerli_Bytes
  agent_not_contains: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  recovery_not: staginggoerli_Bytes
  recovery_in: [staginggoerli_Bytes!]
  recovery_not_in: [staginggoerli_Bytes!]
  recovery_contains: staginggoerli_Bytes
  recovery_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
=======
  callback: staginggoerli_Bytes
  callback_not: staginggoerli_Bytes
  callback_in: [staginggoerli_Bytes!]
  callback_not_in: [staginggoerli_Bytes!]
  callback_contains: staginggoerli_Bytes
  callback_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
=======
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
>>>>>>> 1807-xcall-interface
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
<<<<<<< HEAD
  routers_: testoptimismgoerli_Router_filter
  originSender: testoptimismgoerli_Bytes
  originSender_not: testoptimismgoerli_Bytes
  originSender_in: [testoptimismgoerli_Bytes!]
  originSender_not_in: [testoptimismgoerli_Bytes!]
  originSender_contains: testoptimismgoerli_Bytes
  originSender_not_contains: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
=======
  routers_: staginggoerli_Router_filter
  originSender: staginggoerli_Bytes
  originSender_not: staginggoerli_Bytes
  originSender_in: [staginggoerli_Bytes!]
  originSender_not_in: [staginggoerli_Bytes!]
  originSender_contains: staginggoerli_Bytes
  originSender_not_contains: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAsset_not: staginggoerli_Bytes
  transactingAsset_in: [staginggoerli_Bytes!]
  transactingAsset_not_in: [staginggoerli_Bytes!]
  transactingAsset_contains: staginggoerli_Bytes
  transactingAsset_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  localAsset: testoptimismgoerli_Bytes
  localAsset_not: testoptimismgoerli_Bytes
  localAsset_in: [testoptimismgoerli_Bytes!]
  localAsset_not_in: [testoptimismgoerli_Bytes!]
  localAsset_contains: testoptimismgoerli_Bytes
  localAsset_not_contains: testoptimismgoerli_Bytes
=======
  localAsset: staginggoerli_Bytes
  localAsset_not: staginggoerli_Bytes
  localAsset_in: [staginggoerli_Bytes!]
  localAsset_not_in: [staginggoerli_Bytes!]
  localAsset_contains: staginggoerli_Bytes
  localAsset_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  executedCaller: testoptimismgoerli_Bytes
  executedCaller_not: testoptimismgoerli_Bytes
  executedCaller_in: [testoptimismgoerli_Bytes!]
  executedCaller_not_in: [testoptimismgoerli_Bytes!]
  executedCaller_contains: testoptimismgoerli_Bytes
  executedCaller_not_contains: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTransactionHash_not: testoptimismgoerli_Bytes
  executedTransactionHash_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_contains: testoptimismgoerli_Bytes
  executedTransactionHash_not_contains: testoptimismgoerli_Bytes
=======
  executedCaller: staginggoerli_Bytes
  executedCaller_not: staginggoerli_Bytes
  executedCaller_in: [staginggoerli_Bytes!]
  executedCaller_not_in: [staginggoerli_Bytes!]
  executedCaller_contains: staginggoerli_Bytes
  executedCaller_not_contains: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
  executedTransactionHash_not: staginggoerli_Bytes
  executedTransactionHash_in: [staginggoerli_Bytes!]
  executedTransactionHash_not_in: [staginggoerli_Bytes!]
  executedTransactionHash_contains: staginggoerli_Bytes
  executedTransactionHash_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
<<<<<<< HEAD
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledCaller_not: testoptimismgoerli_Bytes
  reconciledCaller_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_contains: testoptimismgoerli_Bytes
  reconciledCaller_not_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTransactionHash_not: testoptimismgoerli_Bytes
  reconciledTransactionHash_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: testoptimismgoerli_Bytes
=======
  reconciledCaller: staginggoerli_Bytes
  reconciledCaller_not: staginggoerli_Bytes
  reconciledCaller_in: [staginggoerli_Bytes!]
  reconciledCaller_not_in: [staginggoerli_Bytes!]
  reconciledCaller_contains: staginggoerli_Bytes
  reconciledCaller_not_contains: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
  reconciledTransactionHash_not: staginggoerli_Bytes
  reconciledTransactionHash_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_not_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_contains: staginggoerli_Bytes
  reconciledTransactionHash_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_DestinationTransfer_orderBy {
=======
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_DestinationTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
<<<<<<< HEAD
enum testoptimismgoerli_OrderDirection {
=======
enum staginggoerli_OrderDirection {
>>>>>>> 1807-xcall-interface
  asc
  desc
}

<<<<<<< HEAD
type testoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  caller: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
=======
type staginggoerli_OriginMessage {
  id: ID!
  transferId: staginggoerli_Bytes
  destinationDomain: BigInt
  leaf: staginggoerli_Bytes
  index: BigInt
  root: staginggoerli_Bytes
  message: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
}

input staginggoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: staginggoerli_Bytes
  leaf_not: staginggoerli_Bytes
  leaf_in: [staginggoerli_Bytes!]
  leaf_not_in: [staginggoerli_Bytes!]
  leaf_contains: staginggoerli_Bytes
  leaf_not_contains: staginggoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  message: staginggoerli_Bytes
  message_not: staginggoerli_Bytes
  message_in: [staginggoerli_Bytes!]
  message_not_in: [staginggoerli_Bytes!]
  message_contains: staginggoerli_Bytes
  message_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

type staginggoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  to: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: staginggoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: staginggoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: staginggoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: staginggoerli_Bytes
  bridgedAmount: BigInt
  message: staginggoerli_OriginMessage
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input testoptimismgoerli_OriginTransfer_filter {
=======
input staginggoerli_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
=======
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
=======
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
=======
  agent: staginggoerli_Bytes
  agent_not: staginggoerli_Bytes
  agent_in: [staginggoerli_Bytes!]
  agent_not_in: [staginggoerli_Bytes!]
  agent_contains: staginggoerli_Bytes
  agent_not_contains: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  recovery_not: staginggoerli_Bytes
  recovery_in: [staginggoerli_Bytes!]
  recovery_not_in: [staginggoerli_Bytes!]
  recovery_contains: staginggoerli_Bytes
  recovery_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
=======
  callback: staginggoerli_Bytes
  callback_not: staginggoerli_Bytes
  callback_in: [staginggoerli_Bytes!]
  callback_not_in: [staginggoerli_Bytes!]
  callback_contains: staginggoerli_Bytes
  callback_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
=======
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
>>>>>>> 1807-xcall-interface
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
=======
  transactingAsset: staginggoerli_Bytes
  transactingAsset_not: staginggoerli_Bytes
  transactingAsset_in: [staginggoerli_Bytes!]
  transactingAsset_not_in: [staginggoerli_Bytes!]
  transactingAsset_contains: staginggoerli_Bytes
  transactingAsset_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAsset_not: testoptimismgoerli_Bytes
  bridgedAsset_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_not_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_contains: testoptimismgoerli_Bytes
  bridgedAsset_not_contains: testoptimismgoerli_Bytes
=======
  bridgedAsset: staginggoerli_Bytes
  bridgedAsset_not: staginggoerli_Bytes
  bridgedAsset_in: [staginggoerli_Bytes!]
  bridgedAsset_not_in: [staginggoerli_Bytes!]
  bridgedAsset_contains: staginggoerli_Bytes
  bridgedAsset_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
<<<<<<< HEAD
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  transactionHash_not: testoptimismgoerli_Bytes
  transactionHash_in: [testoptimismgoerli_Bytes!]
  transactionHash_not_in: [testoptimismgoerli_Bytes!]
  transactionHash_contains: testoptimismgoerli_Bytes
  transactionHash_not_contains: testoptimismgoerli_Bytes
=======
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: staginggoerli_OriginMessage_filter
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_OriginTransfer_orderBy {
=======
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OriginTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type testoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testoptimismgoerli_Bytes
}

input testoptimismgoerli_Relayer_filter {
=======
type staginggoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: staginggoerli_Bytes
}

input staginggoerli_Relayer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  relayer: testoptimismgoerli_Bytes
  relayer_not: testoptimismgoerli_Bytes
  relayer_in: [testoptimismgoerli_Bytes!]
  relayer_not_in: [testoptimismgoerli_Bytes!]
  relayer_contains: testoptimismgoerli_Bytes
  relayer_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Relayer_orderBy {
=======
  relayer: staginggoerli_Bytes
  relayer_not: staginggoerli_Bytes
  relayer_in: [staginggoerli_Bytes!]
  relayer_not_in: [staginggoerli_Bytes!]
  relayer_contains: staginggoerli_Bytes
  relayer_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Relayer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  relayer
}

<<<<<<< HEAD
type testoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_AssetBalance_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_AssetBalance_filter): [testoptimismgoerli_AssetBalance!]!
}

input testoptimismgoerli_Router_filter {
=======
type staginggoerli_RootMessageProcessed {
  id: ID!
  root: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input staginggoerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootMessageProcessed_orderBy {
  id
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type staginggoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input staginggoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type staginggoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_AssetBalance_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_AssetBalance_filter): [staginggoerli_AssetBalance!]!
}

input staginggoerli_Router_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  owner: testoptimismgoerli_Bytes
  owner_not: testoptimismgoerli_Bytes
  owner_in: [testoptimismgoerli_Bytes!]
  owner_not_in: [testoptimismgoerli_Bytes!]
  owner_contains: testoptimismgoerli_Bytes
  owner_not_contains: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  recipient_not: testoptimismgoerli_Bytes
  recipient_in: [testoptimismgoerli_Bytes!]
  recipient_not_in: [testoptimismgoerli_Bytes!]
  recipient_contains: testoptimismgoerli_Bytes
  recipient_not_contains: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedOwner_not: testoptimismgoerli_Bytes
  proposedOwner_in: [testoptimismgoerli_Bytes!]
  proposedOwner_not_in: [testoptimismgoerli_Bytes!]
  proposedOwner_contains: testoptimismgoerli_Bytes
  proposedOwner_not_contains: testoptimismgoerli_Bytes
=======
  owner: staginggoerli_Bytes
  owner_not: staginggoerli_Bytes
  owner_in: [staginggoerli_Bytes!]
  owner_not_in: [staginggoerli_Bytes!]
  owner_contains: staginggoerli_Bytes
  owner_not_contains: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  recipient_not: staginggoerli_Bytes
  recipient_in: [staginggoerli_Bytes!]
  recipient_not_in: [staginggoerli_Bytes!]
  recipient_contains: staginggoerli_Bytes
  recipient_not_contains: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedOwner_not: staginggoerli_Bytes
  proposedOwner_in: [staginggoerli_Bytes!]
  proposedOwner_not_in: [staginggoerli_Bytes!]
  proposedOwner_contains: staginggoerli_Bytes
  proposedOwner_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
<<<<<<< HEAD
  assetBalances_: testoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Router_orderBy {
=======
  assetBalances_: staginggoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Router_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

<<<<<<< HEAD
type testoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_Setting_filter {
=======
type staginggoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: staginggoerli_Bytes!
}

input staginggoerli_Setting_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
<<<<<<< HEAD
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Setting_orderBy {
=======
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Setting_orderBy {
>>>>>>> 1807-xcall-interface
  id
  maxRoutersPerTransfer
  caller
}

<<<<<<< HEAD
type testoptimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_SponsorVault_filter {
=======
type staginggoerli_SponsorVault {
  id: ID!
  sponsorVault: staginggoerli_Bytes!
}

input staginggoerli_SponsorVault_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  sponsorVault: testoptimismgoerli_Bytes
  sponsorVault_not: testoptimismgoerli_Bytes
  sponsorVault_in: [testoptimismgoerli_Bytes!]
  sponsorVault_not_in: [testoptimismgoerli_Bytes!]
  sponsorVault_contains: testoptimismgoerli_Bytes
  sponsorVault_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_SponsorVault_orderBy {
=======
  sponsorVault: staginggoerli_Bytes
  sponsorVault_not: staginggoerli_Bytes
  sponsorVault_in: [staginggoerli_Bytes!]
  sponsorVault_not_in: [staginggoerli_Bytes!]
  sponsorVault_contains: staginggoerli_Bytes
  sponsorVault_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_SponsorVault_orderBy {
>>>>>>> 1807-xcall-interface
  id
  sponsorVault
}

<<<<<<< HEAD
type testoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: testoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_StableSwap_filter {
=======
type staginggoerli_StableSwap {
  id: ID!
  canonicalId: staginggoerli_Bytes!
  domain: BigInt
  swapPool: staginggoerli_Bytes!
}

input staginggoerli_StableSwap_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
=======
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
<<<<<<< HEAD
  swapPool: testoptimismgoerli_Bytes
  swapPool_not: testoptimismgoerli_Bytes
  swapPool_in: [testoptimismgoerli_Bytes!]
  swapPool_not_in: [testoptimismgoerli_Bytes!]
  swapPool_contains: testoptimismgoerli_Bytes
  swapPool_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_StableSwap_orderBy {
=======
  swapPool: staginggoerli_Bytes
  swapPool_not: staginggoerli_Bytes
  swapPool_in: [staginggoerli_Bytes!]
  swapPool_not_in: [staginggoerli_Bytes!]
  swapPool_contains: staginggoerli_Bytes
  swapPool_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_StableSwap_orderBy {
>>>>>>> 1807-xcall-interface
  id
  canonicalId
  domain
  swapPool
}

<<<<<<< HEAD
enum testoptimismgoerli_TransferStatus {
=======
enum staginggoerli_TransferStatus {
>>>>>>> 1807-xcall-interface
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

<<<<<<< HEAD
type testoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: testoptimismgoerli_Bytes
=======
type staginggoerli__Block_ {
  """The hash of the block"""
  hash: staginggoerli_Bytes
>>>>>>> 1807-xcall-interface
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
<<<<<<< HEAD
type testoptimismgoerli__Meta_ {
=======
type staginggoerli__Meta_ {
>>>>>>> 1807-xcall-interface
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
<<<<<<< HEAD
  block: testoptimismgoerli__Block_!
=======
  block: staginggoerli__Block_!
>>>>>>> 1807-xcall-interface
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

<<<<<<< HEAD
type local1338_Asset {
  id: ID!
  key: local1338_Bytes
  local: local1338_Bytes!
  adoptedAsset: local1338_Bytes!
  canonicalId: local1338_Bytes!
=======
type local1337_Asset {
  id: ID!
  key: local1337_Bytes
  local: local1337_Bytes!
  adoptedAsset: local1337_Bytes!
  canonicalId: local1337_Bytes!
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

<<<<<<< HEAD
type local1338_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1338_Router!
  asset: local1338_Asset!
}

input local1338_AssetBalance_filter {
=======
type local1337_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1337_Router!
  asset: local1337_Asset!
}

input local1337_AssetBalance_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
<<<<<<< HEAD
  router_: local1338_Router_filter
=======
  router_: local1337_Router_filter
>>>>>>> 1807-xcall-interface
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
<<<<<<< HEAD
  asset_: local1338_Asset_filter
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input local1338_Asset_filter {
=======
  asset_: local1337_Asset_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input local1337_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  key: local1338_Bytes
  key_not: local1338_Bytes
  key_in: [local1338_Bytes!]
  key_not_in: [local1338_Bytes!]
  key_contains: local1338_Bytes
  key_not_contains: local1338_Bytes
  local: local1338_Bytes
  local_not: local1338_Bytes
  local_in: [local1338_Bytes!]
  local_not_in: [local1338_Bytes!]
  local_contains: local1338_Bytes
  local_not_contains: local1338_Bytes
  adoptedAsset: local1338_Bytes
  adoptedAsset_not: local1338_Bytes
  adoptedAsset_in: [local1338_Bytes!]
  adoptedAsset_not_in: [local1338_Bytes!]
  adoptedAsset_contains: local1338_Bytes
  adoptedAsset_not_contains: local1338_Bytes
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
=======
  key: local1337_Bytes
  key_not: local1337_Bytes
  key_in: [local1337_Bytes!]
  key_not_in: [local1337_Bytes!]
  key_contains: local1337_Bytes
  key_not_contains: local1337_Bytes
  local: local1337_Bytes
  local_not: local1337_Bytes
  local_in: [local1337_Bytes!]
  local_not_in: [local1337_Bytes!]
  local_contains: local1337_Bytes
  local_not_contains: local1337_Bytes
  adoptedAsset: local1337_Bytes
  adoptedAsset_not: local1337_Bytes
  adoptedAsset_in: [local1337_Bytes!]
  adoptedAsset_not_in: [local1337_Bytes!]
  adoptedAsset_contains: local1337_Bytes
  adoptedAsset_not_contains: local1337_Bytes
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Asset_orderBy {
=======
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Asset_orderBy {
>>>>>>> 1807-xcall-interface
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

<<<<<<< HEAD
scalar local1338_BigDecimal

input local1338_BlockChangedFilter {
  number_gte: Int!
}

input local1338_Block_height {
  hash: local1338_Bytes
=======
scalar local1337_BigDecimal

input local1337_BlockChangedFilter {
  number_gte: Int!
}

input local1337_Block_height {
  hash: local1337_Bytes
>>>>>>> 1807-xcall-interface
  number: Int
  number_gte: Int
}

<<<<<<< HEAD
scalar local1338_Bytes

type local1338_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1338_Bytes
  nonce: BigInt
  to: local1338_Bytes
  callData: local1338_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1338_Bytes
  recovery: local1338_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1338_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1338_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1338_Router_orderBy, orderDirection: local1338_OrderDirection, where: local1338_Router_filter): [local1338_Router!]
  originSender: local1338_Bytes
  transactingAsset: local1338_Bytes
  transactingAmount: BigInt
  localAsset: local1338_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: local1338_Bytes
  executedTransactionHash: local1338_Bytes
=======
scalar local1337_Bytes

type local1337_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  to: local1337_Bytes
  callData: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1337_Bytes
  recovery: local1337_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1337_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1337_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1337_Router_orderBy, orderDirection: local1337_OrderDirection, where: local1337_Router_filter): [local1337_Router!]
  originSender: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAmount: BigInt
  localAsset: local1337_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: local1337_Bytes
  executedTransactionHash: local1337_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
<<<<<<< HEAD
  reconciledCaller: local1338_Bytes
  reconciledTransactionHash: local1338_Bytes
=======
  reconciledCaller: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

<<<<<<< HEAD
input local1338_DestinationTransfer_filter {
=======
input local1337_DestinationTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
=======
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: local1338_Bytes
  to_not: local1338_Bytes
  to_in: [local1338_Bytes!]
  to_not_in: [local1338_Bytes!]
  to_contains: local1338_Bytes
  to_not_contains: local1338_Bytes
  callData: local1338_Bytes
  callData_not: local1338_Bytes
  callData_in: [local1338_Bytes!]
  callData_not_in: [local1338_Bytes!]
  callData_contains: local1338_Bytes
  callData_not_contains: local1338_Bytes
=======
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: local1338_Bytes
  agent_not: local1338_Bytes
  agent_in: [local1338_Bytes!]
  agent_not_in: [local1338_Bytes!]
  agent_contains: local1338_Bytes
  agent_not_contains: local1338_Bytes
  recovery: local1338_Bytes
  recovery_not: local1338_Bytes
  recovery_in: [local1338_Bytes!]
  recovery_not_in: [local1338_Bytes!]
  recovery_contains: local1338_Bytes
  recovery_not_contains: local1338_Bytes
=======
  agent: local1337_Bytes
  agent_not: local1337_Bytes
  agent_in: [local1337_Bytes!]
  agent_not_in: [local1337_Bytes!]
  agent_contains: local1337_Bytes
  agent_not_contains: local1337_Bytes
  recovery: local1337_Bytes
  recovery_not: local1337_Bytes
  recovery_in: [local1337_Bytes!]
  recovery_not_in: [local1337_Bytes!]
  recovery_contains: local1337_Bytes
  recovery_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: local1338_Bytes
  callback_not: local1338_Bytes
  callback_in: [local1338_Bytes!]
  callback_not_in: [local1338_Bytes!]
  callback_contains: local1338_Bytes
  callback_not_contains: local1338_Bytes
=======
  callback: local1337_Bytes
  callback_not: local1337_Bytes
  callback_in: [local1337_Bytes!]
  callback_not_in: [local1337_Bytes!]
  callback_contains: local1337_Bytes
  callback_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: local1338_TransferStatus
  status_not: local1338_TransferStatus
  status_in: [local1338_TransferStatus!]
  status_not_in: [local1338_TransferStatus!]
=======
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
>>>>>>> 1807-xcall-interface
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
<<<<<<< HEAD
  routers_: local1338_Router_filter
  originSender: local1338_Bytes
  originSender_not: local1338_Bytes
  originSender_in: [local1338_Bytes!]
  originSender_not_in: [local1338_Bytes!]
  originSender_contains: local1338_Bytes
  originSender_not_contains: local1338_Bytes
  transactingAsset: local1338_Bytes
  transactingAsset_not: local1338_Bytes
  transactingAsset_in: [local1338_Bytes!]
  transactingAsset_not_in: [local1338_Bytes!]
  transactingAsset_contains: local1338_Bytes
  transactingAsset_not_contains: local1338_Bytes
=======
  routers_: local1337_Router_filter
  originSender: local1337_Bytes
  originSender_not: local1337_Bytes
  originSender_in: [local1337_Bytes!]
  originSender_not_in: [local1337_Bytes!]
  originSender_contains: local1337_Bytes
  originSender_not_contains: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAsset_not: local1337_Bytes
  transactingAsset_in: [local1337_Bytes!]
  transactingAsset_not_in: [local1337_Bytes!]
  transactingAsset_contains: local1337_Bytes
  transactingAsset_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  localAsset: local1338_Bytes
  localAsset_not: local1338_Bytes
  localAsset_in: [local1338_Bytes!]
  localAsset_not_in: [local1338_Bytes!]
  localAsset_contains: local1338_Bytes
  localAsset_not_contains: local1338_Bytes
=======
  localAsset: local1337_Bytes
  localAsset_not: local1337_Bytes
  localAsset_in: [local1337_Bytes!]
  localAsset_not_in: [local1337_Bytes!]
  localAsset_contains: local1337_Bytes
  localAsset_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  executedCaller: local1338_Bytes
  executedCaller_not: local1338_Bytes
  executedCaller_in: [local1338_Bytes!]
  executedCaller_not_in: [local1338_Bytes!]
  executedCaller_contains: local1338_Bytes
  executedCaller_not_contains: local1338_Bytes
  executedTransactionHash: local1338_Bytes
  executedTransactionHash_not: local1338_Bytes
  executedTransactionHash_in: [local1338_Bytes!]
  executedTransactionHash_not_in: [local1338_Bytes!]
  executedTransactionHash_contains: local1338_Bytes
  executedTransactionHash_not_contains: local1338_Bytes
=======
  executedCaller: local1337_Bytes
  executedCaller_not: local1337_Bytes
  executedCaller_in: [local1337_Bytes!]
  executedCaller_not_in: [local1337_Bytes!]
  executedCaller_contains: local1337_Bytes
  executedCaller_not_contains: local1337_Bytes
  executedTransactionHash: local1337_Bytes
  executedTransactionHash_not: local1337_Bytes
  executedTransactionHash_in: [local1337_Bytes!]
  executedTransactionHash_not_in: [local1337_Bytes!]
  executedTransactionHash_contains: local1337_Bytes
  executedTransactionHash_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
<<<<<<< HEAD
  reconciledCaller: local1338_Bytes
  reconciledCaller_not: local1338_Bytes
  reconciledCaller_in: [local1338_Bytes!]
  reconciledCaller_not_in: [local1338_Bytes!]
  reconciledCaller_contains: local1338_Bytes
  reconciledCaller_not_contains: local1338_Bytes
  reconciledTransactionHash: local1338_Bytes
  reconciledTransactionHash_not: local1338_Bytes
  reconciledTransactionHash_in: [local1338_Bytes!]
  reconciledTransactionHash_not_in: [local1338_Bytes!]
  reconciledTransactionHash_contains: local1338_Bytes
  reconciledTransactionHash_not_contains: local1338_Bytes
=======
  reconciledCaller: local1337_Bytes
  reconciledCaller_not: local1337_Bytes
  reconciledCaller_in: [local1337_Bytes!]
  reconciledCaller_not_in: [local1337_Bytes!]
  reconciledCaller_contains: local1337_Bytes
  reconciledCaller_not_contains: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
  reconciledTransactionHash_not: local1337_Bytes
  reconciledTransactionHash_in: [local1337_Bytes!]
  reconciledTransactionHash_not_in: [local1337_Bytes!]
  reconciledTransactionHash_contains: local1337_Bytes
  reconciledTransactionHash_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: local1338_BlockChangedFilter
}

enum local1338_DestinationTransfer_orderBy {
=======
  _change_block: local1337_BlockChangedFilter
}

enum local1337_DestinationTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
<<<<<<< HEAD
enum local1338_OrderDirection {
=======
enum local1337_OrderDirection {
>>>>>>> 1807-xcall-interface
  asc
  desc
}

<<<<<<< HEAD
type local1338_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1338_Bytes
  nonce: BigInt
  to: local1338_Bytes
  callData: local1338_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1338_Bytes
  recovery: local1338_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1338_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1338_TransferStatus
  originMinOut: BigInt
  transactingAsset: local1338_Bytes
  transactingAmount: BigInt
  bridgedAsset: local1338_Bytes
  bridgedAmount: BigInt
  caller: local1338_Bytes
  transactionHash: local1338_Bytes
=======
type local1337_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  to: local1337_Bytes
  callData: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1337_Bytes
  recovery: local1337_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1337_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1337_TransferStatus
  originMinOut: BigInt
  transactingAsset: local1337_Bytes
  transactingAmount: BigInt
  bridgedAsset: local1337_Bytes
  bridgedAmount: BigInt
  caller: local1337_Bytes
  transactionHash: local1337_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input local1338_OriginTransfer_filter {
=======
input local1337_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
=======
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: local1338_Bytes
  to_not: local1338_Bytes
  to_in: [local1338_Bytes!]
  to_not_in: [local1338_Bytes!]
  to_contains: local1338_Bytes
  to_not_contains: local1338_Bytes
  callData: local1338_Bytes
  callData_not: local1338_Bytes
  callData_in: [local1338_Bytes!]
  callData_not_in: [local1338_Bytes!]
  callData_contains: local1338_Bytes
  callData_not_contains: local1338_Bytes
=======
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: local1338_Bytes
  agent_not: local1338_Bytes
  agent_in: [local1338_Bytes!]
  agent_not_in: [local1338_Bytes!]
  agent_contains: local1338_Bytes
  agent_not_contains: local1338_Bytes
  recovery: local1338_Bytes
  recovery_not: local1338_Bytes
  recovery_in: [local1338_Bytes!]
  recovery_not_in: [local1338_Bytes!]
  recovery_contains: local1338_Bytes
  recovery_not_contains: local1338_Bytes
=======
  agent: local1337_Bytes
  agent_not: local1337_Bytes
  agent_in: [local1337_Bytes!]
  agent_not_in: [local1337_Bytes!]
  agent_contains: local1337_Bytes
  agent_not_contains: local1337_Bytes
  recovery: local1337_Bytes
  recovery_not: local1337_Bytes
  recovery_in: [local1337_Bytes!]
  recovery_not_in: [local1337_Bytes!]
  recovery_contains: local1337_Bytes
  recovery_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: local1338_Bytes
  callback_not: local1338_Bytes
  callback_in: [local1338_Bytes!]
  callback_not_in: [local1338_Bytes!]
  callback_contains: local1338_Bytes
  callback_not_contains: local1338_Bytes
=======
  callback: local1337_Bytes
  callback_not: local1337_Bytes
  callback_in: [local1337_Bytes!]
  callback_not_in: [local1337_Bytes!]
  callback_contains: local1337_Bytes
  callback_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: local1338_TransferStatus
  status_not: local1338_TransferStatus
  status_in: [local1338_TransferStatus!]
  status_not_in: [local1338_TransferStatus!]
=======
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
>>>>>>> 1807-xcall-interface
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  transactingAsset: local1338_Bytes
  transactingAsset_not: local1338_Bytes
  transactingAsset_in: [local1338_Bytes!]
  transactingAsset_not_in: [local1338_Bytes!]
  transactingAsset_contains: local1338_Bytes
  transactingAsset_not_contains: local1338_Bytes
=======
  transactingAsset: local1337_Bytes
  transactingAsset_not: local1337_Bytes
  transactingAsset_in: [local1337_Bytes!]
  transactingAsset_not_in: [local1337_Bytes!]
  transactingAsset_contains: local1337_Bytes
  transactingAsset_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  bridgedAsset: local1338_Bytes
  bridgedAsset_not: local1338_Bytes
  bridgedAsset_in: [local1338_Bytes!]
  bridgedAsset_not_in: [local1338_Bytes!]
  bridgedAsset_contains: local1338_Bytes
  bridgedAsset_not_contains: local1338_Bytes
=======
  bridgedAsset: local1337_Bytes
  bridgedAsset_not: local1337_Bytes
  bridgedAsset_in: [local1337_Bytes!]
  bridgedAsset_not_in: [local1337_Bytes!]
  bridgedAsset_contains: local1337_Bytes
  bridgedAsset_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
<<<<<<< HEAD
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  transactionHash: local1338_Bytes
  transactionHash_not: local1338_Bytes
  transactionHash_in: [local1338_Bytes!]
  transactionHash_not_in: [local1338_Bytes!]
  transactionHash_contains: local1338_Bytes
  transactionHash_not_contains: local1338_Bytes
=======
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  transactionHash: local1337_Bytes
  transactionHash_not: local1337_Bytes
  transactionHash_in: [local1337_Bytes!]
  transactionHash_not_in: [local1337_Bytes!]
  transactionHash_contains: local1337_Bytes
  transactionHash_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: local1338_BlockChangedFilter
}

enum local1338_OriginTransfer_orderBy {
=======
  _change_block: local1337_BlockChangedFilter
}

enum local1337_OriginTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type local1338_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1338_Bytes
}

input local1338_Relayer_filter {
=======
type local1337_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1337_Bytes
}

input local1337_Relayer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  relayer: local1338_Bytes
  relayer_not: local1338_Bytes
  relayer_in: [local1338_Bytes!]
  relayer_not_in: [local1338_Bytes!]
  relayer_contains: local1338_Bytes
  relayer_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Relayer_orderBy {
=======
  relayer: local1337_Bytes
  relayer_not: local1337_Bytes
  relayer_in: [local1337_Bytes!]
  relayer_not_in: [local1337_Bytes!]
  relayer_contains: local1337_Bytes
  relayer_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Relayer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  relayer
}

<<<<<<< HEAD
type local1338_Router {
  id: ID!
  isActive: Boolean!
  owner: local1338_Bytes
  recipient: local1338_Bytes
  proposedOwner: local1338_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1338_AssetBalance_orderBy, orderDirection: local1338_OrderDirection, where: local1338_AssetBalance_filter): [local1338_AssetBalance!]!
}

input local1338_Router_filter {
=======
type local1337_Router {
  id: ID!
  isActive: Boolean!
  owner: local1337_Bytes
  recipient: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1337_AssetBalance_orderBy, orderDirection: local1337_OrderDirection, where: local1337_AssetBalance_filter): [local1337_AssetBalance!]!
}

input local1337_Router_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  owner: local1338_Bytes
  owner_not: local1338_Bytes
  owner_in: [local1338_Bytes!]
  owner_not_in: [local1338_Bytes!]
  owner_contains: local1338_Bytes
  owner_not_contains: local1338_Bytes
  recipient: local1338_Bytes
  recipient_not: local1338_Bytes
  recipient_in: [local1338_Bytes!]
  recipient_not_in: [local1338_Bytes!]
  recipient_contains: local1338_Bytes
  recipient_not_contains: local1338_Bytes
  proposedOwner: local1338_Bytes
  proposedOwner_not: local1338_Bytes
  proposedOwner_in: [local1338_Bytes!]
  proposedOwner_not_in: [local1338_Bytes!]
  proposedOwner_contains: local1338_Bytes
  proposedOwner_not_contains: local1338_Bytes
=======
  owner: local1337_Bytes
  owner_not: local1337_Bytes
  owner_in: [local1337_Bytes!]
  owner_not_in: [local1337_Bytes!]
  owner_contains: local1337_Bytes
  owner_not_contains: local1337_Bytes
  recipient: local1337_Bytes
  recipient_not: local1337_Bytes
  recipient_in: [local1337_Bytes!]
  recipient_not_in: [local1337_Bytes!]
  recipient_contains: local1337_Bytes
  recipient_not_contains: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedOwner_not: local1337_Bytes
  proposedOwner_in: [local1337_Bytes!]
  proposedOwner_not_in: [local1337_Bytes!]
  proposedOwner_contains: local1337_Bytes
  proposedOwner_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
<<<<<<< HEAD
  assetBalances_: local1338_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Router_orderBy {
=======
  assetBalances_: local1337_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Router_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

<<<<<<< HEAD
type local1338_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1338_Bytes!
}

input local1338_Setting_filter {
=======
type local1337_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1337_Bytes!
}

input local1337_Setting_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
<<<<<<< HEAD
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Setting_orderBy {
=======
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Setting_orderBy {
>>>>>>> 1807-xcall-interface
  id
  maxRoutersPerTransfer
  caller
}

<<<<<<< HEAD
type local1338_SponsorVault {
  id: ID!
  sponsorVault: local1338_Bytes!
}

input local1338_SponsorVault_filter {
=======
type local1337_SponsorVault {
  id: ID!
  sponsorVault: local1337_Bytes!
}

input local1337_SponsorVault_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  sponsorVault: local1338_Bytes
  sponsorVault_not: local1338_Bytes
  sponsorVault_in: [local1338_Bytes!]
  sponsorVault_not_in: [local1338_Bytes!]
  sponsorVault_contains: local1338_Bytes
  sponsorVault_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_SponsorVault_orderBy {
=======
  sponsorVault: local1337_Bytes
  sponsorVault_not: local1337_Bytes
  sponsorVault_in: [local1337_Bytes!]
  sponsorVault_not_in: [local1337_Bytes!]
  sponsorVault_contains: local1337_Bytes
  sponsorVault_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_SponsorVault_orderBy {
>>>>>>> 1807-xcall-interface
  id
  sponsorVault
}

<<<<<<< HEAD
type local1338_StableSwap {
  id: ID!
  canonicalId: local1338_Bytes!
  domain: BigInt
  swapPool: local1338_Bytes!
}

input local1338_StableSwap_filter {
=======
type local1337_StableSwap {
  id: ID!
  canonicalId: local1337_Bytes!
  domain: BigInt
  swapPool: local1337_Bytes!
}

input local1337_StableSwap_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
=======
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
>>>>>>> 1807-xcall-interface
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
<<<<<<< HEAD
  swapPool: local1338_Bytes
  swapPool_not: local1338_Bytes
  swapPool_in: [local1338_Bytes!]
  swapPool_not_in: [local1338_Bytes!]
  swapPool_contains: local1338_Bytes
  swapPool_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_StableSwap_orderBy {
=======
  swapPool: local1337_Bytes
  swapPool_not: local1337_Bytes
  swapPool_in: [local1337_Bytes!]
  swapPool_not_in: [local1337_Bytes!]
  swapPool_contains: local1337_Bytes
  swapPool_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwap_orderBy {
>>>>>>> 1807-xcall-interface
  id
  canonicalId
  domain
  swapPool
}

<<<<<<< HEAD
enum local1338_TransferStatus {
=======
enum local1337_TransferStatus {
>>>>>>> 1807-xcall-interface
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

<<<<<<< HEAD
type local1338__Block_ {
  """The hash of the block"""
  hash: local1338_Bytes
=======
type local1337__Block_ {
  """The hash of the block"""
  hash: local1337_Bytes
>>>>>>> 1807-xcall-interface
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
<<<<<<< HEAD
type local1338__Meta_ {
=======
type local1337__Meta_ {
>>>>>>> 1807-xcall-interface
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
<<<<<<< HEAD
  block: local1338__Block_!
=======
  block: local1337__Block_!
>>>>>>> 1807-xcall-interface
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

<<<<<<< HEAD
type goerli_AggregateRoot {
  id: ID!
  root: goerli_Bytes!
}

input goerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AggregateRoot_orderBy {
  id
  root
}

type goerli_Asset {
  id: ID!
  key: goerli_Bytes
  local: goerli_Bytes!
  adoptedAsset: goerli_Bytes!
  canonicalId: goerli_Bytes!
=======
type testoptimismgoerli_Asset {
  id: ID!
  key: testoptimismgoerli_Bytes
  local: testoptimismgoerli_Bytes!
  adoptedAsset: testoptimismgoerli_Bytes!
  canonicalId: testoptimismgoerli_Bytes!
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

<<<<<<< HEAD
type goerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: goerli_Router!
  asset: goerli_Asset!
}

input goerli_AssetBalance_filter {
=======
type testoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testoptimismgoerli_Router!
  asset: testoptimismgoerli_Asset!
}

input testoptimismgoerli_AssetBalance_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
<<<<<<< HEAD
  router_: goerli_Router_filter
=======
  router_: testoptimismgoerli_Router_filter
>>>>>>> 1807-xcall-interface
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
<<<<<<< HEAD
  asset_: goerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AssetBalance_orderBy {
=======
  asset_: testoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_AssetBalance_orderBy {
>>>>>>> 1807-xcall-interface
  id
  amount
  router
  asset
}

<<<<<<< HEAD
input goerli_Asset_filter {
=======
input testoptimismgoerli_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  key: goerli_Bytes
  key_not: goerli_Bytes
  key_in: [goerli_Bytes!]
  key_not_in: [goerli_Bytes!]
  key_contains: goerli_Bytes
  key_not_contains: goerli_Bytes
  local: goerli_Bytes
  local_not: goerli_Bytes
  local_in: [goerli_Bytes!]
  local_not_in: [goerli_Bytes!]
  local_contains: goerli_Bytes
  local_not_contains: goerli_Bytes
  adoptedAsset: goerli_Bytes
  adoptedAsset_not: goerli_Bytes
  adoptedAsset_in: [goerli_Bytes!]
  adoptedAsset_not_in: [goerli_Bytes!]
  adoptedAsset_contains: goerli_Bytes
  adoptedAsset_not_contains: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
=======
  key: testoptimismgoerli_Bytes
  key_not: testoptimismgoerli_Bytes
  key_in: [testoptimismgoerli_Bytes!]
  key_not_in: [testoptimismgoerli_Bytes!]
  key_contains: testoptimismgoerli_Bytes
  key_not_contains: testoptimismgoerli_Bytes
  local: testoptimismgoerli_Bytes
  local_not: testoptimismgoerli_Bytes
  local_in: [testoptimismgoerli_Bytes!]
  local_not_in: [testoptimismgoerli_Bytes!]
  local_contains: testoptimismgoerli_Bytes
  local_not_contains: testoptimismgoerli_Bytes
  adoptedAsset: testoptimismgoerli_Bytes
  adoptedAsset_not: testoptimismgoerli_Bytes
  adoptedAsset_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_contains: testoptimismgoerli_Bytes
  adoptedAsset_not_contains: testoptimismgoerli_Bytes
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar goerli_BigDecimal

input goerli_BlockChangedFilter {
  number_gte: Int!
}

input goerli_Block_height {
  hash: goerli_Bytes
  number: Int
  number_gte: Int
}

scalar goerli_Bytes

type goerli_DestinationMessage {
  id: ID!
  leaf: goerli_Bytes
  processed: Boolean
  returnData: goerli_Bytes
  transactionHash: goerli_Bytes
}

input goerli_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: goerli_Bytes
  leaf_not: goerli_Bytes
  leaf_in: [goerli_Bytes!]
  leaf_not_in: [goerli_Bytes!]
  leaf_contains: goerli_Bytes
  leaf_not_contains: goerli_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: goerli_Bytes
  returnData_not: goerli_Bytes
  returnData_in: [goerli_Bytes!]
  returnData_not_in: [goerli_Bytes!]
  returnData_contains: goerli_Bytes
  returnData_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  transactionHash
}

type goerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  to: goerli_Bytes
  callData: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: goerli_Bytes
  recovery: goerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: goerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: goerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: goerli_Router_orderBy, orderDirection: goerli_OrderDirection, where: goerli_Router_filter): [goerli_Router!]
  originSender: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAmount: BigInt
  localAsset: goerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input goerli_DestinationTransfer_filter {
=======
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar testoptimismgoerli_BigDecimal

input testoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testoptimismgoerli_Block_height {
  hash: testoptimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testoptimismgoerli_Bytes

type testoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_Router_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_Router_filter): [testoptimismgoerli_Router!]
  originSender: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testoptimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input testoptimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: testoptimismgoerli_Router_filter
  originSender: testoptimismgoerli_Bytes
  originSender_not: testoptimismgoerli_Bytes
  originSender_in: [testoptimismgoerli_Bytes!]
  originSender_not_in: [testoptimismgoerli_Bytes!]
  originSender_contains: testoptimismgoerli_Bytes
  originSender_not_contains: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: testoptimismgoerli_Bytes
  localAsset_not: testoptimismgoerli_Bytes
  localAsset_in: [testoptimismgoerli_Bytes!]
  localAsset_not_in: [testoptimismgoerli_Bytes!]
  localAsset_contains: testoptimismgoerli_Bytes
  localAsset_not_contains: testoptimismgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: testoptimismgoerli_Bytes
  executedCaller_not: testoptimismgoerli_Bytes
  executedCaller_in: [testoptimismgoerli_Bytes!]
  executedCaller_not_in: [testoptimismgoerli_Bytes!]
  executedCaller_contains: testoptimismgoerli_Bytes
  executedCaller_not_contains: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTransactionHash_not: testoptimismgoerli_Bytes
  executedTransactionHash_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_contains: testoptimismgoerli_Bytes
  executedTransactionHash_not_contains: testoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledCaller_not: testoptimismgoerli_Bytes
  reconciledCaller_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_contains: testoptimismgoerli_Bytes
  reconciledCaller_not_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTransactionHash_not: testoptimismgoerli_Bytes
  reconciledTransactionHash_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: testoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum testoptimismgoerli_OrderDirection {
  asc
  desc
}

type testoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  caller: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testoptimismgoerli_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
=======
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
=======
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: goerli_Bytes
  agent_not: goerli_Bytes
  agent_in: [goerli_Bytes!]
  agent_not_in: [goerli_Bytes!]
  agent_contains: goerli_Bytes
  agent_not_contains: goerli_Bytes
  recovery: goerli_Bytes
  recovery_not: goerli_Bytes
  recovery_in: [goerli_Bytes!]
  recovery_not_in: [goerli_Bytes!]
  recovery_contains: goerli_Bytes
  recovery_not_contains: goerli_Bytes
=======
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: goerli_Bytes
  callback_not: goerli_Bytes
  callback_in: [goerli_Bytes!]
  callback_not_in: [goerli_Bytes!]
  callback_contains: goerli_Bytes
  callback_not_contains: goerli_Bytes
=======
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: goerli_Router_filter
  originSender: goerli_Bytes
  originSender_not: goerli_Bytes
  originSender_in: [goerli_Bytes!]
  originSender_not_in: [goerli_Bytes!]
  originSender_contains: goerli_Bytes
  originSender_not_contains: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAsset_not: goerli_Bytes
  transactingAsset_in: [goerli_Bytes!]
  transactingAsset_not_in: [goerli_Bytes!]
  transactingAsset_contains: goerli_Bytes
  transactingAsset_not_contains: goerli_Bytes
=======
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  localAsset: goerli_Bytes
  localAsset_not: goerli_Bytes
  localAsset_in: [goerli_Bytes!]
  localAsset_not_in: [goerli_Bytes!]
  localAsset_contains: goerli_Bytes
  localAsset_not_contains: goerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: goerli_Bytes
  executedCaller_not: goerli_Bytes
  executedCaller_in: [goerli_Bytes!]
  executedCaller_not_in: [goerli_Bytes!]
  executedCaller_contains: goerli_Bytes
  executedCaller_not_contains: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTransactionHash_not: goerli_Bytes
  executedTransactionHash_in: [goerli_Bytes!]
  executedTransactionHash_not_in: [goerli_Bytes!]
  executedTransactionHash_contains: goerli_Bytes
  executedTransactionHash_not_contains: goerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: goerli_Bytes
  reconciledCaller_not: goerli_Bytes
  reconciledCaller_in: [goerli_Bytes!]
  reconciledCaller_not_in: [goerli_Bytes!]
  reconciledCaller_contains: goerli_Bytes
  reconciledCaller_not_contains: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTransactionHash_not: goerli_Bytes
  reconciledTransactionHash_in: [goerli_Bytes!]
  reconciledTransactionHash_not_in: [goerli_Bytes!]
  reconciledTransactionHash_contains: goerli_Bytes
  reconciledTransactionHash_not_contains: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum goerli_OrderDirection {
  asc
  desc
}

type goerli_OriginMessage {
  id: ID!
  transferId: goerli_Bytes
  destinationDomain: BigInt
  leaf: goerli_Bytes
  index: BigInt
  root: goerli_Bytes
  message: goerli_Bytes
  transactionHash: goerli_Bytes
}

input goerli_OriginMessage_filter {
=======
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAsset_not: testoptimismgoerli_Bytes
  bridgedAsset_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_not_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_contains: testoptimismgoerli_Bytes
  bridgedAsset_not_contains: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  transactionHash_not: testoptimismgoerli_Bytes
  transactionHash_in: [testoptimismgoerli_Bytes!]
  transactionHash_not_in: [testoptimismgoerli_Bytes!]
  transactionHash_contains: testoptimismgoerli_Bytes
  transactionHash_not_contains: testoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type testoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testoptimismgoerli_Bytes
}

input testoptimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: testoptimismgoerli_Bytes
  relayer_not: testoptimismgoerli_Bytes
  relayer_in: [testoptimismgoerli_Bytes!]
  relayer_not_in: [testoptimismgoerli_Bytes!]
  relayer_contains: testoptimismgoerli_Bytes
  relayer_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type testoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_AssetBalance_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_AssetBalance_filter): [testoptimismgoerli_AssetBalance!]!
}

input testoptimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: testoptimismgoerli_Bytes
  owner_not: testoptimismgoerli_Bytes
  owner_in: [testoptimismgoerli_Bytes!]
  owner_not_in: [testoptimismgoerli_Bytes!]
  owner_contains: testoptimismgoerli_Bytes
  owner_not_contains: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  recipient_not: testoptimismgoerli_Bytes
  recipient_in: [testoptimismgoerli_Bytes!]
  recipient_not_in: [testoptimismgoerli_Bytes!]
  recipient_contains: testoptimismgoerli_Bytes
  recipient_not_contains: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedOwner_not: testoptimismgoerli_Bytes
  proposedOwner_in: [testoptimismgoerli_Bytes!]
  proposedOwner_not_in: [testoptimismgoerli_Bytes!]
  proposedOwner_contains: testoptimismgoerli_Bytes
  proposedOwner_not_contains: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: testoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type testoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type testoptimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: testoptimismgoerli_Bytes
  sponsorVault_not: testoptimismgoerli_Bytes
  sponsorVault_in: [testoptimismgoerli_Bytes!]
  sponsorVault_not_in: [testoptimismgoerli_Bytes!]
  sponsorVault_contains: testoptimismgoerli_Bytes
  sponsorVault_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type testoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: testoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: testoptimismgoerli_Bytes
  swapPool_not: testoptimismgoerli_Bytes
  swapPool_in: [testoptimismgoerli_Bytes!]
  swapPool_not_in: [testoptimismgoerli_Bytes!]
  swapPool_contains: testoptimismgoerli_Bytes
  swapPool_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
}

enum testoptimismgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum testoptimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: testoptimismgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type testoptimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testoptimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type local1338_Asset {
  id: ID!
  key: local1338_Bytes
  local: local1338_Bytes!
  adoptedAsset: local1338_Bytes!
  canonicalId: local1338_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type local1338_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1338_Router!
  asset: local1338_Asset!
}

input local1338_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: local1338_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: local1338_Asset_filter
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input local1338_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: goerli_Bytes
  leaf_not: goerli_Bytes
  leaf_in: [goerli_Bytes!]
  leaf_not_in: [goerli_Bytes!]
  leaf_contains: goerli_Bytes
  leaf_not_contains: goerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  message: goerli_Bytes
  message_not: goerli_Bytes
  message_in: [goerli_Bytes!]
  message_not_in: [goerli_Bytes!]
  message_contains: goerli_Bytes
  message_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

type goerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  to: goerli_Bytes
  callData: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: goerli_Bytes
  recovery: goerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: goerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: goerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: goerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: goerli_Bytes
  bridgedAmount: BigInt
  message: goerli_OriginMessage
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_OriginTransfer_filter {
=======
  key: local1338_Bytes
  key_not: local1338_Bytes
  key_in: [local1338_Bytes!]
  key_not_in: [local1338_Bytes!]
  key_contains: local1338_Bytes
  key_not_contains: local1338_Bytes
  local: local1338_Bytes
  local_not: local1338_Bytes
  local_in: [local1338_Bytes!]
  local_not_in: [local1338_Bytes!]
  local_contains: local1338_Bytes
  local_not_contains: local1338_Bytes
  adoptedAsset: local1338_Bytes
  adoptedAsset_not: local1338_Bytes
  adoptedAsset_in: [local1338_Bytes!]
  adoptedAsset_not_in: [local1338_Bytes!]
  adoptedAsset_contains: local1338_Bytes
  adoptedAsset_not_contains: local1338_Bytes
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar local1338_BigDecimal

input local1338_BlockChangedFilter {
  number_gte: Int!
}

input local1338_Block_height {
  hash: local1338_Bytes
  number: Int
  number_gte: Int
}

scalar local1338_Bytes

type local1338_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1338_Bytes
  nonce: BigInt
  to: local1338_Bytes
  callData: local1338_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1338_Bytes
  recovery: local1338_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1338_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1338_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1338_Router_orderBy, orderDirection: local1338_OrderDirection, where: local1338_Router_filter): [local1338_Router!]
  originSender: local1338_Bytes
  transactingAsset: local1338_Bytes
  transactingAmount: BigInt
  localAsset: local1338_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: local1338_Bytes
  executedTransactionHash: local1338_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: local1338_Bytes
  reconciledTransactionHash: local1338_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input local1338_DestinationTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
=======
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
=======
  to: local1338_Bytes
  to_not: local1338_Bytes
  to_in: [local1338_Bytes!]
  to_not_in: [local1338_Bytes!]
  to_contains: local1338_Bytes
  to_not_contains: local1338_Bytes
  callData: local1338_Bytes
  callData_not: local1338_Bytes
  callData_in: [local1338_Bytes!]
  callData_not_in: [local1338_Bytes!]
  callData_contains: local1338_Bytes
  callData_not_contains: local1338_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: goerli_Bytes
  agent_not: goerli_Bytes
  agent_in: [goerli_Bytes!]
  agent_not_in: [goerli_Bytes!]
  agent_contains: goerli_Bytes
  agent_not_contains: goerli_Bytes
  recovery: goerli_Bytes
  recovery_not: goerli_Bytes
  recovery_in: [goerli_Bytes!]
  recovery_not_in: [goerli_Bytes!]
  recovery_contains: goerli_Bytes
  recovery_not_contains: goerli_Bytes
=======
  agent: local1338_Bytes
  agent_not: local1338_Bytes
  agent_in: [local1338_Bytes!]
  agent_not_in: [local1338_Bytes!]
  agent_contains: local1338_Bytes
  agent_not_contains: local1338_Bytes
  recovery: local1338_Bytes
  recovery_not: local1338_Bytes
  recovery_in: [local1338_Bytes!]
  recovery_not_in: [local1338_Bytes!]
  recovery_contains: local1338_Bytes
  recovery_not_contains: local1338_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: goerli_Bytes
  callback_not: goerli_Bytes
  callback_in: [goerli_Bytes!]
  callback_not_in: [goerli_Bytes!]
  callback_contains: goerli_Bytes
  callback_not_contains: goerli_Bytes
=======
  callback: local1338_Bytes
  callback_not: local1338_Bytes
  callback_in: [local1338_Bytes!]
  callback_not_in: [local1338_Bytes!]
  callback_contains: local1338_Bytes
  callback_not_contains: local1338_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: goerli_Bytes
  transactingAsset_not: goerli_Bytes
  transactingAsset_in: [goerli_Bytes!]
  transactingAsset_not_in: [goerli_Bytes!]
  transactingAsset_contains: goerli_Bytes
  transactingAsset_not_contains: goerli_Bytes
=======
  status: local1338_TransferStatus
  status_not: local1338_TransferStatus
  status_in: [local1338_TransferStatus!]
  status_not_in: [local1338_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: local1338_Router_filter
  originSender: local1338_Bytes
  originSender_not: local1338_Bytes
  originSender_in: [local1338_Bytes!]
  originSender_not_in: [local1338_Bytes!]
  originSender_contains: local1338_Bytes
  originSender_not_contains: local1338_Bytes
  transactingAsset: local1338_Bytes
  transactingAsset_not: local1338_Bytes
  transactingAsset_in: [local1338_Bytes!]
  transactingAsset_not_in: [local1338_Bytes!]
  transactingAsset_contains: local1338_Bytes
  transactingAsset_not_contains: local1338_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  bridgedAsset: goerli_Bytes
  bridgedAsset_not: goerli_Bytes
  bridgedAsset_in: [goerli_Bytes!]
  bridgedAsset_not_in: [goerli_Bytes!]
  bridgedAsset_contains: goerli_Bytes
  bridgedAsset_not_contains: goerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: goerli_OriginMessage_filter
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginTransfer_orderBy {
=======
  localAsset: local1338_Bytes
  localAsset_not: local1338_Bytes
  localAsset_in: [local1338_Bytes!]
  localAsset_not_in: [local1338_Bytes!]
  localAsset_contains: local1338_Bytes
  localAsset_not_contains: local1338_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: local1338_Bytes
  executedCaller_not: local1338_Bytes
  executedCaller_in: [local1338_Bytes!]
  executedCaller_not_in: [local1338_Bytes!]
  executedCaller_contains: local1338_Bytes
  executedCaller_not_contains: local1338_Bytes
  executedTransactionHash: local1338_Bytes
  executedTransactionHash_not: local1338_Bytes
  executedTransactionHash_in: [local1338_Bytes!]
  executedTransactionHash_not_in: [local1338_Bytes!]
  executedTransactionHash_contains: local1338_Bytes
  executedTransactionHash_not_contains: local1338_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: local1338_Bytes
  reconciledCaller_not: local1338_Bytes
  reconciledCaller_in: [local1338_Bytes!]
  reconciledCaller_not_in: [local1338_Bytes!]
  reconciledCaller_contains: local1338_Bytes
  reconciledCaller_not_contains: local1338_Bytes
  reconciledTransactionHash: local1338_Bytes
  reconciledTransactionHash_not: local1338_Bytes
  reconciledTransactionHash_in: [local1338_Bytes!]
  reconciledTransactionHash_not_in: [local1338_Bytes!]
  reconciledTransactionHash_contains: local1338_Bytes
  reconciledTransactionHash_not_contains: local1338_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_DestinationTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
<<<<<<< HEAD
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type goerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: goerli_Bytes
}

input goerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: goerli_Bytes
  relayer_not: goerli_Bytes
  relayer_in: [goerli_Bytes!]
  relayer_not_in: [goerli_Bytes!]
  relayer_contains: goerli_Bytes
  relayer_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type goerli_RootMessage {
  id: ID!
  data: goerli_Bytes
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  logIndex: BigInt
  transactionLogIndex: BigInt
=======
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum local1338_OrderDirection {
  asc
  desc
}

type local1338_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1338_Bytes
  nonce: BigInt
  to: local1338_Bytes
  callData: local1338_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1338_Bytes
  recovery: local1338_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1338_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1338_TransferStatus
  originMinOut: BigInt
  transactingAsset: local1338_Bytes
  transactingAmount: BigInt
  bridgedAsset: local1338_Bytes
  bridgedAmount: BigInt
  caller: local1338_Bytes
  transactionHash: local1338_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input goerli_RootMessage_filter {
=======
input local1338_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  data: goerli_Bytes
  data_not: goerli_Bytes
  data_in: [goerli_Bytes!]
  data_not_in: [goerli_Bytes!]
  data_contains: goerli_Bytes
  data_not_contains: goerli_Bytes
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  transactionLogIndex: BigInt
  transactionLogIndex_not: BigInt
  transactionLogIndex_gt: BigInt
  transactionLogIndex_lt: BigInt
  transactionLogIndex_gte: BigInt
  transactionLogIndex_lte: BigInt
  transactionLogIndex_in: [BigInt!]
  transactionLogIndex_not_in: [BigInt!]
=======
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: local1338_Bytes
  transferId_not: local1338_Bytes
  transferId_in: [local1338_Bytes!]
  transferId_not_in: [local1338_Bytes!]
  transferId_contains: local1338_Bytes
  transferId_not_contains: local1338_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: local1338_Bytes
  to_not: local1338_Bytes
  to_in: [local1338_Bytes!]
  to_not_in: [local1338_Bytes!]
  to_contains: local1338_Bytes
  to_not_contains: local1338_Bytes
  callData: local1338_Bytes
  callData_not: local1338_Bytes
  callData_in: [local1338_Bytes!]
  callData_not_in: [local1338_Bytes!]
  callData_contains: local1338_Bytes
  callData_not_contains: local1338_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: local1338_Bytes
  agent_not: local1338_Bytes
  agent_in: [local1338_Bytes!]
  agent_not_in: [local1338_Bytes!]
  agent_contains: local1338_Bytes
  agent_not_contains: local1338_Bytes
  recovery: local1338_Bytes
  recovery_not: local1338_Bytes
  recovery_in: [local1338_Bytes!]
  recovery_not_in: [local1338_Bytes!]
  recovery_contains: local1338_Bytes
  recovery_not_contains: local1338_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: local1338_Bytes
  callback_not: local1338_Bytes
  callback_in: [local1338_Bytes!]
  callback_not_in: [local1338_Bytes!]
  callback_contains: local1338_Bytes
  callback_not_contains: local1338_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: local1338_TransferStatus
  status_not: local1338_TransferStatus
  status_in: [local1338_TransferStatus!]
  status_not_in: [local1338_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: local1338_Bytes
  transactingAsset_not: local1338_Bytes
  transactingAsset_in: [local1338_Bytes!]
  transactingAsset_not_in: [local1338_Bytes!]
  transactingAsset_contains: local1338_Bytes
  transactingAsset_not_contains: local1338_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: local1338_Bytes
  bridgedAsset_not: local1338_Bytes
  bridgedAsset_in: [local1338_Bytes!]
  bridgedAsset_not_in: [local1338_Bytes!]
  bridgedAsset_contains: local1338_Bytes
  bridgedAsset_not_contains: local1338_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  transactionHash: local1338_Bytes
  transactionHash_not: local1338_Bytes
  transactionHash_in: [local1338_Bytes!]
  transactionHash_not_in: [local1338_Bytes!]
  transactionHash_contains: local1338_Bytes
  transactionHash_not_contains: local1338_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootMessage_orderBy {
=======
  _change_block: local1338_BlockChangedFilter
}

enum local1338_OriginTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type goerli_Router {
  id: ID!
  isActive: Boolean!
  owner: goerli_Bytes
  recipient: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: goerli_AssetBalance_orderBy, orderDirection: goerli_OrderDirection, where: goerli_AssetBalance_filter): [goerli_AssetBalance!]!
}

input goerli_Router_filter {
=======
type local1338_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1338_Bytes
}

input local1338_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: local1338_Bytes
  relayer_not: local1338_Bytes
  relayer_in: [local1338_Bytes!]
  relayer_not_in: [local1338_Bytes!]
  relayer_contains: local1338_Bytes
  relayer_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Relayer_orderBy {
  id
  isActive
  relayer
}

type local1338_Router {
  id: ID!
  isActive: Boolean!
  owner: local1338_Bytes
  recipient: local1338_Bytes
  proposedOwner: local1338_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1338_AssetBalance_orderBy, orderDirection: local1338_OrderDirection, where: local1338_AssetBalance_filter): [local1338_AssetBalance!]!
}

input local1338_Router_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  owner: goerli_Bytes
  owner_not: goerli_Bytes
  owner_in: [goerli_Bytes!]
  owner_not_in: [goerli_Bytes!]
  owner_contains: goerli_Bytes
  owner_not_contains: goerli_Bytes
  recipient: goerli_Bytes
  recipient_not: goerli_Bytes
  recipient_in: [goerli_Bytes!]
  recipient_not_in: [goerli_Bytes!]
  recipient_contains: goerli_Bytes
  recipient_not_contains: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedOwner_not: goerli_Bytes
  proposedOwner_in: [goerli_Bytes!]
  proposedOwner_not_in: [goerli_Bytes!]
  proposedOwner_contains: goerli_Bytes
  proposedOwner_not_contains: goerli_Bytes
=======
  owner: local1338_Bytes
  owner_not: local1338_Bytes
  owner_in: [local1338_Bytes!]
  owner_not_in: [local1338_Bytes!]
  owner_contains: local1338_Bytes
  owner_not_contains: local1338_Bytes
  recipient: local1338_Bytes
  recipient_not: local1338_Bytes
  recipient_in: [local1338_Bytes!]
  recipient_not_in: [local1338_Bytes!]
  recipient_contains: local1338_Bytes
  recipient_not_contains: local1338_Bytes
  proposedOwner: local1338_Bytes
  proposedOwner_not: local1338_Bytes
  proposedOwner_in: [local1338_Bytes!]
  proposedOwner_not_in: [local1338_Bytes!]
  proposedOwner_contains: local1338_Bytes
  proposedOwner_not_contains: local1338_Bytes
>>>>>>> 1807-xcall-interface
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
<<<<<<< HEAD
  assetBalances_: goerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Router_orderBy {
=======
  assetBalances_: local1338_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Router_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

<<<<<<< HEAD
type goerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: goerli_Bytes!
}

input goerli_Setting_filter {
=======
type local1338_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1338_Bytes!
}

input local1338_Setting_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
<<<<<<< HEAD
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Setting_orderBy {
=======
  caller: local1338_Bytes
  caller_not: local1338_Bytes
  caller_in: [local1338_Bytes!]
  caller_not_in: [local1338_Bytes!]
  caller_contains: local1338_Bytes
  caller_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_Setting_orderBy {
>>>>>>> 1807-xcall-interface
  id
  maxRoutersPerTransfer
  caller
}

<<<<<<< HEAD
type goerli_SponsorVault {
  id: ID!
  sponsorVault: goerli_Bytes!
}

input goerli_SponsorVault_filter {
=======
type local1338_SponsorVault {
  id: ID!
  sponsorVault: local1338_Bytes!
}

input local1338_SponsorVault_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  sponsorVault: goerli_Bytes
  sponsorVault_not: goerli_Bytes
  sponsorVault_in: [goerli_Bytes!]
  sponsorVault_not_in: [goerli_Bytes!]
  sponsorVault_contains: goerli_Bytes
  sponsorVault_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_SponsorVault_orderBy {
=======
  sponsorVault: local1338_Bytes
  sponsorVault_not: local1338_Bytes
  sponsorVault_in: [local1338_Bytes!]
  sponsorVault_not_in: [local1338_Bytes!]
  sponsorVault_contains: local1338_Bytes
  sponsorVault_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_SponsorVault_orderBy {
>>>>>>> 1807-xcall-interface
  id
  sponsorVault
}

<<<<<<< HEAD
type goerli_StableSwap {
  id: ID!
  canonicalId: goerli_Bytes!
  domain: BigInt
  swapPool: goerli_Bytes!
}

input goerli_StableSwap_filter {
=======
type local1338_StableSwap {
  id: ID!
  canonicalId: local1338_Bytes!
  domain: BigInt
  swapPool: local1338_Bytes!
}

input local1338_StableSwap_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
=======
  canonicalId: local1338_Bytes
  canonicalId_not: local1338_Bytes
  canonicalId_in: [local1338_Bytes!]
  canonicalId_not_in: [local1338_Bytes!]
  canonicalId_contains: local1338_Bytes
  canonicalId_not_contains: local1338_Bytes
>>>>>>> 1807-xcall-interface
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
<<<<<<< HEAD
  swapPool: goerli_Bytes
  swapPool_not: goerli_Bytes
  swapPool_in: [goerli_Bytes!]
  swapPool_not_in: [goerli_Bytes!]
  swapPool_contains: goerli_Bytes
  swapPool_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwap_orderBy {
=======
  swapPool: local1338_Bytes
  swapPool_not: local1338_Bytes
  swapPool_in: [local1338_Bytes!]
  swapPool_not_in: [local1338_Bytes!]
  swapPool_contains: local1338_Bytes
  swapPool_not_contains: local1338_Bytes
  """Filter for the block changed event."""
  _change_block: local1338_BlockChangedFilter
}

enum local1338_StableSwap_orderBy {
>>>>>>> 1807-xcall-interface
  id
  canonicalId
  domain
  swapPool
}

<<<<<<< HEAD
enum goerli_TransferStatus {
=======
enum local1338_TransferStatus {
>>>>>>> 1807-xcall-interface
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

<<<<<<< HEAD
type goerli__Block_ {
  """The hash of the block"""
  hash: goerli_Bytes
=======
type local1338__Block_ {
  """The hash of the block"""
  hash: local1338_Bytes
>>>>>>> 1807-xcall-interface
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
<<<<<<< HEAD
type goerli__Meta_ {
=======
type local1338__Meta_ {
>>>>>>> 1807-xcall-interface
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
<<<<<<< HEAD
  block: goerli__Block_!
=======
  block: local1338__Block_!
>>>>>>> 1807-xcall-interface
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type optimismgoerli_AggregateRoot {
  id: ID!
  root: optimismgoerli_Bytes!
}

input optimismgoerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_AggregateRoot_orderBy {
  id
  root
}

type optimismgoerli_Asset {
  id: ID!
  key: optimismgoerli_Bytes
  local: optimismgoerli_Bytes!
  adoptedAsset: optimismgoerli_Bytes!
  canonicalId: optimismgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type optimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: optimismgoerli_Router!
  asset: optimismgoerli_Asset!
}

input optimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: optimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: optimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input optimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: optimismgoerli_Bytes
  key_not: optimismgoerli_Bytes
  key_in: [optimismgoerli_Bytes!]
  key_not_in: [optimismgoerli_Bytes!]
  key_contains: optimismgoerli_Bytes
  key_not_contains: optimismgoerli_Bytes
  local: optimismgoerli_Bytes
  local_not: optimismgoerli_Bytes
  local_in: [optimismgoerli_Bytes!]
  local_not_in: [optimismgoerli_Bytes!]
  local_contains: optimismgoerli_Bytes
  local_not_contains: optimismgoerli_Bytes
  adoptedAsset: optimismgoerli_Bytes
  adoptedAsset_not: optimismgoerli_Bytes
  adoptedAsset_in: [optimismgoerli_Bytes!]
  adoptedAsset_not_in: [optimismgoerli_Bytes!]
  adoptedAsset_contains: optimismgoerli_Bytes
  adoptedAsset_not_contains: optimismgoerli_Bytes
  canonicalId: optimismgoerli_Bytes
  canonicalId_not: optimismgoerli_Bytes
  canonicalId_in: [optimismgoerli_Bytes!]
  canonicalId_not_in: [optimismgoerli_Bytes!]
  canonicalId_contains: optimismgoerli_Bytes
  canonicalId_not_contains: optimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar optimismgoerli_BigDecimal

input optimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input optimismgoerli_Block_height {
  hash: optimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar optimismgoerli_Bytes

<<<<<<< HEAD
=======
type optimismgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: optimismgoerli_Bytes!
  rootManager: optimismgoerli_Bytes!
  mirrorConnector: optimismgoerli_Bytes!
}

input optimismgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: optimismgoerli_Bytes
  amb_not: optimismgoerli_Bytes
  amb_in: [optimismgoerli_Bytes!]
  amb_not_in: [optimismgoerli_Bytes!]
  amb_contains: optimismgoerli_Bytes
  amb_not_contains: optimismgoerli_Bytes
  rootManager: optimismgoerli_Bytes
  rootManager_not: optimismgoerli_Bytes
  rootManager_in: [optimismgoerli_Bytes!]
  rootManager_not_in: [optimismgoerli_Bytes!]
  rootManager_contains: optimismgoerli_Bytes
  rootManager_not_contains: optimismgoerli_Bytes
  mirrorConnector: optimismgoerli_Bytes
  mirrorConnector_not: optimismgoerli_Bytes
  mirrorConnector_in: [optimismgoerli_Bytes!]
  mirrorConnector_not_in: [optimismgoerli_Bytes!]
  mirrorConnector_contains: optimismgoerli_Bytes
  mirrorConnector_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

>>>>>>> 1807-xcall-interface
type optimismgoerli_DestinationMessage {
  id: ID!
  leaf: optimismgoerli_Bytes
  processed: Boolean
  returnData: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
}

input optimismgoerli_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: optimismgoerli_Bytes
  leaf_not: optimismgoerli_Bytes
  leaf_in: [optimismgoerli_Bytes!]
  leaf_not_in: [optimismgoerli_Bytes!]
  leaf_contains: optimismgoerli_Bytes
  leaf_not_contains: optimismgoerli_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: optimismgoerli_Bytes
  returnData_not: optimismgoerli_Bytes
  returnData_in: [optimismgoerli_Bytes!]
  returnData_not_in: [optimismgoerli_Bytes!]
  returnData_contains: optimismgoerli_Bytes
  returnData_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  transactionHash
}

type optimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: optimismgoerli_Bytes
  nonce: BigInt
  to: optimismgoerli_Bytes
  callData: optimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: optimismgoerli_Bytes
  recovery: optimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: optimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: optimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_Router_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_Router_filter): [optimismgoerli_Router!]
  originSender: optimismgoerli_Bytes
  transactingAsset: optimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: optimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: optimismgoerli_Bytes
  executedTransactionHash: optimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: optimismgoerli_Bytes
  reconciledTransactionHash: optimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input optimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: optimismgoerli_Bytes
  to_not: optimismgoerli_Bytes
  to_in: [optimismgoerli_Bytes!]
  to_not_in: [optimismgoerli_Bytes!]
  to_contains: optimismgoerli_Bytes
  to_not_contains: optimismgoerli_Bytes
  callData: optimismgoerli_Bytes
  callData_not: optimismgoerli_Bytes
  callData_in: [optimismgoerli_Bytes!]
  callData_not_in: [optimismgoerli_Bytes!]
  callData_contains: optimismgoerli_Bytes
  callData_not_contains: optimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: optimismgoerli_Bytes
  agent_not: optimismgoerli_Bytes
  agent_in: [optimismgoerli_Bytes!]
  agent_not_in: [optimismgoerli_Bytes!]
  agent_contains: optimismgoerli_Bytes
  agent_not_contains: optimismgoerli_Bytes
  recovery: optimismgoerli_Bytes
  recovery_not: optimismgoerli_Bytes
  recovery_in: [optimismgoerli_Bytes!]
  recovery_not_in: [optimismgoerli_Bytes!]
  recovery_contains: optimismgoerli_Bytes
  recovery_not_contains: optimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: optimismgoerli_Bytes
  callback_not: optimismgoerli_Bytes
  callback_in: [optimismgoerli_Bytes!]
  callback_not_in: [optimismgoerli_Bytes!]
  callback_contains: optimismgoerli_Bytes
  callback_not_contains: optimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: optimismgoerli_TransferStatus
  status_not: optimismgoerli_TransferStatus
  status_in: [optimismgoerli_TransferStatus!]
  status_not_in: [optimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: optimismgoerli_Router_filter
  originSender: optimismgoerli_Bytes
  originSender_not: optimismgoerli_Bytes
  originSender_in: [optimismgoerli_Bytes!]
  originSender_not_in: [optimismgoerli_Bytes!]
  originSender_contains: optimismgoerli_Bytes
  originSender_not_contains: optimismgoerli_Bytes
  transactingAsset: optimismgoerli_Bytes
  transactingAsset_not: optimismgoerli_Bytes
  transactingAsset_in: [optimismgoerli_Bytes!]
  transactingAsset_not_in: [optimismgoerli_Bytes!]
  transactingAsset_contains: optimismgoerli_Bytes
  transactingAsset_not_contains: optimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: optimismgoerli_Bytes
  localAsset_not: optimismgoerli_Bytes
  localAsset_in: [optimismgoerli_Bytes!]
  localAsset_not_in: [optimismgoerli_Bytes!]
  localAsset_contains: optimismgoerli_Bytes
  localAsset_not_contains: optimismgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: optimismgoerli_Bytes
  executedCaller_not: optimismgoerli_Bytes
  executedCaller_in: [optimismgoerli_Bytes!]
  executedCaller_not_in: [optimismgoerli_Bytes!]
  executedCaller_contains: optimismgoerli_Bytes
  executedCaller_not_contains: optimismgoerli_Bytes
  executedTransactionHash: optimismgoerli_Bytes
  executedTransactionHash_not: optimismgoerli_Bytes
  executedTransactionHash_in: [optimismgoerli_Bytes!]
  executedTransactionHash_not_in: [optimismgoerli_Bytes!]
  executedTransactionHash_contains: optimismgoerli_Bytes
  executedTransactionHash_not_contains: optimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: optimismgoerli_Bytes
  reconciledCaller_not: optimismgoerli_Bytes
  reconciledCaller_in: [optimismgoerli_Bytes!]
  reconciledCaller_not_in: [optimismgoerli_Bytes!]
  reconciledCaller_contains: optimismgoerli_Bytes
  reconciledCaller_not_contains: optimismgoerli_Bytes
  reconciledTransactionHash: optimismgoerli_Bytes
  reconciledTransactionHash_not: optimismgoerli_Bytes
  reconciledTransactionHash_in: [optimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [optimismgoerli_Bytes!]
  reconciledTransactionHash_contains: optimismgoerli_Bytes
  reconciledTransactionHash_not_contains: optimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum optimismgoerli_OrderDirection {
  asc
  desc
}

type optimismgoerli_OriginMessage {
  id: ID!
  transferId: optimismgoerli_Bytes
  destinationDomain: BigInt
  leaf: optimismgoerli_Bytes
  index: BigInt
  root: optimismgoerli_Bytes
  message: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
}

input optimismgoerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: optimismgoerli_Bytes
  leaf_not: optimismgoerli_Bytes
  leaf_in: [optimismgoerli_Bytes!]
  leaf_not_in: [optimismgoerli_Bytes!]
  leaf_contains: optimismgoerli_Bytes
  leaf_not_contains: optimismgoerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  message: optimismgoerli_Bytes
  message_not: optimismgoerli_Bytes
  message_in: [optimismgoerli_Bytes!]
  message_not_in: [optimismgoerli_Bytes!]
  message_contains: optimismgoerli_Bytes
  message_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

type optimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: optimismgoerli_Bytes
  nonce: BigInt
  to: optimismgoerli_Bytes
  callData: optimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: optimismgoerli_Bytes
  recovery: optimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: optimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: optimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: optimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: optimismgoerli_Bytes
  bridgedAmount: BigInt
  message: optimismgoerli_OriginMessage
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: optimismgoerli_Bytes
  transferId_not: optimismgoerli_Bytes
  transferId_in: [optimismgoerli_Bytes!]
  transferId_not_in: [optimismgoerli_Bytes!]
  transferId_contains: optimismgoerli_Bytes
  transferId_not_contains: optimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: optimismgoerli_Bytes
  to_not: optimismgoerli_Bytes
  to_in: [optimismgoerli_Bytes!]
  to_not_in: [optimismgoerli_Bytes!]
  to_contains: optimismgoerli_Bytes
  to_not_contains: optimismgoerli_Bytes
  callData: optimismgoerli_Bytes
  callData_not: optimismgoerli_Bytes
  callData_in: [optimismgoerli_Bytes!]
  callData_not_in: [optimismgoerli_Bytes!]
  callData_contains: optimismgoerli_Bytes
  callData_not_contains: optimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: optimismgoerli_Bytes
  agent_not: optimismgoerli_Bytes
  agent_in: [optimismgoerli_Bytes!]
  agent_not_in: [optimismgoerli_Bytes!]
  agent_contains: optimismgoerli_Bytes
  agent_not_contains: optimismgoerli_Bytes
  recovery: optimismgoerli_Bytes
  recovery_not: optimismgoerli_Bytes
  recovery_in: [optimismgoerli_Bytes!]
  recovery_not_in: [optimismgoerli_Bytes!]
  recovery_contains: optimismgoerli_Bytes
  recovery_not_contains: optimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: optimismgoerli_Bytes
  callback_not: optimismgoerli_Bytes
  callback_in: [optimismgoerli_Bytes!]
  callback_not_in: [optimismgoerli_Bytes!]
  callback_contains: optimismgoerli_Bytes
  callback_not_contains: optimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: optimismgoerli_TransferStatus
  status_not: optimismgoerli_TransferStatus
  status_in: [optimismgoerli_TransferStatus!]
  status_not_in: [optimismgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: optimismgoerli_Bytes
  transactingAsset_not: optimismgoerli_Bytes
  transactingAsset_in: [optimismgoerli_Bytes!]
  transactingAsset_not_in: [optimismgoerli_Bytes!]
  transactingAsset_contains: optimismgoerli_Bytes
  transactingAsset_not_contains: optimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: optimismgoerli_Bytes
  bridgedAsset_not: optimismgoerli_Bytes
  bridgedAsset_in: [optimismgoerli_Bytes!]
  bridgedAsset_not_in: [optimismgoerli_Bytes!]
  bridgedAsset_contains: optimismgoerli_Bytes
  bridgedAsset_not_contains: optimismgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: optimismgoerli_OriginMessage_filter
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
<<<<<<< HEAD
=======
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type optimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: optimismgoerli_Bytes
}

input optimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: optimismgoerli_Bytes
  relayer_not: optimismgoerli_Bytes
  relayer_in: [optimismgoerli_Bytes!]
  relayer_not_in: [optimismgoerli_Bytes!]
  relayer_contains: optimismgoerli_Bytes
  relayer_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type optimismgoerli_RootMessageProcessed {
  id: ID!
  root: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimismgoerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

<<<<<<< HEAD
enum optimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type optimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: optimismgoerli_Bytes
}

input optimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: optimismgoerli_Bytes
  relayer_not: optimismgoerli_Bytes
  relayer_in: [optimismgoerli_Bytes!]
  relayer_not_in: [optimismgoerli_Bytes!]
  relayer_contains: optimismgoerli_Bytes
  relayer_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type optimismgoerli_RootMessage {
  id: ID!
  data: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  logIndex: BigInt
  transactionLogIndex: BigInt
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimismgoerli_RootMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  data: optimismgoerli_Bytes
  data_not: optimismgoerli_Bytes
  data_in: [optimismgoerli_Bytes!]
  data_not_in: [optimismgoerli_Bytes!]
  data_contains: optimismgoerli_Bytes
  data_not_contains: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  transactionLogIndex: BigInt
  transactionLogIndex_not: BigInt
  transactionLogIndex_gt: BigInt
  transactionLogIndex_lt: BigInt
  transactionLogIndex_gte: BigInt
  transactionLogIndex_lte: BigInt
  transactionLogIndex_in: [BigInt!]
  transactionLogIndex_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_RootMessage_orderBy {
  id
  data
=======
enum optimismgoerli_RootMessageProcessed_orderBy {
  id
  root
>>>>>>> 1807-xcall-interface
  caller
  transactionHash
  logIndex
  transactionLogIndex
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
=======
type optimismgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input optimismgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: optimismgoerli_Bytes
  root_not: optimismgoerli_Bytes
  root_in: [optimismgoerli_Bytes!]
  root_not_in: [optimismgoerli_Bytes!]
  root_contains: optimismgoerli_Bytes
  root_not_contains: optimismgoerli_Bytes
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  transactionHash: optimismgoerli_Bytes
  transactionHash_not: optimismgoerli_Bytes
  transactionHash_in: [optimismgoerli_Bytes!]
  transactionHash_not_in: [optimismgoerli_Bytes!]
  transactionHash_contains: optimismgoerli_Bytes
  transactionHash_not_contains: optimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

>>>>>>> 1807-xcall-interface
type optimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: optimismgoerli_Bytes
  recipient: optimismgoerli_Bytes
  proposedOwner: optimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: optimismgoerli_AssetBalance_orderBy, orderDirection: optimismgoerli_OrderDirection, where: optimismgoerli_AssetBalance_filter): [optimismgoerli_AssetBalance!]!
}

input optimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: optimismgoerli_Bytes
  owner_not: optimismgoerli_Bytes
  owner_in: [optimismgoerli_Bytes!]
  owner_not_in: [optimismgoerli_Bytes!]
  owner_contains: optimismgoerli_Bytes
  owner_not_contains: optimismgoerli_Bytes
  recipient: optimismgoerli_Bytes
  recipient_not: optimismgoerli_Bytes
  recipient_in: [optimismgoerli_Bytes!]
  recipient_not_in: [optimismgoerli_Bytes!]
  recipient_contains: optimismgoerli_Bytes
  recipient_not_contains: optimismgoerli_Bytes
  proposedOwner: optimismgoerli_Bytes
  proposedOwner_not: optimismgoerli_Bytes
  proposedOwner_in: [optimismgoerli_Bytes!]
  proposedOwner_not_in: [optimismgoerli_Bytes!]
  proposedOwner_contains: optimismgoerli_Bytes
  proposedOwner_not_contains: optimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: optimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type optimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: optimismgoerli_Bytes!
}

input optimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: optimismgoerli_Bytes
  caller_not: optimismgoerli_Bytes
  caller_in: [optimismgoerli_Bytes!]
  caller_not_in: [optimismgoerli_Bytes!]
  caller_contains: optimismgoerli_Bytes
  caller_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type optimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: optimismgoerli_Bytes!
}

input optimismgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: optimismgoerli_Bytes
  sponsorVault_not: optimismgoerli_Bytes
  sponsorVault_in: [optimismgoerli_Bytes!]
  sponsorVault_not_in: [optimismgoerli_Bytes!]
  sponsorVault_contains: optimismgoerli_Bytes
  sponsorVault_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type optimismgoerli_StableSwap {
  id: ID!
  canonicalId: optimismgoerli_Bytes!
  domain: BigInt
  swapPool: optimismgoerli_Bytes!
}

input optimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: optimismgoerli_Bytes
  canonicalId_not: optimismgoerli_Bytes
  canonicalId_in: [optimismgoerli_Bytes!]
  canonicalId_not_in: [optimismgoerli_Bytes!]
  canonicalId_contains: optimismgoerli_Bytes
  canonicalId_not_contains: optimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: optimismgoerli_Bytes
  swapPool_not: optimismgoerli_Bytes
  swapPool_in: [optimismgoerli_Bytes!]
  swapPool_not_in: [optimismgoerli_Bytes!]
  swapPool_contains: optimismgoerli_Bytes
  swapPool_not_contains: optimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: optimismgoerli_BlockChangedFilter
}

enum optimismgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

enum optimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type optimismgoerli__Block_ {
  """The hash of the block"""
  hash: optimismgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type optimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: optimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

<<<<<<< HEAD
type testgoerli_Asset {
  id: ID!
  key: testgoerli_Bytes
  local: testgoerli_Bytes!
  adoptedAsset: testgoerli_Bytes!
  canonicalId: testgoerli_Bytes!
=======
type goerli_AggregateRoot {
  id: ID!
  root: goerli_Bytes!
}

input goerli_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AggregateRoot_orderBy {
  id
  root
}

type goerli_Asset {
  id: ID!
  key: goerli_Bytes
  local: goerli_Bytes!
  adoptedAsset: goerli_Bytes!
  canonicalId: goerli_Bytes!
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

<<<<<<< HEAD
type testgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testgoerli_Router!
  asset: testgoerli_Asset!
}

input testgoerli_AssetBalance_filter {
=======
type goerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: goerli_Router!
  asset: goerli_Asset!
}

input goerli_AssetBalance_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
<<<<<<< HEAD
  router_: testgoerli_Router_filter
=======
  router_: goerli_Router_filter
>>>>>>> 1807-xcall-interface
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
<<<<<<< HEAD
  asset_: testgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_AssetBalance_orderBy {
=======
  asset_: goerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AssetBalance_orderBy {
>>>>>>> 1807-xcall-interface
  id
  amount
  router
  asset
}

<<<<<<< HEAD
input testgoerli_Asset_filter {
=======
input goerli_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  key: testgoerli_Bytes
  key_not: testgoerli_Bytes
  key_in: [testgoerli_Bytes!]
  key_not_in: [testgoerli_Bytes!]
  key_contains: testgoerli_Bytes
  key_not_contains: testgoerli_Bytes
  local: testgoerli_Bytes
  local_not: testgoerli_Bytes
  local_in: [testgoerli_Bytes!]
  local_not_in: [testgoerli_Bytes!]
  local_contains: testgoerli_Bytes
  local_not_contains: testgoerli_Bytes
  adoptedAsset: testgoerli_Bytes
  adoptedAsset_not: testgoerli_Bytes
  adoptedAsset_in: [testgoerli_Bytes!]
  adoptedAsset_not_in: [testgoerli_Bytes!]
  adoptedAsset_contains: testgoerli_Bytes
  adoptedAsset_not_contains: testgoerli_Bytes
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
=======
  key: goerli_Bytes
  key_not: goerli_Bytes
  key_in: [goerli_Bytes!]
  key_not_in: [goerli_Bytes!]
  key_contains: goerli_Bytes
  key_not_contains: goerli_Bytes
  local: goerli_Bytes
  local_not: goerli_Bytes
  local_in: [goerli_Bytes!]
  local_not_in: [goerli_Bytes!]
  local_contains: goerli_Bytes
  local_not_contains: goerli_Bytes
  adoptedAsset: goerli_Bytes
  adoptedAsset_not: goerli_Bytes
  adoptedAsset_in: [goerli_Bytes!]
  adoptedAsset_not_in: [goerli_Bytes!]
  adoptedAsset_contains: goerli_Bytes
  adoptedAsset_not_contains: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar testgoerli_BigDecimal

input testgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testgoerli_Block_height {
  hash: testgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testgoerli_Bytes

type testgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testgoerli_Router_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_Router_filter): [testgoerli_Router!]
  originSender: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
=======
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar goerli_BigDecimal

input goerli_BlockChangedFilter {
  number_gte: Int!
}

input goerli_Block_height {
  hash: goerli_Bytes
  number: Int
  number_gte: Int
}

scalar goerli_Bytes

type goerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_DestinationMessage {
  id: ID!
  leaf: goerli_Bytes
  processed: Boolean
  returnData: goerli_Bytes
  transactionHash: goerli_Bytes
}

input goerli_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: goerli_Bytes
  leaf_not: goerli_Bytes
  leaf_in: [goerli_Bytes!]
  leaf_not_in: [goerli_Bytes!]
  leaf_contains: goerli_Bytes
  leaf_not_contains: goerli_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: goerli_Bytes
  returnData_not: goerli_Bytes
  returnData_in: [goerli_Bytes!]
  returnData_not_in: [goerli_Bytes!]
  returnData_contains: goerli_Bytes
  returnData_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  transactionHash
}

type goerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  to: goerli_Bytes
  callData: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: goerli_Bytes
  recovery: goerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: goerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: goerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: goerli_Router_orderBy, orderDirection: goerli_OrderDirection, where: goerli_Router_filter): [goerli_Router!]
  originSender: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAmount: BigInt
  localAsset: goerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: goerli_Bytes
  executedTransactionHash: goerli_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
<<<<<<< HEAD
  reconciledCaller: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
=======
  reconciledCaller: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

<<<<<<< HEAD
input testgoerli_DestinationTransfer_filter {
=======
input goerli_DestinationTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
=======
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
=======
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
=======
  agent: goerli_Bytes
  agent_not: goerli_Bytes
  agent_in: [goerli_Bytes!]
  agent_not_in: [goerli_Bytes!]
  agent_contains: goerli_Bytes
  agent_not_contains: goerli_Bytes
  recovery: goerli_Bytes
  recovery_not: goerli_Bytes
  recovery_in: [goerli_Bytes!]
  recovery_not_in: [goerli_Bytes!]
  recovery_contains: goerli_Bytes
  recovery_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
=======
  callback: goerli_Bytes
  callback_not: goerli_Bytes
  callback_in: [goerli_Bytes!]
  callback_not_in: [goerli_Bytes!]
  callback_contains: goerli_Bytes
  callback_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
=======
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
>>>>>>> 1807-xcall-interface
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
<<<<<<< HEAD
  routers_: testgoerli_Router_filter
  originSender: testgoerli_Bytes
  originSender_not: testgoerli_Bytes
  originSender_in: [testgoerli_Bytes!]
  originSender_not_in: [testgoerli_Bytes!]
  originSender_contains: testgoerli_Bytes
  originSender_not_contains: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
=======
  routers_: goerli_Router_filter
  originSender: goerli_Bytes
  originSender_not: goerli_Bytes
  originSender_in: [goerli_Bytes!]
  originSender_not_in: [goerli_Bytes!]
  originSender_contains: goerli_Bytes
  originSender_not_contains: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAsset_not: goerli_Bytes
  transactingAsset_in: [goerli_Bytes!]
  transactingAsset_not_in: [goerli_Bytes!]
  transactingAsset_contains: goerli_Bytes
  transactingAsset_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  localAsset: testgoerli_Bytes
  localAsset_not: testgoerli_Bytes
  localAsset_in: [testgoerli_Bytes!]
  localAsset_not_in: [testgoerli_Bytes!]
  localAsset_contains: testgoerli_Bytes
  localAsset_not_contains: testgoerli_Bytes
=======
  localAsset: goerli_Bytes
  localAsset_not: goerli_Bytes
  localAsset_in: [goerli_Bytes!]
  localAsset_not_in: [goerli_Bytes!]
  localAsset_contains: goerli_Bytes
  localAsset_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  executedCaller: testgoerli_Bytes
  executedCaller_not: testgoerli_Bytes
  executedCaller_in: [testgoerli_Bytes!]
  executedCaller_not_in: [testgoerli_Bytes!]
  executedCaller_contains: testgoerli_Bytes
  executedCaller_not_contains: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
  executedTransactionHash_not: testgoerli_Bytes
  executedTransactionHash_in: [testgoerli_Bytes!]
  executedTransactionHash_not_in: [testgoerli_Bytes!]
  executedTransactionHash_contains: testgoerli_Bytes
  executedTransactionHash_not_contains: testgoerli_Bytes
=======
  executedCaller: goerli_Bytes
  executedCaller_not: goerli_Bytes
  executedCaller_in: [goerli_Bytes!]
  executedCaller_not_in: [goerli_Bytes!]
  executedCaller_contains: goerli_Bytes
  executedCaller_not_contains: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTransactionHash_not: goerli_Bytes
  executedTransactionHash_in: [goerli_Bytes!]
  executedTransactionHash_not_in: [goerli_Bytes!]
  executedTransactionHash_contains: goerli_Bytes
  executedTransactionHash_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
<<<<<<< HEAD
  reconciledCaller: testgoerli_Bytes
  reconciledCaller_not: testgoerli_Bytes
  reconciledCaller_in: [testgoerli_Bytes!]
  reconciledCaller_not_in: [testgoerli_Bytes!]
  reconciledCaller_contains: testgoerli_Bytes
  reconciledCaller_not_contains: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
  reconciledTransactionHash_not: testgoerli_Bytes
  reconciledTransactionHash_in: [testgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testgoerli_Bytes!]
  reconciledTransactionHash_contains: testgoerli_Bytes
  reconciledTransactionHash_not_contains: testgoerli_Bytes
=======
  reconciledCaller: goerli_Bytes
  reconciledCaller_not: goerli_Bytes
  reconciledCaller_in: [goerli_Bytes!]
  reconciledCaller_not_in: [goerli_Bytes!]
  reconciledCaller_contains: goerli_Bytes
  reconciledCaller_not_contains: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTransactionHash_not: goerli_Bytes
  reconciledTransactionHash_in: [goerli_Bytes!]
  reconciledTransactionHash_not_in: [goerli_Bytes!]
  reconciledTransactionHash_contains: goerli_Bytes
  reconciledTransactionHash_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_DestinationTransfer_orderBy {
=======
  _change_block: goerli_BlockChangedFilter
}

enum goerli_DestinationTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
<<<<<<< HEAD
enum testgoerli_OrderDirection {
=======
enum goerli_OrderDirection {
>>>>>>> 1807-xcall-interface
  asc
  desc
}

<<<<<<< HEAD
type testgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testgoerli_Bytes
  bridgedAmount: BigInt
  caller: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
=======
type goerli_OriginMessage {
  id: ID!
  transferId: goerli_Bytes
  destinationDomain: BigInt
  leaf: goerli_Bytes
  index: BigInt
  root: goerli_Bytes
  message: goerli_Bytes
  transactionHash: goerli_Bytes
}

input goerli_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: goerli_Bytes
  leaf_not: goerli_Bytes
  leaf_in: [goerli_Bytes!]
  leaf_not_in: [goerli_Bytes!]
  leaf_contains: goerli_Bytes
  leaf_not_contains: goerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  message: goerli_Bytes
  message_not: goerli_Bytes
  message_in: [goerli_Bytes!]
  message_not_in: [goerli_Bytes!]
  message_contains: goerli_Bytes
  message_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

type goerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  to: goerli_Bytes
  callData: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: goerli_Bytes
  recovery: goerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: goerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: goerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: goerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: goerli_Bytes
  bridgedAmount: BigInt
  message: goerli_OriginMessage
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input testgoerli_OriginTransfer_filter {
=======
input goerli_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
=======
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
=======
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
=======
  agent: goerli_Bytes
  agent_not: goerli_Bytes
  agent_in: [goerli_Bytes!]
  agent_not_in: [goerli_Bytes!]
  agent_contains: goerli_Bytes
  agent_not_contains: goerli_Bytes
  recovery: goerli_Bytes
  recovery_not: goerli_Bytes
  recovery_in: [goerli_Bytes!]
  recovery_not_in: [goerli_Bytes!]
  recovery_contains: goerli_Bytes
  recovery_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
=======
  callback: goerli_Bytes
  callback_not: goerli_Bytes
  callback_in: [goerli_Bytes!]
  callback_not_in: [goerli_Bytes!]
  callback_contains: goerli_Bytes
  callback_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
=======
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
>>>>>>> 1807-xcall-interface
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
=======
  transactingAsset: goerli_Bytes
  transactingAsset_not: goerli_Bytes
  transactingAsset_in: [goerli_Bytes!]
  transactingAsset_not_in: [goerli_Bytes!]
  transactingAsset_contains: goerli_Bytes
  transactingAsset_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  bridgedAsset: testgoerli_Bytes
  bridgedAsset_not: testgoerli_Bytes
  bridgedAsset_in: [testgoerli_Bytes!]
  bridgedAsset_not_in: [testgoerli_Bytes!]
  bridgedAsset_contains: testgoerli_Bytes
  bridgedAsset_not_contains: testgoerli_Bytes
=======
  bridgedAsset: goerli_Bytes
  bridgedAsset_not: goerli_Bytes
  bridgedAsset_in: [goerli_Bytes!]
  bridgedAsset_not_in: [goerli_Bytes!]
  bridgedAsset_contains: goerli_Bytes
  bridgedAsset_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
<<<<<<< HEAD
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  transactionHash_not: testgoerli_Bytes
  transactionHash_in: [testgoerli_Bytes!]
  transactionHash_not_in: [testgoerli_Bytes!]
  transactionHash_contains: testgoerli_Bytes
  transactionHash_not_contains: testgoerli_Bytes
=======
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: goerli_OriginMessage_filter
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_OriginTransfer_orderBy {
=======
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
<<<<<<< HEAD
=======
  message
>>>>>>> 1807-xcall-interface
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type testgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testgoerli_Bytes
}

input testgoerli_Relayer_filter {
=======
type goerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: goerli_Bytes
}

input goerli_Relayer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  relayer: testgoerli_Bytes
  relayer_not: testgoerli_Bytes
  relayer_in: [testgoerli_Bytes!]
  relayer_not_in: [testgoerli_Bytes!]
  relayer_contains: testgoerli_Bytes
  relayer_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Relayer_orderBy {
=======
  relayer: goerli_Bytes
  relayer_not: goerli_Bytes
  relayer_in: [goerli_Bytes!]
  relayer_not_in: [goerli_Bytes!]
  relayer_contains: goerli_Bytes
  relayer_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type goerli_RootMessageProcessed {
  id: ID!
  root: goerli_Bytes
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootMessageProcessed_orderBy {
  id
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type goerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: goerli_Bytes
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_RootMessageSent_orderBy {
>>>>>>> 1807-xcall-interface
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type testgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testgoerli_Bytes
  recipient: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testgoerli_AssetBalance_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_AssetBalance_filter): [testgoerli_AssetBalance!]!
}

input testgoerli_Router_filter {
=======
type goerli_Router {
  id: ID!
  isActive: Boolean!
  owner: goerli_Bytes
  recipient: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: goerli_AssetBalance_orderBy, orderDirection: goerli_OrderDirection, where: goerli_AssetBalance_filter): [goerli_AssetBalance!]!
}

input goerli_Router_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  owner: testgoerli_Bytes
  owner_not: testgoerli_Bytes
  owner_in: [testgoerli_Bytes!]
  owner_not_in: [testgoerli_Bytes!]
  owner_contains: testgoerli_Bytes
  owner_not_contains: testgoerli_Bytes
  recipient: testgoerli_Bytes
  recipient_not: testgoerli_Bytes
  recipient_in: [testgoerli_Bytes!]
  recipient_not_in: [testgoerli_Bytes!]
  recipient_contains: testgoerli_Bytes
  recipient_not_contains: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedOwner_not: testgoerli_Bytes
  proposedOwner_in: [testgoerli_Bytes!]
  proposedOwner_not_in: [testgoerli_Bytes!]
  proposedOwner_contains: testgoerli_Bytes
  proposedOwner_not_contains: testgoerli_Bytes
=======
  owner: goerli_Bytes
  owner_not: goerli_Bytes
  owner_in: [goerli_Bytes!]
  owner_not_in: [goerli_Bytes!]
  owner_contains: goerli_Bytes
  owner_not_contains: goerli_Bytes
  recipient: goerli_Bytes
  recipient_not: goerli_Bytes
  recipient_in: [goerli_Bytes!]
  recipient_not_in: [goerli_Bytes!]
  recipient_contains: goerli_Bytes
  recipient_not_contains: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedOwner_not: goerli_Bytes
  proposedOwner_in: [goerli_Bytes!]
  proposedOwner_not_in: [goerli_Bytes!]
  proposedOwner_contains: goerli_Bytes
  proposedOwner_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
<<<<<<< HEAD
  assetBalances_: testgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Router_orderBy {
=======
  assetBalances_: goerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Router_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

<<<<<<< HEAD
type testgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testgoerli_Bytes!
}

input testgoerli_Setting_filter {
=======
type goerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: goerli_Bytes!
}

input goerli_Setting_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
<<<<<<< HEAD
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_Setting_orderBy {
=======
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Setting_orderBy {
>>>>>>> 1807-xcall-interface
  id
  maxRoutersPerTransfer
  caller
}

<<<<<<< HEAD
type testgoerli_SponsorVault {
  id: ID!
  sponsorVault: testgoerli_Bytes!
}

input testgoerli_SponsorVault_filter {
=======
type goerli_SponsorVault {
  id: ID!
  sponsorVault: goerli_Bytes!
}

input goerli_SponsorVault_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  sponsorVault: testgoerli_Bytes
  sponsorVault_not: testgoerli_Bytes
  sponsorVault_in: [testgoerli_Bytes!]
  sponsorVault_not_in: [testgoerli_Bytes!]
  sponsorVault_contains: testgoerli_Bytes
  sponsorVault_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_SponsorVault_orderBy {
=======
  sponsorVault: goerli_Bytes
  sponsorVault_not: goerli_Bytes
  sponsorVault_in: [goerli_Bytes!]
  sponsorVault_not_in: [goerli_Bytes!]
  sponsorVault_contains: goerli_Bytes
  sponsorVault_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_SponsorVault_orderBy {
>>>>>>> 1807-xcall-interface
  id
  sponsorVault
}

<<<<<<< HEAD
type testgoerli_StableSwap {
  id: ID!
  canonicalId: testgoerli_Bytes!
  domain: BigInt
  swapPool: testgoerli_Bytes!
}

input testgoerli_StableSwap_filter {
=======
type goerli_StableSwap {
  id: ID!
  canonicalId: goerli_Bytes!
  domain: BigInt
  swapPool: goerli_Bytes!
}

input goerli_StableSwap_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
=======
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
>>>>>>> 1807-xcall-interface
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
<<<<<<< HEAD
  swapPool: testgoerli_Bytes
  swapPool_not: testgoerli_Bytes
  swapPool_in: [testgoerli_Bytes!]
  swapPool_not_in: [testgoerli_Bytes!]
  swapPool_contains: testgoerli_Bytes
  swapPool_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
}

enum testgoerli_StableSwap_orderBy {
=======
  swapPool: goerli_Bytes
  swapPool_not: goerli_Bytes
  swapPool_in: [goerli_Bytes!]
  swapPool_not_in: [goerli_Bytes!]
  swapPool_contains: goerli_Bytes
  swapPool_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_StableSwap_orderBy {
>>>>>>> 1807-xcall-interface
  id
  canonicalId
  domain
  swapPool
}

<<<<<<< HEAD
enum testgoerli_TransferStatus {
=======
enum goerli_TransferStatus {
>>>>>>> 1807-xcall-interface
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

<<<<<<< HEAD
type testgoerli__Block_ {
  """The hash of the block"""
  hash: testgoerli_Bytes
=======
type goerli__Block_ {
  """The hash of the block"""
  hash: goerli_Bytes
>>>>>>> 1807-xcall-interface
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
<<<<<<< HEAD
type testgoerli__Meta_ {
=======
type goerli__Meta_ {
>>>>>>> 1807-xcall-interface
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
<<<<<<< HEAD
  block: testgoerli__Block_!
=======
  block: goerli__Block_!
>>>>>>> 1807-xcall-interface
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

<<<<<<< HEAD
type stagingoptimismgoerli_AggregateRoot {
  id: ID!
  root: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_AggregateRoot_filter {
=======
type mumbai_AggregateRoot {
  id: ID!
  root: mumbai_Bytes!
}

input mumbai_AggregateRoot_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AggregateRoot_orderBy {
=======
  root: mumbai_Bytes
  root_not: mumbai_Bytes
  root_in: [mumbai_Bytes!]
  root_not_in: [mumbai_Bytes!]
  root_contains: mumbai_Bytes
  root_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_AggregateRoot_orderBy {
>>>>>>> 1807-xcall-interface
  id
  root
}

<<<<<<< HEAD
type stagingoptimismgoerli_Asset {
  id: ID!
  key: stagingoptimismgoerli_Bytes
  local: stagingoptimismgoerli_Bytes!
  adoptedAsset: stagingoptimismgoerli_Bytes!
  canonicalId: stagingoptimismgoerli_Bytes!
=======
type mumbai_Asset {
  id: ID!
  key: mumbai_Bytes
  local: mumbai_Bytes!
  adoptedAsset: mumbai_Bytes!
  canonicalId: mumbai_Bytes!
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

<<<<<<< HEAD
type stagingoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingoptimismgoerli_Router!
  asset: stagingoptimismgoerli_Asset!
}

input stagingoptimismgoerli_AssetBalance_filter {
=======
type mumbai_AssetBalance {
  id: ID!
  amount: BigInt!
  router: mumbai_Router!
  asset: mumbai_Asset!
}

input mumbai_AssetBalance_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
<<<<<<< HEAD
  router_: stagingoptimismgoerli_Router_filter
=======
  router_: mumbai_Router_filter
>>>>>>> 1807-xcall-interface
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
<<<<<<< HEAD
  asset_: stagingoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AssetBalance_orderBy {
=======
  asset_: mumbai_Asset_filter
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_AssetBalance_orderBy {
>>>>>>> 1807-xcall-interface
  id
  amount
  router
  asset
}

<<<<<<< HEAD
input stagingoptimismgoerli_Asset_filter {
=======
input mumbai_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  key: stagingoptimismgoerli_Bytes
  key_not: stagingoptimismgoerli_Bytes
  key_in: [stagingoptimismgoerli_Bytes!]
  key_not_in: [stagingoptimismgoerli_Bytes!]
  key_contains: stagingoptimismgoerli_Bytes
  key_not_contains: stagingoptimismgoerli_Bytes
  local: stagingoptimismgoerli_Bytes
  local_not: stagingoptimismgoerli_Bytes
  local_in: [stagingoptimismgoerli_Bytes!]
  local_not_in: [stagingoptimismgoerli_Bytes!]
  local_contains: stagingoptimismgoerli_Bytes
  local_not_contains: stagingoptimismgoerli_Bytes
  adoptedAsset: stagingoptimismgoerli_Bytes
  adoptedAsset_not: stagingoptimismgoerli_Bytes
  adoptedAsset_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_contains: stagingoptimismgoerli_Bytes
  adoptedAsset_not_contains: stagingoptimismgoerli_Bytes
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
=======
  key: mumbai_Bytes
  key_not: mumbai_Bytes
  key_in: [mumbai_Bytes!]
  key_not_in: [mumbai_Bytes!]
  key_contains: mumbai_Bytes
  key_not_contains: mumbai_Bytes
  local: mumbai_Bytes
  local_not: mumbai_Bytes
  local_in: [mumbai_Bytes!]
  local_not_in: [mumbai_Bytes!]
  local_contains: mumbai_Bytes
  local_not_contains: mumbai_Bytes
  adoptedAsset: mumbai_Bytes
  adoptedAsset_not: mumbai_Bytes
  adoptedAsset_in: [mumbai_Bytes!]
  adoptedAsset_not_in: [mumbai_Bytes!]
  adoptedAsset_contains: mumbai_Bytes
  adoptedAsset_not_contains: mumbai_Bytes
  canonicalId: mumbai_Bytes
  canonicalId_not: mumbai_Bytes
  canonicalId_in: [mumbai_Bytes!]
  canonicalId_not_in: [mumbai_Bytes!]
  canonicalId_contains: mumbai_Bytes
  canonicalId_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Asset_orderBy {
=======
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Asset_orderBy {
>>>>>>> 1807-xcall-interface
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

<<<<<<< HEAD
scalar stagingoptimismgoerli_BigDecimal

input stagingoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input stagingoptimismgoerli_Block_height {
  hash: stagingoptimismgoerli_Bytes
=======
scalar mumbai_BigDecimal

input mumbai_BlockChangedFilter {
  number_gte: Int!
}

input mumbai_Block_height {
  hash: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  number: Int
  number_gte: Int
}

<<<<<<< HEAD
scalar stagingoptimismgoerli_Bytes

type stagingoptimismgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingoptimismgoerli_Bytes!
  rootManager: stagingoptimismgoerli_Bytes!
  mirrorConnector: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingoptimismgoerli_Bytes
  amb_not: stagingoptimismgoerli_Bytes
  amb_in: [stagingoptimismgoerli_Bytes!]
  amb_not_in: [stagingoptimismgoerli_Bytes!]
  amb_contains: stagingoptimismgoerli_Bytes
  amb_not_contains: stagingoptimismgoerli_Bytes
  rootManager: stagingoptimismgoerli_Bytes
  rootManager_not: stagingoptimismgoerli_Bytes
  rootManager_in: [stagingoptimismgoerli_Bytes!]
  rootManager_not_in: [stagingoptimismgoerli_Bytes!]
  rootManager_contains: stagingoptimismgoerli_Bytes
  rootManager_not_contains: stagingoptimismgoerli_Bytes
  mirrorConnector: stagingoptimismgoerli_Bytes
  mirrorConnector_not: stagingoptimismgoerli_Bytes
  mirrorConnector_in: [stagingoptimismgoerli_Bytes!]
  mirrorConnector_not_in: [stagingoptimismgoerli_Bytes!]
  mirrorConnector_contains: stagingoptimismgoerli_Bytes
  mirrorConnector_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingoptimismgoerli_DestinationMessage {
  id: ID!
  leaf: stagingoptimismgoerli_Bytes
  processed: Boolean
  returnData: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_DestinationMessage_filter {
=======
scalar mumbai_Bytes

type mumbai_DestinationMessage {
  id: ID!
  leaf: mumbai_Bytes
  processed: Boolean
  returnData: mumbai_Bytes
  transactionHash: mumbai_Bytes
}

input mumbai_DestinationMessage_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  leaf: stagingoptimismgoerli_Bytes
  leaf_not: stagingoptimismgoerli_Bytes
  leaf_in: [stagingoptimismgoerli_Bytes!]
  leaf_not_in: [stagingoptimismgoerli_Bytes!]
  leaf_contains: stagingoptimismgoerli_Bytes
  leaf_not_contains: stagingoptimismgoerli_Bytes
=======
  leaf: mumbai_Bytes
  leaf_not: mumbai_Bytes
  leaf_in: [mumbai_Bytes!]
  leaf_not_in: [mumbai_Bytes!]
  leaf_contains: mumbai_Bytes
  leaf_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
<<<<<<< HEAD
  returnData: stagingoptimismgoerli_Bytes
  returnData_not: stagingoptimismgoerli_Bytes
  returnData_in: [stagingoptimismgoerli_Bytes!]
  returnData_not_in: [stagingoptimismgoerli_Bytes!]
  returnData_contains: stagingoptimismgoerli_Bytes
  returnData_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_DestinationMessage_orderBy {
=======
  returnData: mumbai_Bytes
  returnData_not: mumbai_Bytes
  returnData_in: [mumbai_Bytes!]
  returnData_not_in: [mumbai_Bytes!]
  returnData_contains: mumbai_Bytes
  returnData_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_DestinationMessage_orderBy {
>>>>>>> 1807-xcall-interface
  id
  leaf
  processed
  returnData
  transactionHash
}

<<<<<<< HEAD
type stagingoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  to: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: stagingoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: stagingoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_Router_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_Router_filter): [stagingoptimismgoerli_Router!]
  originSender: stagingoptimismgoerli_Bytes
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: stagingoptimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
=======
type mumbai_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: mumbai_Bytes
  nonce: BigInt
  to: mumbai_Bytes
  callData: mumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: mumbai_Bytes
  recovery: mumbai_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: mumbai_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: mumbai_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: mumbai_Router_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_Router_filter): [mumbai_Router!]
  originSender: mumbai_Bytes
  transactingAsset: mumbai_Bytes
  transactingAmount: BigInt
  localAsset: mumbai_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: mumbai_Bytes
  executedTransactionHash: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
<<<<<<< HEAD
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
=======
  reconciledCaller: mumbai_Bytes
  reconciledTransactionHash: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

<<<<<<< HEAD
input stagingoptimismgoerli_DestinationTransfer_filter {
=======
input mumbai_DestinationTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
=======
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
=======
  to: mumbai_Bytes
  to_not: mumbai_Bytes
  to_in: [mumbai_Bytes!]
  to_not_in: [mumbai_Bytes!]
  to_contains: mumbai_Bytes
  to_not_contains: mumbai_Bytes
  callData: mumbai_Bytes
  callData_not: mumbai_Bytes
  callData_in: [mumbai_Bytes!]
  callData_not_in: [mumbai_Bytes!]
  callData_contains: mumbai_Bytes
  callData_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: stagingoptimismgoerli_Bytes
  agent_not: stagingoptimismgoerli_Bytes
  agent_in: [stagingoptimismgoerli_Bytes!]
  agent_not_in: [stagingoptimismgoerli_Bytes!]
  agent_contains: stagingoptimismgoerli_Bytes
  agent_not_contains: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  recovery_not: stagingoptimismgoerli_Bytes
  recovery_in: [stagingoptimismgoerli_Bytes!]
  recovery_not_in: [stagingoptimismgoerli_Bytes!]
  recovery_contains: stagingoptimismgoerli_Bytes
  recovery_not_contains: stagingoptimismgoerli_Bytes
=======
  agent: mumbai_Bytes
  agent_not: mumbai_Bytes
  agent_in: [mumbai_Bytes!]
  agent_not_in: [mumbai_Bytes!]
  agent_contains: mumbai_Bytes
  agent_not_contains: mumbai_Bytes
  recovery: mumbai_Bytes
  recovery_not: mumbai_Bytes
  recovery_in: [mumbai_Bytes!]
  recovery_not_in: [mumbai_Bytes!]
  recovery_contains: mumbai_Bytes
  recovery_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: stagingoptimismgoerli_Bytes
  callback_not: stagingoptimismgoerli_Bytes
  callback_in: [stagingoptimismgoerli_Bytes!]
  callback_not_in: [stagingoptimismgoerli_Bytes!]
  callback_contains: stagingoptimismgoerli_Bytes
  callback_not_contains: stagingoptimismgoerli_Bytes
=======
  callback: mumbai_Bytes
  callback_not: mumbai_Bytes
  callback_in: [mumbai_Bytes!]
  callback_not_in: [mumbai_Bytes!]
  callback_contains: mumbai_Bytes
  callback_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
=======
  status: mumbai_TransferStatus
  status_not: mumbai_TransferStatus
  status_in: [mumbai_TransferStatus!]
  status_not_in: [mumbai_TransferStatus!]
>>>>>>> 1807-xcall-interface
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
<<<<<<< HEAD
  routers_: stagingoptimismgoerli_Router_filter
  originSender: stagingoptimismgoerli_Bytes
  originSender_not: stagingoptimismgoerli_Bytes
  originSender_in: [stagingoptimismgoerli_Bytes!]
  originSender_not_in: [stagingoptimismgoerli_Bytes!]
  originSender_contains: stagingoptimismgoerli_Bytes
  originSender_not_contains: stagingoptimismgoerli_Bytes
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAsset_not: stagingoptimismgoerli_Bytes
  transactingAsset_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_not_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_contains: stagingoptimismgoerli_Bytes
  transactingAsset_not_contains: stagingoptimismgoerli_Bytes
=======
  routers_: mumbai_Router_filter
  originSender: mumbai_Bytes
  originSender_not: mumbai_Bytes
  originSender_in: [mumbai_Bytes!]
  originSender_not_in: [mumbai_Bytes!]
  originSender_contains: mumbai_Bytes
  originSender_not_contains: mumbai_Bytes
  transactingAsset: mumbai_Bytes
  transactingAsset_not: mumbai_Bytes
  transactingAsset_in: [mumbai_Bytes!]
  transactingAsset_not_in: [mumbai_Bytes!]
  transactingAsset_contains: mumbai_Bytes
  transactingAsset_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  localAsset: stagingoptimismgoerli_Bytes
  localAsset_not: stagingoptimismgoerli_Bytes
  localAsset_in: [stagingoptimismgoerli_Bytes!]
  localAsset_not_in: [stagingoptimismgoerli_Bytes!]
  localAsset_contains: stagingoptimismgoerli_Bytes
  localAsset_not_contains: stagingoptimismgoerli_Bytes
=======
  localAsset: mumbai_Bytes
  localAsset_not: mumbai_Bytes
  localAsset_in: [mumbai_Bytes!]
  localAsset_not_in: [mumbai_Bytes!]
  localAsset_contains: mumbai_Bytes
  localAsset_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  executedCaller: stagingoptimismgoerli_Bytes
  executedCaller_not: stagingoptimismgoerli_Bytes
  executedCaller_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_not_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_contains: stagingoptimismgoerli_Bytes
  executedCaller_not_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
  executedTransactionHash_not: stagingoptimismgoerli_Bytes
  executedTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash_not_contains: stagingoptimismgoerli_Bytes
=======
  executedCaller: mumbai_Bytes
  executedCaller_not: mumbai_Bytes
  executedCaller_in: [mumbai_Bytes!]
  executedCaller_not_in: [mumbai_Bytes!]
  executedCaller_contains: mumbai_Bytes
  executedCaller_not_contains: mumbai_Bytes
  executedTransactionHash: mumbai_Bytes
  executedTransactionHash_not: mumbai_Bytes
  executedTransactionHash_in: [mumbai_Bytes!]
  executedTransactionHash_not_in: [mumbai_Bytes!]
  executedTransactionHash_contains: mumbai_Bytes
  executedTransactionHash_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
<<<<<<< HEAD
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledCaller_not: stagingoptimismgoerli_Bytes
  reconciledCaller_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_contains: stagingoptimismgoerli_Bytes
  reconciledCaller_not_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: stagingoptimismgoerli_Bytes
=======
  reconciledCaller: mumbai_Bytes
  reconciledCaller_not: mumbai_Bytes
  reconciledCaller_in: [mumbai_Bytes!]
  reconciledCaller_not_in: [mumbai_Bytes!]
  reconciledCaller_contains: mumbai_Bytes
  reconciledCaller_not_contains: mumbai_Bytes
  reconciledTransactionHash: mumbai_Bytes
  reconciledTransactionHash_not: mumbai_Bytes
  reconciledTransactionHash_in: [mumbai_Bytes!]
  reconciledTransactionHash_not_in: [mumbai_Bytes!]
  reconciledTransactionHash_contains: mumbai_Bytes
  reconciledTransactionHash_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_DestinationTransfer_orderBy {
=======
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_DestinationTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
<<<<<<< HEAD
enum stagingoptimismgoerli_OrderDirection {
=======
enum mumbai_OrderDirection {
>>>>>>> 1807-xcall-interface
  asc
  desc
}

<<<<<<< HEAD
type stagingoptimismgoerli_OriginMessage {
  id: ID!
  transferId: stagingoptimismgoerli_Bytes
  destinationDomain: BigInt
  leaf: stagingoptimismgoerli_Bytes
  index: BigInt
  root: stagingoptimismgoerli_Bytes
  message: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_OriginMessage_filter {
=======
type mumbai_OriginMessage {
  id: ID!
  transferId: mumbai_Bytes
  destinationDomain: BigInt
  leaf: mumbai_Bytes
  index: BigInt
  root: mumbai_Bytes
  message: mumbai_Bytes
  transactionHash: mumbai_Bytes
}

input mumbai_OriginMessage_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
=======
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  leaf: stagingoptimismgoerli_Bytes
  leaf_not: stagingoptimismgoerli_Bytes
  leaf_in: [stagingoptimismgoerli_Bytes!]
  leaf_not_in: [stagingoptimismgoerli_Bytes!]
  leaf_contains: stagingoptimismgoerli_Bytes
  leaf_not_contains: stagingoptimismgoerli_Bytes
=======
  leaf: mumbai_Bytes
  leaf_not: mumbai_Bytes
  leaf_in: [mumbai_Bytes!]
  leaf_not_in: [mumbai_Bytes!]
  leaf_contains: mumbai_Bytes
  leaf_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
<<<<<<< HEAD
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  message: stagingoptimismgoerli_Bytes
  message_not: stagingoptimismgoerli_Bytes
  message_in: [stagingoptimismgoerli_Bytes!]
  message_not_in: [stagingoptimismgoerli_Bytes!]
  message_contains: stagingoptimismgoerli_Bytes
  message_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginMessage_orderBy {
=======
  root: mumbai_Bytes
  root_not: mumbai_Bytes
  root_in: [mumbai_Bytes!]
  root_not_in: [mumbai_Bytes!]
  root_contains: mumbai_Bytes
  root_not_contains: mumbai_Bytes
  message: mumbai_Bytes
  message_not: mumbai_Bytes
  message_in: [mumbai_Bytes!]
  message_not_in: [mumbai_Bytes!]
  message_contains: mumbai_Bytes
  message_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_OriginMessage_orderBy {
>>>>>>> 1807-xcall-interface
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

<<<<<<< HEAD
type stagingoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  to: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: stagingoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: stagingoptimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: stagingoptimismgoerli_Bytes
  bridgedAmount: BigInt
  message: stagingoptimismgoerli_OriginMessage
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
=======
type mumbai_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: mumbai_Bytes
  nonce: BigInt
  to: mumbai_Bytes
  callData: mumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: mumbai_Bytes
  recovery: mumbai_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: mumbai_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: mumbai_TransferStatus
  originMinOut: BigInt
  transactingAsset: mumbai_Bytes
  transactingAmount: BigInt
  bridgedAsset: mumbai_Bytes
  bridgedAmount: BigInt
  message: mumbai_OriginMessage
  caller: mumbai_Bytes
  transactionHash: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input stagingoptimismgoerli_OriginTransfer_filter {
=======
input mumbai_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
=======
  transferId: mumbai_Bytes
  transferId_not: mumbai_Bytes
  transferId_in: [mumbai_Bytes!]
  transferId_not_in: [mumbai_Bytes!]
  transferId_contains: mumbai_Bytes
  transferId_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
=======
  to: mumbai_Bytes
  to_not: mumbai_Bytes
  to_in: [mumbai_Bytes!]
  to_not_in: [mumbai_Bytes!]
  to_contains: mumbai_Bytes
  to_not_contains: mumbai_Bytes
  callData: mumbai_Bytes
  callData_not: mumbai_Bytes
  callData_in: [mumbai_Bytes!]
  callData_not_in: [mumbai_Bytes!]
  callData_contains: mumbai_Bytes
  callData_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: stagingoptimismgoerli_Bytes
  agent_not: stagingoptimismgoerli_Bytes
  agent_in: [stagingoptimismgoerli_Bytes!]
  agent_not_in: [stagingoptimismgoerli_Bytes!]
  agent_contains: stagingoptimismgoerli_Bytes
  agent_not_contains: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  recovery_not: stagingoptimismgoerli_Bytes
  recovery_in: [stagingoptimismgoerli_Bytes!]
  recovery_not_in: [stagingoptimismgoerli_Bytes!]
  recovery_contains: stagingoptimismgoerli_Bytes
  recovery_not_contains: stagingoptimismgoerli_Bytes
=======
  agent: mumbai_Bytes
  agent_not: mumbai_Bytes
  agent_in: [mumbai_Bytes!]
  agent_not_in: [mumbai_Bytes!]
  agent_contains: mumbai_Bytes
  agent_not_contains: mumbai_Bytes
  recovery: mumbai_Bytes
  recovery_not: mumbai_Bytes
  recovery_in: [mumbai_Bytes!]
  recovery_not_in: [mumbai_Bytes!]
  recovery_contains: mumbai_Bytes
  recovery_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: stagingoptimismgoerli_Bytes
  callback_not: stagingoptimismgoerli_Bytes
  callback_in: [stagingoptimismgoerli_Bytes!]
  callback_not_in: [stagingoptimismgoerli_Bytes!]
  callback_contains: stagingoptimismgoerli_Bytes
  callback_not_contains: stagingoptimismgoerli_Bytes
=======
  callback: mumbai_Bytes
  callback_not: mumbai_Bytes
  callback_in: [mumbai_Bytes!]
  callback_not_in: [mumbai_Bytes!]
  callback_contains: mumbai_Bytes
  callback_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
=======
  status: mumbai_TransferStatus
  status_not: mumbai_TransferStatus
  status_in: [mumbai_TransferStatus!]
  status_not_in: [mumbai_TransferStatus!]
>>>>>>> 1807-xcall-interface
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAsset_not: stagingoptimismgoerli_Bytes
  transactingAsset_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_not_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_contains: stagingoptimismgoerli_Bytes
  transactingAsset_not_contains: stagingoptimismgoerli_Bytes
=======
  transactingAsset: mumbai_Bytes
  transactingAsset_not: mumbai_Bytes
  transactingAsset_in: [mumbai_Bytes!]
  transactingAsset_not_in: [mumbai_Bytes!]
  transactingAsset_contains: mumbai_Bytes
  transactingAsset_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  bridgedAsset: stagingoptimismgoerli_Bytes
  bridgedAsset_not: stagingoptimismgoerli_Bytes
  bridgedAsset_in: [stagingoptimismgoerli_Bytes!]
  bridgedAsset_not_in: [stagingoptimismgoerli_Bytes!]
  bridgedAsset_contains: stagingoptimismgoerli_Bytes
  bridgedAsset_not_contains: stagingoptimismgoerli_Bytes
=======
  bridgedAsset: mumbai_Bytes
  bridgedAsset_not: mumbai_Bytes
  bridgedAsset_in: [mumbai_Bytes!]
  bridgedAsset_not_in: [mumbai_Bytes!]
  bridgedAsset_contains: mumbai_Bytes
  bridgedAsset_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
<<<<<<< HEAD
  message_: stagingoptimismgoerli_OriginMessage_filter
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: stagingoptimismgoerli_Bytes
  relayer_not: stagingoptimismgoerli_Bytes
  relayer_in: [stagingoptimismgoerli_Bytes!]
  relayer_not_in: [stagingoptimismgoerli_Bytes!]
  relayer_contains: stagingoptimismgoerli_Bytes
  relayer_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type stagingoptimismgoerli_RootMessageProcessed {
  id: ID!
  root: stagingoptimismgoerli_Bytes
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingoptimismgoerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_RootMessageProcessed_orderBy {
  id
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingoptimismgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: stagingoptimismgoerli_Bytes
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingoptimismgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
=======
  message_: mumbai_OriginMessage_filter
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
=======
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
>>>>>>> 1807-xcall-interface
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type stagingoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_AssetBalance_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_AssetBalance_filter): [stagingoptimismgoerli_AssetBalance!]!
}

input stagingoptimismgoerli_Router_filter {
=======
type mumbai_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: mumbai_Bytes
}

input mumbai_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: mumbai_Bytes
  relayer_not: mumbai_Bytes
  relayer_in: [mumbai_Bytes!]
  relayer_not_in: [mumbai_Bytes!]
  relayer_contains: mumbai_Bytes
  relayer_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Relayer_orderBy {
  id
  isActive
  relayer
}

type mumbai_RootMessage {
  id: ID!
  data: mumbai_Bytes
  caller: mumbai_Bytes
  transactionHash: mumbai_Bytes
  logIndex: BigInt
  transactionLogIndex: BigInt
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mumbai_RootMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  data: mumbai_Bytes
  data_not: mumbai_Bytes
  data_in: [mumbai_Bytes!]
  data_not_in: [mumbai_Bytes!]
  data_contains: mumbai_Bytes
  data_not_contains: mumbai_Bytes
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  transactionHash: mumbai_Bytes
  transactionHash_not: mumbai_Bytes
  transactionHash_in: [mumbai_Bytes!]
  transactionHash_not_in: [mumbai_Bytes!]
  transactionHash_contains: mumbai_Bytes
  transactionHash_not_contains: mumbai_Bytes
  logIndex: BigInt
  logIndex_not: BigInt
  logIndex_gt: BigInt
  logIndex_lt: BigInt
  logIndex_gte: BigInt
  logIndex_lte: BigInt
  logIndex_in: [BigInt!]
  logIndex_not_in: [BigInt!]
  transactionLogIndex: BigInt
  transactionLogIndex_not: BigInt
  transactionLogIndex_gt: BigInt
  transactionLogIndex_lt: BigInt
  transactionLogIndex_gte: BigInt
  transactionLogIndex_lte: BigInt
  transactionLogIndex_in: [BigInt!]
  transactionLogIndex_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_RootMessage_orderBy {
  id
  data
  caller
  transactionHash
  logIndex
  transactionLogIndex
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mumbai_Router {
  id: ID!
  isActive: Boolean!
  owner: mumbai_Bytes
  recipient: mumbai_Bytes
  proposedOwner: mumbai_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: mumbai_AssetBalance_orderBy, orderDirection: mumbai_OrderDirection, where: mumbai_AssetBalance_filter): [mumbai_AssetBalance!]!
}

input mumbai_Router_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  owner: stagingoptimismgoerli_Bytes
  owner_not: stagingoptimismgoerli_Bytes
  owner_in: [stagingoptimismgoerli_Bytes!]
  owner_not_in: [stagingoptimismgoerli_Bytes!]
  owner_contains: stagingoptimismgoerli_Bytes
  owner_not_contains: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  recipient_not: stagingoptimismgoerli_Bytes
  recipient_in: [stagingoptimismgoerli_Bytes!]
  recipient_not_in: [stagingoptimismgoerli_Bytes!]
  recipient_contains: stagingoptimismgoerli_Bytes
  recipient_not_contains: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedOwner_not: stagingoptimismgoerli_Bytes
  proposedOwner_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_not_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_contains: stagingoptimismgoerli_Bytes
  proposedOwner_not_contains: stagingoptimismgoerli_Bytes
=======
  owner: mumbai_Bytes
  owner_not: mumbai_Bytes
  owner_in: [mumbai_Bytes!]
  owner_not_in: [mumbai_Bytes!]
  owner_contains: mumbai_Bytes
  owner_not_contains: mumbai_Bytes
  recipient: mumbai_Bytes
  recipient_not: mumbai_Bytes
  recipient_in: [mumbai_Bytes!]
  recipient_not_in: [mumbai_Bytes!]
  recipient_contains: mumbai_Bytes
  recipient_not_contains: mumbai_Bytes
  proposedOwner: mumbai_Bytes
  proposedOwner_not: mumbai_Bytes
  proposedOwner_in: [mumbai_Bytes!]
  proposedOwner_not_in: [mumbai_Bytes!]
  proposedOwner_contains: mumbai_Bytes
  proposedOwner_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
<<<<<<< HEAD
  assetBalances_: stagingoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Router_orderBy {
=======
  assetBalances_: mumbai_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Router_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

<<<<<<< HEAD
type stagingoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_Setting_filter {
=======
type mumbai_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: mumbai_Bytes!
}

input mumbai_Setting_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
<<<<<<< HEAD
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Setting_orderBy {
=======
  caller: mumbai_Bytes
  caller_not: mumbai_Bytes
  caller_in: [mumbai_Bytes!]
  caller_not_in: [mumbai_Bytes!]
  caller_contains: mumbai_Bytes
  caller_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_Setting_orderBy {
>>>>>>> 1807-xcall-interface
  id
  maxRoutersPerTransfer
  caller
}

<<<<<<< HEAD
type stagingoptimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_SponsorVault_filter {
=======
type mumbai_SponsorVault {
  id: ID!
  sponsorVault: mumbai_Bytes!
}

input mumbai_SponsorVault_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  sponsorVault: stagingoptimismgoerli_Bytes
  sponsorVault_not: stagingoptimismgoerli_Bytes
  sponsorVault_in: [stagingoptimismgoerli_Bytes!]
  sponsorVault_not_in: [stagingoptimismgoerli_Bytes!]
  sponsorVault_contains: stagingoptimismgoerli_Bytes
  sponsorVault_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_SponsorVault_orderBy {
=======
  sponsorVault: mumbai_Bytes
  sponsorVault_not: mumbai_Bytes
  sponsorVault_in: [mumbai_Bytes!]
  sponsorVault_not_in: [mumbai_Bytes!]
  sponsorVault_contains: mumbai_Bytes
  sponsorVault_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_SponsorVault_orderBy {
>>>>>>> 1807-xcall-interface
  id
  sponsorVault
}

<<<<<<< HEAD
type stagingoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: stagingoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_StableSwap_filter {
=======
type mumbai_StableSwap {
  id: ID!
  canonicalId: mumbai_Bytes!
  domain: BigInt
  swapPool: mumbai_Bytes!
}

input mumbai_StableSwap_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
=======
  canonicalId: mumbai_Bytes
  canonicalId_not: mumbai_Bytes
  canonicalId_in: [mumbai_Bytes!]
  canonicalId_not_in: [mumbai_Bytes!]
  canonicalId_contains: mumbai_Bytes
  canonicalId_not_contains: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
<<<<<<< HEAD
  swapPool: stagingoptimismgoerli_Bytes
  swapPool_not: stagingoptimismgoerli_Bytes
  swapPool_in: [stagingoptimismgoerli_Bytes!]
  swapPool_not_in: [stagingoptimismgoerli_Bytes!]
  swapPool_contains: stagingoptimismgoerli_Bytes
  swapPool_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwap_orderBy {
=======
  swapPool: mumbai_Bytes
  swapPool_not: mumbai_Bytes
  swapPool_in: [mumbai_Bytes!]
  swapPool_not_in: [mumbai_Bytes!]
  swapPool_contains: mumbai_Bytes
  swapPool_not_contains: mumbai_Bytes
  """Filter for the block changed event."""
  _change_block: mumbai_BlockChangedFilter
}

enum mumbai_StableSwap_orderBy {
>>>>>>> 1807-xcall-interface
  id
  canonicalId
  domain
  swapPool
}

<<<<<<< HEAD
enum stagingoptimismgoerli_TransferStatus {
=======
enum mumbai_TransferStatus {
>>>>>>> 1807-xcall-interface
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

<<<<<<< HEAD
type stagingoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: stagingoptimismgoerli_Bytes
=======
type mumbai__Block_ {
  """The hash of the block"""
  hash: mumbai_Bytes
>>>>>>> 1807-xcall-interface
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
<<<<<<< HEAD
type stagingoptimismgoerli__Meta_ {
=======
type mumbai__Meta_ {
>>>>>>> 1807-xcall-interface
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
<<<<<<< HEAD
  block: stagingoptimismgoerli__Block_!
=======
  block: mumbai__Block_!
>>>>>>> 1807-xcall-interface
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

<<<<<<< HEAD
type staginggoerli_AggregateRoot {
  id: ID!
  root: staginggoerli_Bytes!
}

input staginggoerli_AggregateRoot_filter {
=======
type stagingoptimismgoerli_AggregateRoot {
  id: ID!
  root: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_AggregateRoot_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AggregateRoot_orderBy {
=======
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AggregateRoot_orderBy {
>>>>>>> 1807-xcall-interface
  id
  root
}

<<<<<<< HEAD
type staginggoerli_Asset {
  id: ID!
  key: staginggoerli_Bytes
  local: staginggoerli_Bytes!
  adoptedAsset: staginggoerli_Bytes!
  canonicalId: staginggoerli_Bytes!
=======
type stagingoptimismgoerli_Asset {
  id: ID!
  key: stagingoptimismgoerli_Bytes
  local: stagingoptimismgoerli_Bytes!
  adoptedAsset: stagingoptimismgoerli_Bytes!
  canonicalId: stagingoptimismgoerli_Bytes!
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

<<<<<<< HEAD
type staginggoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: staginggoerli_Router!
  asset: staginggoerli_Asset!
}

input staginggoerli_AssetBalance_filter {
=======
type stagingoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingoptimismgoerli_Router!
  asset: stagingoptimismgoerli_Asset!
}

input stagingoptimismgoerli_AssetBalance_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
<<<<<<< HEAD
  router_: staginggoerli_Router_filter
=======
  router_: stagingoptimismgoerli_Router_filter
>>>>>>> 1807-xcall-interface
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
<<<<<<< HEAD
  asset_: staginggoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AssetBalance_orderBy {
=======
  asset_: stagingoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_AssetBalance_orderBy {
>>>>>>> 1807-xcall-interface
  id
  amount
  router
  asset
}

<<<<<<< HEAD
input staginggoerli_Asset_filter {
=======
input stagingoptimismgoerli_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  key: staginggoerli_Bytes
  key_not: staginggoerli_Bytes
  key_in: [staginggoerli_Bytes!]
  key_not_in: [staginggoerli_Bytes!]
  key_contains: staginggoerli_Bytes
  key_not_contains: staginggoerli_Bytes
  local: staginggoerli_Bytes
  local_not: staginggoerli_Bytes
  local_in: [staginggoerli_Bytes!]
  local_not_in: [staginggoerli_Bytes!]
  local_contains: staginggoerli_Bytes
  local_not_contains: staginggoerli_Bytes
  adoptedAsset: staginggoerli_Bytes
  adoptedAsset_not: staginggoerli_Bytes
  adoptedAsset_in: [staginggoerli_Bytes!]
  adoptedAsset_not_in: [staginggoerli_Bytes!]
  adoptedAsset_contains: staginggoerli_Bytes
  adoptedAsset_not_contains: staginggoerli_Bytes
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
=======
  key: stagingoptimismgoerli_Bytes
  key_not: stagingoptimismgoerli_Bytes
  key_in: [stagingoptimismgoerli_Bytes!]
  key_not_in: [stagingoptimismgoerli_Bytes!]
  key_contains: stagingoptimismgoerli_Bytes
  key_not_contains: stagingoptimismgoerli_Bytes
  local: stagingoptimismgoerli_Bytes
  local_not: stagingoptimismgoerli_Bytes
  local_in: [stagingoptimismgoerli_Bytes!]
  local_not_in: [stagingoptimismgoerli_Bytes!]
  local_contains: stagingoptimismgoerli_Bytes
  local_not_contains: stagingoptimismgoerli_Bytes
  adoptedAsset: stagingoptimismgoerli_Bytes
  adoptedAsset_not: stagingoptimismgoerli_Bytes
  adoptedAsset_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [stagingoptimismgoerli_Bytes!]
  adoptedAsset_contains: stagingoptimismgoerli_Bytes
  adoptedAsset_not_contains: stagingoptimismgoerli_Bytes
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Asset_orderBy {
=======
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Asset_orderBy {
>>>>>>> 1807-xcall-interface
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

<<<<<<< HEAD
scalar staginggoerli_BigDecimal

input staginggoerli_BlockChangedFilter {
  number_gte: Int!
}

input staginggoerli_Block_height {
  hash: staginggoerli_Bytes
=======
scalar stagingoptimismgoerli_BigDecimal

input stagingoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input stagingoptimismgoerli_Block_height {
  hash: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  number: Int
  number_gte: Int
}

<<<<<<< HEAD
scalar staginggoerli_Bytes

type staginggoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: staginggoerli_Bytes!
  rootManager: staginggoerli_Bytes!
  mirrorConnector: staginggoerli_Bytes!
}

input staginggoerli_ConnectorMeta_filter {
=======
scalar stagingoptimismgoerli_Bytes

type stagingoptimismgoerli_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingoptimismgoerli_Bytes!
  rootManager: stagingoptimismgoerli_Bytes!
  mirrorConnector: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_ConnectorMeta_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
<<<<<<< HEAD
  amb: staginggoerli_Bytes
  amb_not: staginggoerli_Bytes
  amb_in: [staginggoerli_Bytes!]
  amb_not_in: [staginggoerli_Bytes!]
  amb_contains: staginggoerli_Bytes
  amb_not_contains: staginggoerli_Bytes
  rootManager: staginggoerli_Bytes
  rootManager_not: staginggoerli_Bytes
  rootManager_in: [staginggoerli_Bytes!]
  rootManager_not_in: [staginggoerli_Bytes!]
  rootManager_contains: staginggoerli_Bytes
  rootManager_not_contains: staginggoerli_Bytes
  mirrorConnector: staginggoerli_Bytes
  mirrorConnector_not: staginggoerli_Bytes
  mirrorConnector_in: [staginggoerli_Bytes!]
  mirrorConnector_not_in: [staginggoerli_Bytes!]
  mirrorConnector_contains: staginggoerli_Bytes
  mirrorConnector_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_ConnectorMeta_orderBy {
=======
  amb: stagingoptimismgoerli_Bytes
  amb_not: stagingoptimismgoerli_Bytes
  amb_in: [stagingoptimismgoerli_Bytes!]
  amb_not_in: [stagingoptimismgoerli_Bytes!]
  amb_contains: stagingoptimismgoerli_Bytes
  amb_not_contains: stagingoptimismgoerli_Bytes
  rootManager: stagingoptimismgoerli_Bytes
  rootManager_not: stagingoptimismgoerli_Bytes
  rootManager_in: [stagingoptimismgoerli_Bytes!]
  rootManager_not_in: [stagingoptimismgoerli_Bytes!]
  rootManager_contains: stagingoptimismgoerli_Bytes
  rootManager_not_contains: stagingoptimismgoerli_Bytes
  mirrorConnector: stagingoptimismgoerli_Bytes
  mirrorConnector_not: stagingoptimismgoerli_Bytes
  mirrorConnector_in: [stagingoptimismgoerli_Bytes!]
  mirrorConnector_not_in: [stagingoptimismgoerli_Bytes!]
  mirrorConnector_contains: stagingoptimismgoerli_Bytes
  mirrorConnector_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_ConnectorMeta_orderBy {
>>>>>>> 1807-xcall-interface
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

<<<<<<< HEAD
type staginggoerli_DestinationMessage {
  id: ID!
  leaf: staginggoerli_Bytes
  processed: Boolean
  returnData: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
}

input staginggoerli_DestinationMessage_filter {
=======
type stagingoptimismgoerli_DestinationMessage {
  id: ID!
  leaf: stagingoptimismgoerli_Bytes
  processed: Boolean
  returnData: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_DestinationMessage_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  leaf: staginggoerli_Bytes
  leaf_not: staginggoerli_Bytes
  leaf_in: [staginggoerli_Bytes!]
  leaf_not_in: [staginggoerli_Bytes!]
  leaf_contains: staginggoerli_Bytes
  leaf_not_contains: staginggoerli_Bytes
=======
  leaf: stagingoptimismgoerli_Bytes
  leaf_not: stagingoptimismgoerli_Bytes
  leaf_in: [stagingoptimismgoerli_Bytes!]
  leaf_not_in: [stagingoptimismgoerli_Bytes!]
  leaf_contains: stagingoptimismgoerli_Bytes
  leaf_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
<<<<<<< HEAD
  returnData: staginggoerli_Bytes
  returnData_not: staginggoerli_Bytes
  returnData_in: [staginggoerli_Bytes!]
  returnData_not_in: [staginggoerli_Bytes!]
  returnData_contains: staginggoerli_Bytes
  returnData_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_DestinationMessage_orderBy {
=======
  returnData: stagingoptimismgoerli_Bytes
  returnData_not: stagingoptimismgoerli_Bytes
  returnData_in: [stagingoptimismgoerli_Bytes!]
  returnData_not_in: [stagingoptimismgoerli_Bytes!]
  returnData_contains: stagingoptimismgoerli_Bytes
  returnData_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_DestinationMessage_orderBy {
>>>>>>> 1807-xcall-interface
  id
  leaf
  processed
  returnData
  transactionHash
}

<<<<<<< HEAD
type staginggoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  to: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: staginggoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: staginggoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_Router_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_Router_filter): [staginggoerli_Router!]
  originSender: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAmount: BigInt
  localAsset: staginggoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
=======
type stagingoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  to: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: stagingoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: stagingoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_Router_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_Router_filter): [stagingoptimismgoerli_Router!]
  originSender: stagingoptimismgoerli_Bytes
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: stagingoptimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
<<<<<<< HEAD
  reconciledCaller: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
=======
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

<<<<<<< HEAD
input staginggoerli_DestinationTransfer_filter {
=======
input stagingoptimismgoerli_DestinationTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
=======
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
=======
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: staginggoerli_Bytes
  agent_not: staginggoerli_Bytes
  agent_in: [staginggoerli_Bytes!]
  agent_not_in: [staginggoerli_Bytes!]
  agent_contains: staginggoerli_Bytes
  agent_not_contains: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  recovery_not: staginggoerli_Bytes
  recovery_in: [staginggoerli_Bytes!]
  recovery_not_in: [staginggoerli_Bytes!]
  recovery_contains: staginggoerli_Bytes
  recovery_not_contains: staginggoerli_Bytes
=======
  agent: stagingoptimismgoerli_Bytes
  agent_not: stagingoptimismgoerli_Bytes
  agent_in: [stagingoptimismgoerli_Bytes!]
  agent_not_in: [stagingoptimismgoerli_Bytes!]
  agent_contains: stagingoptimismgoerli_Bytes
  agent_not_contains: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  recovery_not: stagingoptimismgoerli_Bytes
  recovery_in: [stagingoptimismgoerli_Bytes!]
  recovery_not_in: [stagingoptimismgoerli_Bytes!]
  recovery_contains: stagingoptimismgoerli_Bytes
  recovery_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: staginggoerli_Bytes
  callback_not: staginggoerli_Bytes
  callback_in: [staginggoerli_Bytes!]
  callback_not_in: [staginggoerli_Bytes!]
  callback_contains: staginggoerli_Bytes
  callback_not_contains: staginggoerli_Bytes
=======
  callback: stagingoptimismgoerli_Bytes
  callback_not: stagingoptimismgoerli_Bytes
  callback_in: [stagingoptimismgoerli_Bytes!]
  callback_not_in: [stagingoptimismgoerli_Bytes!]
  callback_contains: stagingoptimismgoerli_Bytes
  callback_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
=======
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
>>>>>>> 1807-xcall-interface
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
<<<<<<< HEAD
  routers_: staginggoerli_Router_filter
  originSender: staginggoerli_Bytes
  originSender_not: staginggoerli_Bytes
  originSender_in: [staginggoerli_Bytes!]
  originSender_not_in: [staginggoerli_Bytes!]
  originSender_contains: staginggoerli_Bytes
  originSender_not_contains: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAsset_not: staginggoerli_Bytes
  transactingAsset_in: [staginggoerli_Bytes!]
  transactingAsset_not_in: [staginggoerli_Bytes!]
  transactingAsset_contains: staginggoerli_Bytes
  transactingAsset_not_contains: staginggoerli_Bytes
=======
  routers_: stagingoptimismgoerli_Router_filter
  originSender: stagingoptimismgoerli_Bytes
  originSender_not: stagingoptimismgoerli_Bytes
  originSender_in: [stagingoptimismgoerli_Bytes!]
  originSender_not_in: [stagingoptimismgoerli_Bytes!]
  originSender_contains: stagingoptimismgoerli_Bytes
  originSender_not_contains: stagingoptimismgoerli_Bytes
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAsset_not: stagingoptimismgoerli_Bytes
  transactingAsset_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_not_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_contains: stagingoptimismgoerli_Bytes
  transactingAsset_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  localAsset: staginggoerli_Bytes
  localAsset_not: staginggoerli_Bytes
  localAsset_in: [staginggoerli_Bytes!]
  localAsset_not_in: [staginggoerli_Bytes!]
  localAsset_contains: staginggoerli_Bytes
  localAsset_not_contains: staginggoerli_Bytes
=======
  localAsset: stagingoptimismgoerli_Bytes
  localAsset_not: stagingoptimismgoerli_Bytes
  localAsset_in: [stagingoptimismgoerli_Bytes!]
  localAsset_not_in: [stagingoptimismgoerli_Bytes!]
  localAsset_contains: stagingoptimismgoerli_Bytes
  localAsset_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  executedCaller: staginggoerli_Bytes
  executedCaller_not: staginggoerli_Bytes
  executedCaller_in: [staginggoerli_Bytes!]
  executedCaller_not_in: [staginggoerli_Bytes!]
  executedCaller_contains: staginggoerli_Bytes
  executedCaller_not_contains: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
  executedTransactionHash_not: staginggoerli_Bytes
  executedTransactionHash_in: [staginggoerli_Bytes!]
  executedTransactionHash_not_in: [staginggoerli_Bytes!]
  executedTransactionHash_contains: staginggoerli_Bytes
  executedTransactionHash_not_contains: staginggoerli_Bytes
=======
  executedCaller: stagingoptimismgoerli_Bytes
  executedCaller_not: stagingoptimismgoerli_Bytes
  executedCaller_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_not_in: [stagingoptimismgoerli_Bytes!]
  executedCaller_contains: stagingoptimismgoerli_Bytes
  executedCaller_not_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash: stagingoptimismgoerli_Bytes
  executedTransactionHash_not: stagingoptimismgoerli_Bytes
  executedTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  executedTransactionHash_contains: stagingoptimismgoerli_Bytes
  executedTransactionHash_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
<<<<<<< HEAD
  reconciledCaller: staginggoerli_Bytes
  reconciledCaller_not: staginggoerli_Bytes
  reconciledCaller_in: [staginggoerli_Bytes!]
  reconciledCaller_not_in: [staginggoerli_Bytes!]
  reconciledCaller_contains: staginggoerli_Bytes
  reconciledCaller_not_contains: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
  reconciledTransactionHash_not: staginggoerli_Bytes
  reconciledTransactionHash_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_not_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_contains: staginggoerli_Bytes
  reconciledTransactionHash_not_contains: staginggoerli_Bytes
=======
  reconciledCaller: stagingoptimismgoerli_Bytes
  reconciledCaller_not: stagingoptimismgoerli_Bytes
  reconciledCaller_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledCaller_contains: stagingoptimismgoerli_Bytes
  reconciledCaller_not_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: stagingoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_DestinationTransfer_orderBy {
=======
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_DestinationTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
<<<<<<< HEAD
enum staginggoerli_OrderDirection {
=======
enum stagingoptimismgoerli_OrderDirection {
>>>>>>> 1807-xcall-interface
  asc
  desc
}

<<<<<<< HEAD
type staginggoerli_OriginMessage {
  id: ID!
  transferId: staginggoerli_Bytes
  destinationDomain: BigInt
  leaf: staginggoerli_Bytes
  index: BigInt
  root: staginggoerli_Bytes
  message: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
}

input staginggoerli_OriginMessage_filter {
=======
type stagingoptimismgoerli_OriginMessage {
  id: ID!
  transferId: stagingoptimismgoerli_Bytes
  destinationDomain: BigInt
  leaf: stagingoptimismgoerli_Bytes
  index: BigInt
  root: stagingoptimismgoerli_Bytes
  message: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_OriginMessage_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
=======
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  leaf: staginggoerli_Bytes
  leaf_not: staginggoerli_Bytes
  leaf_in: [staginggoerli_Bytes!]
  leaf_not_in: [staginggoerli_Bytes!]
  leaf_contains: staginggoerli_Bytes
  leaf_not_contains: staginggoerli_Bytes
=======
  leaf: stagingoptimismgoerli_Bytes
  leaf_not: stagingoptimismgoerli_Bytes
  leaf_in: [stagingoptimismgoerli_Bytes!]
  leaf_not_in: [stagingoptimismgoerli_Bytes!]
  leaf_contains: stagingoptimismgoerli_Bytes
  leaf_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
<<<<<<< HEAD
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  message: staginggoerli_Bytes
  message_not: staginggoerli_Bytes
  message_in: [staginggoerli_Bytes!]
  message_not_in: [staginggoerli_Bytes!]
  message_contains: staginggoerli_Bytes
  message_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OriginMessage_orderBy {
=======
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  message: stagingoptimismgoerli_Bytes
  message_not: stagingoptimismgoerli_Bytes
  message_in: [stagingoptimismgoerli_Bytes!]
  message_not_in: [stagingoptimismgoerli_Bytes!]
  message_contains: stagingoptimismgoerli_Bytes
  message_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginMessage_orderBy {
>>>>>>> 1807-xcall-interface
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

<<<<<<< HEAD
type staginggoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  to: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: staginggoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: staginggoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: staginggoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: staginggoerli_Bytes
  bridgedAmount: BigInt
  message: staginggoerli_OriginMessage
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
=======
type stagingoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingoptimismgoerli_Bytes
  nonce: BigInt
  to: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: stagingoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: stagingoptimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: stagingoptimismgoerli_Bytes
  bridgedAmount: BigInt
  message: stagingoptimismgoerli_OriginMessage
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input staginggoerli_OriginTransfer_filter {
=======
input stagingoptimismgoerli_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
=======
  transferId: stagingoptimismgoerli_Bytes
  transferId_not: stagingoptimismgoerli_Bytes
  transferId_in: [stagingoptimismgoerli_Bytes!]
  transferId_not_in: [stagingoptimismgoerli_Bytes!]
  transferId_contains: stagingoptimismgoerli_Bytes
  transferId_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
=======
  to: stagingoptimismgoerli_Bytes
  to_not: stagingoptimismgoerli_Bytes
  to_in: [stagingoptimismgoerli_Bytes!]
  to_not_in: [stagingoptimismgoerli_Bytes!]
  to_contains: stagingoptimismgoerli_Bytes
  to_not_contains: stagingoptimismgoerli_Bytes
  callData: stagingoptimismgoerli_Bytes
  callData_not: stagingoptimismgoerli_Bytes
  callData_in: [stagingoptimismgoerli_Bytes!]
  callData_not_in: [stagingoptimismgoerli_Bytes!]
  callData_contains: stagingoptimismgoerli_Bytes
  callData_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: staginggoerli_Bytes
  agent_not: staginggoerli_Bytes
  agent_in: [staginggoerli_Bytes!]
  agent_not_in: [staginggoerli_Bytes!]
  agent_contains: staginggoerli_Bytes
  agent_not_contains: staginggoerli_Bytes
  recovery: staginggoerli_Bytes
  recovery_not: staginggoerli_Bytes
  recovery_in: [staginggoerli_Bytes!]
  recovery_not_in: [staginggoerli_Bytes!]
  recovery_contains: staginggoerli_Bytes
  recovery_not_contains: staginggoerli_Bytes
=======
  agent: stagingoptimismgoerli_Bytes
  agent_not: stagingoptimismgoerli_Bytes
  agent_in: [stagingoptimismgoerli_Bytes!]
  agent_not_in: [stagingoptimismgoerli_Bytes!]
  agent_contains: stagingoptimismgoerli_Bytes
  agent_not_contains: stagingoptimismgoerli_Bytes
  recovery: stagingoptimismgoerli_Bytes
  recovery_not: stagingoptimismgoerli_Bytes
  recovery_in: [stagingoptimismgoerli_Bytes!]
  recovery_not_in: [stagingoptimismgoerli_Bytes!]
  recovery_contains: stagingoptimismgoerli_Bytes
  recovery_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: staginggoerli_Bytes
  callback_not: staginggoerli_Bytes
  callback_in: [staginggoerli_Bytes!]
  callback_not_in: [staginggoerli_Bytes!]
  callback_contains: staginggoerli_Bytes
  callback_not_contains: staginggoerli_Bytes
=======
  callback: stagingoptimismgoerli_Bytes
  callback_not: stagingoptimismgoerli_Bytes
  callback_in: [stagingoptimismgoerli_Bytes!]
  callback_not_in: [stagingoptimismgoerli_Bytes!]
  callback_contains: stagingoptimismgoerli_Bytes
  callback_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
=======
  status: stagingoptimismgoerli_TransferStatus
  status_not: stagingoptimismgoerli_TransferStatus
  status_in: [stagingoptimismgoerli_TransferStatus!]
  status_not_in: [stagingoptimismgoerli_TransferStatus!]
>>>>>>> 1807-xcall-interface
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  transactingAsset: staginggoerli_Bytes
  transactingAsset_not: staginggoerli_Bytes
  transactingAsset_in: [staginggoerli_Bytes!]
  transactingAsset_not_in: [staginggoerli_Bytes!]
  transactingAsset_contains: staginggoerli_Bytes
  transactingAsset_not_contains: staginggoerli_Bytes
=======
  transactingAsset: stagingoptimismgoerli_Bytes
  transactingAsset_not: stagingoptimismgoerli_Bytes
  transactingAsset_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_not_in: [stagingoptimismgoerli_Bytes!]
  transactingAsset_contains: stagingoptimismgoerli_Bytes
  transactingAsset_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  bridgedAsset: staginggoerli_Bytes
  bridgedAsset_not: staginggoerli_Bytes
  bridgedAsset_in: [staginggoerli_Bytes!]
  bridgedAsset_not_in: [staginggoerli_Bytes!]
  bridgedAsset_contains: staginggoerli_Bytes
  bridgedAsset_not_contains: staginggoerli_Bytes
=======
  bridgedAsset: stagingoptimismgoerli_Bytes
  bridgedAsset_not: stagingoptimismgoerli_Bytes
  bridgedAsset_in: [stagingoptimismgoerli_Bytes!]
  bridgedAsset_not_in: [stagingoptimismgoerli_Bytes!]
  bridgedAsset_contains: stagingoptimismgoerli_Bytes
  bridgedAsset_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
<<<<<<< HEAD
  message_: staginggoerli_OriginMessage_filter
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
=======
  message_: stagingoptimismgoerli_OriginMessage_filter
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OriginTransfer_orderBy {
=======
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_OriginTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type staginggoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: staginggoerli_Bytes
}

input staginggoerli_Relayer_filter {
=======
type stagingoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingoptimismgoerli_Bytes
}

input stagingoptimismgoerli_Relayer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  relayer: staginggoerli_Bytes
  relayer_not: staginggoerli_Bytes
  relayer_in: [staginggoerli_Bytes!]
  relayer_not_in: [staginggoerli_Bytes!]
  relayer_contains: staginggoerli_Bytes
  relayer_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Relayer_orderBy {
=======
  relayer: stagingoptimismgoerli_Bytes
  relayer_not: stagingoptimismgoerli_Bytes
  relayer_in: [stagingoptimismgoerli_Bytes!]
  relayer_not_in: [stagingoptimismgoerli_Bytes!]
  relayer_contains: stagingoptimismgoerli_Bytes
  relayer_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Relayer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  relayer
}

<<<<<<< HEAD
type staginggoerli_RootMessageProcessed {
  id: ID!
  root: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input staginggoerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootMessageProcessed_orderBy {
  id
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type staginggoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
=======
type stagingoptimismgoerli_RootMessageProcessed {
  id: ID!
  root: stagingoptimismgoerli_Bytes
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input staginggoerli_RootMessageSent_filter {
=======
input stagingoptimismgoerli_RootMessageProcessed_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
=======
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_RootMessageProcessed_orderBy {
  id
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingoptimismgoerli_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: stagingoptimismgoerli_Bytes
  caller: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingoptimismgoerli_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
>>>>>>> 1807-xcall-interface
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
<<<<<<< HEAD
  root: staginggoerli_Bytes
  root_not: staginggoerli_Bytes
  root_in: [staginggoerli_Bytes!]
  root_not_in: [staginggoerli_Bytes!]
  root_contains: staginggoerli_Bytes
  root_not_contains: staginggoerli_Bytes
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
=======
  root: stagingoptimismgoerli_Bytes
  root_not: stagingoptimismgoerli_Bytes
  root_in: [stagingoptimismgoerli_Bytes!]
  root_not_in: [stagingoptimismgoerli_Bytes!]
  root_contains: stagingoptimismgoerli_Bytes
  root_not_contains: stagingoptimismgoerli_Bytes
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  transactionHash: stagingoptimismgoerli_Bytes
  transactionHash_not: stagingoptimismgoerli_Bytes
  transactionHash_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_not_in: [stagingoptimismgoerli_Bytes!]
  transactionHash_contains: stagingoptimismgoerli_Bytes
  transactionHash_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_RootMessageSent_orderBy {
=======
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_RootMessageSent_orderBy {
>>>>>>> 1807-xcall-interface
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type staginggoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_AssetBalance_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_AssetBalance_filter): [staginggoerli_AssetBalance!]!
}

input staginggoerli_Router_filter {
=======
type stagingoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_AssetBalance_orderBy, orderDirection: stagingoptimismgoerli_OrderDirection, where: stagingoptimismgoerli_AssetBalance_filter): [stagingoptimismgoerli_AssetBalance!]!
}

input stagingoptimismgoerli_Router_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  owner: staginggoerli_Bytes
  owner_not: staginggoerli_Bytes
  owner_in: [staginggoerli_Bytes!]
  owner_not_in: [staginggoerli_Bytes!]
  owner_contains: staginggoerli_Bytes
  owner_not_contains: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  recipient_not: staginggoerli_Bytes
  recipient_in: [staginggoerli_Bytes!]
  recipient_not_in: [staginggoerli_Bytes!]
  recipient_contains: staginggoerli_Bytes
  recipient_not_contains: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedOwner_not: staginggoerli_Bytes
  proposedOwner_in: [staginggoerli_Bytes!]
  proposedOwner_not_in: [staginggoerli_Bytes!]
  proposedOwner_contains: staginggoerli_Bytes
  proposedOwner_not_contains: staginggoerli_Bytes
=======
  owner: stagingoptimismgoerli_Bytes
  owner_not: stagingoptimismgoerli_Bytes
  owner_in: [stagingoptimismgoerli_Bytes!]
  owner_not_in: [stagingoptimismgoerli_Bytes!]
  owner_contains: stagingoptimismgoerli_Bytes
  owner_not_contains: stagingoptimismgoerli_Bytes
  recipient: stagingoptimismgoerli_Bytes
  recipient_not: stagingoptimismgoerli_Bytes
  recipient_in: [stagingoptimismgoerli_Bytes!]
  recipient_not_in: [stagingoptimismgoerli_Bytes!]
  recipient_contains: stagingoptimismgoerli_Bytes
  recipient_not_contains: stagingoptimismgoerli_Bytes
  proposedOwner: stagingoptimismgoerli_Bytes
  proposedOwner_not: stagingoptimismgoerli_Bytes
  proposedOwner_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_not_in: [stagingoptimismgoerli_Bytes!]
  proposedOwner_contains: stagingoptimismgoerli_Bytes
  proposedOwner_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
<<<<<<< HEAD
  assetBalances_: staginggoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Router_orderBy {
=======
  assetBalances_: stagingoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Router_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

<<<<<<< HEAD
type staginggoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: staginggoerli_Bytes!
}

input staginggoerli_Setting_filter {
=======
type stagingoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_Setting_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
<<<<<<< HEAD
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Setting_orderBy {
=======
  caller: stagingoptimismgoerli_Bytes
  caller_not: stagingoptimismgoerli_Bytes
  caller_in: [stagingoptimismgoerli_Bytes!]
  caller_not_in: [stagingoptimismgoerli_Bytes!]
  caller_contains: stagingoptimismgoerli_Bytes
  caller_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_Setting_orderBy {
>>>>>>> 1807-xcall-interface
  id
  maxRoutersPerTransfer
  caller
}

<<<<<<< HEAD
type staginggoerli_SponsorVault {
  id: ID!
  sponsorVault: staginggoerli_Bytes!
}

input staginggoerli_SponsorVault_filter {
=======
type stagingoptimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_SponsorVault_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  sponsorVault: staginggoerli_Bytes
  sponsorVault_not: staginggoerli_Bytes
  sponsorVault_in: [staginggoerli_Bytes!]
  sponsorVault_not_in: [staginggoerli_Bytes!]
  sponsorVault_contains: staginggoerli_Bytes
  sponsorVault_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_SponsorVault_orderBy {
=======
  sponsorVault: stagingoptimismgoerli_Bytes
  sponsorVault_not: stagingoptimismgoerli_Bytes
  sponsorVault_in: [stagingoptimismgoerli_Bytes!]
  sponsorVault_not_in: [stagingoptimismgoerli_Bytes!]
  sponsorVault_contains: stagingoptimismgoerli_Bytes
  sponsorVault_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_SponsorVault_orderBy {
>>>>>>> 1807-xcall-interface
  id
  sponsorVault
}

<<<<<<< HEAD
type staginggoerli_StableSwap {
  id: ID!
  canonicalId: staginggoerli_Bytes!
  domain: BigInt
  swapPool: staginggoerli_Bytes!
}

input staginggoerli_StableSwap_filter {
=======
type stagingoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: stagingoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: stagingoptimismgoerli_Bytes!
}

input stagingoptimismgoerli_StableSwap_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
=======
  canonicalId: stagingoptimismgoerli_Bytes
  canonicalId_not: stagingoptimismgoerli_Bytes
  canonicalId_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
<<<<<<< HEAD
  swapPool: staginggoerli_Bytes
  swapPool_not: staginggoerli_Bytes
  swapPool_in: [staginggoerli_Bytes!]
  swapPool_not_in: [staginggoerli_Bytes!]
  swapPool_contains: staginggoerli_Bytes
  swapPool_not_contains: staginggoerli_Bytes
  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_StableSwap_orderBy {
=======
  swapPool: stagingoptimismgoerli_Bytes
  swapPool_not: stagingoptimismgoerli_Bytes
  swapPool_in: [stagingoptimismgoerli_Bytes!]
  swapPool_not_in: [stagingoptimismgoerli_Bytes!]
  swapPool_contains: stagingoptimismgoerli_Bytes
  swapPool_not_contains: stagingoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_BlockChangedFilter
}

enum stagingoptimismgoerli_StableSwap_orderBy {
>>>>>>> 1807-xcall-interface
  id
  canonicalId
  domain
  swapPool
}

<<<<<<< HEAD
enum staginggoerli_TransferStatus {
=======
enum stagingoptimismgoerli_TransferStatus {
>>>>>>> 1807-xcall-interface
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

<<<<<<< HEAD
type staginggoerli__Block_ {
  """The hash of the block"""
  hash: staginggoerli_Bytes
=======
type stagingoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: stagingoptimismgoerli_Bytes
>>>>>>> 1807-xcall-interface
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
<<<<<<< HEAD
type staginggoerli__Meta_ {
=======
type stagingoptimismgoerli__Meta_ {
>>>>>>> 1807-xcall-interface
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
<<<<<<< HEAD
  block: staginggoerli__Block_!
=======
  block: stagingoptimismgoerli__Block_!
>>>>>>> 1807-xcall-interface
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
<<<<<<< HEAD
}

type local1337_Asset {
  id: ID!
  key: local1337_Bytes
  local: local1337_Bytes!
  adoptedAsset: local1337_Bytes!
  canonicalId: local1337_Bytes!
=======
}

type stagingmumbai_AggregateRoot {
  id: ID!
  root: stagingmumbai_Bytes!
}

input stagingmumbai_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_AggregateRoot_orderBy {
  id
  root
}

type stagingmumbai_Asset {
  id: ID!
  key: stagingmumbai_Bytes
  local: stagingmumbai_Bytes!
  adoptedAsset: stagingmumbai_Bytes!
  canonicalId: stagingmumbai_Bytes!
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

<<<<<<< HEAD
type local1337_AssetBalance {
  id: ID!
  amount: BigInt!
  router: local1337_Router!
  asset: local1337_Asset!
}

input local1337_AssetBalance_filter {
=======
type stagingmumbai_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingmumbai_Router!
  asset: stagingmumbai_Asset!
}

input stagingmumbai_AssetBalance_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
<<<<<<< HEAD
  router_: local1337_Router_filter
=======
  router_: stagingmumbai_Router_filter
>>>>>>> 1807-xcall-interface
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
<<<<<<< HEAD
  asset_: local1337_Asset_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_AssetBalance_orderBy {
=======
  asset_: stagingmumbai_Asset_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_AssetBalance_orderBy {
>>>>>>> 1807-xcall-interface
  id
  amount
  router
  asset
}

<<<<<<< HEAD
input local1337_Asset_filter {
=======
input stagingmumbai_Asset_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  key: local1337_Bytes
  key_not: local1337_Bytes
  key_in: [local1337_Bytes!]
  key_not_in: [local1337_Bytes!]
  key_contains: local1337_Bytes
  key_not_contains: local1337_Bytes
  local: local1337_Bytes
  local_not: local1337_Bytes
  local_in: [local1337_Bytes!]
  local_not_in: [local1337_Bytes!]
  local_contains: local1337_Bytes
  local_not_contains: local1337_Bytes
  adoptedAsset: local1337_Bytes
  adoptedAsset_not: local1337_Bytes
  adoptedAsset_in: [local1337_Bytes!]
  adoptedAsset_not_in: [local1337_Bytes!]
  adoptedAsset_contains: local1337_Bytes
  adoptedAsset_not_contains: local1337_Bytes
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
=======
  key: stagingmumbai_Bytes
  key_not: stagingmumbai_Bytes
  key_in: [stagingmumbai_Bytes!]
  key_not_in: [stagingmumbai_Bytes!]
  key_contains: stagingmumbai_Bytes
  key_not_contains: stagingmumbai_Bytes
  local: stagingmumbai_Bytes
  local_not: stagingmumbai_Bytes
  local_in: [stagingmumbai_Bytes!]
  local_not_in: [stagingmumbai_Bytes!]
  local_contains: stagingmumbai_Bytes
  local_not_contains: stagingmumbai_Bytes
  adoptedAsset: stagingmumbai_Bytes
  adoptedAsset_not: stagingmumbai_Bytes
  adoptedAsset_in: [stagingmumbai_Bytes!]
  adoptedAsset_not_in: [stagingmumbai_Bytes!]
  adoptedAsset_contains: stagingmumbai_Bytes
  adoptedAsset_not_contains: stagingmumbai_Bytes
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Asset_orderBy {
=======
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Asset_orderBy {
>>>>>>> 1807-xcall-interface
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

<<<<<<< HEAD
scalar local1337_BigDecimal

input local1337_BlockChangedFilter {
  number_gte: Int!
}

input local1337_Block_height {
  hash: local1337_Bytes
=======
scalar stagingmumbai_BigDecimal

input stagingmumbai_BlockChangedFilter {
  number_gte: Int!
}

input stagingmumbai_Block_height {
  hash: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  number: Int
  number_gte: Int
}

<<<<<<< HEAD
scalar local1337_Bytes

type local1337_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  to: local1337_Bytes
  callData: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1337_Bytes
  recovery: local1337_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1337_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1337_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: local1337_Router_orderBy, orderDirection: local1337_OrderDirection, where: local1337_Router_filter): [local1337_Router!]
  originSender: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAmount: BigInt
  localAsset: local1337_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: local1337_Bytes
  executedTransactionHash: local1337_Bytes
=======
scalar stagingmumbai_Bytes

type stagingmumbai_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmumbai_Bytes!
  rootManager: stagingmumbai_Bytes!
  mirrorConnector: stagingmumbai_Bytes!
}

input stagingmumbai_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmumbai_Bytes
  amb_not: stagingmumbai_Bytes
  amb_in: [stagingmumbai_Bytes!]
  amb_not_in: [stagingmumbai_Bytes!]
  amb_contains: stagingmumbai_Bytes
  amb_not_contains: stagingmumbai_Bytes
  rootManager: stagingmumbai_Bytes
  rootManager_not: stagingmumbai_Bytes
  rootManager_in: [stagingmumbai_Bytes!]
  rootManager_not_in: [stagingmumbai_Bytes!]
  rootManager_contains: stagingmumbai_Bytes
  rootManager_not_contains: stagingmumbai_Bytes
  mirrorConnector: stagingmumbai_Bytes
  mirrorConnector_not: stagingmumbai_Bytes
  mirrorConnector_in: [stagingmumbai_Bytes!]
  mirrorConnector_not_in: [stagingmumbai_Bytes!]
  mirrorConnector_contains: stagingmumbai_Bytes
  mirrorConnector_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmumbai_DestinationMessage {
  id: ID!
  leaf: stagingmumbai_Bytes
  processed: Boolean
  returnData: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
}

input stagingmumbai_DestinationMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  leaf: stagingmumbai_Bytes
  leaf_not: stagingmumbai_Bytes
  leaf_in: [stagingmumbai_Bytes!]
  leaf_not_in: [stagingmumbai_Bytes!]
  leaf_contains: stagingmumbai_Bytes
  leaf_not_contains: stagingmumbai_Bytes
  processed: Boolean
  processed_not: Boolean
  processed_in: [Boolean!]
  processed_not_in: [Boolean!]
  returnData: stagingmumbai_Bytes
  returnData_not: stagingmumbai_Bytes
  returnData_in: [stagingmumbai_Bytes!]
  returnData_not_in: [stagingmumbai_Bytes!]
  returnData_contains: stagingmumbai_Bytes
  returnData_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_DestinationMessage_orderBy {
  id
  leaf
  processed
  returnData
  transactionHash
}

type stagingmumbai_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingmumbai_Bytes
  nonce: BigInt
  to: stagingmumbai_Bytes
  callData: stagingmumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: stagingmumbai_Bytes
  recovery: stagingmumbai_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: stagingmumbai_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: stagingmumbai_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_Router_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_Router_filter): [stagingmumbai_Router!]
  originSender: stagingmumbai_Bytes
  transactingAsset: stagingmumbai_Bytes
  transactingAmount: BigInt
  localAsset: stagingmumbai_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: stagingmumbai_Bytes
  executedTransactionHash: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
<<<<<<< HEAD
  reconciledCaller: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
=======
  reconciledCaller: stagingmumbai_Bytes
  reconciledTransactionHash: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

<<<<<<< HEAD
input local1337_DestinationTransfer_filter {
=======
input stagingmumbai_DestinationTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
=======
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
=======
  to: stagingmumbai_Bytes
  to_not: stagingmumbai_Bytes
  to_in: [stagingmumbai_Bytes!]
  to_not_in: [stagingmumbai_Bytes!]
  to_contains: stagingmumbai_Bytes
  to_not_contains: stagingmumbai_Bytes
  callData: stagingmumbai_Bytes
  callData_not: stagingmumbai_Bytes
  callData_in: [stagingmumbai_Bytes!]
  callData_not_in: [stagingmumbai_Bytes!]
  callData_contains: stagingmumbai_Bytes
  callData_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: local1337_Bytes
  agent_not: local1337_Bytes
  agent_in: [local1337_Bytes!]
  agent_not_in: [local1337_Bytes!]
  agent_contains: local1337_Bytes
  agent_not_contains: local1337_Bytes
  recovery: local1337_Bytes
  recovery_not: local1337_Bytes
  recovery_in: [local1337_Bytes!]
  recovery_not_in: [local1337_Bytes!]
  recovery_contains: local1337_Bytes
  recovery_not_contains: local1337_Bytes
=======
  agent: stagingmumbai_Bytes
  agent_not: stagingmumbai_Bytes
  agent_in: [stagingmumbai_Bytes!]
  agent_not_in: [stagingmumbai_Bytes!]
  agent_contains: stagingmumbai_Bytes
  agent_not_contains: stagingmumbai_Bytes
  recovery: stagingmumbai_Bytes
  recovery_not: stagingmumbai_Bytes
  recovery_in: [stagingmumbai_Bytes!]
  recovery_not_in: [stagingmumbai_Bytes!]
  recovery_contains: stagingmumbai_Bytes
  recovery_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: local1337_Bytes
  callback_not: local1337_Bytes
  callback_in: [local1337_Bytes!]
  callback_not_in: [local1337_Bytes!]
  callback_contains: local1337_Bytes
  callback_not_contains: local1337_Bytes
=======
  callback: stagingmumbai_Bytes
  callback_not: stagingmumbai_Bytes
  callback_in: [stagingmumbai_Bytes!]
  callback_not_in: [stagingmumbai_Bytes!]
  callback_contains: stagingmumbai_Bytes
  callback_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
=======
  status: stagingmumbai_TransferStatus
  status_not: stagingmumbai_TransferStatus
  status_in: [stagingmumbai_TransferStatus!]
  status_not_in: [stagingmumbai_TransferStatus!]
>>>>>>> 1807-xcall-interface
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
<<<<<<< HEAD
  routers_: local1337_Router_filter
  originSender: local1337_Bytes
  originSender_not: local1337_Bytes
  originSender_in: [local1337_Bytes!]
  originSender_not_in: [local1337_Bytes!]
  originSender_contains: local1337_Bytes
  originSender_not_contains: local1337_Bytes
  transactingAsset: local1337_Bytes
  transactingAsset_not: local1337_Bytes
  transactingAsset_in: [local1337_Bytes!]
  transactingAsset_not_in: [local1337_Bytes!]
  transactingAsset_contains: local1337_Bytes
  transactingAsset_not_contains: local1337_Bytes
=======
  routers_: stagingmumbai_Router_filter
  originSender: stagingmumbai_Bytes
  originSender_not: stagingmumbai_Bytes
  originSender_in: [stagingmumbai_Bytes!]
  originSender_not_in: [stagingmumbai_Bytes!]
  originSender_contains: stagingmumbai_Bytes
  originSender_not_contains: stagingmumbai_Bytes
  transactingAsset: stagingmumbai_Bytes
  transactingAsset_not: stagingmumbai_Bytes
  transactingAsset_in: [stagingmumbai_Bytes!]
  transactingAsset_not_in: [stagingmumbai_Bytes!]
  transactingAsset_contains: stagingmumbai_Bytes
  transactingAsset_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  localAsset: local1337_Bytes
  localAsset_not: local1337_Bytes
  localAsset_in: [local1337_Bytes!]
  localAsset_not_in: [local1337_Bytes!]
  localAsset_contains: local1337_Bytes
  localAsset_not_contains: local1337_Bytes
=======
  localAsset: stagingmumbai_Bytes
  localAsset_not: stagingmumbai_Bytes
  localAsset_in: [stagingmumbai_Bytes!]
  localAsset_not_in: [stagingmumbai_Bytes!]
  localAsset_contains: stagingmumbai_Bytes
  localAsset_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
<<<<<<< HEAD
  executedCaller: local1337_Bytes
  executedCaller_not: local1337_Bytes
  executedCaller_in: [local1337_Bytes!]
  executedCaller_not_in: [local1337_Bytes!]
  executedCaller_contains: local1337_Bytes
  executedCaller_not_contains: local1337_Bytes
  executedTransactionHash: local1337_Bytes
  executedTransactionHash_not: local1337_Bytes
  executedTransactionHash_in: [local1337_Bytes!]
  executedTransactionHash_not_in: [local1337_Bytes!]
  executedTransactionHash_contains: local1337_Bytes
  executedTransactionHash_not_contains: local1337_Bytes
=======
  executedCaller: stagingmumbai_Bytes
  executedCaller_not: stagingmumbai_Bytes
  executedCaller_in: [stagingmumbai_Bytes!]
  executedCaller_not_in: [stagingmumbai_Bytes!]
  executedCaller_contains: stagingmumbai_Bytes
  executedCaller_not_contains: stagingmumbai_Bytes
  executedTransactionHash: stagingmumbai_Bytes
  executedTransactionHash_not: stagingmumbai_Bytes
  executedTransactionHash_in: [stagingmumbai_Bytes!]
  executedTransactionHash_not_in: [stagingmumbai_Bytes!]
  executedTransactionHash_contains: stagingmumbai_Bytes
  executedTransactionHash_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
<<<<<<< HEAD
  reconciledCaller: local1337_Bytes
  reconciledCaller_not: local1337_Bytes
  reconciledCaller_in: [local1337_Bytes!]
  reconciledCaller_not_in: [local1337_Bytes!]
  reconciledCaller_contains: local1337_Bytes
  reconciledCaller_not_contains: local1337_Bytes
  reconciledTransactionHash: local1337_Bytes
  reconciledTransactionHash_not: local1337_Bytes
  reconciledTransactionHash_in: [local1337_Bytes!]
  reconciledTransactionHash_not_in: [local1337_Bytes!]
  reconciledTransactionHash_contains: local1337_Bytes
  reconciledTransactionHash_not_contains: local1337_Bytes
=======
  reconciledCaller: stagingmumbai_Bytes
  reconciledCaller_not: stagingmumbai_Bytes
  reconciledCaller_in: [stagingmumbai_Bytes!]
  reconciledCaller_not_in: [stagingmumbai_Bytes!]
  reconciledCaller_contains: stagingmumbai_Bytes
  reconciledCaller_not_contains: stagingmumbai_Bytes
  reconciledTransactionHash: stagingmumbai_Bytes
  reconciledTransactionHash_not: stagingmumbai_Bytes
  reconciledTransactionHash_in: [stagingmumbai_Bytes!]
  reconciledTransactionHash_not_in: [stagingmumbai_Bytes!]
  reconciledTransactionHash_contains: stagingmumbai_Bytes
  reconciledTransactionHash_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: local1337_BlockChangedFilter
}

enum local1337_DestinationTransfer_orderBy {
=======
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_DestinationTransfer_orderBy {
>>>>>>> 1807-xcall-interface
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
<<<<<<< HEAD
enum local1337_OrderDirection {
=======
enum stagingmumbai_OrderDirection {
>>>>>>> 1807-xcall-interface
  asc
  desc
}

<<<<<<< HEAD
type local1337_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: local1337_Bytes
  nonce: BigInt
  to: local1337_Bytes
  callData: local1337_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: local1337_Bytes
  recovery: local1337_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: local1337_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: local1337_TransferStatus
  originMinOut: BigInt
  transactingAsset: local1337_Bytes
  transactingAmount: BigInt
  bridgedAsset: local1337_Bytes
  bridgedAmount: BigInt
  caller: local1337_Bytes
  transactionHash: local1337_Bytes
=======
type stagingmumbai_OriginMessage {
  id: ID!
  transferId: stagingmumbai_Bytes
  destinationDomain: BigInt
  leaf: stagingmumbai_Bytes
  index: BigInt
  root: stagingmumbai_Bytes
  message: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
}

input stagingmumbai_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: stagingmumbai_Bytes
  leaf_not: stagingmumbai_Bytes
  leaf_in: [stagingmumbai_Bytes!]
  leaf_not_in: [stagingmumbai_Bytes!]
  leaf_contains: stagingmumbai_Bytes
  leaf_not_contains: stagingmumbai_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  message: stagingmumbai_Bytes
  message_not: stagingmumbai_Bytes
  message_in: [stagingmumbai_Bytes!]
  message_not_in: [stagingmumbai_Bytes!]
  message_contains: stagingmumbai_Bytes
  message_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  root
  message
  transactionHash
}

type stagingmumbai_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingmumbai_Bytes
  nonce: BigInt
  to: stagingmumbai_Bytes
  callData: stagingmumbai_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: stagingmumbai_Bytes
  recovery: stagingmumbai_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: stagingmumbai_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: stagingmumbai_TransferStatus
  originMinOut: BigInt
  transactingAsset: stagingmumbai_Bytes
  transactingAmount: BigInt
  bridgedAsset: stagingmumbai_Bytes
  bridgedAmount: BigInt
  message: stagingmumbai_OriginMessage
  caller: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

<<<<<<< HEAD
input local1337_OriginTransfer_filter {
=======
input stagingmumbai_OriginTransfer_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
<<<<<<< HEAD
  transferId: local1337_Bytes
  transferId_not: local1337_Bytes
  transferId_in: [local1337_Bytes!]
  transferId_not_in: [local1337_Bytes!]
  transferId_contains: local1337_Bytes
  transferId_not_contains: local1337_Bytes
=======
  transferId: stagingmumbai_Bytes
  transferId_not: stagingmumbai_Bytes
  transferId_in: [stagingmumbai_Bytes!]
  transferId_not_in: [stagingmumbai_Bytes!]
  transferId_contains: stagingmumbai_Bytes
  transferId_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
<<<<<<< HEAD
  to: local1337_Bytes
  to_not: local1337_Bytes
  to_in: [local1337_Bytes!]
  to_not_in: [local1337_Bytes!]
  to_contains: local1337_Bytes
  to_not_contains: local1337_Bytes
  callData: local1337_Bytes
  callData_not: local1337_Bytes
  callData_in: [local1337_Bytes!]
  callData_not_in: [local1337_Bytes!]
  callData_contains: local1337_Bytes
  callData_not_contains: local1337_Bytes
=======
  to: stagingmumbai_Bytes
  to_not: stagingmumbai_Bytes
  to_in: [stagingmumbai_Bytes!]
  to_not_in: [stagingmumbai_Bytes!]
  to_contains: stagingmumbai_Bytes
  to_not_contains: stagingmumbai_Bytes
  callData: stagingmumbai_Bytes
  callData_not: stagingmumbai_Bytes
  callData_in: [stagingmumbai_Bytes!]
  callData_not_in: [stagingmumbai_Bytes!]
  callData_contains: stagingmumbai_Bytes
  callData_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
<<<<<<< HEAD
  agent: local1337_Bytes
  agent_not: local1337_Bytes
  agent_in: [local1337_Bytes!]
  agent_not_in: [local1337_Bytes!]
  agent_contains: local1337_Bytes
  agent_not_contains: local1337_Bytes
  recovery: local1337_Bytes
  recovery_not: local1337_Bytes
  recovery_in: [local1337_Bytes!]
  recovery_not_in: [local1337_Bytes!]
  recovery_contains: local1337_Bytes
  recovery_not_contains: local1337_Bytes
=======
  agent: stagingmumbai_Bytes
  agent_not: stagingmumbai_Bytes
  agent_in: [stagingmumbai_Bytes!]
  agent_not_in: [stagingmumbai_Bytes!]
  agent_contains: stagingmumbai_Bytes
  agent_not_contains: stagingmumbai_Bytes
  recovery: stagingmumbai_Bytes
  recovery_not: stagingmumbai_Bytes
  recovery_in: [stagingmumbai_Bytes!]
  recovery_not_in: [stagingmumbai_Bytes!]
  recovery_contains: stagingmumbai_Bytes
  recovery_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
<<<<<<< HEAD
  callback: local1337_Bytes
  callback_not: local1337_Bytes
  callback_in: [local1337_Bytes!]
  callback_not_in: [local1337_Bytes!]
  callback_contains: local1337_Bytes
  callback_not_contains: local1337_Bytes
=======
  callback: stagingmumbai_Bytes
  callback_not: stagingmumbai_Bytes
  callback_in: [stagingmumbai_Bytes!]
  callback_not_in: [stagingmumbai_Bytes!]
  callback_contains: stagingmumbai_Bytes
  callback_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  status: local1337_TransferStatus
  status_not: local1337_TransferStatus
  status_in: [local1337_TransferStatus!]
  status_not_in: [local1337_TransferStatus!]
=======
  status: stagingmumbai_TransferStatus
  status_not: stagingmumbai_TransferStatus
  status_in: [stagingmumbai_TransferStatus!]
  status_not_in: [stagingmumbai_TransferStatus!]
>>>>>>> 1807-xcall-interface
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
<<<<<<< HEAD
  transactingAsset: local1337_Bytes
  transactingAsset_not: local1337_Bytes
  transactingAsset_in: [local1337_Bytes!]
  transactingAsset_not_in: [local1337_Bytes!]
  transactingAsset_contains: local1337_Bytes
  transactingAsset_not_contains: local1337_Bytes
=======
  transactingAsset: stagingmumbai_Bytes
  transactingAsset_not: stagingmumbai_Bytes
  transactingAsset_in: [stagingmumbai_Bytes!]
  transactingAsset_not_in: [stagingmumbai_Bytes!]
  transactingAsset_contains: stagingmumbai_Bytes
  transactingAsset_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
<<<<<<< HEAD
  bridgedAsset: local1337_Bytes
  bridgedAsset_not: local1337_Bytes
  bridgedAsset_in: [local1337_Bytes!]
  bridgedAsset_not_in: [local1337_Bytes!]
  bridgedAsset_contains: local1337_Bytes
  bridgedAsset_not_contains: local1337_Bytes
=======
  bridgedAsset: stagingmumbai_Bytes
  bridgedAsset_not: stagingmumbai_Bytes
  bridgedAsset_in: [stagingmumbai_Bytes!]
  bridgedAsset_not_in: [stagingmumbai_Bytes!]
  bridgedAsset_contains: stagingmumbai_Bytes
  bridgedAsset_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
<<<<<<< HEAD
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  transactionHash: local1337_Bytes
  transactionHash_not: local1337_Bytes
  transactionHash_in: [local1337_Bytes!]
  transactionHash_not_in: [local1337_Bytes!]
  transactionHash_contains: local1337_Bytes
  transactionHash_not_contains: local1337_Bytes
=======
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: stagingmumbai_OriginMessage_filter
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  message
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingmumbai_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: stagingmumbai_Bytes
}

input stagingmumbai_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: stagingmumbai_Bytes
  relayer_not: stagingmumbai_Bytes
  relayer_in: [stagingmumbai_Bytes!]
  relayer_not_in: [stagingmumbai_Bytes!]
  relayer_contains: stagingmumbai_Bytes
  relayer_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Relayer_orderBy {
  id
  isActive
  relayer
}

type stagingmumbai_RootMessageProcessed {
  id: ID!
  root: stagingmumbai_Bytes
  caller: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingmumbai_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
<<<<<<< HEAD
  _change_block: local1337_BlockChangedFilter
}

enum local1337_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
=======
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_RootMessageProcessed_orderBy {
  id
  root
>>>>>>> 1807-xcall-interface
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

<<<<<<< HEAD
type local1337_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: local1337_Bytes
}

input local1337_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: local1337_Bytes
  relayer_not: local1337_Bytes
  relayer_in: [local1337_Bytes!]
  relayer_not_in: [local1337_Bytes!]
  relayer_contains: local1337_Bytes
  relayer_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Relayer_orderBy {
  id
  isActive
  relayer
}

type local1337_Router {
  id: ID!
  isActive: Boolean!
  owner: local1337_Bytes
  recipient: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: local1337_AssetBalance_orderBy, orderDirection: local1337_OrderDirection, where: local1337_AssetBalance_filter): [local1337_AssetBalance!]!
}

input local1337_Router_filter {
=======
type stagingmumbai_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: stagingmumbai_Bytes
  caller: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingmumbai_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: stagingmumbai_Bytes
  root_not: stagingmumbai_Bytes
  root_in: [stagingmumbai_Bytes!]
  root_not_in: [stagingmumbai_Bytes!]
  root_contains: stagingmumbai_Bytes
  root_not_contains: stagingmumbai_Bytes
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  transactionHash: stagingmumbai_Bytes
  transactionHash_not: stagingmumbai_Bytes
  transactionHash_in: [stagingmumbai_Bytes!]
  transactionHash_not_in: [stagingmumbai_Bytes!]
  transactionHash_contains: stagingmumbai_Bytes
  transactionHash_not_contains: stagingmumbai_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingmumbai_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingmumbai_Bytes
  recipient: stagingmumbai_Bytes
  proposedOwner: stagingmumbai_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingmumbai_AssetBalance_orderBy, orderDirection: stagingmumbai_OrderDirection, where: stagingmumbai_AssetBalance_filter): [stagingmumbai_AssetBalance!]!
}

input stagingmumbai_Router_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
<<<<<<< HEAD
  owner: local1337_Bytes
  owner_not: local1337_Bytes
  owner_in: [local1337_Bytes!]
  owner_not_in: [local1337_Bytes!]
  owner_contains: local1337_Bytes
  owner_not_contains: local1337_Bytes
  recipient: local1337_Bytes
  recipient_not: local1337_Bytes
  recipient_in: [local1337_Bytes!]
  recipient_not_in: [local1337_Bytes!]
  recipient_contains: local1337_Bytes
  recipient_not_contains: local1337_Bytes
  proposedOwner: local1337_Bytes
  proposedOwner_not: local1337_Bytes
  proposedOwner_in: [local1337_Bytes!]
  proposedOwner_not_in: [local1337_Bytes!]
  proposedOwner_contains: local1337_Bytes
  proposedOwner_not_contains: local1337_Bytes
=======
  owner: stagingmumbai_Bytes
  owner_not: stagingmumbai_Bytes
  owner_in: [stagingmumbai_Bytes!]
  owner_not_in: [stagingmumbai_Bytes!]
  owner_contains: stagingmumbai_Bytes
  owner_not_contains: stagingmumbai_Bytes
  recipient: stagingmumbai_Bytes
  recipient_not: stagingmumbai_Bytes
  recipient_in: [stagingmumbai_Bytes!]
  recipient_not_in: [stagingmumbai_Bytes!]
  recipient_contains: stagingmumbai_Bytes
  recipient_not_contains: stagingmumbai_Bytes
  proposedOwner: stagingmumbai_Bytes
  proposedOwner_not: stagingmumbai_Bytes
  proposedOwner_in: [stagingmumbai_Bytes!]
  proposedOwner_not_in: [stagingmumbai_Bytes!]
  proposedOwner_contains: stagingmumbai_Bytes
  proposedOwner_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
<<<<<<< HEAD
  assetBalances_: local1337_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Router_orderBy {
=======
  assetBalances_: stagingmumbai_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Router_orderBy {
>>>>>>> 1807-xcall-interface
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

<<<<<<< HEAD
type local1337_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: local1337_Bytes!
}

input local1337_Setting_filter {
=======
type stagingmumbai_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: stagingmumbai_Bytes!
}

input stagingmumbai_Setting_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
<<<<<<< HEAD
  caller: local1337_Bytes
  caller_not: local1337_Bytes
  caller_in: [local1337_Bytes!]
  caller_not_in: [local1337_Bytes!]
  caller_contains: local1337_Bytes
  caller_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_Setting_orderBy {
=======
  caller: stagingmumbai_Bytes
  caller_not: stagingmumbai_Bytes
  caller_in: [stagingmumbai_Bytes!]
  caller_not_in: [stagingmumbai_Bytes!]
  caller_contains: stagingmumbai_Bytes
  caller_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_Setting_orderBy {
>>>>>>> 1807-xcall-interface
  id
  maxRoutersPerTransfer
  caller
}

<<<<<<< HEAD
type local1337_SponsorVault {
  id: ID!
  sponsorVault: local1337_Bytes!
}

input local1337_SponsorVault_filter {
=======
type stagingmumbai_SponsorVault {
  id: ID!
  sponsorVault: stagingmumbai_Bytes!
}

input stagingmumbai_SponsorVault_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  sponsorVault: local1337_Bytes
  sponsorVault_not: local1337_Bytes
  sponsorVault_in: [local1337_Bytes!]
  sponsorVault_not_in: [local1337_Bytes!]
  sponsorVault_contains: local1337_Bytes
  sponsorVault_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_SponsorVault_orderBy {
=======
  sponsorVault: stagingmumbai_Bytes
  sponsorVault_not: stagingmumbai_Bytes
  sponsorVault_in: [stagingmumbai_Bytes!]
  sponsorVault_not_in: [stagingmumbai_Bytes!]
  sponsorVault_contains: stagingmumbai_Bytes
  sponsorVault_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_SponsorVault_orderBy {
>>>>>>> 1807-xcall-interface
  id
  sponsorVault
}

<<<<<<< HEAD
type local1337_StableSwap {
  id: ID!
  canonicalId: local1337_Bytes!
  domain: BigInt
  swapPool: local1337_Bytes!
}

input local1337_StableSwap_filter {
=======
type stagingmumbai_StableSwap {
  id: ID!
  canonicalId: stagingmumbai_Bytes!
  domain: BigInt
  swapPool: stagingmumbai_Bytes!
}

input stagingmumbai_StableSwap_filter {
>>>>>>> 1807-xcall-interface
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
<<<<<<< HEAD
  canonicalId: local1337_Bytes
  canonicalId_not: local1337_Bytes
  canonicalId_in: [local1337_Bytes!]
  canonicalId_not_in: [local1337_Bytes!]
  canonicalId_contains: local1337_Bytes
  canonicalId_not_contains: local1337_Bytes
=======
  canonicalId: stagingmumbai_Bytes
  canonicalId_not: stagingmumbai_Bytes
  canonicalId_in: [stagingmumbai_Bytes!]
  canonicalId_not_in: [stagingmumbai_Bytes!]
  canonicalId_contains: stagingmumbai_Bytes
  canonicalId_not_contains: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
<<<<<<< HEAD
  swapPool: local1337_Bytes
  swapPool_not: local1337_Bytes
  swapPool_in: [local1337_Bytes!]
  swapPool_not_in: [local1337_Bytes!]
  swapPool_contains: local1337_Bytes
  swapPool_not_contains: local1337_Bytes
  """Filter for the block changed event."""
  _change_block: local1337_BlockChangedFilter
}

enum local1337_StableSwap_orderBy {
=======
  swapPool: stagingmumbai_Bytes
  swapPool_not: stagingmumbai_Bytes
  swapPool_in: [stagingmumbai_Bytes!]
  swapPool_not_in: [stagingmumbai_Bytes!]
  swapPool_contains: stagingmumbai_Bytes
  swapPool_not_contains: stagingmumbai_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmumbai_BlockChangedFilter
}

enum stagingmumbai_StableSwap_orderBy {
>>>>>>> 1807-xcall-interface
  id
  canonicalId
  domain
  swapPool
}

<<<<<<< HEAD
enum local1337_TransferStatus {
=======
enum stagingmumbai_TransferStatus {
>>>>>>> 1807-xcall-interface
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

<<<<<<< HEAD
type local1337__Block_ {
  """The hash of the block"""
  hash: local1337_Bytes
=======
type stagingmumbai__Block_ {
  """The hash of the block"""
  hash: stagingmumbai_Bytes
>>>>>>> 1807-xcall-interface
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
<<<<<<< HEAD
type local1337__Meta_ {
=======
type stagingmumbai__Meta_ {
>>>>>>> 1807-xcall-interface
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
<<<<<<< HEAD
  block: local1337__Block_!
=======
  block: stagingmumbai__Block_!
>>>>>>> 1807-xcall-interface
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}