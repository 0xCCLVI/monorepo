name: Create and publish Docker images

on:
  push:
    branches:
      - amarok
  pull_request:
    branches:
      - amarok
  create:
    tag:
      - "v*"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly

      - uses: borales/actions-yarn@v2.3.0
        with:
          cmd: install # will run `yarn install` command
      - uses: borales/actions-yarn@v2.3.0
        with:
          cmd: build # will run `yarn build` command
      - uses: borales/actions-yarn@v2.3.0
        with:
          cmd: test # will run `yarn test` command

  build-and-push-router-image:
    env:
      REGISTRY: ghcr.io
      ROUTER_IMAGE_NAME: connext/router
      SEQUENCER_IMAGE_NAME: connext/sequencer
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker - router
        id: meta-router
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.ROUTER_IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image - router
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta-router.outputs.tags }}
          labels: ${{ steps.meta-router.outputs.labels }}
          file: docker/router/Dockerfile

      - name: Extract metadata (tags, labels) for Docker - sequencer
        id: meta-sequencer
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.SEQUENCER_IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image - sequencer
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta-sequencer.outputs.tags }}
          labels: ${{ steps.meta-sequencer.outputs.labels }}
          file: docker/sequencer/Dockerfile

    outputs:
      router-tags: ${{ steps.meta-router.outputs.tags }}
      router-labels: ${{ steps.meta-router.outputs.labels }}
      sequencer-tags: ${{ steps.meta-sequencer.outputs.tags }}
      sequencer-labels: ${{ steps.meta-sequencer.outputs.labels }}

  terraform-resources:
    env:
      TF_VAR_full_image_name_router: ${{ needs.build-and-push-router-image.outputs.router-tags }}
      TF_VAR_full_image_name_sequencer: ${{ needs.build-and-push-router-image.outputs.sequencer-tags }}
      TF_VAR_mnemonic_testnet: ${{ secrets.MNEMONIC_TESTNET }}
      TF_VAR_admin_token_router_testnet: ${{ secrets.ADMIN_TOKEN_ROUTER_TESTNET }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build-and-push-router-image

    steps:
      - uses: hashicorp/setup-terraform@v1

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: eu-central-1

      - name: Terraform fmt
        id: fmt
        working-directory: ./ops
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ./ops
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ./ops
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./ops
        run: |
          terraform plan -no-color
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops
        run: |
          terraform apply -auto-approve
